var SomeExternalNamespace = {
    SomeNonBridgeClass: function () {
    }
};
SomeExternalNamespace.SomeNonBridgeClass.prototype.Foo = function(){return 1;};
Bridge.$MyPerson2189 = function(name){
    this.Name = name;
};
var Person2735 = (function () {
    function Person2735() {
    }
    return Person2735;
}());
var Bridge2874Base = (function () {
    function Bridge2874Base() {
    }
    Bridge2874Base.prototype.Foo = function (msg) {
        return 1;
    };
    return Bridge2874Base;
}());
var Bridge3001_SomeLib = (function () {
    function Bridge3001_SomeLib() { }

    return Bridge3001_SomeLib;
}());
var Bridge3485_A = (function () {
    function A() {
        this.V1 = "value1";
        this.V2 = "value2";
    }
    return A;
}());
var Bridge3494_A = (function () {
    function Bridge3494_A(s) {
        Bridge3494_A.InstancesCount++;
    }
    Bridge3494_A.InstancesCount = 0;
    return Bridge3494_A;
}());
var Bridge3528_A = (function () {
    function Bridge3528_A() {
        this[1] = "one";
        this[2] = "two";
    }
    return Bridge3528_A;
}());
var Bridge3622_A = (function () {
    function Bridge3622_A() {
        this.A_initialized = true;
    }
    return Bridge3622_A;
}());
var Bridge3627_Logger = (function () {
    function Bridge3627_Logger() {
    }
    Bridge3627_Logger.prototype.Log = function (s) {
        var args = [].slice.call(arguments, 1);
        var msg = args.join(", ");
        return arguments[0] + ": " + msg;
    };
    return Bridge3627_Logger;
}());

/**
 * Bridge Test library - test github issues up to #1999
 * @version 17.8.0
 * @author Object.NET, Inc.
 * @copyright Copyright 2008-2019 Object.NET, Inc.
 * @compiler Bridge.NET 17.8.0
 */
Bridge.assembly("Bridge.ClientTest.Batch3", function ($asm, globals) {
    "use strict";

    Bridge.define("content.ContentManagerBase", {
        statics: {
            fields: {
                PNG: null
            },
            ctors: {
                init: function () {
                    this.PNG = ".png";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Base", {
        methods: {
            somethingElse: function () {
                return 1;
            },
            somethingElse2: function () {
                return 2;
            },
            somethingElse3: function () {
                return 3;
            },
            somethingElse4: function () {
                return 4;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.BaseClass", {
        props: {
            Value: System.Decimal(0.0)
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.Value = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge069", {
        statics: {
            methods: {
                ThisKeywordInStructConstructorWorks: function () {
                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge069.Point69.$ctor1(10);
                    Bridge.Test.NUnit.Assert.AreEqual(10, p.y);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge069.Point69", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge069.Point69(); }
            }
        },
        fields: {
            x: 0,
            y: 0
        },
        ctors: {
            $ctor1: function (y1) {
                this.$initialize();
                (new Bridge.ClientTest.Batch3.BridgeIssues.Bridge069.Point69.ctor()).$clone(this);
                this.y = y1;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1856153028, this.x, this.y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge069.Point69)) {
                    return false;
                }
                return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge069.Point69();
                s.x = this.x;
                s.y = this.y;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1000", {
        statics: {
            methods: {
                TestStaticViaChild: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Test", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1000.TestFixture$1(System.Object).Run());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1000.TestFixture$1", function (T) { return {
        $kind: "nested class",
        statics: {
            methods: {
                Run: function () {
                    return "Test";
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001", {
        statics: {
            methods: {
                TestDefaultValues: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Control.test);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Globals.myVar);
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Globals.myVar1);
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Globals.myVar2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Control", {
        $kind: "nested class",
        statics: {
            fields: {
                test: 0
            },
            ctors: {
                init: function () {
                    this.test = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Globals.myVar;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Globals", {
        $kind: "nested class",
        statics: {
            fields: {
                myVar: 0,
                myVar1: 0,
                myVar2: 0,
                myTextBox: null
            },
            ctors: {
                init: function () {
                    this.myVar = 2;
                    this.myVar1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Control.test;
                    this.myVar2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Globals.myVar1;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1003", {
        statics: {
            methods: {
                TestGenericLambdasToLifting: function () {
                    var test = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1003$1(System.Int32))();

                    var scope = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1003$1;
                    Bridge.Test.NUnit.Assert.Null(scope);
                    Bridge.Test.NUnit.Assert.AreEqual(test.Test1(System.Array.init([1, 2, 3], System.Int32)), System.Array.init([1, 2, 3], System.Int32));
                    Bridge.Test.NUnit.Assert.AreEqual(test.Test2(System.String, System.Array.init(["1", "2", "3"], System.String)), System.Array.init(["1", "2", "3"], System.String));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1003$1", function (T) { return {
        methods: {
            Test1: function (list) {
                return System.Linq.Enumerable.from(list, T).select(function (item) {
                        return Bridge.cast(item, T);
                    }).ToArray(T);
            },
            Test2: function (T1, list) {
                return System.Linq.Enumerable.from(list, T1).select(function (item) {
                        return Bridge.cast(item, T1);
                    }).ToArray(T1);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012", {
        statics: {
            fields: {
                DELTA: 0
            },
            ctors: {
                init: function () {
                    this.DELTA = 3;
                }
            },
            methods: {
                TestSleepZero: function () {
                    var delay = 0;
                    var maxDelay = 100;

                    var stopwatch = new System.Diagnostics.Stopwatch();
                    stopwatch.start();

                    Bridge.sleep(delay);

                    stopwatch.stop();

                    Bridge.Test.NUnit.Assert.True(stopwatch.milliseconds().gte(System.Int64(delay - Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012.DELTA)), ">= " + delay + ", elapsed " + stopwatch.milliseconds());
                    Bridge.Test.NUnit.Assert.True(stopwatch.milliseconds().lt(System.Int64(maxDelay)), "< " + maxDelay + ", elapsed " + stopwatch.milliseconds());
                },
                TestSleepInt: function () {
                    var delay = 100;
                    var maxDelay = 500; // Reported 316ms in the saucelabs test @ windows 8.1.

                    var stopwatch = new System.Diagnostics.Stopwatch();
                    stopwatch.start();

                    Bridge.sleep(delay);

                    stopwatch.stop();

                    Bridge.Test.NUnit.Assert.True(stopwatch.milliseconds().gte(System.Int64(delay - Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012.DELTA)), ">= " + delay + ", elapsed " + stopwatch.milliseconds());
                    Bridge.Test.NUnit.Assert.True(stopwatch.milliseconds().lt(System.Int64(maxDelay)), "< " + maxDelay + ", elapsed " + stopwatch.milliseconds());
                },
                TestSleepTimeSpan: function () {
                    var delay = 100;
                    var maxDelay = 200;

                    var stopwatch = new System.Diagnostics.Stopwatch();
                    stopwatch.start();

                    Bridge.sleep(null, System.TimeSpan.fromMilliseconds(delay));

                    stopwatch.stop();

                    Bridge.Test.NUnit.Assert.True(stopwatch.milliseconds().gte(System.Int64(delay - Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012.DELTA)), ">= " + delay + ", elapsed " + stopwatch.milliseconds());
                    Bridge.Test.NUnit.Assert.True(stopwatch.milliseconds().lt(System.Int64(maxDelay)), "< " + maxDelay + ", elapsed " + stopwatch.milliseconds());
                },
                TestSleepThrows: function () {
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012.f1, "-2");
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012.f2, "FromMilliseconds(-2)");
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012.f3, "(long)int.MaxValue + 1");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1012, {
        f1: function () {
            Bridge.sleep(-2);
        },
        f2: function () {
            Bridge.sleep(null, System.TimeSpan.fromMilliseconds(-2));
        },
        f3: function () {
            Bridge.sleep(null, System.TimeSpan.fromMilliseconds(System.Int64([-2147483648,0])));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1020", {
        statics: {
            methods: {
                TestFlagEnumWithReference: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1020.TestEnum.FlagAlias, 1);
                },
                TestEnumWithReference: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1020.CommonEnum.FlagAlias, 2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1020.CommonEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                None: 0,
                Flag: 2,
                FlagAlias: 0
            },
            ctors: {
                init: function () {
                    this.FlagAlias = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1020.CommonEnum.Flag;
                }
            }
        },
        $utype: System.UInt32
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1020.TestEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                None: 0,
                Flag: 1,
                FlagAlias: 0
            },
            ctors: {
                init: function () {
                    this.FlagAlias = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1020.TestEnum.Flag;
                }
            }
        },
        $flags: true,
        $utype: System.UInt32
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1024", {
        statics: {
            methods: {
                TestConstructorOptionalParameter: function () {
                    var obj = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1024.ClassB();
                    Bridge.Test.NUnit.Assert.AreEqual("classB", obj.GetFieldA());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1024.ClassC", {
        $kind: "nested class",
        fields: {
            a: null
        },
        ctors: {
            ctor: function (b) {
                this.$initialize();
                this.a = b;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025", {
        statics: {
            methods: {
                TestC1: function () {
                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C1();
                    var i1 = c1;
                    var i2 = c1;

                    Bridge.Test.NUnit.Assert.True(Bridge.equalsT(i1, 5, System.Int32));
                    Bridge.Test.NUnit.Assert.AreEqual(5, c1.intField);

                    Bridge.Test.NUnit.Assert.False(Bridge.equalsT(i2, "6", System.String));
                    Bridge.Test.NUnit.Assert.AreEqual("6", c1.strField);
                },
                TestC2: function () {
                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C2();
                    var i1 = c2;
                    var i2 = c2;

                    i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I1$Prop1 = 10;
                    Bridge.Test.NUnit.Assert.AreEqual(9, i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I1$Prop1);

                    i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I2$Prop1 = 10;
                    Bridge.Test.NUnit.Assert.AreEqual(11, i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I2$Prop1);
                },
                TestC3: function () {
                    var c3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C3();
                    var i1 = c3;
                    var i2 = c3;

                    i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I1$Prop1 = 10;
                    Bridge.Test.NUnit.Assert.AreEqual(10, i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I1$Prop1);
                    Bridge.Test.NUnit.Assert.AreEqual(10, i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I2$Prop1);
                    Bridge.Test.NUnit.Assert.AreEqual(10, c3.Prop1);

                    i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I2$Prop1 = 11;
                    Bridge.Test.NUnit.Assert.AreEqual(11, i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I1$Prop1);
                    Bridge.Test.NUnit.Assert.AreEqual(11, i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I2$Prop1);
                    Bridge.Test.NUnit.Assert.AreEqual(11, c3.Prop1);

                    c3.Prop1 = 12;
                    Bridge.Test.NUnit.Assert.AreEqual(12, i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I1$Prop1);
                    Bridge.Test.NUnit.Assert.AreEqual(12, i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I2$Prop1);
                    Bridge.Test.NUnit.Assert.AreEqual(12, c3.Prop1);
                },
                TestI3: function () {
                    var i;

                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C4();
                    i = a;
                    Bridge.Test.NUnit.Assert.AreEqual("C4", a.Foo());
                    Bridge.Test.NUnit.Assert.AreEqual("C4", i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I3$Foo());

                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C5();
                    i = b;
                    Bridge.Test.NUnit.Assert.AreEqual("C4", b.Foo());
                    Bridge.Test.NUnit.Assert.AreEqual("C5", i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I3$Foo());
                },
                TestI4: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C7();
                    var i = a;
                    Bridge.Test.NUnit.Assert.AreEqual("C7", a.Foo$1());
                    Bridge.Test.NUnit.Assert.AreEqual("C7", i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I4$Foo());
                    Bridge.Test.NUnit.Assert.AreEqual("C6", Bridge.cast(a, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C6).Foo());
                },
                TestI5: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C8();
                    var i1 = a;
                    var i2 = a;

                    Bridge.Test.NUnit.Assert.AreEqual(1, i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$Int32$Foo());
                    Bridge.Test.NUnit.Assert.AreEqual("test", i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$String$Foo());
                },
                TestI6: function () {
                    var a = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C9$2(System.Int32,System.String))();
                    var i1 = a;
                    var i2 = a;

                    i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$Int32$Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("I5", a.flag);

                    i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I6$1$System$String$Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("I6", a.flag);
                },
                TestI7: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C10();
                    var i = a;
                    Bridge.Test.NUnit.Assert.AreEqual(1, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I7$3$System$Int32$System$String$System$Boolean$Foo());

                    var a1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C11$3(System.Int32,System.String,System.Boolean))();
                    i = a1;
                    Bridge.Test.NUnit.Assert.AreEqual(1, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I7$3$System$Int32$System$String$System$Boolean$Foo());

                    var a2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C12$3(System.Int32,System.String,System.Boolean))();
                    var i2 = a2;
                    Bridge.Test.NUnit.Assert.AreEqual(1, i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I7$3$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$Int32$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$String$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$Boolean$Foo());

                    var a3 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C13$3(System.Int32,System.String,System.Boolean))();
                    var i3 = a3;
                    Bridge.Test.NUnit.Assert.AreEqual(1, i3.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I7$3$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$Int32$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$String$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$Boolean$Foo());
                },
                TestI8: function () {
                    var c15 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C15();
                    var i8 = c15;
                    var i9 = c15;

                    Bridge.Test.NUnit.Assert.AreEqual(11, i8.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$getItem(11));
                    i8.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$setItem(0, 15);
                    Bridge.Test.NUnit.Assert.AreEqual(15, c15.tmp);
                    Bridge.Test.NUnit.Assert.AreEqual(2, i8.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$Prop1);
                    i8.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$Prop2 = "test";
                    Bridge.Test.NUnit.Assert.AreEqual("test", i8.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$Prop2);
                    var i = 0;
                    i8.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$addEvent1(function () {
                        i = 9;
                    });
                    i8.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$Invoke();
                    Bridge.Test.NUnit.Assert.AreEqual(9, i);

                    i = 0;
                    i9.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I9$1$System$Int32$Invoke$1();
                    Bridge.Test.NUnit.Assert.AreEqual(9, i);
                },
                TestI10: function () {
                    var c17 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C17();
                    var c16 = c17;
                    var i10 = c17;

                    c17.Foo$1();
                    Bridge.Test.NUnit.Assert.AreEqual("C17", c17.log);
                    c17.log = null;

                    c16.Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("C16", c17.log);
                    c17.log = null;

                    i10.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("C16", c17.log);
                },
                TestI10_1: function () {
                    var c19 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C19();
                    var c18 = c19;
                    var i10 = c19;

                    c19.Foo$1();
                    Bridge.Test.NUnit.Assert.AreEqual("C19", c19.log);
                    c19.log = null;

                    c18.Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("C18", c19.log);
                    c19.log = null;

                    i10.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("C19", c19.log);
                },
                TestI10_2: function () {
                    var c21 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C21();
                    var c20 = c21;
                    var i10 = c21;

                    c21.Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("C21", c21.log);
                    c21.log = null;

                    c20.Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("C21", c21.log);
                    c21.log = null;

                    i10.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("C21", c21.log);

                    var c24 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C24();
                    i10 = c24;

                    i10.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo();
                    Bridge.Test.NUnit.Assert.AreEqual("C22", c24.log);
                },
                GetI11: function () {
                    var externalInstance = { get: $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.f1, set: $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.f2, addEvent1: $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.f2, Foo: $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.f3 };

                    Object.defineProperty(externalInstance, "Prop1", {value:2});
                    Object.defineProperty(externalInstance, "Prop2", {value:"test", writable:true});

                    return externalInstance;
                },
                TestI11: function () {
                    var i11 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11();

                    Bridge.Test.NUnit.Assert.AreEqual(1, i11.get(""));
                    i11.set(i11[1], 1);
                    i11[1] = "";
                    Bridge.Test.NUnit.Assert.AreEqual(2, i11.Prop1);
                    Bridge.Test.NUnit.Assert.AreEqual("test", i11.Prop2);
                    i11.Prop2 = "";
                    i11.Foo();
                    i11.addEvent1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.f3);
                },
                TestI11_1: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11().get(""));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11().set(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11()[1], 1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11()[1] = "";
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11().Prop1);
                    Bridge.Test.NUnit.Assert.AreEqual("test", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11().Prop2);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11().Prop2 = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11().Foo();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.GetI11().addEvent1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.f3);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025, {
        f1: function () {
            return 1;
        },
        f2: function (s) { },
        f3: function () { }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C1", {
        inherits: [System.IEquatable$1(System.Int32),System.IEquatable$1(System.String)],
        $kind: "nested class",
        fields: {
            intField: 0,
            strField: null
        },
        alias: [
            "equalsT$1", "System$IEquatable$1$System$Int32$equalsT",
            "equalsT", "System$IEquatable$1$System$String$equalsT"
        ],
        methods: {
            equalsT$1: function (other) {
                this.intField = other;
                return true;
            },
            equalsT: function (other) {
                this.strField = other;
                return false;
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I7$3", function (T1, T2, T3) { return {
        $kind: "nested interface"
    }; });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I8", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I10", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C18", {
        $kind: "nested class",
        fields: {
            log: null
        },
        methods: {
            Foo: function () {
                this.log = "C18";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I2", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I1", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C22", {
        $kind: "nested class",
        fields: {
            log: null
        },
        methods: {
            Foo: function () {
                this.log = "C22";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I3", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C6", {
        $kind: "nested class",
        methods: {
            Foo: function () {
                return "C6";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I4", {
        $kind: "nested interface"
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I6$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1026", {
        statics: {
            methods: {
                TestReservedWordIfRefOut: function () {
                    var $function = { };
                    var i = { v : 1 };
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1026.TestFunction(i, $function);
                    Bridge.Test.NUnit.Assert.AreEqual(2, i.v);
                    Bridge.Test.NUnit.Assert.AreEqual("1", $function.v);

                    var res = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1026.Function($function.v);
                    Bridge.Test.NUnit.Assert.AreEqual("11", res);
                },
                TestFunction: function (i, $function) {
                    $function.v = Bridge.toString(i.v);
                    i.v = (i.v + 1) | 0;
                },
                Function: function ($function) {
                    return ($function || "") + "1";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1027", {
        statics: {
            methods: {
                TestNonBridgeInherits: function () {
                    var obj = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1027.MyClass(11);
                    Bridge.Test.NUnit.Assert.AreEqual(11, obj.number);
                    Bridge.Test.NUnit.Assert.AreEqual(2, obj.Foo());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1027.MyClass", {
        inherits: [SomeExternalNamespace.SomeNonBridgeClass],
        $kind: "nested class",
        fields: {
            number: 0
        },
        ctors: {
            ctor: function (n) {
                this.$initialize();
                SomeExternalNamespace.SomeNonBridgeClass.call(this);
                this.number = n;
            }
        },
        methods: {
            Foo: function () {
                var r = SomeExternalNamespace.SomeNonBridgeClass.prototype.Foo.call(this);

                return ((r + 1) | 0);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1029", {
        statics: {
            methods: {
                TestNullableMethods: function () {
                    var a = 1;
                    var b = 1;
                    Bridge.Test.NUnit.Assert.True(System.Nullable.equals(a, Bridge.box(b, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), function ($t, other) { return System.Int32.equals($t, other); }));
                    Bridge.Test.NUnit.Assert.AreEqual("1", System.Nullable.toString(a, null));
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Nullable.getHashCode(a, null));
                    a = null;
                    Bridge.Test.NUnit.Assert.False(System.Nullable.equals(a, Bridge.box(b, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), function ($t, other) { return System.Int32.equals($t, other); }));
                    Bridge.Test.NUnit.Assert.AreEqual("", System.Nullable.toString(a, null));
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Nullable.getHashCode(a, null));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1039", {
        statics: {
            methods: {
                TestMoreThanDecimalDigitsFromTotalHours: function () {
                    var a = System.DateTime.create(2015, 1, 1, 9, 0, 0);
                    var b = System.DateTime.create(2015, 1, 1, 12, 52, 0);

                    var value = System.Decimal((System.DateTime.subdd(b, a)).getTotalHours(), null, System.Double);

                    Bridge.Test.NUnit.Assert.AreEqual("3.86666666666667", value.toString());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041");

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal", {
        $kind: "nested class",
        statics: {
            props: {
                Prop1: System.Decimal(0.0)
            },
            methods: {
                TestPropertyOps: function () {
                    var $t, $t1, $t2;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = System.Decimal(5.0);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1.div(System.Decimal(2));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(2.5, 1), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1.add(System.Decimal(2));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.5, 1), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1.inc();
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(5.5, 1), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1.inc();
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.5, 1), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(3.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1.div(System.Decimal(2)), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = $t, $t)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(3.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1.add(System.Decimal(1)), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = $t1, $t1)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1.inc(), $t2)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(5.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method((Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1.inc())));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Prop1);
                },
                TestIndexerOps: function () {
                    var $t, $t1, $t2;
                    var app = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal();
                    app.setItem(0, System.Decimal(5.0));

                    app.setItem(0, app.getItem(0).div(System.Decimal(2)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(2.5, 1), app.getItem(0));

                    app.setItem(0, app.getItem(0).add(System.Decimal(2)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.5, 1), app.getItem(0));

                    app.setItem(0, app.getItem(0).inc());
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(5.5, 1), app.getItem(0));

                    app.setItem(0, app.getItem(0).inc());
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.5, 1), app.getItem(0));

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(3.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t = app.getItem(0).div(System.Decimal(2)), app.setItem(0, $t), $t)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(3.25, 2), app.getItem(0));

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t1 = app.getItem(0).add(System.Decimal(1)), app.setItem(0, $t1), $t1)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), app.getItem(0));

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t2 = app.getItem(0), app.setItem(0, $t2.inc()), $t2)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(5.25, 2), app.getItem(0));

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t2 = app.getItem(0), app.setItem(0, $t2.inc()), app.getItem(0))));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.25, 2), app.getItem(0));
                },
                TestDictOps: function () {
                    var $t, $t1, $t2;
                    var dict = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.f1(new (System.Collections.Generic.Dictionary$2(System.Int32,System.Decimal)).ctor());

                    dict.setItem(0, dict.getItem(0).div(System.Decimal(2)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(2.5, 1), dict.getItem(0));

                    dict.setItem(0, dict.getItem(0).add(System.Decimal(2)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.5, 1), dict.getItem(0));

                    dict.setItem(0, dict.getItem(0).inc());
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(5.5, 1), dict.getItem(0));

                    dict.setItem(0, dict.getItem(0).inc());
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.5, 1), dict.getItem(0));

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(3.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t = dict.getItem(0).div(System.Decimal(2)), dict.setItem(0, $t), $t)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(3.25, 2), dict.getItem(0));

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t1 = dict.getItem(0).add(System.Decimal(1)), dict.setItem(0, $t1), $t1)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), dict.getItem(0));

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t2 = dict.getItem(0), dict.setItem(0, $t2.inc()), $t2)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(5.25, 2), dict.getItem(0));

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t2 = dict.getItem(0), dict.setItem(0, $t2.inc()), dict.getItem(0))));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.25, 2), dict.getItem(0));
                },
                TestVariableOps: function () {
                    var $t;
                    var i1 = System.Decimal(5);

                    i1 = i1.div(System.Decimal(2));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(2.5, 1), i1);

                    i1 = i1.add(System.Decimal(2));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.5, 1), i1);

                    i1 = i1.inc();
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(5.5, 1), i1);

                    i1 = i1.inc();
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.5, 1), i1);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(3.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method((i1 = i1.div(System.Decimal(2)))));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(3.25, 2), i1);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method((i1 = i1.add(System.Decimal(1)))));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), i1);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(4.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method(($t = i1, i1 = i1.inc(), $t)));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(5.25, 2), i1);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.25, 2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal.Method((i1 = i1.inc())));
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$1(System.Decimal(6.25, 2), i1);
                },
                Method: function (i) {
                    return i;
                }
            }
        },
        fields: {
            dict: null
        },
        ctors: {
            init: function () {
                this.dict = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Decimal)).ctor();
            }
        },
        methods: {
            getItem: function (i) {
                return this.dict.getItem(i);
            },
            setItem: function (i, value) {
                this.dict.setItem(i, value);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Decimal, {
        f1: function (_o1) {
            _o1.add(0, System.Decimal(5.0));
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer", {
        $kind: "nested class",
        statics: {
            props: {
                Prop1: 0
            },
            methods: {
                TestPropertyOps: function () {
                    var $t, $t1, $t2, $t3;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = 5;

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = (Bridge.Int.div(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1, 2)) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 + 2) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 + 1) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 + 1) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1);

                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(($t = (Bridge.Int.div(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1, 2)) | 0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = $t, $t)));
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1);

                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(($t1 = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 + 1) | 0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = $t1, $t1)));
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1);

                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(Bridge.identity(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1, (($t2 = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 + 1) | 0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = $t2, $t2)))));
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1);

                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method((($t3 = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 + 1) | 0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1 = $t3, $t3))));
                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Prop1);
                },
                TestIndexerOps: function () {
                    var $t, $t1, $t2, $t3;
                    var app = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer();
                    app.setItem(0, 5);

                    app.setItem(0, (Bridge.Int.div(app.getItem(0), 2)) | 0);
                    Bridge.Test.NUnit.Assert.AreEqual(2, app.getItem(0));

                    app.setItem(0, (app.getItem(0) + 2) | 0);
                    Bridge.Test.NUnit.Assert.AreEqual(4, app.getItem(0));

                    app.setItem(0, (app.getItem(0) + 1) | 0);
                    Bridge.Test.NUnit.Assert.AreEqual(5, app.getItem(0));

                    app.setItem(0, (app.getItem(0) + 1) | 0);
                    Bridge.Test.NUnit.Assert.AreEqual(6, app.getItem(0));

                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(($t = (Bridge.Int.div(app.getItem(0), 2)) | 0, app.setItem(0, $t), $t)));
                    Bridge.Test.NUnit.Assert.AreEqual(3, app.getItem(0));

                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(($t1 = (app.getItem(0) + 1) | 0, app.setItem(0, $t1), $t1)));
                    Bridge.Test.NUnit.Assert.AreEqual(4, app.getItem(0));

                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(Bridge.identity(app.getItem(0), (($t2 = (app.getItem(0) + 1) | 0, app.setItem(0, $t2), $t2)))));
                    Bridge.Test.NUnit.Assert.AreEqual(5, app.getItem(0));

                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method((($t3 = (app.getItem(0) + 1) | 0, app.setItem(0, $t3), $t3))));
                    Bridge.Test.NUnit.Assert.AreEqual(6, app.getItem(0));
                },
                TestDictOps: function () {
                    var $t, $t1, $t2, $t3;
                    var dict = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.f1(new (System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)).ctor());

                    dict.setItem(0, (Bridge.Int.div(dict.getItem(0), 2)) | 0);
                    Bridge.Test.NUnit.Assert.AreEqual(2, dict.getItem(0));

                    dict.setItem(0, (dict.getItem(0) + 2) | 0);
                    Bridge.Test.NUnit.Assert.AreEqual(4, dict.getItem(0));

                    dict.setItem(0, (dict.getItem(0) + 1) | 0);
                    Bridge.Test.NUnit.Assert.AreEqual(5, dict.getItem(0));

                    dict.setItem(0, (dict.getItem(0) + 1) | 0);
                    Bridge.Test.NUnit.Assert.AreEqual(6, dict.getItem(0));

                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(($t = (Bridge.Int.div(dict.getItem(0), 2)) | 0, dict.setItem(0, $t), $t)));
                    Bridge.Test.NUnit.Assert.AreEqual(3, dict.getItem(0));

                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(($t1 = (dict.getItem(0) + 1) | 0, dict.setItem(0, $t1), $t1)));
                    Bridge.Test.NUnit.Assert.AreEqual(4, dict.getItem(0));

                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(Bridge.identity(dict.getItem(0), (($t2 = (dict.getItem(0) + 1) | 0, dict.setItem(0, $t2), $t2)))));
                    Bridge.Test.NUnit.Assert.AreEqual(5, dict.getItem(0));

                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method((($t3 = (dict.getItem(0) + 1) | 0, dict.setItem(0, $t3), $t3))));
                    Bridge.Test.NUnit.Assert.AreEqual(6, dict.getItem(0));
                },
                TestVariableOps: function () {
                    var i1 = 5;

                    i1 = (Bridge.Int.div(i1, 2)) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(2, i1);

                    i1 = (i1 + 2) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(4, i1);

                    i1 = (i1 + 1) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(5, i1);

                    i1 = (i1 + 1) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(6, i1);

                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method((i1 = (Bridge.Int.div(i1, 2)) | 0)));
                    Bridge.Test.NUnit.Assert.AreEqual(3, i1);

                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method((i1 = (i1 + 1) | 0)));
                    Bridge.Test.NUnit.Assert.AreEqual(4, i1);

                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(Bridge.identity(i1, ((i1 = (i1 + 1) | 0)))));
                    Bridge.Test.NUnit.Assert.AreEqual(5, i1);

                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer.Method(((i1 = (i1 + 1) | 0))));
                    Bridge.Test.NUnit.Assert.AreEqual(6, i1);
                },
                Method: function (i) {
                    return i;
                }
            }
        },
        fields: {
            dict: null
        },
        ctors: {
            init: function () {
                this.dict = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)).ctor();
            }
        },
        methods: {
            getItem: function (i) {
                return this.dict.getItem(i);
            },
            setItem: function (i, value) {
                this.dict.setItem(i, value);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1041.Bridge1041Integer, {
        f1: function (_o1) {
            _o1.add(0, 5);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1051", {
        statics: {
            methods: {
                TestInlinePopertyWithValue: function () {
                    var Foo = function(){this.currentBar = false; this.setBar = function(value){this.currentBar = value;};};

                    var foo = new Foo();
                    foo.setBar(true);
                    var baz = foo.currentBar;
                    Bridge.Test.NUnit.Assert.AreEqual(true, baz);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1053", {
        statics: {
            methods: {
                TestFieldPropertyWithInterface: function () {
                    var Foo = function(){this.Bar = null;};
                    var foo = new Foo();
                    var car = foo;
                    foo.Bar = "1";
                    Bridge.Test.NUnit.Assert.AreEqual("1", foo.Bar);
                    Bridge.Test.NUnit.Assert.AreEqual("1", Bridge.unbox(foo.Bar));
                    Bridge.Test.NUnit.Assert.AreEqual("1", car.Bar);
                    Bridge.Test.NUnit.Assert.AreEqual("1", Bridge.unbox(car.Bar));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058", {
        statics: {
            methods: {
                TestNameLowerCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058+overlayType", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058.overlayType));
                    Bridge.Test.NUnit.Assert.AreEqual("MARKER", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058.overlayType, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058.overlayType.MARKER));
                    Bridge.Test.NUnit.Assert.AreEqual("$Bridge1058.Bridge1058+class1", Bridge.Reflection.getTypeFullName($Bridge1058.Bridge1058.class1));
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge1058+class2", Bridge.Reflection.getTypeFullName(Bridge1058.class2));
                },
                TestNameNotChanged: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058+OverlayType_B", Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058.OverlayType_B));
                    Bridge.Test.NUnit.Assert.AreEqual("MARKER", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058.OverlayType_B, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058.OverlayType_B.MARKER));
                    Bridge.Test.NUnit.Assert.AreEqual("$Bridge1058.Bridge1058+Class1_B", Bridge.Reflection.getTypeFullName($Bridge1058.Bridge1058.Class1_B));
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge1058+Class2_B", Bridge.Reflection.getTypeFullName(Bridge1058.Class2_B));
                }
            }
        }
    });

    Bridge.define("$Bridge1058.Bridge1058.class1", {
        $kind: "nested class"
    });

    Bridge.define("$Bridge1058.Bridge1058.Class1_B", {
        $kind: "nested class"
    });

    Bridge.define("Bridge1058.class2", {
        $kind: "nested class"
    });

    Bridge.define("Bridge1058.Class2_B", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058.overlayType", {
        $kind: "nested enum",
        statics: {
            fields: {
                CIRCLE: 0,
                MARKER: 1
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1058.OverlayType_B", {
        $kind: "nested enum",
        statics: {
            fields: {
                CIRCLE: 0,
                MARKER: 1
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059", {
        statics: {
            methods: {
                TestEnumNameModes: function () {
                    var t1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType1;
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType1.CIRCLE);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType1.marker);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType1.CIRCLE, Bridge.unbox(t1.CIRCLE));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType1.marker, Bridge.unbox(t1.marker));

                    var t2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType2;
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType2.CIRCLE);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType2.marker);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType2.CIRCLE, Bridge.unbox(t2.CIRCLE));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType2.marker, Bridge.unbox(t2.marker));

                    var t3 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType3;
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType3.circle);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType3.marker);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType3.circle, Bridge.unbox(t3.circle));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType3.marker, Bridge.unbox(t3.marker));

                    var t4 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType4;
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType4.CIRCLE);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType4.MARKER);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType4.CIRCLE, Bridge.unbox(t4.CIRCLE));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType4.MARKER, Bridge.unbox(t4.MARKER));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType1", {
        $kind: "nested enum",
        statics: {
            fields: {
                CIRCLE: 1,
                marker: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType2", {
        $kind: "nested enum",
        statics: {
            fields: {
                CIRCLE: 1,
                marker: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType3", {
        $kind: "nested enum",
        statics: {
            fields: {
                circle: 1,
                marker: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1059.OverlayType4", {
        $kind: "nested enum",
        statics: {
            fields: {
                CIRCLE: 1,
                MARKER: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1061", {
        statics: {
            methods: {
                TestIsDigitFromLinq: function () {
                    Bridge.Test.NUnit.Assert.True(System.Char.isDigit(49));
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from("1", System.Char).any($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1061.f1));

                    var s = "s1*";
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Linq.Enumerable.from(s, System.Char).count($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1061.f1), "String IsDigit");
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Linq.Enumerable.from(s, System.Char).count($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1061.f2), "String IsLetter");
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Linq.Enumerable.from(s, System.Char).count($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1061.f3), "String IsLetterOrDigit");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1061", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1061, {
        f1: function (c) {
            return System.Char.isDigit(c);
        },
        f2: function (c) {
            return System.Char.isLetter(c);
        },
        f3: function (c) {
            return (System.Char.isDigit(c) || System.Char.isLetter(c));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1065", {
        statics: {
            methods: {
                TestDecimalLongWithDictionary: function () {
                    var decimalDict = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1065.f1(new (System.Collections.Generic.Dictionary$2(System.Int64,System.Decimal)).ctor());
                    Bridge.Test.NUnit.Assert.AreEqual("System.Decimal", Bridge.Reflection.getTypeFullName(System.Decimal));
                    Bridge.Test.NUnit.Assert.AreEqual("5", decimalDict.getItem(System.Int64(0)).toString());
                    decimalDict.setItem(System.Int64(0), System.Decimal(1));
                    Bridge.Test.NUnit.Assert.AreEqual("System.Decimal", Bridge.Reflection.getTypeFullName(System.Decimal));
                    Bridge.Test.NUnit.Assert.AreEqual("1", decimalDict.getItem(System.Int64(0)).toString());
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1065", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1065, {
        f1: function (_o1) {
            _o1.add(System.Int64(0), System.Decimal(5));
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1066", {
        statics: {
            methods: {
                TestInlinePopertyWithValue: function () {
                    var dict = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1066.MyDictionary();
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(dict.getAccessor));
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(dict.setAccessor));
                    Bridge.Test.NUnit.Assert.AreEqual(1, dict.getAccessor(0));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1066.MyDictionary", {
        inherits: [System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)],
        $kind: "nested class",
        methods: {
            getAccessor: function (key) {
                return 1;
            },
            setAccessor: function (key, value) { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1067", {
        statics: {
            methods: {
                TestInlinePopertyWithValue: function () {
                    var dict1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1067.MyDictionary1();
                    var dict2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1067.MyDictionary2();
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(dict1.getAccessor));
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(dict1.setAccessor));
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(dict2.getAccessor));
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(dict2.setAccessor));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1067.MyDictionary1", {
        inherits: [System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1067.MyDictionary2", {
        inherits: [System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071", {
        statics: {
            methods: {
                TestParamsForCtor: function () {
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.B();
                    var test = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.C))(b);
                    var test2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A$2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.C,Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.D))(b);

                    Bridge.Test.NUnit.Assert.AreEqual(1, test._argumentTypes.length);
                    Bridge.Test.NUnit.Assert.AreEqual(2, test2._argumentTypes.length);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A", {
        $kind: "nested class",
        fields: {
            _b: null,
            _argumentTypes: null
        },
        ctors: {
            ctor: function (b, argumentTypes) {
                if (argumentTypes === void 0) { argumentTypes = []; }

                this.$initialize();
                this._b = b;
                this._argumentTypes = argumentTypes;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.B", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.C", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.D", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1072", {
        statics: {
            methods: {
                TestNameForProperty: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1072.Class1();

                    //Name ignores for accessors because Object.defineProperty is used
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.getAccessor));
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.setAccessor));

                    c.getAccessor = 7;
                    Bridge.Test.NUnit.Assert.AreEqual(7, c.getAccessor);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1072.Class1", {
        $kind: "nested class",
        fields: {
            data: 0
        },
        props: {
            Prop1: {
                get: function () {
                    return this.data;
                },
                set: function (value) {
                    this.data = value;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1076", {
        statics: {
            methods: {
                TestInlineConstantAsMemberReference: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("SomeV", "SomeV");
                },
                TestInlineBridgeNumericConstantsAsMemberReference: function () {
                    var s;

                    s = System.Decimal.MaxValue.toString();
                    s = System.Single.format(3.40282347E+38);
                    s = System.Double.format(System.Double.max);
                    s = String.fromCharCode(65535);

                    s = System.Decimal.MinValue.toString();
                    s = System.Single.format(-3.40282347E+38);
                    s = System.Single.format(1.401298E-45);
                    s = System.Double.format(System.Double.min);
                    s = System.Double.format(4.94065645841247E-324);
                    s = String.fromCharCode(0);

                    s = Bridge.toString(255);
                    s = Bridge.toString(65535);
                    s = Bridge.toString(4294967295);
                    s = Bridge.toString(System.UInt64.MaxValue);
                    s = Bridge.toString(127);
                    s = Bridge.toString(32767);
                    s = Bridge.toString(2147483647);
                    s = Bridge.toString(System.Int64.MaxValue);

                    s = Bridge.toString(0);
                    s = Bridge.toString(0);
                    s = Bridge.toString(0);
                    s = Bridge.toString(System.UInt64.MinValue);
                    s = Bridge.toString(-128);
                    s = Bridge.toString(-32768);
                    s = Bridge.toString(-2147483648);
                    s = Bridge.toString(System.Int64.MinValue);

                    Bridge.Test.NUnit.Assert.AreEqual("-9223372036854775808", s);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1081", {
        statics: {
            methods: {
                TestTimeSpanMsFormat: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("00:00.000", new System.TimeSpan(System.Int64(0)).toString("mm\\:ss\\.fff"), "Test case");

                    var ts = new System.TimeSpan(12, 23, 32, 43, 893);

                    Bridge.Test.NUnit.Assert.AreEqual("32:43.8", ts.toString("mm\\:ss\\.f"), "Escapeed by \\ f");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.89", ts.toString("mm\\:ss\\.ff"), "Escapeed by \\ ff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.893", ts.toString("mm\\:ss\\.fff"), "Escapeed by \\ fff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.8930", ts.toString("mm\\:ss\\.ffff"), "Escapeed by \\ ffff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.89300", ts.toString("mm\\:ss\\.fffff"), "Escapeed by \\ fffff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.893000", ts.toString("mm\\:ss\\.ffffff"), "Escapeed by \\ ffffff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.8930000", ts.toString("mm\\:ss\\.fffffff"), "Escapeed by \\ fffffff");

                    Bridge.Test.NUnit.Assert.AreEqual("32:43.8", ts.toString("mm':'ss'.'f"), "Escapeed by '' f");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.89", ts.toString("mm':'ss'.'ff"), "Escapeed by '' ff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.893", ts.toString("mm':'ss'.'fff"), "Escapeed by '' fff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.8930", ts.toString("mm':'ss'.'ffff"), "Escapeed by '' ffff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.89300", ts.toString("mm':'ss'.'fffff"), "Escapeed by '' fffff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.893000", ts.toString("mm':'ss'.'ffffff"), "Escapeed by '' ffffff");
                    Bridge.Test.NUnit.Assert.AreEqual("32:43.8930000", ts.toString("mm':'ss'.'fffffff"), "Escapeed by '' fffffff");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1083", {
        statics: {
            methods: {
                TestExternalEnum: function () {
                    // simulate declaration of external enum
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1083.Foo = {};
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1083.Foo.OK = 'OK';
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1083.Foo.FAIL = 'FAIL';

                    var status = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1083.Foo.OK;

                    Bridge.Test.NUnit.Assert.AreEqual("OK", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1083.Foo, status));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1085", {
        statics: {
            methods: {
                TestInlineArrayExpand: function () {
                    var part1 = System.Array.init(["Hello", "World"], System.String);
                    var part2 = System.Array.init(["Part", "Two"], System.String);
                    var merged = System.Array.init([], System.String);
                    merged.push("Lets", "Beginn");
                    merged.push.apply(merged,part1);
                    merged.push.apply(merged,part2);

                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.init(["Lets", "Beginn", "Hello", "World", "Part", "Two"], System.String), merged);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1096", {
        statics: {
            methods: {
                TestClippingIssues: function () {
                    var v = 1;
                    var result = Bridge.Int.umul((v >>> 0), 8);
                    Bridge.Test.NUnit.Assert.AreEqual(8, result);

                    var a = 1, b = 4;
                    var res = Bridge.Int.mul(Bridge.Int.clip32(Math.ceil(a / 1.0)), b);
                    Bridge.Test.NUnit.Assert.AreEqual(4, res);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1098", {
        statics: {
            methods: {
                TestInlineConstantAsMemberReference: function () {
                    var max = 2147483647;
                    Bridge.Test.NUnit.Assert.AreEqual(2147483647, max);
                    var r = (max + 1) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(-2147483648, r);

                    var max1 = -2147483648;
                    Bridge.Test.NUnit.Assert.AreEqual(-2147483648, max1);
                    var r1 = (max1 - 1) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(2147483647, r1);

                    var max2 = 2147483647;
                    Bridge.Test.NUnit.Assert.AreEqual(2147483647, max2);
                    var r2 = Bridge.Int.check(max2 - 1, System.Int32);
                    Bridge.Test.NUnit.Assert.AreEqual(2147483646, r2);

                    var max3 = -2147483648;
                    Bridge.Test.NUnit.Assert.AreEqual(-2147483648, max3);
                    var r3 = Bridge.Int.check(max3 + 1, System.Int32);
                    Bridge.Test.NUnit.Assert.AreEqual(-2147483647, r3);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1103", {
        statics: {
            methods: {
                TestPropertyOps: function () {
                    var res = "";
                    if (true) {
                        var scope = { };
                        if (System.Decimal.tryParse("1.0", null, scope) && scope.v.equalsT(System.Decimal(1))) {
                            res = (res || "") + "first OK ";
                        }
                    }

                    if (true) {
                        var scope1 = { };
                        if (System.Decimal.tryParse("2.0", null, scope1) && scope1.v.equalsT(System.Decimal(2))) {
                            res = (res || "") + "second OK ";
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("first OK second OK ", res);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105", {
        statics: {
            methods: {
                TestStaticInitForNestedClasses: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("test", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo.Items.getItem(0).Value);
                    Bridge.Test.NUnit.Assert.AreEqual("Value1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo1.DefaultItem);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo", {
        $kind: "nested class",
        statics: {
            fields: {
                Items: null
            },
            ctors: {
                init: function () {
                    this.Items = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo.f1(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo.Item)).ctor());
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo, {
        f1: function (_o1) {
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo.Item("test"));
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo.Item", {
        $kind: "nested class",
        fields: {
            Value: null
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.Value = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo1", {
        $kind: "nested class",
        statics: {
            fields: {
                DefaultItem: null
            },
            ctors: {
                init: function () {
                    this.DefaultItem = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo1.Item.Value;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1105.Foo1.Item", {
        $kind: "nested class",
        statics: {
            fields: {
                Value: null
            },
            ctors: {
                init: function () {
                    this.Value = "Value1";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1109", {
        statics: {
            methods: {
                TestTemplateOnProperty: function () {
                    var gamedata1 = 1;
                    Bridge.Test.NUnit.Assert.AreEqual(1, gamedata1);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1110", {
        statics: {
            methods: {
                TestOverflowForConditionInParenthesized: function () {
                    var v = System.Int64(1);
                    v = System.Int64((v.gt(System.Int64(1)) ? 1 : 0));
                    var res = v.equals(System.Int64(1));
                    Bridge.Test.NUnit.Assert.False(res);
                },
                TestOverflowForIndexer: function () {
                    var data = System.Array.init([1], System.UInt32);
                    var v = System.Int64(data[System.Array.index(0, data)]);
                    v = System.Int64((v.gt(System.Int64(1)) ? 1 : 0));
                    var res = v.equals(System.Int64(1));
                    Bridge.Test.NUnit.Assert.False(res);
                },
                TestOverflowForBitwise: function () {
                    var v2 = 4294967295;
                    var shifted = (v2 << 31) >>> 0;
                    var res2 = shifted === 2147483648;
                    Bridge.Test.NUnit.Assert.True(res2);

                    var v3 = 4294967295;
                    var shifted3 = (v3 << 31) >>> 0;
                    var res3 = shifted === 2147483648;
                    Bridge.Test.NUnit.Assert.True(res3);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120", {
        statics: {
            methods: {
                TestEnumDoesNotGenerateValuesAsPowerOfTwo: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(-10, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Test.M1, "-10");
                    Bridge.Test.NUnit.Assert.AreEqual(-9, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Test.M2, "-9");
                    Bridge.Test.NUnit.Assert.AreEqual(-8, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Test.M3, "-8");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Test.M4, "1");
                    Bridge.Test.NUnit.Assert.AreEqual(-9, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Test.M5, "-9");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Test.M6, "0");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Test.M7, "1");
                },
                TestFlagEnumDoesNotGenerateValuesAsPowerOfTwo: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Baz.a, "0");
                    Bridge.Test.NUnit.Assert.AreEqual(7, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Baz.b, "7");
                    Bridge.Test.NUnit.Assert.AreEqual(8, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Baz.c, "8");
                    Bridge.Test.NUnit.Assert.AreEqual(9, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Baz.d, "9");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Baz", {
        $kind: "nested enum",
        statics: {
            fields: {
                a: 0,
                b: 7,
                c: 8,
                d: 9
            }
        },
        $flags: true
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1120.Test", {
        $kind: "nested enum",
        statics: {
            fields: {
                M1: -10,
                M2: -9,
                M3: -8,
                M4: 1,
                M5: -9,
                M6: 0,
                M7: 1
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128", {
        statics: {
            methods: {
                TestNestedClassesWithInterface: function () {
                    var res = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Items[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Items)].Value;
                    Bridge.Test.NUnit.Assert.AreEqual("test", res);

                    res = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Items[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Items)].Value;
                    Bridge.Test.NUnit.Assert.AreEqual("abc", res);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo", {
        $kind: "nested class",
        statics: {
            fields: {
                Items: null
            },
            ctors: {
                init: function () {
                    this.Items = System.Array.init([new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Item.$ctor1("test")], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Item);
                },
                ctor: function () {
                    System.Array.sort(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Items);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Item", {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Item)]; },
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Item(); }
            }
        },
        fields: {
            Value: null
        },
        alias: ["compareTo", ["System$IComparable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1128$Foo$Item$compareTo", "System$IComparable$1$compareTo"]],
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            compareTo: function (other) {
                return System.String.compare(this.Value, other.Value);
            },
            getHashCode: function () {
                var h = Bridge.addHash([1835365449, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Item)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo.Item();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1", {
        $kind: "nested class",
        statics: {
            fields: {
                Items: null
            },
            ctors: {
                init: function () {
                    this.Items = System.Array.init([new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item.$ctor1("test"), new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item.$ctor1("xyz"), new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item.$ctor1("abc")], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item);
                },
                ctor: function () {
                    System.Array.sort(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Items, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Comparer()); // throws
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item", {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item)]; },
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item(); }
            }
        },
        fields: {
            Value: null
        },
        alias: ["compareTo", ["System$IComparable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1128$Foo1$Item$compareTo", "System$IComparable$1$compareTo"]],
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            compareTo: function (other) {
                return System.String.compare(this.Value, other.Value);
            },
            getHashCode: function () {
                var h = Bridge.addHash([1835365449, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1130", {
        statics: {
            methods: {
                TestUlongDivision: function () {
                    var a = System.UInt64(System.Int64([0,8]));
                    var b = System.UInt64(2656901066);
                    var x = a.div(b);
                    var y = System.UInt64(3850086465);
                    var z = System.UInt64(2476925576);
                    var res = (x.mul(y)).gt((z.shl(32)));

                    Bridge.Test.NUnit.Assert.False(res);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1140", {
        statics: {
            methods: {
                TestDefaultNullable: function () {
                    var d = null;
                    var m = null;
                    var l = null;
                    var c = null;

                    Bridge.Test.NUnit.Assert.AreEqual(null, d, "double?");
                    Bridge.Test.NUnit.Assert.AreEqual(null, m, "decimal?");
                    Bridge.Test.NUnit.Assert.AreEqual(null, l, "long?");
                    Bridge.Test.NUnit.Assert.AreEqual(null, c, "char?");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1141", {
        statics: {
            methods: {
                TestLongDivisionInfiniteLoopFixed: function () {
                    var m = System.UInt64.MaxValue;
                    var m1 = System.UInt64([-2,-1]);
                    var res1 = m.div(m1);

                    Bridge.Test.NUnit.Assert.AreEqual("1", Bridge.toString(res1), "https://github.com/dcodeIO/long.js/issues/31");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1144", {
        statics: {
            methods: {
                TestStringFormat: function () {
                    var z = System.Decimal(-1.122, 3);
                    Bridge.Test.NUnit.Assert.AreEqual("-1.12", Bridge.Int.format(z, "##.##"));
                    Bridge.Test.NUnit.Assert.AreEqual("-1.12", Bridge.Int.format(z, "##.00"));
                    Bridge.Test.NUnit.Assert.AreEqual("-01.12", Bridge.Int.format(z, "00.##"));

                    var x = System.Decimal(0.0);
                    Bridge.Test.NUnit.Assert.AreEqual("0", Bridge.Int.format(x, "#0"));
                    Bridge.Test.NUnit.Assert.AreEqual("", Bridge.Int.format(x, "##"));
                    Bridge.Test.NUnit.Assert.AreEqual("", Bridge.Int.format(x, "##.##"));
                    Bridge.Test.NUnit.Assert.AreEqual(".0", Bridge.Int.format(x, "##.0#"));
                    Bridge.Test.NUnit.Assert.AreEqual(".00", Bridge.Int.format(x, "##.#0"));
                    Bridge.Test.NUnit.Assert.AreEqual(".00", Bridge.Int.format(x, "##.00"));

                    var y = System.Decimal(0.2, 1);
                    Bridge.Test.NUnit.Assert.AreEqual("", Bridge.Int.format(y, "##"));
                    Bridge.Test.NUnit.Assert.AreEqual(".2", Bridge.Int.format(y, "##.##"));
                    Bridge.Test.NUnit.Assert.AreEqual(".2", Bridge.Int.format(y, "##.0#"));
                    Bridge.Test.NUnit.Assert.AreEqual(".20", Bridge.Int.format(y, "##.#0"));
                    Bridge.Test.NUnit.Assert.AreEqual(".20", Bridge.Int.format(y, "##.00"));

                    var d = System.Decimal(2.0);
                    Bridge.Test.NUnit.Assert.AreEqual("2", Bridge.Int.format(d, "."));
                    Bridge.Test.NUnit.Assert.AreEqual("2", Bridge.Int.format(d, ".#"));
                    Bridge.Test.NUnit.Assert.AreEqual("2", Bridge.Int.format(d, ".##"));
                    Bridge.Test.NUnit.Assert.AreEqual("%200", Bridge.Int.format(d, "%.##"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1146", {
        statics: {
            methods: {
                TestLongIssues: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1146.IntUintEquality(0, 0), "int == uint uses .Equals() between long: System.Int64(a).equals(System.Int64(b))");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1146.Precedence(), "Correct order for `a += b >> 1` -> `(a + (b >>> 1))`");
                },
                IntUintEquality: function (a, b) {
                    return System.Int64(a).equals(System.Int64(b));
                },
                Precedence: function () {
                    var a = 1;
                    var b = 2;
                    a = (a + (b >>> 1)) >>> 0;
                    return a === 2;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1149", {
        statics: {
            fields: {
                bar_str: null
            },
            methods: {
                TestBitwiseOrAnd: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1149.bar_str = "";
                    var foo = true;
                    foo = !!(foo | Bridge.ClientTest.Batch3.BridgeIssues.Bridge1149.Bar());
                    foo = !!(foo | Bridge.ClientTest.Batch3.BridgeIssues.Bridge1149.Bar());

                    Bridge.Test.NUnit.Assert.AreEqual("barbar", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1149.bar_str);
                },
                Bar: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1149.bar_str = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1149.bar_str || "") + "bar";
                    return false;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1160", {
        statics: {
            methods: {
                TestBitwiseOrAnd: function () {
                    var x = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1160A();

                    var processor = x.Processor;
                    Bridge.Test.NUnit.Assert.AreEqual("Hello", processor("Hello"));
                    Bridge.Test.NUnit.Assert.AreEqual("Hello", x.Processor("Hello"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1160A", {
        props: {
            Processor: {
                get: function () {
                    return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1160A.f1;
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1160A", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1160A, {
        f1: function (message) {
            return message;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170", {
        statics: {
            methods: {
                TestAsyncUsing: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        parent, 
                        parent2, 
                        _bridgeTmp_1, 
                        $async_e, 
                        c1, 
                        $async_e1, 
                        c11, 
                        c2, 
                        $async_e2, 
                        $async_e3, 
                        $async_e4, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,14,15], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            parent = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170();
                                            parent2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170();

                                            _bridgeTmp_1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170.Class1.$ctor1(parent);
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            Bridge.Test.NUnit.Assert.False(parent.isDisposed);
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            if (Bridge.hasValue(_bridgeTmp_1)) _bridgeTmp_1.System$IDisposable$Dispose();

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                throw $async_e;
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            Bridge.Test.NUnit.Assert.True(parent.isDisposed);

                                            parent.isDisposed = false;
                                            c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170.Class1.$ctor1(parent);
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            $task2 = System.Threading.Tasks.Task.delay(1);
                                            $step = 6;
                                            if ($task2.isCompleted()) continue;
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 6: {
                                            $task2.getAwaitedResult();
                                            Bridge.Test.NUnit.Assert.False(c1.isDisposed);
                                            Bridge.Test.NUnit.Assert.False(parent.isDisposed);
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            if (Bridge.hasValue(c1)) c1.System$IDisposable$Dispose();

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                throw $async_e;
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            Bridge.Test.NUnit.Assert.True(parent.isDisposed);

                                            parent.isDisposed = false;
                                            c11 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170.Class1.$ctor1(parent);
                                            $step = 9;
                                            continue;
                                        }
                                        case 9: {
                                            c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170.Class1.$ctor1(parent2);
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            $task3 = System.Threading.Tasks.Task.delay(1);
                                            $step = 11;
                                            if ($task3.isCompleted()) continue;
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 11: {
                                            $task3.getAwaitedResult();
                                            Bridge.Test.NUnit.Assert.False(c11.isDisposed);
                                            Bridge.Test.NUnit.Assert.False(c2.isDisposed);
                                            $step = 12;
                                            continue;
                                        }
                                        case 12: {
                                            if (Bridge.hasValue(c2)) c2.System$IDisposable$Dispose();

                                            if ($jumpFromFinally > -1) {
                                                $step = 14;
                                                continue;
                                            } else if ($async_e) {
                                                throw $async_e;
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $step = 14;
                                                continue;
                                            }
                                            $step = 13;
                                            continue;
                                        }

                                        case 14: {
                                            if (Bridge.hasValue(c1)) c1.System$IDisposable$Dispose();

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                throw $async_e;
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 15;
                                            continue;
                                        }
                                        case 15: {
                                            Bridge.Test.NUnit.Assert.True(parent.isDisposed);
                                            Bridge.Test.NUnit.Assert.True(parent2.isDisposed);

                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ($step >= 1 && $step <= 2) {
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                if ($step >= 5 && $step <= 6) {
                                    $step = 7;
                                    $asyncBody();
                                    return;
                                }
                                if ($step >= 10 && $step <= 11) {
                                    $step = 12;
                                    $asyncBody();
                                    return;
                                }
                                if ($step >= 9 && $step <= 13) {
                                    $step = 14;
                                    $asyncBody();
                                    return;
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncUsingWithException: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        parent, 
                        _bridgeTmp_2, 
                        $async_e, 
                        e, 
                        $async_e1, 
                        $async_e2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            parent = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170();
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            _bridgeTmp_2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170.Class1.$ctor1(parent);
                                            $step = 2;
                                            continue;
                                        }
                                        case 2: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 3;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $task1.getAwaitedResult();
                                            throw new System.InvalidOperationException.$ctor1("Bridge1170 test");
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            if (Bridge.hasValue(_bridgeTmp_2)) _bridgeTmp_2.System$IDisposable$Dispose();

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                throw $async_e;
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            $step = 7;
                                            continue;
                                        }
                                        case 6: {
                                            Bridge.Test.NUnit.Assert.AreEqual("Bridge1170 test", e.Message);
                                            $async_e = null;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            Bridge.Test.NUnit.Assert.True(parent.isDisposed);

                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ($step >= 2 && $step <= 3) {
                                    $step = 4;
                                    $asyncBody();
                                    return;
                                }
                                if ( $step >= 1 && $step <= 5 ) {
                                    if (Bridge.is($async_e, System.InvalidOperationException)) {
                                        e = $async_e;
                                        $step = 6;
                                        $asyncBody();
                                        return;
                                    }
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        },
        fields: {
            isDisposed: false
        },
        ctors: {
            init: function () {
                this.isDisposed = false;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1170.Class1", {
        inherits: [System.IDisposable],
        $kind: "nested class",
        fields: {
            isDisposed: false,
            parent: null
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            init: function () {
                this.isDisposed = false;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (parent) {
                this.$initialize();
                this.parent = parent;
            }
        },
        methods: {
            Dispose: function () {
                if (this.parent != null) {
                    this.parent.isDisposed = true;
                }
                this.isDisposed = true;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171", {
        statics: {
            methods: {
                TestLinqEnumerableInList: function () {
                    var $t;
                    var result = System.Array.init(2, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171.ObjectA);
                    result[System.Array.index(0, result)] = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171.ObjectA(), $t.FieldA = null, $t);
                    result[System.Array.index(1, result)] = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171.ObjectA(), $t.FieldA = 2, $t);

                    var query = System.Linq.Enumerable.from(result, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171.ObjectA).where($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171.f1).groupBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171.f2);
                    Bridge.Test.NUnit.Assert.AreEqual(1, query.count());

                    $t = Bridge.getEnumerator(query);
                    try {
                        while ($t.moveNext()) {
                            var key = $t.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(1, new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171.ObjectA)).$ctor1(key).Count);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171, {
        f1: function (x) {
            return System.Nullable.hasValue(x.FieldA);
        },
        f2: function (x) {
            return System.Nullable.getValueOrDefault(x.FieldA, 0);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1171.ObjectA", {
        $kind: "nested class",
        props: {
            FieldA: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1175", {
        statics: {
            methods: {
                TestNullComparing: function () {
                    var temp = { };
                    var varNull = null;
                    var varUndefined = temp["this-prop-undefined"];

                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(varNull, varUndefined), "varNull == varUndefined");
                    Bridge.Test.NUnit.Assert.True(varNull == null, "varNull == null");
                    Bridge.Test.NUnit.Assert.True(varUndefined == null, "varUndefined == null");
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(undefined, varUndefined), "Script.Undefined == varUndefined");

                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(varUndefined, varNull), "varUndefined == varNull");
                    Bridge.Test.NUnit.Assert.True(null == varNull, "null == varNull");
                    Bridge.Test.NUnit.Assert.True(null == varUndefined, "null == varUndefined");
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(varUndefined, undefined), "varUndefined == Script.Undefined");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176", {
        statics: {
            methods: {
                TestFunctionLifting: function () {
                    var scope = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176;
                    Bridge.Test.NUnit.Assert.Null(scope, "scope should not exists");

                    var items = System.Array.init([new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176.Item$1(System.Int32))(), new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176.Item$1(System.Int32))()], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176.Item$1(System.Int32));
                    var values = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176.GetItemValues(System.Int32, items);
                    Bridge.Test.NUnit.Assert.AreEqual("Item, Item", values.join(", "));
                },
                GetItemValues: function (TValue, items) {
                    return System.Linq.Enumerable.from(items, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176.Item$1(TValue)).select(function (item) {
                            return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176.Item$1(TValue).op_Implicit(item);
                        }).ToArray(System.String);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1176.Item$1", function (TValue) { return {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (item) {
                    return "Item";
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1177", {
        statics: {
            methods: {
                TestImplicitCast: function () {
                    var item = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1177.Item("Test1");
                    var s = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1177.Item.op_Implicit(item);
                    Bridge.Test.NUnit.Assert.AreEqual("Test1", s);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1177.Item", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (item) {
                    return item.value;
                }
            }
        },
        fields: {
            value: null
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.value = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1180", {
        statics: {
            methods: {
                TestStructClone: function () {
                    var $t;
                    var list = new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1180.Vector2)).ctor();
                    list.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1180.Vector2(), $t.x = 0.0, $t.y = 1.0, $t));

                    var vec = list.getItem(0).$clone();
                    vec.x = 5.0;

                    Bridge.Test.NUnit.Assert.AreEqual(0, list.getItem(0).$clone().x);
                    Bridge.Test.NUnit.Assert.AreEqual(5, vec.x);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1180.Vector2", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1180.Vector2(); }
            }
        },
        fields: {
            x: 0,
            y: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1955977157, this.x, this.y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1180.Vector2)) {
                    return false;
                }
                return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1180.Vector2();
                s.x = this.x;
                s.y = this.y;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1184", {
        statics: {
            methods: {
                TestGetTypeForNumberTypes: function () {
                    var b = 1;
                    Bridge.Test.NUnit.Assert.AreEqual(System.Byte, System.Byte);

                    var sb = 1;
                    Bridge.Test.NUnit.Assert.AreEqual(System.SByte, System.SByte);

                    var s = 1;
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int16, System.Int16);

                    var us = 1;
                    Bridge.Test.NUnit.Assert.AreEqual(System.UInt16, System.UInt16);

                    var i = 1;
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int32, System.Int32);

                    var ui = 1;
                    Bridge.Test.NUnit.Assert.AreEqual(System.UInt32, System.UInt32);

                    var d = 1.1;
                    Bridge.Test.NUnit.Assert.AreEqual(System.Double, System.Double);

                    var f = 1.1;
                    Bridge.Test.NUnit.Assert.AreEqual(System.Single, System.Single);

                    var o = Bridge.box(b, System.Byte);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Byte, Bridge.getType(o));

                    o = Bridge.box(f, System.Single, System.Single.format, System.Single.getHashCode);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Single, Bridge.getType(o));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1186", {
        statics: {
            methods: {
                TestLambdasInField: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1186();
                    Bridge.Test.NUnit.Assert.AreEqual(1, c.list.getItem(0)(1));
                    Bridge.Test.NUnit.Assert.AreEqual(3, c.list.getItem(1)(2));
                }
            }
        },
        fields: {
            list: null
        },
        ctors: {
            init: function () {
                this.list = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1186.f3(new (System.Collections.Generic.List$1(Function)).ctor());
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1186", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1186, {
        f1: function (value) {
            return value;
        },
        f2: function (value) {
            return ((value + 1) | 0);
        },
        f3: function (_o1) {
            _o1.add($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1186.f1);
            _o1.add($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1186.f2);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1189", {
        statics: {
            methods: {
                TestTaskNumber: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        done, 
                        resultLong, 
                        resultDecimal, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1189.FooLong();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        resultLong = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(System.Int64(-5).equals(resultLong), "Task<long>");

                                        $task2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1189.FooDecimal();
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        resultDecimal = $taskResult2;
                                        Bridge.Test.NUnit.Assert.True(System.Decimal(-7).equalsT(resultDecimal), "Task<decimal>");

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                FooLong: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(System.Int64(-5));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                FooDecimal: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(System.Decimal(-7));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1193", {
        statics: {
            methods: {
                TestAssemblyVersionMarker: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("1.2.3.4", Bridge.ClientTestHelper.N1193.ClientTestHelperAssemblyVersion);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1197", {
        statics: {
            methods: {
                TestGetHashCodeOnDictionary: function () {
                    var $t;
                    var dict = new (System.Collections.Generic.Dictionary$2(System.Int32,System.String)).ctor();

                    // Calling GetHashCode() breaks the dictionary.
                    var hash = Bridge.getHashCode(dict);

                    // Count is still 0.
                    Bridge.Test.NUnit.Assert.AreEqual(0, dict.Count);

                    $t = Bridge.getEnumerator(dict);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            Bridge.Test.NUnit.Assert.Fail("Dictionary should be empty");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1199", {
        statics: {
            methods: {
                TestEventNameCase: function () {
                    var wrong = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1199.NotWorking$1(System.Int32))();
                    wrong.addIsNotWorking($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1199.f1);
                    Bridge.Test.NUnit.Assert.AreEqual("somevalue", wrong.Validate());
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1199", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1199, {
        f1: function () {
            return "somevalue";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1199.NotWorking$1", function (T) { return {
        $kind: "nested class",
        events: {
            IsNotWorking: null
        },
        methods: {
            Validate: function () {
                return Bridge.staticEquals(this.IsNotWorking, null) ? "no subscribers" : this.IsNotWorking();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202", {
        statics: {
            fields: {
                decimalField: System.Decimal(0.0),
                intField: 0,
                array: null
            },
            methods: {
                OutMethod$1: function (value) {
                    value.v = 3;
                },
                OutMethod: function (value) {
                    value.v = System.Decimal(7);
                },
                RefMethod$1: function (value) {
                    value.v = (value.v + 1) | 0;
                },
                RefMethod: function (value) {
                    value.v = value.v.inc();
                },
                TestRefOutStaticIntField: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.intField = 0;

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod$1(Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202, "intField"));
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.intField);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod$1(Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202, "intField"));
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.intField);
                },
                TestRefOutLocal1DIntArray: function () {
                    var localArr = System.Array.init([0, 0], System.Int32);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod$1(Bridge.ref(localArr, 0));
                    Bridge.Test.NUnit.Assert.AreEqual(3, localArr[System.Array.index(0, localArr)]);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod$1(Bridge.ref(localArr, 0));
                    Bridge.Test.NUnit.Assert.AreEqual(4, localArr[System.Array.index(0, localArr)]);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod$1(Bridge.ref(localArr, localArr[System.Array.index(1, localArr)]));
                    Bridge.Test.NUnit.Assert.AreEqual(3, localArr[System.Array.index(localArr[System.Array.index(1, localArr)], localArr)]);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod$1(Bridge.ref(localArr, localArr[System.Array.index(1, localArr)]));
                    Bridge.Test.NUnit.Assert.AreEqual(4, localArr[System.Array.index(localArr[System.Array.index(1, localArr)], localArr)]);
                },
                TestRefOutStatic1DIntArray: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array = System.Array.init([0, 0], System.Int32);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod$1(Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array, 0));
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)]);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod$1(Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array, 0));
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)]);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod$1(Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)]));
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)]);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod$1(Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)]));
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)]);
                },
                TestRefOutLocal2DIntArray: function () {
                    var array2D = System.Array.create(0, [[0, 0]], System.Int32, 1, 2);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod$1(Bridge.ref(array2D, [0, 0]));
                    Bridge.Test.NUnit.Assert.AreEqual(3, array2D.get([0, 0]));

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod$1(Bridge.ref(array2D, [0, 0]));
                    Bridge.Test.NUnit.Assert.AreEqual(4, array2D.get([0, 0]));

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod$1(Bridge.ref(array2D, [array2D.get([0, 1]), array2D.get([0, 1])]));
                    Bridge.Test.NUnit.Assert.AreEqual(3, array2D.get([array2D.get([0, 1]), array2D.get([0, 1])]));

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod$1(Bridge.ref(array2D, [array2D.get([0, 1]), array2D.get([0, 1])]));
                    Bridge.Test.NUnit.Assert.AreEqual(4, array2D.get([array2D.get([0, 1]), array2D.get([0, 1])]));
                },
                TestRefOutStaticDecimalField: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.decimalField = System.Decimal(0);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod(Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202, "decimalField"));
                    Bridge.Test.NUnit.Assert.AreEqual("7", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.decimalField.toString());

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod(Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202, "decimalField"));
                    Bridge.Test.NUnit.Assert.AreEqual("8", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.decimalField.toString());
                },
                TestRefOutLocal1DDecimalArray: function () {
                    var localArr = System.Array.init([System.Decimal(0), System.Decimal(0)], System.Decimal);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod(Bridge.ref(localArr, 0));
                    Bridge.Test.NUnit.Assert.AreEqual("7", localArr[System.Array.index(0, localArr)].toString());

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod(Bridge.ref(localArr, 0));
                    Bridge.Test.NUnit.Assert.AreEqual("8", localArr[System.Array.index(0, localArr)].toString());
                },
                TestRefOutLocal2DDecimalArray: function () {
                    var array2D = System.Array.create(System.Decimal(0.0), [[System.Decimal(0), System.Decimal(0)]], System.Decimal, 1, 2);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.OutMethod(Bridge.ref(array2D, [0, 0]));
                    Bridge.Test.NUnit.Assert.AreEqual("7", array2D.get([0, 0]).toString());

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.RefMethod(Bridge.ref(array2D, [0, 0]));
                    Bridge.Test.NUnit.Assert.AreEqual("8", array2D.get([0, 0]).toString());
                },
                TestInlineOutStaticIntField: function () {
                    var s = "1";
                    var i = { };
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.intField = 0;

                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse(s, i));
                    Bridge.Test.NUnit.Assert.AreEqual(1, i.v);

                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse(s, Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202, "intField")));
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.intField);
                },
                TestInlineOutStatic1DIntArray: function () {
                    var s = "1";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array = System.Array.init([0, 0], System.Int32);

                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse(s, Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array, 0)));
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)]);

                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse(s, Bridge.ref(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)])));
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1202.array)]);
                },
                TestInlineOutLocal2DIntArray: function () {
                    var s = "1";
                    var array2D = System.Array.create(0, [[0, 0]], System.Int32, 1, 2);

                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse(s, Bridge.ref(array2D, [0, 0])));
                    Bridge.Test.NUnit.Assert.AreEqual(1, array2D.get([0, 0]));

                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse(s, Bridge.ref(array2D, [array2D.get([0, 1]), array2D.get([0, 1])])));
                    Bridge.Test.NUnit.Assert.AreEqual(1, array2D.get([array2D.get([0, 1]), array2D.get([0, 1])]));
                }
            }
        }
    });

    Bridge.init(function () {
        var Bridge1203_a2 = function () { };
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1203", {
        statics: {
            methods: {
                InitMethod1: function () {
                    var Bridge1203_a1 = function () { };
                },
                TestLiftedFunctionsInsideInitMethod: function () {
                    var scope = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1203;
                    Bridge.Test.NUnit.Assert.Null(scope, "scope should not exists");
                }
            }
        }
    });

    Bridge.init(function () { Bridge.ClientTest.Batch3.BridgeIssues.Bridge1203.InitMethod1(); });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1206", {
        statics: {
            methods: {
                TestDocumentURLProperty: function () {
                    var raw = document.URL;
                    var actual = document.URL;

                    Bridge.Test.NUnit.Assert.AreEqual(raw, actual);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217", {
        statics: {
            methods: {
                TestTypeInferenceWithNamedArguments: function () {
                    var r1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.GetNavigatorToTest1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator, "", "", $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.f1);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator), r1);

                    var r2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.GetNavigatorToTest1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator, "", "", $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.f1);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator), r2);

                    var r3 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.GetNavigatorToTest2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator, "", "", null);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator), r3);

                    var r4 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.GetNavigatorToTest2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator, "", "", null);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator), r4);
                },
                GetNavigatorToTest1: function (TNavigator, initialUrl, assert, navigatorGenerator) {
                    return Bridge.Reflection.getTypeFullName(TNavigator);
                },
                GetNavigatorToTest2: function (TNavigator, initialUrl, assert, navigatorGenerator) {
                    return Bridge.Reflection.getTypeFullName(TNavigator);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217, {
        f1: function () {
            return null;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.Navigator", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1219", {
        statics: {
            methods: {
                TestLongJSON: function () {
                    var x1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1219.TestClass1();
                    x1.LongProperty = System.Int64(100);
                    Bridge.Test.NUnit.Assert.AreEqual("{\"LongProperty\":100}", System.String.replaceAll(JSON.stringify(x1), " ", ""));

                    var x2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1219.TestClass2();
                    x2.ULongProperty = System.UInt64(200);
                    Bridge.Test.NUnit.Assert.AreEqual("{\"ULongProperty\":200}", System.String.replaceAll(JSON.stringify(x2), " ", ""));

                    var x3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1219.TestClass3();
                    x3.DecimalProperty = System.Decimal(300);
                    Bridge.Test.NUnit.Assert.AreEqual("{\"DecimalProperty\":300}", System.String.replaceAll(JSON.stringify(x3), " ", ""));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1219.TestClass1", {
        $kind: "nested class",
        props: {
            LongProperty: System.Int64(0)
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1219.TestClass2", {
        $kind: "nested class",
        props: {
            ULongProperty: System.UInt64(0)
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1219.TestClass3", {
        $kind: "nested class",
        props: {
            DecimalProperty: System.Decimal(0.0)
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge122", {
        statics: {
            fields: {
                nx: 0,
                breaker: null
            },
            ctors: {
                init: function () {
                    this.nx = 1;
                    this.breaker = System.Array.create(0, [[1, 2], [3, 4]], System.Int32, 2, 2);
                }
            },
            methods: {
                Test2DArrayConstruction: function () {
                    var x = 0;
                    var y = 1;

                    var retval = (x >= 0 && x < Bridge.ClientTest.Batch3.BridgeIssues.Bridge122.nx && Bridge.ClientTest.Batch3.BridgeIssues.Bridge122.breaker.length > (Bridge.Int.mul((((x + 1) | 0)), Bridge.ClientTest.Batch3.BridgeIssues.Bridge122.nx))) ? Bridge.ClientTest.Batch3.BridgeIssues.Bridge122.breaker.get([x, y]) : 0;

                    Bridge.Test.NUnit.Assert.AreEqual(2, retval);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1220", {
        statics: {
            methods: {
                TestConstInGenericClass: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1220.Class1$1(System.Int32).Const1);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1220.Class1$1", function (T) { return {
        $kind: "nested class",
        statics: {
            fields: {
                Const1: 0
            },
            ctors: {
                init: function () {
                    this.Const1 = 1;
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226", {
        statics: {
            fields: {
                DELTA: 0
            },
            ctors: {
                init: function () {
                    this.DELTA = 1E-15;
                }
            },
            methods: {
                AssertValue: function (expected, actual, delta, message) {
                    var $t;
                    if (delta === void 0) { delta = 1E-15; }
                    if (message === void 0) { message = null; }
                    var e = System.Double.format(expected);
                    var a = System.Double.format(actual);

                    if (!isFinite(expected) || !isFinite(actual)) {
                        Bridge.Test.NUnit.Assert.AreEqual(e, a, message);
                        return;
                    }

                    var diff = expected - actual;
                    if (diff > delta || diff < -delta) {
                        Bridge.Test.NUnit.Assert.AreEqual(e, a, message);
                    } else {
                        var m = ($t = message, $t != null ? $t : " " + ((diff !== 0 ? "Diff: " + System.Double.format(diff) + "; Expected: " + (e || "") + "; Actual: " + (a || "") : "") || ""));
                        Bridge.Test.NUnit.Assert.True(true, m);
                    }
                },
                TestSinh: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(-3.626860407847019, Bridge.Math.sinh(-2));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(-1.1752011936438014, Bridge.Math.sinh(-1));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(-0.52109530549374738, Bridge.Math.sinh(-0.5));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(0, Bridge.Math.sinh(0));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(0.52109530549374738, Bridge.Math.sinh(0.5));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(1.1752011936438014, Bridge.Math.sinh(1));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(3.626860407847019, Bridge.Math.sinh(2));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(Number.NaN, Bridge.Math.sinh(Number.NaN));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(Number.NEGATIVE_INFINITY, Bridge.Math.sinh(Number.NEGATIVE_INFINITY));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(Number.POSITIVE_INFINITY, Bridge.Math.sinh(Number.POSITIVE_INFINITY));
                },
                TestCosh: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(3.7621956910836309, Bridge.Math.cosh(-2));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(1.5430806348152439, Bridge.Math.cosh(-1));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(1.12762596520638, Bridge.Math.cosh(-0.5));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(1, Bridge.Math.cosh(0));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(1.12762596520638, Bridge.Math.cosh(0.5));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(1.5430806348152439, Bridge.Math.cosh(1));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(3.7621956910836309, Bridge.Math.cosh(2));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(Number.NaN, Bridge.Math.cosh(Number.NaN));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(Number.POSITIVE_INFINITY, Bridge.Math.cosh(Number.NEGATIVE_INFINITY));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(Number.POSITIVE_INFINITY, Bridge.Math.cosh(Number.POSITIVE_INFINITY));
                },
                TestTanh: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(-0.964027580075817, Bridge.Math.tanh(-2));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(-0.761594155955765, Bridge.Math.tanh(-1));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(-0.46211715726001, Bridge.Math.tanh(-0.5));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(0, Bridge.Math.tanh(0));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(0.46211715726001, Bridge.Math.tanh(0.5));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(0.761594155955765, Bridge.Math.tanh(1));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(0.964027580075817, Bridge.Math.tanh(2));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(Number.NaN, Bridge.Math.tanh(Number.NaN));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(-1, Bridge.Math.tanh(Number.NEGATIVE_INFINITY));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1226.AssertValue(1, Bridge.Math.tanh(Number.POSITIVE_INFINITY));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1231", {
        statics: {
            methods: {
                TestAutoGeneratedStructMethodName: function () {
                    var struct1 = new (Demo.Bridge1231.Class1$1.MyStruct(System.String)).$ctor1(1);
                    var struct2 = struct1.$clone();
                    struct2.field = 2;

                    Bridge.Test.NUnit.Assert.AreEqual(1, struct1.field);
                    Bridge.Test.NUnit.Assert.AreEqual(2, struct2.field);
                }
            }
        }
    });

    Bridge.define("Demo.Bridge1231.Class1$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1231.I1$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232", {
        statics: {
            methods: {
                TestParamsInThisCtorInit: function () {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
                    var t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassA.$ctor1(["a", "b"]);
                    Bridge.Test.NUnit.Assert.AreEqual(2, t1.A.length, "Length ab");
                    Bridge.Test.NUnit.Assert.AreEqual("a", ($t = t1.A)[System.Array.index(0, $t)], "First ab");
                    Bridge.Test.NUnit.Assert.AreEqual("b", ($t1 = t1.A)[System.Array.index(1, $t1)], "Second ab");
                    Bridge.Test.NUnit.Assert.AreEqual(1, t1.Number, "Number ab");

                    var t2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassA.$ctor1(System.Array.init(["a", "b", "c"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(3, t2.A.length, "Length abc");
                    Bridge.Test.NUnit.Assert.AreEqual("a", ($t2 = t2.A)[System.Array.index(0, $t2)], "First abc");
                    Bridge.Test.NUnit.Assert.AreEqual("b", ($t3 = t2.A)[System.Array.index(1, $t3)], "Second abc");
                    Bridge.Test.NUnit.Assert.AreEqual("c", ($t4 = t2.A)[System.Array.index(2, $t4)], "Third abc");
                    Bridge.Test.NUnit.Assert.AreEqual(1, t2.Number, "Number abc");

                    var t3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassA.ctor(3, System.Array.init(["a", "b", "c", "d"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(4, t3.A.length, "Length abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("a", ($t5 = t3.A)[System.Array.index(0, $t5)], "First abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("b", ($t6 = t3.A)[System.Array.index(1, $t6)], "Second abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("c", ($t7 = t3.A)[System.Array.index(2, $t7)], "Third abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("d", ($t8 = t3.A)[System.Array.index(3, $t8)], "Forth abcd");
                    Bridge.Test.NUnit.Assert.AreEqual(3, t3.Number, "Number abcd");
                },
                TestExtendedParamsInThisCtorInit: function () {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12;
                    var t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassB.$ctor1("a", ["b"]);
                    Bridge.Test.NUnit.Assert.AreEqual(1, t1.A.length, "Length ab");
                    Bridge.Test.NUnit.Assert.AreEqual("b", ($t = t1.A)[System.Array.index(0, $t)], "First ab");
                    Bridge.Test.NUnit.Assert.AreEqual("a", t1.S, "S ab");
                    Bridge.Test.NUnit.Assert.AreEqual(1, t1.Number, "Number ab");

                    var t2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassB.$ctor2(System.Array.init(["a", "b", "c"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(3, t2.A.length, "Length abc");
                    Bridge.Test.NUnit.Assert.AreEqual("a", ($t1 = t2.A)[System.Array.index(0, $t1)], "First abc");
                    Bridge.Test.NUnit.Assert.AreEqual("b", ($t2 = t2.A)[System.Array.index(1, $t2)], "Second abc");
                    Bridge.Test.NUnit.Assert.AreEqual("c", ($t3 = t2.A)[System.Array.index(2, $t3)], "Third abc");
                    Bridge.Test.NUnit.Assert.AreEqual(null, t2.S, "S abc");
                    Bridge.Test.NUnit.Assert.AreEqual(1, t2.Number, "Number abc");

                    var t3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassB.$ctor1("e", System.Array.init(["a", "b", "c", "d"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(4, t3.A.length, "Length abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("a", ($t4 = t3.A)[System.Array.index(0, $t4)], "First abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("b", ($t5 = t3.A)[System.Array.index(1, $t5)], "Second abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("c", ($t6 = t3.A)[System.Array.index(2, $t6)], "Third abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("d", ($t7 = t3.A)[System.Array.index(3, $t7)], "Forth abcd");
                    Bridge.Test.NUnit.Assert.AreEqual("e", t3.S, "S abcd");
                    Bridge.Test.NUnit.Assert.AreEqual(1, t3.Number, "Number abcd");

                    var t4 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassB.ctor(7, System.Array.init(["a", "b", "c", "d", "e"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(5, t4.A.length, "Length abcde");
                    Bridge.Test.NUnit.Assert.AreEqual("a", ($t8 = t4.A)[System.Array.index(0, $t8)], "First abcde");
                    Bridge.Test.NUnit.Assert.AreEqual("b", ($t9 = t4.A)[System.Array.index(1, $t9)], "Second abcde");
                    Bridge.Test.NUnit.Assert.AreEqual("c", ($t10 = t4.A)[System.Array.index(2, $t10)], "Third abcde");
                    Bridge.Test.NUnit.Assert.AreEqual("d", ($t11 = t4.A)[System.Array.index(3, $t11)], "Forth abcde");
                    Bridge.Test.NUnit.Assert.AreEqual("e", ($t12 = t4.A)[System.Array.index(4, $t12)], "Fifth abcde");
                    Bridge.Test.NUnit.Assert.AreEqual(null, t4.S, "S abcde");
                    Bridge.Test.NUnit.Assert.AreEqual(7, t4.Number, "Number abcde");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassA", {
        $kind: "nested class",
        props: {
            A: null,
            Number: 0
        },
        ctors: {
            ctor: function (a, str) {
                if (str === void 0) { str = []; }

                this.$initialize();
                this.A = str;
                this.Number = a;
            },
            $ctor1: function (str) {
                if (str === void 0) { str = []; }

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassA.ctor.call(this, 1, str);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassB", {
        $kind: "nested class",
        props: {
            A: null,
            S: null,
            Number: 0
        },
        ctors: {
            ctor: function (a, str) {
                if (str === void 0) { str = []; }

                this.$initialize();
                this.A = str;
                this.Number = a;
            },
            $ctor2: function (str) {
                if (str === void 0) { str = []; }

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassB.ctor.call(this, 1, str);
            },
            $ctor1: function (s, str) {
                if (str === void 0) { str = []; }

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1232.ClassB.$ctor2.call(this, str);
                this.S = s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1249", {
        statics: {
            methods: {
                TestEnumOverflow: function () {
                    var v1 = 255;
                    var v2 = 255;
                    Bridge.Test.NUnit.Assert.AreEqual(0, ((v1 = (v1 + 1) & 255)));
                    Bridge.Test.NUnit.Assert.AreEqual("a", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1249.b, (((v2 = (v2 + 1) & 255)))));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1249.b", {
        $kind: "nested enum",
        statics: {
            fields: {
                a: 0,
                b: 1
            }
        },
        $utype: System.Byte
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1253", {
        statics: {
            methods: {
                TestDefaultEnumMode: function () {
                    var numbers = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1253.Numbers;
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1253.Numbers.ONE, Bridge.unbox(numbers.ONE));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1253.Numbers.TWO, Bridge.unbox(numbers.TWO));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1253.Numbers", {
        $kind: "nested enum",
        statics: {
            fields: {
                ONE: 1,
                TWO: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256", {
        statics: {
            fields: {
                reservedWords: null,
                boolean: false,
                is: false
            },
            ctors: {
                init: function () {
                    this.reservedWords = System.Array.init(["abstract", "arguments", "as", "boolean", "break", "byte", "case", "catch", "char", "class", "continue", "const", "debugger", "default", "delete", "do", "double", "else", "enum", "eval", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "namespace", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "use", "var", "void", "volatile", "window", "while", "with", "yield"], System.String);
                    this.boolean = true;
                    this.is = true;
                }
            },
            methods: {
                IsReservedWord: function (word) {
                    {
                        return System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.reservedWords, System.String).contains(word);
                    }
                },
                TestFields: function (o) {
                    var $t;
                    if (o == null) {
                        Bridge.Test.NUnit.Assert.Fail("Object cannot be null");
                        return;
                    }

                    $t = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.reservedWords);
                    try {
                        while ($t.moveNext()) {
                            var name = $t.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.unbox(o[name]), "Expected true for property " + (name || ""));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                TestMethods: function (o) {
                    var $t;
                    if (o == null) {
                        Bridge.Test.NUnit.Assert.Fail("Object cannot be null");
                        return;
                    }

                    $t = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.reservedWords);
                    try {
                        while ($t.moveNext()) {
                            var name = $t.Current;
                            Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o[name]), "Member " + (name || "") + " exists");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                let: function () {
                    return 5;
                },
                TestCaseBooleanIsLet: function () {
                    var $let = 1;
                    $let = 2;
                    var scope = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256;

                    Bridge.Test.NUnit.Assert.True(scope.boolean);
                    Bridge.Test.NUnit.Assert.True(scope.is);
                    Bridge.Test.NUnit.Assert.True(scope.let);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.boolean);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.is);
                    Bridge.Test.NUnit.Assert.AreEqual(2, $let);
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.let());
                },
                TestReservedFields: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.ReservedFields();

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.TestFields(a);
                },
                TestReservedMethods: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.ReservedMethods();

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.TestMethods(a);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.ReservedFields", {
        $kind: "nested class",
        fields: {
            abstract: false,
            arguments: false,
            as: false,
            boolean: false,
            break: false,
            byte: false,
            case: false,
            catch: false,
            char: false,
            class: false,
            continue: false,
            const: false,
            debugger: false,
            default: false,
            delete: false,
            do: false,
            double: false,
            else: false,
            enum: false,
            eval: false,
            export: false,
            extends: false,
            false: false,
            final: false,
            finally: false,
            float: false,
            for: false,
            function: false,
            goto: false,
            if: false,
            implements: false,
            import: false,
            in: false,
            instanceof: false,
            int: false,
            interface: false,
            let: false,
            long: false,
            namespace: false,
            native: false,
            new: false,
            null: false,
            package: false,
            private: false,
            protected: false,
            public: false,
            return: false,
            short: false,
            static: false,
            super: false,
            switch: false,
            synchronized: false,
            this: false,
            throw: false,
            throws: false,
            transient: false,
            true: false,
            try: false,
            typeof: false,
            use: false,
            var: false,
            void: false,
            volatile: false,
            window: false,
            while: false,
            with: false,
            yield: false
        },
        ctors: {
            init: function () {
                this.abstract = true;
                this.arguments = true;
                this.as = true;
                this.boolean = true;
                this.break = true;
                this.byte = true;
                this.case = true;
                this.catch = true;
                this.char = true;
                this.class = true;
                this.continue = true;
                this.const = true;
                this.debugger = true;
                this.default = true;
                this.delete = true;
                this.do = true;
                this.double = true;
                this.else = true;
                this.enum = true;
                this.eval = true;
                this.export = true;
                this.extends = true;
                this.false = true;
                this.final = true;
                this.finally = true;
                this.float = true;
                this.for = true;
                this.function = true;
                this.goto = true;
                this.if = true;
                this.implements = true;
                this.import = true;
                this.in = true;
                this.instanceof = true;
                this.int = true;
                this.interface = true;
                this.let = true;
                this.long = true;
                this.namespace = true;
                this.native = true;
                this.new = true;
                this.null = true;
                this.package = true;
                this.private = true;
                this.protected = true;
                this.public = true;
                this.return = true;
                this.short = true;
                this.static = true;
                this.super = true;
                this.switch = true;
                this.synchronized = true;
                this.this = true;
                this.throw = true;
                this.throws = true;
                this.transient = true;
                this.true = true;
                this.try = true;
                this.typeof = true;
                this.use = true;
                this.var = true;
                this.void = true;
                this.volatile = true;
                this.window = true;
                this.while = true;
                this.with = true;
                this.yield = true;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1256.ReservedMethods", {
        $kind: "nested class",
        methods: {
            abstract: function () {
                return 1;
            },
            arguments: function () {
                return 2;
            },
            as: function () {
                return 3;
            },
            boolean: function () {
                return 4;
            },
            break: function () {
                return 5;
            },
            byte: function () {
                return 6;
            },
            case: function () {
                return 7;
            },
            catch: function () {
                return 8;
            },
            char: function () {
                return 9;
            },
            class: function () {
                return 10;
            },
            continue: function () {
                return 11;
            },
            const: function () {
                return 12;
            },
            constructor: function () {
                return 13;
            },
            debugger: function () {
                return 14;
            },
            default: function () {
                return 15;
            },
            delete: function () {
                return 16;
            },
            do: function () {
                return 17;
            },
            double: function () {
                return 18;
            },
            else: function () {
                return 19;
            },
            enum: function () {
                return 20;
            },
            eval: function () {
                return 21;
            },
            export: function () {
                return 22;
            },
            extends: function () {
                return 23;
            },
            false: function () {
                return 24;
            },
            final: function () {
                return 25;
            },
            finally: function () {
                return 26;
            },
            float: function () {
                return 27;
            },
            for: function () {
                return 28;
            },
            function: function () {
                return 29;
            },
            goto: function () {
                return 30;
            },
            if: function () {
                return 31;
            },
            implements: function () {
                return 32;
            },
            import: function () {
                return 33;
            },
            in: function () {
                return 34;
            },
            instanceof: function () {
                return 35;
            },
            int: function () {
                return 36;
            },
            interface: function () {
                return 37;
            },
            let: function () {
                return 38;
            },
            long: function () {
                return 39;
            },
            namespace: function () {
                return 40;
            },
            native: function () {
                return 41;
            },
            new: function () {
                return 42;
            },
            null: function () {
                return 43;
            },
            package: function () {
                return 44;
            },
            private: function () {
                return 45;
            },
            protected: function () {
                return 46;
            },
            public: function () {
                return 47;
            },
            return: function () {
                return 48;
            },
            short: function () {
                return 49;
            },
            static: function () {
                return 50;
            },
            super: function () {
                return 51;
            },
            switch: function () {
                return 52;
            },
            synchronized: function () {
                return 53;
            },
            this: function () {
                return 54;
            },
            throw: function () {
                return 55;
            },
            throws: function () {
                return 56;
            },
            transient: function () {
                return 57;
            },
            true: function () {
                return 58;
            },
            try: function () {
                return 59;
            },
            typeof: function () {
                return 60;
            },
            use: function () {
                return 61;
            },
            var: function () {
                return 62;
            },
            void: function () {
                return 63;
            },
            volatile: function () {
                return 64;
            },
            window: function () {
                return 65;
            },
            while: function () {
                return 65;
            },
            with: function () {
                return 66;
            },
            yield: function () {
                return 67;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1260", {
        statics: {
            methods: {
                TestStringTrim: function () {
                    var s1 = "[Click me]";
                    Bridge.Test.NUnit.Assert.AreEqual("Click me", System.String.trim(s1, [91, 93]));

                    var s2 = "^Click me^";
                    Bridge.Test.NUnit.Assert.AreEqual("Click me", System.String.trim(s2, [94]));

                    var s3 = "\\Click me\\";
                    Bridge.Test.NUnit.Assert.AreEqual("Click me", System.String.trim(s3, [92]));
                },
                TestStringTrimStart: function () {
                    var s1 = "[Click me]";
                    Bridge.Test.NUnit.Assert.AreEqual("Click me]", System.String.trimStart(s1, [91, 93]));

                    var s2 = "^Click me^";
                    Bridge.Test.NUnit.Assert.AreEqual("Click me^", System.String.trimStart(s2, [94]));

                    var s3 = "\\Click me\\";
                    Bridge.Test.NUnit.Assert.AreEqual("Click me\\", System.String.trimStart(s3, [92]));
                },
                TestStringTrimEnd: function () {
                    var s1 = "[Click me]";
                    Bridge.Test.NUnit.Assert.AreEqual("[Click me", System.String.trimEnd(s1, [91, 93]));

                    var s2 = "^Click me^";
                    Bridge.Test.NUnit.Assert.AreEqual("^Click me", System.String.trimEnd(s2, [94]));

                    var s3 = "\\Click me\\";
                    Bridge.Test.NUnit.Assert.AreEqual("\\Click me", System.String.trimEnd(s3, [92]));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1264", {
        statics: {
            methods: {
                TestDefaultGetHashCodeIsRepeatable: function () {
                    var foo = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1264.Foo();
                    var h1 = Bridge.getHashCode(foo);
                    var h2 = Bridge.getHashCode(foo);

                    Bridge.Test.NUnit.Assert.AreEqual(h1, h2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1264.Bar", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1264.Foo", {
        $kind: "nested class",
        fields: {
            _bck: null
        },
        ctors: {
            init: function () {
                this._bck = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1264.Bar();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1266", {
        statics: {
            methods: {
                TestArrayToEnumerable: function () {
                    var $t, $t1;
                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    var x = System.Array.toEnumerable(($t = System.Int32, System.Linq.Enumerable.from(arr, $t).ToArray($t)));
                    var index = 0;
                    $t1 = Bridge.getEnumerator(x);
                    try {
                        while ($t1.moveNext()) {
                            var i = $t1.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(arr[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), arr)], Bridge.unbox(i));
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296", {
        statics: {
            methods: {
                Test: function (value) {
                    return value;
                },
                TestAnyNonExternal: function (value) {
                    return value;
                },
                TestImplicitOperator: function () {
                    var id = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId.op_Explicit(12);
                    Bridge.Test.NUnit.Assert.AreEqual(12, id.Value);

                    var returnedId = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.Test(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId.op_Implicit(id));
                    Bridge.Test.NUnit.Assert.AreEqual(12, returnedId);
                },
                TestIgnoreCast: function () {
                    var id = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId.op_Explicit(12);
                    var returnedId = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.TestAnyNonExternal(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId.op_Implicit(id));
                    Bridge.Test.NUnit.Assert.AreEqual(12, returnedId);
                },
                TestExternalImplicit: function () {
                    var idAsBlah = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.BlahId.op_Implicit(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageStructId.op_Implicit((new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageStructId())));
                    Bridge.Test.NUnit.Assert.AreEqual(123, idAsBlah.Value);

                    var idAsIgnoreCastBlah = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageStructId.op_Implicit((new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageStructId()));
                    Bridge.Test.NUnit.Assert.AreEqual(123, idAsIgnoreCastBlah);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.AnyNonExternal$2", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (t) {
                    throw new System.InvalidCastException.ctor();
                },
                op_Implicit$1: function (t) {
                    throw new System.InvalidCastException.ctor();
                },
                op_Explicit: function (value) {
                    throw new System.InvalidCastException.ctor();
                },
                op_Explicit$1: function (value) {
                    throw new System.InvalidCastException.ctor();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.BlahId", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (value) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.BlahId(value);
                }
            }
        },
        props: {
            Value: 0
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.Value = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId", {
        $kind: "nested struct",
        statics: {
            methods: {
                op_Explicit: function (value) {
                    var $t;
                    return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId(), $t.Value = value, $t);
                },
                op_Implicit: function (id) {
                    return id.Value;
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId(); }
            }
        },
        props: {
            Value: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3168324882, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageId();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageStructId", {
        $kind: "nested struct",
        statics: {
            methods: {
                op_Implicit: function (id) {
                    return 123;
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1296.MessageStructId(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1298", {
        statics: {
            methods: {
                TestLongSwitch: function () {
                    var $t;
                    var a = System.Array.init([
                        System.Int64(1), 
                        System.Int64(2), 
                        System.Int64.MaxValue
                    ], System.Int64);
                    $t = Bridge.getEnumerator(a);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            switch (v.toString()) {
                                case "1": 
                                    {
                                        Bridge.Test.NUnit.Assert.True(v.equals(System.Int64(1)));
                                        break;
                                    }
                                case "2": 
                                    {
                                        Bridge.Test.NUnit.Assert.True(v.equals(System.Int64(2)));
                                        break;
                                    }
                                case System.Int64.MaxValue.toString(): 
                                    {
                                        Bridge.Test.NUnit.Assert.True(v.equals(System.Int64.MaxValue));
                                        break;
                                    }
                                default: 
                                    {
                                        Bridge.Test.NUnit.Assert.Fail();
                                        break;
                                    }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304", {
        statics: {
            props: {
                Output: {
                    get: function () {
                        return Bridge.Console.instance.bufferedOutput;
                    },
                    set: function (value) {
                        Bridge.Console.instance.bufferedOutput = value;
                    }
                }
            },
            methods: {
                ClearOutput: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output = "";
                },
                ResetOutput: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output = null;
                    Bridge.Console.hide();
                },
                TestWriteFormatString: function () {
                    System.Console.Write(System.String.format("{0}", Bridge.box(1, System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual("1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.Write(System.String.format("{0} {1}", Bridge.box(1, System.Int32), Bridge.box(2, System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual("1 2", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.Write(System.String.format("{0} {1} {2}", Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual("1 2 3", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.Write(System.String.format("{0} {1} {2} {3}", [Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32)]));
                    Bridge.Test.NUnit.Assert.AreEqual("1 2 3 4", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.Write(System.String.format("{0} {1} {2} {3} {4}", [Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), "5"]));
                    Bridge.Test.NUnit.Assert.AreEqual("1 2 3 4 5", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.Write(System.String.format("{0} {1} {2} {3} {4} {5}", [Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), "5", Bridge.box(true, System.Boolean, System.Boolean.toString)]));
                    Bridge.Test.NUnit.Assert.AreEqual("1 2 3 4 5 True", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                },
                TestWriteLineFormatString: function () {
                    System.Console.WriteLine(System.String.format("{0}", Bridge.box(1, System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTestHelper.StringHelper.CombineLinesNL(["1"]), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.WriteLine(System.String.format("{0} {1}", Bridge.box(1, System.Int32), Bridge.box(2, System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTestHelper.StringHelper.CombineLinesNL(["1 2"]), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.WriteLine(System.String.format("{0} {1} {2}", Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTestHelper.StringHelper.CombineLinesNL(["1 2 3"]), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.WriteLine(System.String.format("{0} {1} {2} {3}", [Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32)]));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTestHelper.StringHelper.CombineLinesNL(["1 2 3 4"]), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.ClearOutput();

                    System.Console.WriteLine(System.String.format("{0} {1} {2} {3} {4}", [Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), "5"]));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTestHelper.StringHelper.CombineLinesNL(["1 2 3 4 5"]), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1304.Output);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305", {
        statics: {
            fields: {
                CurrentInt: 0,
                CurrentDataClass: null,
                CurrentDataStruct: null
            },
            methods: {
                TestAsyncIntReturnWithAssigmentFromResult: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.TestIntResult();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual(10, result);
                                        Bridge.Test.NUnit.Assert.AreEqual(10, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.CurrentInt);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncDataClassReturnWithAssigmentFromResult: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.TestClassResult();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.NotNull(result);
                                        Bridge.Test.NUnit.Assert.AreEqual(11, result.Value);
                                        Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.CurrentDataClass);
                                        Bridge.Test.NUnit.Assert.AreEqual(11, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.CurrentDataClass.Value);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncDataStructReturnWithAssigmentFromResult: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.TestStructResult();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.NotNull(result);
                                        Bridge.Test.NUnit.Assert.AreEqual(12, result.Value);
                                        Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.CurrentDataStruct);
                                        Bridge.Test.NUnit.Assert.AreEqual(12, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.CurrentDataStruct.Value);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestIntResult: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.fromResult(10, System.Int32);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(($t = $taskResult1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.CurrentInt = $t, $t));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestClassResult: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.fromResult(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.DataClass(), $t.Value = 11, $t), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.DataClass);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(($t = $taskResult1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.CurrentDataClass = $t, $t));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestStructResult: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $t, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.fromResult(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.DataStruct(), $t.Value = 12, $t), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.DataStruct);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult(($t = $taskResult1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.CurrentDataStruct = $t, $t));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.DataClass", {
        $kind: "nested class",
        props: {
            Value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1305.DataStruct", {
        $kind: "nested class",
        props: {
            Value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1311", {
        statics: {
            methods: {
                TestEnumNumberParsing: function () {
                    var ec = System.Enum.parse(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1311.SimpleEnum, "C");
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.unbox(ec), "C");

                    var e3 = System.Enum.parse(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1311.SimpleEnum, "3");
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.unbox(e3), "3");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1311.SimpleEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: 0,
                B: 3,
                C: 4,
                D: 10
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1313", {
        statics: {
            methods: {
                TestInterfaceDefaultParameter: function () {
                    var value = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1313.Class();
                    Bridge.Test.NUnit.Assert.AreEqual(1, value.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1313$IInterface$Function(1));
                },
                TestClassNotDefaultParameter: function () {
                    var value = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1313.Class();
                    Bridge.Test.NUnit.Assert.AreEqual(2, value.Function(2));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1313.IInterface", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1316", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var v = 0;
                    var s = v + "";

                    Bridge.Test.NUnit.Assert.AreEqual("0", s);
                },
                TestStringConcatObject: function () {
                    var o1 = Bridge.box(3, System.Int32);
                    var s1 = System.String.concat(o1);

                    Bridge.Test.NUnit.Assert.AreEqual("3", s1);

                    var o2 = null;
                    var s2 = System.String.concat(o2);

                    Bridge.Test.NUnit.Assert.AreEqual("", s2);
                },
                TestStringConcatEnumerableString: function () {
                    var e1 = System.Array.init(["1", "2"], System.String);
                    var s1 = System.String.concat(Bridge.toArray(e1));

                    Bridge.Test.NUnit.Assert.AreEqual("12", s1, "All not null");

                    var e2 = System.Array.init(["3", null, "4"], System.String);
                    var s2 = System.String.concat(Bridge.toArray(e2));

                    Bridge.Test.NUnit.Assert.AreEqual("34", s2, "One is null");

                    var e3 = System.Array.init([], System.String);
                    var s3 = System.String.concat(Bridge.toArray(e3));

                    Bridge.Test.NUnit.Assert.AreEqual("", s3, "Empty");
                },
                TestStringConcatEnumerableGeneric: function () {
                    var e1 = System.Array.init([Bridge.box(1, System.Int32), "2"], System.Object);
                    var s1 = System.String.concat(Bridge.toArray(e1));

                    Bridge.Test.NUnit.Assert.AreEqual("12", s1, "All not null");

                    var e2 = System.Array.init(["3", null, Bridge.box(4, System.Int32)], System.Object);
                    var s2 = System.String.concat(Bridge.toArray(e2));

                    Bridge.Test.NUnit.Assert.AreEqual("34", s2, "One is null");

                    var e3 = System.Array.init([], System.Object);
                    var s3 = System.String.concat(Bridge.toArray(e3));

                    Bridge.Test.NUnit.Assert.AreEqual("", s3, "Empty");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328", {
        statics: {
            methods: {
                TestOptionalParamsForClasses: function () {
                    var l1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.ClassLink("url", "test", "some");
                    Bridge.Test.NUnit.Assert.AreEqual("some", l1.name);

                    var l2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.ClassLink2("url2", "test2", void 0);
                    Bridge.Test.NUnit.Assert.NotNull(l2.name);

                    var l3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.ClassLink3("url3", "test3", void 0);
                    Bridge.Test.NUnit.Assert.AreEqual("url3", l3.Url);
                    Bridge.Test.NUnit.Assert.AreEqual("test3", l3.Text);
                    Bridge.Test.NUnit.Assert.NotNull(l3.Name.$clone());
                    Bridge.Test.NUnit.Assert.AreEqual(0, l3.Name.Value);
                },
                TestOptionalParamsForStructs: function () {
                    var l1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink.$ctor1("url", "test", "some");
                    Bridge.Test.NUnit.Assert.AreEqual("some", l1.name);

                    var l2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink2.$ctor1("url2", "test2", void 0);
                    Bridge.Test.NUnit.Assert.NotNull(l2.name);

                    var l3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink3.$ctor1("url3", "test3", void 0);
                    Bridge.Test.NUnit.Assert.AreEqual("url3", l3.Url);
                    Bridge.Test.NUnit.Assert.AreEqual("test3", l3.Text);
                    Bridge.Test.NUnit.Assert.NotNull(l3.Name.$clone());
                    Bridge.Test.NUnit.Assert.AreEqual(0, l3.Name.Value);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.ClassLink", {
        $kind: "nested class",
        fields: {
            name: null
        },
        ctors: {
            ctor: function (url, text, name) {
                if (name === void 0) { name = "some"; }

                this.$initialize();
                this.name = name;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.ClassLink2", {
        $kind: "nested class",
        fields: {
            name: null
        },
        ctors: {
            init: function () {
                this.name = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional2$1(System.String))();
            },
            ctor: function (url, text, name) {
                if (name === void 0) { name = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional2$1(System.String))(); }

                this.$initialize();
                this.name = name;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.ClassLink3", {
        $kind: "nested class",
        fields: {
            Name: null
        },
        props: {
            Url: null,
            Text: null
        },
        ctors: {
            init: function () {
                this.Name = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1(System.Int32))();
            },
            ctor: function (url, text, name) {
                if (name === void 0) { name = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1(System.Int32))(); }

                this.$initialize();
                this.Name = name.$clone();
                this.Url = url;
                this.Text = text;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional2$1", function (T) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional2$1(T))(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1", function (T) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1(T))(); }
            }
        },
        props: {
            Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            $ctor1: function (v) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1(T).ctor.call(this);
                this.Value = v;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3587563249, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1(T))) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1(T))();
                s.Value = this.Value;
                return s;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink(); }
            }
        },
        fields: {
            name: null
        },
        ctors: {
            $ctor1: function (url, text, name) {
                if (name === void 0) { name = "some"; }

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink.ctor.call(this);
                this.name = name;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3737080868, this.name]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink)) {
                    return false;
                }
                return Bridge.equals(this.name, o.name);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink();
                s.name = this.name;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink2", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink2(); }
            }
        },
        fields: {
            name: null
        },
        ctors: {
            init: function () {
                this.name = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional2$1(System.String))();
            },
            $ctor1: function (url, text, name) {
                if (name === void 0) { name = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional2$1(System.String))(); }

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink2.ctor.call(this);
                this.name = name;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3740357668, this.name]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink2)) {
                    return false;
                }
                return Bridge.equals(this.name, o.name);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink2();
                s.name = this.name;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink3", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink3(); }
            }
        },
        fields: {
            Name: null
        },
        props: {
            Url: null,
            Text: null
        },
        ctors: {
            init: function () {
                this.Name = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1(System.Int32))();
            },
            $ctor1: function (url, text, name) {
                if (name === void 0) { name = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.Optional3$1(System.Int32))(); }

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink3.ctor.call(this);
                this.Name = name.$clone();
                this.Url = url;
                this.Text = text;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3740423204, this.Name, this.Url, this.Text]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink3)) {
                    return false;
                }
                return Bridge.equals(this.Name, o.Name) && Bridge.equals(this.Url, o.Url) && Bridge.equals(this.Text, o.Text);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1328.StructLink3();
                s.Name = this.Name.$clone();
                s.Url = this.Url;
                s.Text = this.Text;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339", {
        statics: {
            methods: {
                TestAccessingConstantsFromDerivedClass: function () {
                    var s = "ing";

                    Bridge.Test.NUnit.Assert.AreEqual("String", (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.FooBase.Bar || "") + (s || ""));
                    Bridge.Test.NUnit.Assert.AreEqual("String", (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.FooBase.Bar || "") + (s || ""));
                    Bridge.Test.NUnit.Assert.AreEqual("String", (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.FooBase.Bar || "") + (s || ""));

                    Bridge.Test.NUnit.Assert.AreEqual("Doing", (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo3.Bar || "") + (s || ""));
                    Bridge.Test.NUnit.Assert.AreEqual("Doing", (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo3.Bar || "") + (s || ""));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.FooBase", {
        $kind: "nested class",
        statics: {
            fields: {
                Bar: null
            },
            ctors: {
                init: function () {
                    this.Bar = "Str";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340", {
        statics: {
            methods: {
                TestStructGenericMembersDefaultValue: function () {
                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).ctor();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value1, "int 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value2, "int 2");

                    var o1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Decimal)).ctor();

                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), o1.Value1, "decimal 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), o1.Value2, "decimal 2");

                    var o2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64)).ctor();

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), o2.Value1, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), o2.Value2, "long 2");

                    var o3 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Boolean)).ctor();

                    Bridge.Test.NUnit.Assert.AreEqual(false, o3.Value1, "bool 1");
                    Bridge.Test.NUnit.Assert.AreEqual(false, o3.Value2, "bool 2");

                    var o4 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String)).ctor();

                    Bridge.Test.NUnit.Assert.Null(o4.Value1, "string 1");
                    Bridge.Test.NUnit.Assert.Null(o4.Value2, "string 2");

                    var o5 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32))).ctor();

                    Bridge.Test.NUnit.Assert.NotNull(o5.Value1.$clone(), "Data<int> 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o5.Value1.Value1, "Data<int>.Value1 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o5.Value1.Value2, "Data<int>.Value1 2");
                    Bridge.Test.NUnit.Assert.NotNull(o5.Value2.$clone(), "Data<int> 2");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o5.Value2.Value1, "Data<int>.Value2 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o5.Value2.Value2, "Data<int>.Value2 2");

                    var o6 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.Int32))).ctor();

                    Bridge.Test.NUnit.Assert.Null(o6.Value1, "DataClass<int> 1");
                    Bridge.Test.NUnit.Assert.Null(o6.Value2, "DataClass<int> 2");
                },
                TestStructTwoGenericMembersDefaultValue: function () {
                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$2(System.Int32,System.Decimal))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value1, "int 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), o.Value2, "decimal 2");

                    var o1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$2(System.Int64,System.Boolean))();

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), o1.Value1, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(false, o1.Value2, "bool 2");

                    var o2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$2(System.Double,System.String))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o2.Value1, "double 1");
                    Bridge.Test.NUnit.Assert.Null(o2.Value2, "string 2");
                },
                TestClassGenericMembersDefaultValue: function () {
                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.Int32))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value1, "int 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value2, "int 2");

                    var o1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.Decimal))();

                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), o1.Value1, "decimal 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), o1.Value2, "decimal 2");

                    var o2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.Int64))();

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), o2.Value1, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), o2.Value2, "long 2");

                    var o3 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.Boolean))();

                    Bridge.Test.NUnit.Assert.AreEqual(false, o3.Value1, "bool 1");
                    Bridge.Test.NUnit.Assert.AreEqual(false, o3.Value2, "bool 2");

                    var o4 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.String))();

                    Bridge.Test.NUnit.Assert.Null(o4.Value1, "string 1");
                    Bridge.Test.NUnit.Assert.Null(o4.Value2, "string 2");

                    var o5 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)))();

                    Bridge.Test.NUnit.Assert.NotNull(o5.Value1.$clone(), "Data<int> 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o5.Value1.Value1, "Data<int>.Value1 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o5.Value1.Value2, "Data<int>.Value1 2");
                    Bridge.Test.NUnit.Assert.NotNull(o5.Value2.$clone(), "Data<int> 2");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o5.Value2.Value1, "Data<int>.Value2 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, o5.Value2.Value2, "Data<int>.Value2 2");

                    var o6 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.Int32)))();

                    Bridge.Test.NUnit.Assert.Null(o6.Value1, "DataClass<int> 1");
                    Bridge.Test.NUnit.Assert.Null(o6.Value2, "DataClass<int> 2");
                },
                TestClassTwoGenericMembersDefaultValue: function () {
                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$2(System.Int32,System.Decimal))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value1, "int 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), o.Value2, "decimal 2");

                    var o1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$2(System.Int64,System.Boolean))();

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), o1.Value1, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(false, o1.Value2, "bool 2");

                    var o2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$2(System.Double,System.String))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o2.Value1, "double 1");
                    Bridge.Test.NUnit.Assert.Null(o2.Value2, "string 2");
                },
                TestClass1TwoGenericInheritedMembersDefaultValue: function () {
                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass1$2(System.Int32,System.Decimal))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value1, "int 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), o.Value2, "decimal 2");

                    var o1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass1$2(System.Int64,System.Boolean))();

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), o1.Value1, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(false, o1.Value2, "bool 2");

                    var o2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass1$2(System.Double,System.String))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o2.Value1, "double 1");
                    Bridge.Test.NUnit.Assert.Null(o2.Value2, "string 2");
                },
                TestClass2TwoGenericInheritedMembersDefaultValue: function () {
                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass2$2(System.Decimal,System.Boolean))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value1, "int 1");
                    Bridge.Test.NUnit.Assert.Null(o.Value2, "string 2");
                },
                TestClass3TwoGenericInheritedMembersDefaultValue: function () {
                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass3$2(System.Int64,System.Decimal))();

                    Bridge.Test.NUnit.Assert.AreEqual(0, o.Value1, "int 1");
                    Bridge.Test.NUnit.Assert.Null(o.Value2, "string 2");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), o.Value3, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), o.Value4, "decimal 4");
                },
                TestStructStaticIntArray: function () {
                    var $t, $t1, $t2, $t3, $t4, $t5;
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32).array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32).array)]);
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32).array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32).array)]);
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32).array[System.Array.index(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32).array)]);

                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).array)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).array)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).array[System.Array.index(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).array)].$clone());

                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).ctor();
                    Bridge.Test.NUnit.Assert.AreEqual(0, ($t = o.ReturnArray())[System.Array.index(0, $t)]);
                    Bridge.Test.NUnit.Assert.AreEqual(0, ($t1 = o.ReturnArray())[System.Array.index(1, $t1)]);
                    Bridge.Test.NUnit.Assert.AreEqual(0, ($t2 = o.ReturnArray())[System.Array.index(2, $t2)]);

                    var o1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32))).ctor();
                    Bridge.Test.NUnit.Assert.NotNull(($t3 = o1.ReturnArray())[System.Array.index(0, $t3)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(($t4 = o1.ReturnArray())[System.Array.index(1, $t4)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(($t5 = o1.ReturnArray())[System.Array.index(2, $t5)].$clone());
                },
                TestStructStaticLongArray: function () {
                    var $t, $t1, $t2, $t3, $t4, $t5;
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64).array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64).array)]);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64).array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64).array)]);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64).array[System.Array.index(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64).array)]);

                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64)).array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64)).array)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64)).array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64)).array)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64)).array[System.Array.index(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64)).array)].$clone());

                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64)).ctor();
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), ($t = o.ReturnArray())[System.Array.index(0, $t)]);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), ($t1 = o.ReturnArray())[System.Array.index(1, $t1)]);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), ($t2 = o.ReturnArray())[System.Array.index(2, $t2)]);

                    var o1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int64))).ctor();
                    Bridge.Test.NUnit.Assert.NotNull(($t3 = o1.ReturnArray())[System.Array.index(0, $t3)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(($t4 = o1.ReturnArray())[System.Array.index(1, $t4)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(($t5 = o1.ReturnArray())[System.Array.index(2, $t5)].$clone());
                },
                TestStructStaticStringArray: function () {
                    var $t, $t1, $t2, $t3, $t4, $t5;
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String).array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String).array)]);
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String).array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String).array)]);
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String).array[System.Array.index(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String).array)]);

                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String)).array[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String)).array)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String)).array[System.Array.index(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String)).array)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String)).array[System.Array.index(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String)).array)].$clone());

                    var o = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String)).ctor();
                    Bridge.Test.NUnit.Assert.Null(($t = o.ReturnArray())[System.Array.index(0, $t)]);
                    Bridge.Test.NUnit.Assert.Null(($t1 = o.ReturnArray())[System.Array.index(1, $t1)]);
                    Bridge.Test.NUnit.Assert.Null(($t2 = o.ReturnArray())[System.Array.index(2, $t2)]);

                    var o1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.String))).ctor();
                    Bridge.Test.NUnit.Assert.NotNull(($t3 = o1.ReturnArray())[System.Array.index(0, $t3)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(($t4 = o1.ReturnArray())[System.Array.index(1, $t4)].$clone());
                    Bridge.Test.NUnit.Assert.NotNull(($t5 = o1.ReturnArray())[System.Array.index(2, $t5)].$clone());
                },
                TestStaticClassGenericMembersDefaultValue: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.Int32).Value1, "int 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.Int32).Value2, "int 2");

                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.Decimal).Value1, "decimal 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.Decimal).Value2, "decimal 2");

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.Int64).Value1, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.Int64).Value2, "long 2");

                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.Boolean).Value1, "bool 1");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.Boolean).Value2, "bool 2");

                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.String).Value1, "string 1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(System.String).Value2, "string 2");

                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).Value1.$clone(), "Data<int> 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).Value1.Value1, "Data<int>.Value1 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).Value1.Value2, "Data<int>.Value1 2");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).Value2.$clone(), "Data<int> 2");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).Value2.Value1, "Data<int>.Value2 1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(System.Int32)).Value2.Value2, "Data<int>.Value2 2");

                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.Int32)).Value1, "DataClass<int> 1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1(System.Int32)).Value2, "DataClass<int> 2");
                },
                TestStaticClassTwoGenericMembersDefaultValue: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.Decimal).Value1, "int 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.Decimal).Value2, "decimal 2");

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int64,System.Boolean).Value1, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int64,System.Boolean).Value2, "bool 2");

                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Double,System.String).Value1, "double 1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Double,System.String).Value2, "string 2");
                },
                TestStaticClass1TwoGenericInheritedMembersDefaultValue: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.Decimal).Value1, "int 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.Decimal).Value2, "decimal 2");

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int64,System.Boolean).Value1, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int64,System.Boolean).Value2, "bool 2");

                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Double,System.String).Value1, "double 1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Double,System.String).Value2, "string 2");
                },
                TestStaticClass2TwoGenericInheritedMembersDefaultValue: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.String).Value1, "int 1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.String).Value2, "string 2");
                },
                TestStaticClass3TwoGenericInheritedMembersDefaultValue: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.String).Value1, "int 1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.String).Value2, "string 2");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass3$2(System.Int64,System.Decimal).Value3, "long 1");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass3$2(System.Int64,System.Decimal).Value4, "decimal 4");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1", function (T) { return {
        $kind: "nested struct",
        statics: {
            fields: {
                array: null
            },
            ctors: {
                init: function () {
                    this.array = System.Array.init(3, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }
            },
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(T))(); }
            }
        },
        fields: {
            Value2: Bridge.getDefaultValue(T)
        },
        props: {
            Value1: Bridge.getDefaultValue(T)
        },
        ctors: {
            $ctor1: function (v1, v2) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(T).ctor.call(this);
                this.Value1 = v1;
                this.Value2 = v2;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            ReturnArray: function () {
                return System.Array.init(3, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            },
            getHashCode: function () {
                var h = Bridge.addHash([1635017028, this.Value2, this.Value1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(T))) {
                    return false;
                }
                return Bridge.equals(this.Value2, o.Value2) && Bridge.equals(this.Value1, o.Value1);
            },
            $clone: function (to) {
                var s = to || new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$1(T))();
                s.Value2 = this.Value2;
                s.Value1 = this.Value1;
                return s;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$2", function (T, K) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$2(T,K))(); }
            }
        },
        fields: {
            Value2: Bridge.getDefaultValue(K)
        },
        props: {
            Value1: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1635017028, this.Value2, this.Value1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$2(T,K))) {
                    return false;
                }
                return Bridge.equals(this.Value2, o.Value2) && Bridge.equals(this.Value1, o.Value1);
            },
            $clone: function (to) {
                var s = to || new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.Data$2(T,K))();
                s.Value2 = this.Value2;
                s.Value1 = this.Value1;
                return s;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$1", function (T) { return {
        $kind: "nested class",
        fields: {
            Value2: Bridge.getDefaultValue(T)
        },
        props: {
            Value1: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$2", function (T, K) { return {
        $kind: "nested class",
        fields: {
            Value2: Bridge.getDefaultValue(K)
        },
        props: {
            Value1: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$1", function (T) { return {
        $kind: "nested class",
        statics: {
            fields: {
                Value2: Bridge.getDefaultValue(T)
            },
            props: {
                Value1: Bridge.getDefaultValue(T)
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2", function (T, K) { return {
        $kind: "nested class",
        statics: {
            fields: {
                Value2: Bridge.getDefaultValue(K)
            },
            props: {
                Value1: Bridge.getDefaultValue(T)
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341", {
        statics: {
            methods: {
                TestPlainObject: function () {
                    var $t, $t1;
                    var o1 = { A: 1 };
                    Bridge.Test.NUnit.Assert.NotNull(o1, "o1 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o1.A, "o1.A == 1");

                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o1.getHashCode), "o1 has no getHashCode");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o1.toJSON), "o1 has no toJSON");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o1.ctor), "o1 has no ctor");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o1.equals), "o1 has no equals");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o1.A), "o1 has a");

                    var o2 = { A: 1, B: "2" };
                    Bridge.Test.NUnit.Assert.NotNull(o2, "o2 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o2.A, "o2.A == 1");
                    Bridge.Test.NUnit.Assert.AreEqual("2", o2.B, "o2.B == \"2\"");

                    var o3 = { A: 1, B: ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 1, $t) };
                    Bridge.Test.NUnit.Assert.NotNull(o3, "o3 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o3.A, "o3.A == 1");
                    Bridge.Test.NUnit.Assert.NotNull(o3.B.$clone(), "o3.B not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o3.B.Value1, "o3.B.Value1 == 1");

                    var o4 = { A: 1, B: ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 1, $t) };
                    Bridge.Test.NUnit.Assert.NotNull(o4, "o4 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o4.A, "o4.A == 1");
                    Bridge.Test.NUnit.Assert.NotNull(o4.B.$clone(), "o4.B not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o4.B.Value1, "o4.B.Value1 == 1");

                    var o5 = { A: 1, B: ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB(), $t.Value1 = 1, $t.Value2 = ($t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t1.Value1 = 1, $t1), $t) };
                    Bridge.Test.NUnit.Assert.NotNull(o5, "o5 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o5.A, "o5.A == 1");
                    Bridge.Test.NUnit.Assert.NotNull(o5.B, "o5.B not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o5.B.Value1, "o5.B.Value1 == 1");
                    Bridge.Test.NUnit.Assert.NotNull(o5.B.Value2.$clone(), "o5.B.Value2 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o5.B.Value2.Value1, "o5.B.Value2.Value1 == 1");

                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o5.getHashCode), "o5 has no getHashCode");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o5.toJSON), "o5 has no toJSON");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o5.$constructor), "o5 has no $constructor");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o5.equals), "o5 has no equals");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o5.A), "o5 has a");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o5.B), "o5 has b");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o5.B.Value1), "o5.B has getValue1");
                },
                TestAnonymousTypeCreation: function () {
                    var $t, $t1;
                    var o1 = new $asm.$AnonymousType$1(1);
                    Bridge.Test.NUnit.Assert.NotNull(o1, "o1 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o1.A, "o1.A == 1");

                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o1.getHashCode), "o1 has getHashCode");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o1.toJSON), "o1 has toJSON");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o1.ctor), "o1 has ctor");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o1.equals), "o1 has equals");

                    var o2 = new $asm.$AnonymousType$2(1, "2");
                    Bridge.Test.NUnit.Assert.NotNull(o2, "o2 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o2.A, "o2.A == 1");
                    Bridge.Test.NUnit.Assert.AreEqual("2", o2.B, "o2.B == \"2\"");

                    var o3 = new $asm.$AnonymousType$3(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 1, $t));
                    Bridge.Test.NUnit.Assert.NotNull(o3, "o3 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o3.A, "o3.A == 1");
                    Bridge.Test.NUnit.Assert.NotNull(o3.B.$clone(), "o3.B not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o3.B.Value1, "o3.B.Value1 == 1");

                    var o4 = new $asm.$AnonymousType$3(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 1, $t));
                    Bridge.Test.NUnit.Assert.NotNull(o4, "o4 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o4.A, "o4.A == 1");
                    Bridge.Test.NUnit.Assert.NotNull(o4.B.$clone(), "o4.B not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o4.B.Value1, "o4.B.Value1 == 1");

                    var o5 = new $asm.$AnonymousType$4(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB(), $t.Value1 = 1, $t.Value2 = ($t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t1.Value1 = 1, $t1), $t));
                    Bridge.Test.NUnit.Assert.NotNull(o5, "o5 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o5.A, "o5.A == 1");
                    Bridge.Test.NUnit.Assert.NotNull(o5.B, "o5.B not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o5.B.Value1, "o5.B.Value1 == 1");
                    Bridge.Test.NUnit.Assert.NotNull(o5.B.Value2.$clone(), "o5.B.Value2 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o5.B.Value2.Value1, "o5.B.Value2.Value1 == 1");

                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o5.getHashCode), "o5 has getHashCode");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o5.toJSON), "o5 has toJSON");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o5.ctor), "o5 has ctor");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o5.equals), "o5 has equals");
                },
                TestDiffStructHashCode: function () {
                    var $t;
                    var s = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 10, $t);
                    var s1 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA1(), $t.Value1 = 10, $t);

                    Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.getHashCode(s), Bridge.getHashCode(s1), "Structs of diff types with same fields and values should give diff hash codes");

                    var s2 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA2(), $t.Value2 = 10, $t);

                    Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.getHashCode(s), Bridge.getHashCode(s2), "Structs of diff types with same values should give diff hash codes");
                },
                TestDiffAnonymousTypesHashCode: function () {
                    var s = new $asm.$AnonymousType$5(10);
                    var s1 = new $asm.$AnonymousType$6(10);

                    Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.getHashCode(s), Bridge.getHashCode(s1), "Same field values should give diff hash codes");
                },
                Test: function (values) {
                    var o1 = values[System.Array.index(0, values)];
                    var o2 = values[System.Array.index(1, values)];
                    var o3 = values[System.Array.index(2, values)];
                    var o4 = values[System.Array.index(3, values)];
                    var o5 = values[System.Array.index(4, values)];
                    var o6 = values[System.Array.index(5, values)];

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.getHashCode(o1), Bridge.getHashCode(o2), "GetHashCode o1 == o2");
                    Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.getHashCode(o1), Bridge.getHashCode(o3), "GetHashCode o1 != o3");
                    Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.getHashCode(o1), Bridge.getHashCode(o4), "GetHashCode o1 != o4");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.getHashCode(o1), Bridge.getHashCode(o5), "GetHashCode o1 == o5");
                    Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.getHashCode(o1), Bridge.getHashCode(o6), "GetHashCode o1 != o6");

                    Bridge.Test.NUnit.Assert.True(Bridge.equals(o1, o2), "Equals o1 == o2");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(o1, o3), "Equals o1 != o3");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(o1, o4), "Equals o1 != o4");
                    Bridge.Test.NUnit.Assert.True(Bridge.equals(o1, o5), "Equals o1 == o5");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(o1, o6), "Equals o1 != o6");

                    Bridge.Test.NUnit.Assert.True(Bridge.equals(o2, o1), "Equals o2 == o1");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(o3, o1), "Equals o3 != o1");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(o4, o1), "Equals o4 != o1");
                    Bridge.Test.NUnit.Assert.True(Bridge.equals(o5, o1), "Equals o5 == o1");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(o6, o1), "Equals o6 != o1");
                },
                Test1AnonymousType: function () {
                    var o1 = new $asm.$AnonymousType$1(1);
                    var o2 = new $asm.$AnonymousType$1(1);
                    var o3 = new $asm.$AnonymousType$1(2);
                    var o4 = new $asm.$AnonymousType$7(1);
                    var o5 = o1;
                    var o6 = o3;

                    var values = System.Array.init([o1, o2, o3, o4, o5, o6], System.Object);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.Test(values);
                },
                Test2AnonymousType: function () {
                    var o1 = new $asm.$AnonymousType$2(1, "2");
                    var o2 = new $asm.$AnonymousType$2(1, "2");
                    var o3 = new $asm.$AnonymousType$2(1, "3");
                    var o4 = new $asm.$AnonymousType$8(1, "2");
                    var o5 = o1;
                    var o6 = o3;

                    var values = System.Array.init([o1, o2, o3, o4, o5, o6], System.Object);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.Test(values);
                },
                Test3AnonymousType: function () {
                    var $t;
                    var o1 = new $asm.$AnonymousType$9(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassA(), $t.Value1 = 1, $t));
                    var o2 = o1;
                    var o3 = new $asm.$AnonymousType$9(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassA(), $t.Value1 = 1, $t));
                    var o4 = new $asm.$AnonymousType$10(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassA(), $t.Value1 = 1, $t));
                    var o5 = o1;
                    var o6 = o3;

                    var values = System.Array.init([o1, o2, o3, o4, o5, o6], System.Object);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.Test(values);
                },
                Test4AnonymousType: function () {
                    var $t;
                    var o1 = new $asm.$AnonymousType$3(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 1, $t));
                    var o2 = new $asm.$AnonymousType$3(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 1, $t));
                    var o3 = new $asm.$AnonymousType$3(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 2, $t));
                    var o4 = new $asm.$AnonymousType$11(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t.Value1 = 1, $t));
                    var o5 = o1;
                    var o6 = o3;

                    var values = System.Array.init([o1, o2, o3, o4, o5, o6], System.Object);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.Test(values);
                },
                Test5AnonymousType: function () {
                    var $t, $t1;
                    var o1 = new $asm.$AnonymousType$4(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB(), $t.Value1 = 1, $t.Value2 = ($t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t1.Value1 = 1, $t1), $t));
                    var o2 = o1;
                    var o3 = new $asm.$AnonymousType$4(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB(), $t.Value1 = 1, $t.Value2 = ($t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t1.Value1 = 1, $t1), $t));
                    var o4 = new $asm.$AnonymousType$12(1, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB(), $t.Value1 = 1, $t.Value2 = ($t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(), $t1.Value1 = 1, $t1), $t));
                    var o5 = o1;
                    var o6 = o3;

                    var values = System.Array.init([o1, o2, o3, o4, o5, o6], System.Object);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.Test(values);
                }
            }
        }
    });

    Bridge.define("$AnonymousType$1", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (a) {
                this.A = a;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$1)) {
                    return false;
                }
                return Bridge.equals(this.A, o.A);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196186, this.A]);
                return h;
            },
            toJSON: function () {
                return {
                    A : this.A
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"A","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_A","t":8,"rt":System.Int32,"fg":"A","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"A"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$2", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (a, b) {
                this.A = a;
                this.B = b;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$2)) {
                    return false;
                }
                return Bridge.equals(this.A, o.A) && Bridge.equals(this.B, o.B);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196187, this.A, this.B]);
                return h;
            },
            toJSON: function () {
                return {
                    A : this.A,
                    B : this.B
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"A","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_A","t":8,"rt":System.Int32,"fg":"A","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"A"},{"a":2,"n":"B","t":16,"rt":System.String,"g":{"a":2,"n":"get_B","t":8,"rt":System.String,"fg":"B"},"fn":"B"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$3", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (a, b) {
                this.A = a;
                this.B = b;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$3)) {
                    return false;
                }
                return Bridge.equals(this.A, o.A) && Bridge.equals(this.B, o.B);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196188, this.A, this.B]);
                return h;
            },
            toJSON: function () {
                return {
                    A : this.A,
                    B : this.B
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"A","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_A","t":8,"rt":System.Int32,"fg":"A","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"A"},{"a":2,"n":"B","t":16,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA,"g":{"a":2,"n":"get_B","t":8,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA,"fg":"B"},"fn":"B"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$4", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (a, b) {
                this.A = a;
                this.B = b;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$4)) {
                    return false;
                }
                return Bridge.equals(this.A, o.A) && Bridge.equals(this.B, o.B);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196189, this.A, this.B]);
                return h;
            },
            toJSON: function () {
                return {
                    A : this.A,
                    B : this.B
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"A","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_A","t":8,"rt":System.Int32,"fg":"A","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"A"},{"a":2,"n":"B","t":16,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB,"g":{"a":2,"n":"get_B","t":8,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB,"fg":"B"},"fn":"B"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$5", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (value1) {
                this.Value1 = value1;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$5)) {
                    return false;
                }
                return Bridge.equals(this.Value1, o.Value1);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196190, this.Value1]);
                return h;
            },
            toJSON: function () {
                return {
                    Value1 : this.Value1
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Value1","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_Value1","t":8,"rt":System.Int32,"fg":"Value1","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Value1"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$6", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (value2) {
                this.Value2 = value2;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$6)) {
                    return false;
                }
                return Bridge.equals(this.Value2, o.Value2);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196191, this.Value2]);
                return h;
            },
            toJSON: function () {
                return {
                    Value2 : this.Value2
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Value2","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_Value2","t":8,"rt":System.Int32,"fg":"Value2","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Value2"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$7", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (b) {
                this.B = b;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$7)) {
                    return false;
                }
                return Bridge.equals(this.B, o.B);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196192, this.B]);
                return h;
            },
            toJSON: function () {
                return {
                    B : this.B
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"B","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_B","t":8,"rt":System.Int32,"fg":"B","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"B"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$8", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (b, c) {
                this.B = b;
                this.C = c;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$8)) {
                    return false;
                }
                return Bridge.equals(this.B, o.B) && Bridge.equals(this.C, o.C);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196193, this.B, this.C]);
                return h;
            },
            toJSON: function () {
                return {
                    B : this.B,
                    C : this.C
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"B","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_B","t":8,"rt":System.Int32,"fg":"B","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"B"},{"a":2,"n":"C","t":16,"rt":System.String,"g":{"a":2,"n":"get_C","t":8,"rt":System.String,"fg":"C"},"fn":"C"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$9", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (a, b) {
                this.A = a;
                this.B = b;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$9)) {
                    return false;
                }
                return Bridge.equals(this.A, o.A) && Bridge.equals(this.B, o.B);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196194, this.A, this.B]);
                return h;
            },
            toJSON: function () {
                return {
                    A : this.A,
                    B : this.B
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"A","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_A","t":8,"rt":System.Int32,"fg":"A","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"A"},{"a":2,"n":"B","t":16,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassA,"g":{"a":2,"n":"get_B","t":8,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassA,"fg":"B"},"fn":"B"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$10", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (b, c) {
                this.B = b;
                this.C = c;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$10)) {
                    return false;
                }
                return Bridge.equals(this.B, o.B) && Bridge.equals(this.C, o.C);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550208474, this.B, this.C]);
                return h;
            },
            toJSON: function () {
                return {
                    B : this.B,
                    C : this.C
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"B","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_B","t":8,"rt":System.Int32,"fg":"B","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"B"},{"a":2,"n":"C","t":16,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassA,"g":{"a":2,"n":"get_C","t":8,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassA,"fg":"C"},"fn":"C"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$11", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (b, a) {
                this.B = b;
                this.A = a;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$11)) {
                    return false;
                }
                return Bridge.equals(this.B, o.B) && Bridge.equals(this.A, o.A);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550208730, this.B, this.A]);
                return h;
            },
            toJSON: function () {
                return {
                    B : this.B,
                    A : this.A
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"A","t":16,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA,"g":{"a":2,"n":"get_A","t":8,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA,"fg":"A"},"fn":"A"},{"a":2,"n":"B","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_B","t":8,"rt":System.Int32,"fg":"B","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"B"}]}; }
            }
        }
    });

    Bridge.define("$AnonymousType$12", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (b, c) {
                this.B = b;
                this.C = c;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$12)) {
                    return false;
                }
                return Bridge.equals(this.B, o.B) && Bridge.equals(this.C, o.C);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550208986, this.B, this.C]);
                return h;
            },
            toJSON: function () {
                return {
                    B : this.B,
                    C : this.C
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"B","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_B","t":8,"rt":System.Int32,"fg":"B","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"B"},{"a":2,"n":"C","t":16,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB,"g":{"a":2,"n":"get_C","t":8,"rt":Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB,"fg":"C"},"fn":"C"}]}; }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassA", {
        $kind: "nested class",
        props: {
            Value1: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeClassB", {
        $kind: "nested class",
        props: {
            Value1: 0,
            Value2: null
        },
        ctors: {
            init: function () {
                this.Value2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA(); }
            }
        },
        props: {
            Value1: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3676395529, this.Value1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA)) {
                    return false;
                }
                return Bridge.equals(this.Value1, o.Value1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA();
                s.Value1 = this.Value1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA1", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA1(); }
            }
        },
        props: {
            Value1: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([4498479113, this.Value1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA1)) {
                    return false;
                }
                return Bridge.equals(this.Value1, o.Value1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA1();
                s.Value1 = this.Value1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA2", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA2(); }
            }
        },
        props: {
            Value2: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([4515256329, this.Value2]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA2)) {
                    return false;
                }
                return Bridge.equals(this.Value2, o.Value2);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1341.SomeStructA2();
                s.Value2 = this.Value2;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1343", {
        statics: {
            methods: {
                TestDoubleTemplate: function () {
                    var s1 = System.String.format("{0} {1}", Bridge.box(1, System.Int32), Bridge.box(2, System.Int32));
                    var s2 = Bridge.getHashCode(System.String.format("{0} {1}", Bridge.box(1, System.Int32), Bridge.box(2, System.Int32)));

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.getHashCode(s1), s2);
                },
                TestInlineInGetHashCode: function () {
                    var s1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1343.M().getHashCode();
                    var s2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1343.M().getHashCode();

                    Bridge.Test.NUnit.Assert.AreEqual(s1, s2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1343.M", {
        $kind: "nested class",
        methods: {
            getHashCode: function () {
                return Bridge.getHashCode(System.String.format("{0} {1}", Bridge.box(1, System.Int32), Bridge.box(2, System.Int32)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1344", {
        statics: {
            methods: {
                TestLocalVariableWithNameProto: function () {
                    var $__proto__ = "1";
                    var r = $__proto__;

                    Bridge.Test.NUnit.Assert.AreEqual("1", $__proto__, "$__proto__");
                    Bridge.Test.NUnit.Assert.AreEqual("1", r, "r");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1345", {
        statics: {
            methods: {
                TestBoolInConsole: function () {
                    try {
                        var value = "hello world";

                        Bridge.Console.instance.bufferedOutput = "";
                        System.Console.Write(System.Boolean.toString(true));
                        System.Console.Write(System.Boolean.toString(false));
                        System.Console.Write(System.Boolean.toString(Bridge.referenceEquals(value, "hello world")));

                        Bridge.Test.NUnit.Assert.AreEqual("TrueFalseTrue", Bridge.Console.instance.bufferedOutput);

                        Bridge.Console.instance.bufferedOutput = "";
                        System.Console.WriteLine(System.Boolean.toString(true));
                        System.Console.WriteLine(System.Boolean.toString(false));
                        System.Console.WriteLine(System.Boolean.toString(Bridge.referenceEquals(value, "hello world")));

                        Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTestHelper.StringHelper.CombineLinesNL(["True", "False", "True"]), Bridge.Console.instance.bufferedOutput);
                    } finally {
                        Bridge.Console.instance.bufferedOutput = null;
                        Bridge.Console.hide();
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1348", {
        statics: {
            methods: {
                TestVoidTypeOf: function () {
                    var value = System.Void;
                    Bridge.Test.NUnit.Assert.AreEqual("System.Void", Bridge.Reflection.getTypeFullName(value));
                    Bridge.Test.NUnit.Assert.AreEqual("System.Type", Bridge.Reflection.getTypeFullName(Bridge.getType(value, System.Type)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1355", {
        statics: {
            methods: {
                TestLocalVariableWithNameWindow: function () {
                    var $window = "1";
                    var r = $window;

                    Bridge.Test.NUnit.Assert.AreEqual("1", $window, "window");
                    Bridge.Test.NUnit.Assert.AreEqual("1", r, "r");
                }
            }
        }
    });

    /** @namespace Bridge.ClientTest.Batch3.BridgeIssues */

    /**
     * The test here consists in ensuring expressions involving Bridge.Html5's
     Typed Array constants would always reference the browser's values.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge1373
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1373", {
        statics: {
            methods: {
                TypedArraysConstantsInExpressions: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(8, Bridge.Int.mul(Float32Array.BYTES_PER_ELEMENT, 2), "2x Float32Array's bytes per element is 8.");
                    Bridge.Test.NUnit.Assert.AreEqual(16, Bridge.Int.mul(Float64Array.BYTES_PER_ELEMENT, 2), "2x Float64Array's bytes per element is 16.");
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.Int.mul(Int16Array.BYTES_PER_ELEMENT, 2), "2x Int16Array's bytes per element is 4.");
                    Bridge.Test.NUnit.Assert.AreEqual(8, Bridge.Int.mul(Int32Array.BYTES_PER_ELEMENT, 2), "2x Int32Array's bytes per element is 8.");
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.Int.mul(Int8Array.BYTES_PER_ELEMENT, 2), "2x Int8Array's bytes per element is 2.");
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.Int.mul(Uint16Array.BYTES_PER_ELEMENT, 2), "2x Uint16Array's bytes per element is 4.");
                    Bridge.Test.NUnit.Assert.AreEqual(8, Bridge.Int.mul(Uint32Array.BYTES_PER_ELEMENT, 2), "2x Uint32Array's bytes per element is 8.");
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.Int.mul(Uint8Array.BYTES_PER_ELEMENT, 2), "2x Uint8Array's bytes per element is 2.");
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.Int.mul(Uint8ClampedArray.BYTES_PER_ELEMENT, 2), "2x Uint8ClampedArray's bytes per element is 2.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374", {
        statics: {
            props: {
                Value: 0
            },
            methods: {
                StaticIntConverter: function (i) {
                    return Bridge.toString((((Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374.Value + i) | 0)));
                },
                TestConvertAllForIntListStaticMethod: function () {
                    var l = System.Array.init([1, 2, 3], System.Int32);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374.Value = 100;

                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["101", "102", "103"], System.String), System.Array.convertAll(l, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374.StaticIntConverter));
                },
                TestConvertAllForIntListInstanceMethod: function () {
                    var $t;
                    var l = System.Array.init([1, 2, 3], System.Int32);

                    var t = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374.ScopeContainer(), $t.Value = 10, $t);

                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["11", "12", "13"], System.String), System.Array.convertAll(l, Bridge.fn.cacheBind(t, t.InstanceIntConverter)));
                },
                TestConvertAllForIntListLambda: function () {
                    var l = System.Array.init([1, 2, 3], System.Int32);

                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["1", "2", "3"], System.String), System.Array.convertAll(l, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374.f1));
                },
                TestConvertAllForNullConverter: function () {
                    var l = System.Array.init([1, 2, 3], System.Int32);

                    var converter = null;

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, function () {
                        System.Array.convertAll(l, converter);
                    }, "Null converter throws exception");
                },
                TestConvertAllForNullArray: function () {
                    var l = null;

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, function () {
                        System.Array.convertAll(l, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374.f2);
                    }, "Null array throws exception");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374, {
        f1: function (x) {
            return Bridge.toString(x);
        },
        f2: function (x) {
            return x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1374.ScopeContainer", {
        $kind: "nested class",
        props: {
            Value: 0
        },
        methods: {
            InstanceIntConverter: function (i) {
                return Bridge.toString((((this.Value + i) | 0)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378", {
        statics: {
            props: {
                x: 0
            },
            methods: {
                TestAssigmentWithMinusOperator: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.x = 1;

                    var a = 4;
                    var b = 2;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.x -= a - b;

                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.x);
                },
                TestAssigmentWithPlusOperator: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.x = 1;

                    var a = 4;
                    var b = 2;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.x += a + b;

                    Bridge.Test.NUnit.Assert.AreEqual(7, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.x);
                },
                TestAssigmentWithOverloadMinusOperator: function () {
                    var $int = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper(1);
                    $int = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper.op_Subtraction($int, ($int = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper.op_Subtraction($int, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper(7))));
                    Bridge.Test.NUnit.Assert.AreEqual(7, $int.ToInt());
                },
                TestAssigmentWithOverloadPlusOperator: function () {
                    var $int = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper(3);
                    $int = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper.op_Addition($int, ($int = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper.op_Addition($int, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper(1))));
                    Bridge.Test.NUnit.Assert.AreEqual(7, $int.ToInt());
                },
                TestAssigmentWithConditionalPlusOperator: function () {
                    var tabSize = 4;
                    var tabLength1 = 0;
                    var text = "        There is two tabs.";

                    for (var i = 0; i < text.length; i = (i + 1) | 0) {
                        tabLength1 = (tabLength1 + ((text.charCodeAt(i) === 9) ? tabSize : 1)) | 0;
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(26, tabLength1);
                },
                TestAssigmentWithConditionalMinusOperator: function () {
                    var tabSize = 5;
                    var tabLength1 = 1;
                    var text = "        There is two tabs.";

                    for (var i = 0; i < text.length; i = (i + 1) | 0) {
                        tabLength1 = (tabLength1 - ((text.charCodeAt(i) === 9) ? tabSize : 1)) | 0;
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(-25, tabLength1);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Addition: function (a, b) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper(((a.value + b.value) | 0));
                },
                op_Subtraction: function (a, b) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1378.IntWrapper(((a.value - b.value) | 0));
                }
            }
        },
        fields: {
            value: 0
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.value = value;
            }
        },
        methods: {
            ToInt: function () {
                return this.value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1379", {
        statics: {
            methods: {
                AssertDoubleNaN: function (value) {
                    Bridge.Test.NUnit.Assert.AreEqual("System.Double", Bridge.Reflection.getTypeFullName(Bridge.getType(value)));
                },
                AssertSingleNaN: function (value) {
                    Bridge.Test.NUnit.Assert.AreEqual("System.Single", Bridge.Reflection.getTypeFullName(Bridge.getType(value)));
                },
                TestNanFiniteType: function () {
                    var value1 = Bridge.box(NaN, System.Double, System.Double.format, System.Double.getHashCode);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1379.AssertDoubleNaN(value1);

                    var value2 = Bridge.box(Infinity, System.Double, System.Double.format, System.Double.getHashCode);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1379.AssertDoubleNaN(value2);

                    var value3 = Bridge.box(-Infinity, System.Double, System.Double.format, System.Double.getHashCode);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1379.AssertDoubleNaN(value3);

                    var value4 = Bridge.box(NaN, System.Single, System.Single.format, System.Single.getHashCode);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1379.AssertSingleNaN(value4);

                    var value5 = Bridge.box(Infinity, System.Single, System.Single.format, System.Single.getHashCode);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1379.AssertSingleNaN(value5);

                    var value6 = Bridge.box(-Infinity, System.Single, System.Single.format, System.Single.getHashCode);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1379.AssertSingleNaN(value6);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1381", {
        statics: {
            fields: {
                value: 0
            },
            ctors: {
                init: function () {
                    this.value = 4;
                }
            },
            methods: {
                TestReservedWordsUseCase: function () {
                    try {
                        var $Date = 3;

                        var m = System.DateTime.getMonth(System.DateTime.getDefaultValue());

                        Bridge.Test.NUnit.Assert.AreEqual(3, $Date, "Date");
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        Bridge.Test.NUnit.Assert.Fail("Date variable");
                    }

                    try {
                        var $String = 4;

                        var s = "".charCodeAt(0);

                        Bridge.Test.NUnit.Assert.AreEqual(4, $String, "String");
                    } catch ($e2) {
                        $e2 = System.Exception.create($e2);
                        Bridge.Test.NUnit.Assert.Fail("String variable");
                    }

                    try {
                        var $Number = 7;

                        Number();
                        (0);

                        Bridge.Test.NUnit.Assert.AreEqual(7, $Number, "Number");
                    } catch ($e3) {
                        $e3 = System.Exception.create($e3);
                        Bridge.Test.NUnit.Assert.Fail("Number variable");
                    }

                    try {
                        var document = 8;

                        var c = document.children;

                        Bridge.Test.NUnit.Assert.AreEqual(8, document, "document");
                    } catch ($e4) {
                        $e4 = System.Exception.create($e4);
                        Bridge.Test.NUnit.Assert.Fail("document variable");
                    }

                    try {
                        var $Bridge = 9;

                        Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1381.value, "value");
                        Bridge.Test.NUnit.Assert.AreEqual(9, $Bridge, "Bridge");
                    } catch ($e5) {
                        $e5 = System.Exception.create($e5);
                        Bridge.Test.NUnit.Assert.Fail("Bridge variable");
                    }
                },
                TestReservedWordsNewBatch: function () {
                    // Covers next batch of reserved words (except Date, Number, String that covered in TestReservedWordsUseCase test)
                    try {
                        var $Array = 2;

                        var m = System.Array.init([0, 2, 1], System.Int32);
                        var i = System.Array.indexOfT(m, 1);

                        Bridge.Test.NUnit.Assert.AreEqual(2, $Array, "Array");
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        Bridge.Test.NUnit.Assert.Fail("Array variable");
                    }

                    try {
                        var $eval = 3;

                        eval("");

                        Bridge.Test.NUnit.Assert.AreEqual(3, $eval, "eval");
                    } catch ($e2) {
                        $e2 = System.Exception.create($e2);
                        Bridge.Test.NUnit.Assert.Fail("eval variable");
                    }

                    try {
                        var $hasOwnProperty = 4;

                        var o = { };
                        o.hasOwnProperty("v");

                        Bridge.Test.NUnit.Assert.AreEqual(4, $hasOwnProperty, "hasOwnProperty");
                    } catch ($e3) {
                        $e3 = System.Exception.create($e3);
                        Bridge.Test.NUnit.Assert.Fail("hasOwnProperty variable");
                    }

                    try {
                        var $Infinity = 5;

                        var o1 = Infinity;

                        Bridge.Test.NUnit.Assert.AreEqual(5, $Infinity, "Infinity");
                    } catch ($e4) {
                        $e4 = System.Exception.create($e4);
                        Bridge.Test.NUnit.Assert.Fail("Infinity variable");
                    }

                    try {
                        var $isFinite = 6;

                        var o2 = isFinite(null);

                        Bridge.Test.NUnit.Assert.AreEqual(6, $isFinite, "isFinite");
                    } catch ($e5) {
                        $e5 = System.Exception.create($e5);
                        Bridge.Test.NUnit.Assert.Fail("isFinite variable");
                    }

                    try {
                        var $isNaN = 6;

                        var o3 = isNaN(null);

                        Bridge.Test.NUnit.Assert.AreEqual(6, $isNaN, "isNaN");
                    } catch ($e6) {
                        $e6 = System.Exception.create($e6);
                        Bridge.Test.NUnit.Assert.Fail("isNaN variable");
                    }

                    try {
                        var $isPrototypeOf = 7;

                        var o4 = { }.isPrototypeOf(null);

                        Bridge.Test.NUnit.Assert.AreEqual(7, $isPrototypeOf, "isPrototypeOf");
                    } catch ($e7) {
                        $e7 = System.Exception.create($e7);
                        Bridge.Test.NUnit.Assert.Fail("isPrototypeOf variable");
                    }

                    try {
                        var $Math = 8;

                        var o5 = Math.abs(0);

                        Bridge.Test.NUnit.Assert.AreEqual(8, $Math, "Math");
                    } catch ($e8) {
                        $e8 = System.Exception.create($e8);
                        Bridge.Test.NUnit.Assert.Fail("Math variable");
                    }

                    try {
                        var $NaN = 9;

                        var o6 = NaN;

                        Bridge.Test.NUnit.Assert.AreEqual(9, $NaN, "NaN");
                        Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.unbox(o6), $NaN, "Not NaN");
                    } catch ($e9) {
                        $e9 = System.Exception.create($e9);
                        Bridge.Test.NUnit.Assert.Fail("NaN variable");
                    }

                    try {
                        var $Object = 10;

                        var o7 = { };

                        Bridge.Test.NUnit.Assert.AreEqual(10, $Object, "Object");
                        Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.unbox(o7), $Object, "Not Object");
                    } catch ($e10) {
                        $e10 = System.Exception.create($e10);
                        Bridge.Test.NUnit.Assert.Fail("Object variable");
                    }

                    try {
                        var $prototype = 11;

                        var o8 = System.Int32.prototype;

                        Bridge.Test.NUnit.Assert.AreEqual(11, $prototype, "prototype");
                        Bridge.Test.NUnit.Assert.AreNotEqual(o8, $prototype, "Not prototype");
                    } catch ($e11) {
                        $e11 = System.Exception.create($e11);
                        Bridge.Test.NUnit.Assert.Fail("prototype variable");
                    }

                    try {
                        var $toString = 12;

                        var o9 = Bridge.toString({ });

                        Bridge.Test.NUnit.Assert.AreEqual(12, $toString, "toString");
                        Bridge.Test.NUnit.Assert.AreNotEqual(o9, $toString, "Not toString");
                    } catch ($e12) {
                        $e12 = System.Exception.create($e12);
                        Bridge.Test.NUnit.Assert.Fail("toString variable");
                    }

                    try {
                        var $undefined = 13;

                        var o10 = undefined;

                        Bridge.Test.NUnit.Assert.AreEqual(13, $undefined, "undefined");
                        Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.unbox(o10), $undefined, "Not undefined");
                    } catch ($e13) {
                        $e13 = System.Exception.create($e13);
                        Bridge.Test.NUnit.Assert.Fail("undefined variable");
                    }

                    try {
                        var $valueOf = 14;

                        var o11 = { }.valueOf();

                        Bridge.Test.NUnit.Assert.AreEqual(14, $valueOf, "valueOf");
                        Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.unbox(o11), $valueOf, "Not valueOf");
                    } catch ($e14) {
                        $e14 = System.Exception.create($e14);
                        Bridge.Test.NUnit.Assert.Fail("valueOf variable");
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1385", {
        statics: {
            methods: {
                TestIsTypedArray: function () {
                    var value = new Uint8Array(3);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(value, System.Array.type(System.Byte)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1389", {
        statics: {
            methods: {
                TestParamsIndexer: function () {
                    var app = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1389();
                    var list = app.getItem(["1", "2", "3", "4", "5"]);

                    Bridge.Test.NUnit.Assert.NotNull(list);
                    Bridge.Test.NUnit.Assert.AreEqual(5, System.Linq.Enumerable.from(list, System.String).count());
                    Bridge.Test.NUnit.Assert.AreEqual("1", System.Linq.Enumerable.from(list, System.String).first());
                    Bridge.Test.NUnit.Assert.AreEqual("5", System.Linq.Enumerable.from(list, System.String).last());
                }
            }
        },
        methods: {
            getItem: function (keys) {
                return keys;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390", {
        statics: {
            fields: {
                b: 0,
                a: 0,
                time: null,
                MinDate: null,
                d1: null,
                d2: null,
                ar1: null,
                ar2: null,
                order1: 0,
                order2: 0
            },
            ctors: {
                init: function () {
                    this.time = System.DateTime.getDefaultValue();
                    this.MinDate = System.DateTime.getDefaultValue();
                    this.b = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.a;
                    this.a = 5;
                    this.time = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.MinDate;
                    this.MinDate = System.DateTime.create(1800, 1, 1);
                    this.d1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.d2;
                    this.d2 = 6;
                    this.ar1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.ar2;
                    this.ar2 = System.Array.init([1], System.Int32);
                    this.order1 = 8;
                    this.order2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.order1;
                }
            },
            methods: {
                TestFieldInitializer: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.b);

                    // Ignore the test due to #3633
                    if (Bridge.Browser.isChrome && Bridge.Browser.chromeVersion >= 67) {
                        Bridge.Test.NUnit.Assert.True(true, "Test ignored in google chrome 67+ due to #3633 (https://github.com/bridgedotnet/Bridge/issues/3633).");
                    } else {
                        Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getMinValue(), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.time);
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.d1);
                    Bridge.Test.NUnit.Assert.AreEqual(null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.ar1);
                    Bridge.Test.NUnit.Assert.AreEqual(8, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1390.order2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391", {
        statics: {
            fields: {
                builder: null
            },
            props: {
                Builder: {
                    get: function () {
                        var $t;
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.builder || (($t = new System.Text.StringBuilder(), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.builder = $t, $t));
                    }
                }
            },
            methods: {
                TestStaticCtorOrder: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.Builder.clear();

                    // Now, types with no Ready/Autorun methods intialized on-demand (when first time accessing the type)
                    var f = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.Foo();
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.Bar();
                    Bridge.Test.NUnit.Assert.AreEqual("FooBar", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.builder.toString());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.Bar", {
        $kind: "nested class",
        statics: {
            fields: {
                i: 0
            },
            ctors: {
                init: function () {
                    this.i = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.Bar.Init();
                }
            },
            methods: {
                Init: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.Builder.append("Bar");
                    return 0;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.Foo", {
        $kind: "nested class",
        statics: {
            ctors: {
                ctor: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391.Builder.append("Foo");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391Ready", {
        statics: {
            methods: {
                TestStaticCtorOrderForClassHavingReady: function () {
                    // Now, types with no Ready/Autorun methods intialized on-demand (when first time accessing the type)
                    // However, classes with [Ready] initializes on Ready
                    var r = Bridge.$N1391Result;
                    Bridge.Test.NUnit.Assert.AreEqual("FooReadyBarReady", r, "Bridge.$N1391Result");
                    Bridge.Test.NUnit.Assert.AreEqual("FooReadyBarReady", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.Builder.toString(), "Current builder's state");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady", {
        statics: {
            fields: {
                builder: null
            },
            props: {
                Builder: {
                    get: function () {
                        var $t;
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.builder || (($t = new System.Text.StringBuilder(), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.builder = $t, $t));
                    }
                }
            },
            ctors: {
                init: function () {
                    Bridge.ready(this.RunMe);
                }
            },
            methods: {
                RunMe: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.Builder.clear();

                    // Now, types with no Ready/Autorun methods intialized on-demand (when first time accessing the type)
                    // However, classes with [Ready] initializes on Ready
                    var f = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.FooReady();
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.BarReady();

                    var r = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.Builder.toString();
Bridge.$N1391Result =                     r;
                }
            }
        },
        $entryPoint: true
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.BarReady", {
        $kind: "nested class",
        statics: {
            fields: {
                i: 0
            },
            ctors: {
                init: function () {
                    this.i = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.BarReady.InitReady();
                }
            },
            methods: {
                InitReady: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.Builder.append("BarReady");
                    return 0;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.FooReady", {
        $kind: "nested class",
        statics: {
            ctors: {
                ctor: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1391ToRunInitializationOnReady.Builder.append("FooReady");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1402", {
        statics: {
            methods: {
                TestLongClipping: function () {
                    var value = System.Int64.MaxValue;
                    Bridge.Test.NUnit.Assert.AreEqual(255, System.Int64.clipu8(value.shr(2)));
                    Bridge.Test.NUnit.Assert.AreEqual(-1, System.Int64.clip8(value.shr(2)));
                    Bridge.Test.NUnit.Assert.AreEqual(-1, System.Int64.clip16(value.shr(2)));
                    Bridge.Test.NUnit.Assert.AreEqual(65535, System.Int64.clipu16(value.shr(2)));
                    Bridge.Test.NUnit.Assert.AreEqual(-1, System.Int64.clip32(value.shr(2)));
                    Bridge.Test.NUnit.Assert.AreEqual(4294967295, System.Int64.clipu32(value.shr(2)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410", {
        statics: {
            props: {
                X: {
                    set: function (value) { }
                },
                Prop1: {
                    get: function () {
                        return 5;
                    },
                    set: function (value) { }
                }
            },
            methods: {
                Method1: function () {
                    return (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.X = 5.0, 5.0);
                },
                Method2: function (i) {
                    return i;
                },
                TestSetterOnly: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Method1());
                },
                TestIndexer: function () {
                    var $t, $t1;
                    var app = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410();
                    Bridge.Test.NUnit.Assert.AreEqual(2, (app.setItem(0, 2), 2));
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Method2(($t = (Bridge.Int.div(app.getItem(0), 2)) | 0, app.setItem(0, $t), $t)));
                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Method2(($t1 = (app.getItem(0) + 1) | 0, app.setItem(0, $t1), $t1)));
                },
                TestAssigmentWithOp: function () {
                    var $t, $t1;
                    var result = "test_";
                    var itm = "item";
                    var handler = function () {
                        return (result = (result || "") + (itm || ""));
                    };

                    var str = handler();
                    Bridge.Test.NUnit.Assert.AreEqual(str, result);
                    Bridge.Test.NUnit.Assert.AreEqual("test_item", str);

                    Bridge.Test.NUnit.Assert.AreEqual(2, (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Prop1 = 2, 2));
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Method2(($t = (Bridge.Int.div(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Prop1, 2)) | 0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Prop1 = $t, $t)));
                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Method2(($t1 = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Prop1 + 1) | 0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1410.Prop1 = $t1, $t1)));
                }
            }
        },
        methods: {
            getItem: function (v) {
                return 5;
            },
            setItem: function (v, value) { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411", {
        statics: {
            methods: {
                TestTemplateCtorThing: function () {
                    var c1 = 'test_string';
                    Bridge.Test.NUnit.Assert.AreEqual("test_string", c1);

                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Thing.ctor(1);
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(c2));
                },
                TestTemplateCtorDoodad: function () {
                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Doodad.ctor();
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(c1));
                    Bridge.Test.NUnit.Assert.AreDeepEqual(3, c1.Data);

                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Doodad.$ctor1(1);
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(c2));
                    Bridge.Test.NUnit.Assert.AreDeepEqual(4, c2.Data);
                },
                TestTemplateCtorGizmo: function () {
                    var c1 = 'test_gizmo5';
                    Bridge.Test.NUnit.Assert.AreEqual("test_gizmo5", c1);

                    var c2 = 'test_gizmo6';
                    Bridge.Test.NUnit.Assert.AreEqual("test_gizmo6", c2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Thing", {
        $kind: "nested class",
        statics: {
            methods: {
                getDefaultValue: function () {
                    return 'test_string';
                }
            }
        },
        props: {
            Data: 0
        },
        ctors: {
            ctor: function (x) {
                this.$initialize();
                // 2
                this.Data = 2;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Gizmo", {
        $kind: "nested class",
        statics: {
            methods: {
                getDefaultValue: function () {
                    return 'test_gizmo5';
                }
            }
        },
        props: {
            Data: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1428", {
        statics: {
            methods: {
                TestEqOperatorWithNull: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1428();

                    var test = new (System.Collections.Generic.List$1(Function)).ctor();
                    test.add(Bridge.fn.cacheBind(c, c.Method1));

                    Bridge.Test.NUnit.Assert.AreEqual(1, test.Count);
                    test.remove(Bridge.fn.cacheBind(c, c.Method1));
                    Bridge.Test.NUnit.Assert.AreEqual(0, test.Count);

                    var l1 = Bridge.fn.cacheBind(c, c.Method1);
                    var l2 = Bridge.fn.cacheBind(c, c.Method1);

                    Bridge.Test.NUnit.Assert.True(Bridge.staticEquals(l1, l2));

                    l1 = Bridge.fn.cacheBind(c, c.Method1);
                    l2 = Bridge.fn.cacheBind(c, c.Method2);

                    Bridge.Test.NUnit.Assert.False(Bridge.staticEquals(l1, l2));
                }
            }
        },
        methods: {
            Method1: function () { },
            Method2: function () { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1429", {
        statics: {
            methods: {
                TestEqOperatorWithNull: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1429.op_Equality(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1429(), null), "new Bridge1429() == null");

                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1429();
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1429();
                    var aa = a;

                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1429.op_Equality(a, b), "a == b");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1429.op_Inequality(a, aa), "a != aa");

                    var c = null;
                    var d = null;

                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1429.op_Inequality(c, d), "c != d");
                },
                op_Equality: function (a, b) {
                    return true;
                },
                op_Inequality: function (a, b) {
                    return true;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1430", {
        statics: {
            methods: {
                TestNestedNamespaceSupport: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Hi from inner Level1", Bridge.ClientTest.Batch3.BridgeIssues.Inner1430_Level1.Constants.TestConst);

                    var d1 = new Bridge.ClientTest.Batch3.BridgeIssues.Inner1430_Level1.Do();
                    Bridge.Test.NUnit.Assert.AreEqual(4, d1.GetFour());

                    Bridge.Test.NUnit.Assert.AreEqual("Hi from inner Level3", Bridge.ClientTest.Batch3.BridgeIssues.Inner1430_Level1.Inner1430_Level2.Constants.TestConst);

                    var d2 = new Bridge.ClientTest.Batch3.BridgeIssues.Inner1430_Level1.Inner1430_Level2.Do();
                    Bridge.Test.NUnit.Assert.AreEqual(5, d2.GetFive());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1448", {
        statics: {
            methods: {
                TestPlainForNonAnonymous: function () {
                    var $t;
                    var a = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1448.A(), $t.Data = 5, $t);

                    var plainee = Bridge.toPlain(a);

                    Bridge.Test.NUnit.Assert.NotNull(plainee, "plainee not null");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(plainee.Data), "plainee has data");
                    Bridge.Test.NUnit.Assert.AreEqual(5, plainee.Data, "plainee.Data == 5");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(plainee.getHashCode), "plainee has no getHashCode");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(plainee.toJSON), "plainee has no toJSON");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(plainee.$constructor), "plainee has no $constructor");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(plainee.equals), "plainee has no equals");
                },
                TestObjectLiteralProperty: function () {
                    var l = { V: { Data: 5 } };

                    var plainee = l.V;

                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(plainee), "plainee not null");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(plainee.Data), "plainee has data");
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.unbox(plainee.Data), "plainee.Data == 5");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(plainee.getHashCode), "plainee has no getHashCode");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(plainee.toJSON), "plainee has no toJSON");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(plainee.$constructor), "plainee has no $constructor");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(plainee.equals), "plainee has no equals");
                },
                TestToObjectLiteralAlias: function () {
                    var o1 = { A: 1 };
                    Bridge.Test.NUnit.Assert.NotNull(o1, "o1 not null");
                    Bridge.Test.NUnit.Assert.AreEqual(1, o1.A, "o1.A == 1");

                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o1.getHashCode), "o1 has no getHashCode");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o1.toJSON), "o1 has no toJSON");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o1.$constructor), "o1 has no $constructor");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o1.equals), "o1 has no equals");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o1.A), "o1 has a");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1448.A", {
        $kind: "nested class",
        fields: {
            Data: 0
        },
        methods: {
            DoSomething: function () {
                return this.Data;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1448.Plainer", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1458", {
        statics: {
            props: {
                Output: {
                    get: function () {
                        return Bridge.Console.instance.bufferedOutput;
                    },
                    set: function (value) {
                        Bridge.Console.instance.bufferedOutput = value;
                    }
                }
            },
            methods: {
                ClearOutput: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1458.Output = "";
                },
                ResetOutput: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1458.Output = null;
                    Bridge.Console.hide();
                },
                TestConsoleWriteLineForLong: function () {
                    var v = System.Int64(1);

                    System.Console.Write(v);
                    Bridge.Test.NUnit.Assert.AreEqual("1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1458.Output);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1458.ClearOutput();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1459", {
        statics: {
            methods: {
                TestHtmlElements: function () {
                    var root = Bridge.ClientTestHelper.HtmlHelper.FixtureElement;

                    var button = document.createElement("button");
                    root.appendChild(button);

                    Bridge.Test.NUnit.Assert.NotNull(button, "HTMLButtonElement created");

                    var n = Bridge.as(button, Node);
                    Bridge.Test.NUnit.Assert.NotNull(n, "Node");

                    var el = Bridge.as(n, Element);
                    Bridge.Test.NUnit.Assert.NotNull(el, "Element");

                    var he = Bridge.as(el, HTMLElement);
                    Bridge.Test.NUnit.Assert.NotNull(el, "HTMLElement");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467", {
        statics: {
            methods: {
                TestForeachTypeChecking: function () {
                    var $t, $t1, $t2, $t3, $t4;
                    Bridge.Test.NUnit.Assert.Throws$2(System.InvalidCastException, function () {
                        var $t;
                        $t = Bridge.getEnumerator(Bridge.cast(System.Array.init(["h"], System.String), System.Collections.IEnumerable));
                        try {
                            while ($t.moveNext()) {
                                var z = Bridge.cast($t.Current, System.Int32);
                                System.Console.WriteLine(z);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }, "(IEnumerable)new[] { \"h\" } foreach int");

                    Bridge.Test.NUnit.Assert.Throws$2(System.InvalidCastException, function () {
                        var $t;
                        $t = Bridge.getEnumerator(Bridge.cast(System.Array.init(["g"], System.String), System.Collections.IEnumerable));
                        try {
                            while ($t.moveNext()) {
                                var y = Bridge.cast($t.Current, System.Char);
                                System.Console.WriteLine(String.fromCharCode(y));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }, "(IEnumerable)new[] { \"g\" } foreach char");

                    $t = Bridge.getEnumerator(Bridge.cast(System.Array.init(["k"], System.String), System.Collections.IEnumerable));
                    try {
                        while ($t.moveNext()) {
                            var z1 = Bridge.cast($t.Current, System.String);
                            Bridge.Test.NUnit.Assert.AreEqual("k", z1, "string z1 in (IEnumerable)new[] { \"k\" } foreach string");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    $t1 = Bridge.getEnumerator(Bridge.cast(System.Array.init(["j"], System.String), System.Collections.IEnumerable));
                    try {
                        while ($t1.moveNext()) {
                            var z2 = $t1.Current;
                            Bridge.Test.NUnit.Assert.AreEqual("j", Bridge.unbox(z2), "string z2 in (IEnumerable)new[] { \"j\" } foreach var");
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    $t2 = Bridge.getEnumerator(Bridge.cast(System.Array.init([($t3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass1(), $t3.Value = 1, $t3)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass1), System.Collections.IEnumerable));
                    try {
                        while ($t2.moveNext()) {
                            var c = Bridge.cast($t2.Current, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass1);
                            Bridge.Test.NUnit.Assert.AreEqual(1, c.Value, "(IEnumerable)new[] { new SomeClass1 { Value = 1} } foreach SomeClass1");
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    $t3 = Bridge.getEnumerator(Bridge.cast(System.Array.init([($t4 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass2(), $t4.Value = 2, $t4)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass2), System.Collections.IEnumerable));
                    try {
                        while ($t3.moveNext()) {
                            var d = Bridge.cast($t3.Current, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass1);
                            Bridge.Test.NUnit.Assert.AreEqual(2, d.Value, "(IEnumerable)new[] { new SomeClass2 { Value = 1} } foreach SomeClass1");
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.Throws$2(System.InvalidCastException, function () {
                        var $t5, $t6;
                        $t5 = Bridge.getEnumerator(Bridge.cast(System.Array.init([($t6 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.AnotherClass(), $t6.Value = 3, $t6)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.AnotherClass), System.Collections.IEnumerable));
                        try {
                            while ($t5.moveNext()) {
                                var d1 = Bridge.cast($t5.Current, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass1);
                                System.Console.WriteLine(d1);
                            }
                        } finally {
                            if (Bridge.is($t5, System.IDisposable)) {
                                $t5.System$IDisposable$Dispose();
                            }
                        }
                    }, "(IEnumerable)new[] { new AnotherClass { Value = 3 } } foreach SomeClass1");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.AnotherClass", {
        $kind: "nested class",
        props: {
            Value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass1", {
        $kind: "nested class",
        props: {
            Value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1468", {
        statics: {
            methods: {
                TestArrayConcat: function () {
                    var array = System.Linq.Enumerable.from(System.Array.init(["h"], System.String), System.String).concat(System.Array.init(["h"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Linq.Enumerable.from(array, System.String).count());

                    var stringEnumerable = System.Linq.Enumerable.from(System.Array.init(["_"], System.String), System.String).concat(System.Array.init(["h"], System.String));
                    var stringArray = stringEnumerable.ToArray(System.String);
                    Bridge.Test.NUnit.Assert.AreEqual(2, stringArray.length);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1472", {
        statics: {
            fields: {
                time: false
            },
            ctors: {
                init: function () {
                    this.time = true;
                }
            },
            methods: {
                GetArray: function () {
                    var $t;
                    return (($t = !Bridge.ClientTest.Batch3.BridgeIssues.Bridge1472.time, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1472.time = $t, $t)) ? System.Array.init([1, 2, 3, 4], System.Int32) : System.Array.init([1, 2, 3], System.Int32);
                }
            }
        },
        methods: {
            TestMultiplyThisInTemplate: function () {
                var $t;
                var v = System.Array.init(4, 0, System.Int32);
                ($t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1472.GetArray(), System.Array.copy($t, 0, v, 0, $t.length));
                Bridge.Test.NUnit.Assert.AreEqual(0, v[System.Array.index(3, v)]);
            },
            TestSimpleMultipleKeyTemplate: function () {
                var sa = System.Array.init(["Hello", "There"], System.String);
                var sa2 = System.Array.init(2, null, System.String);
                System.Array.copy(sa, 0, sa2, 0, sa.length);
                Bridge.Test.NUnit.Assert.AreEqual(sa.length, sa2.length);
                Bridge.Test.NUnit.Assert.AreEqual(sa[System.Array.index(0, sa)], sa2[System.Array.index(0, sa2)]);
                Bridge.Test.NUnit.Assert.AreEqual(sa[System.Array.index(1, sa)], sa2[System.Array.index(1, sa2)]);

                var ia1;
                var dst;
                ia1 = System.Array.init([1, 2, 3, 4], System.Int32);
                dst = System.Array.init(4, 0, System.Int32);
                System.Array.copy(ia1, 0, dst, 0, ia1.length);
                Bridge.Test.NUnit.Assert.AreEqual(ia1.length, dst.length);
                Bridge.Test.NUnit.Assert.AreEqual(ia1[System.Array.index(0, ia1)], dst[System.Array.index(0, dst)]);
                Bridge.Test.NUnit.Assert.AreEqual(ia1[System.Array.index(3, ia1)], dst[System.Array.index(3, dst)]);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1476", {
        methods: {
            TestEscapedBrackets: function () {
                var r = new System.Text.RegularExpressions.Regex.ctor("(?<leftSet>(\\[|\\())(?<left>[^,]+)?,(?<right>[^\\]\\)]+)?(?<rightSet>(\\]|\\)))");
                var m = r.match("[0,1)]");

                Bridge.Test.NUnit.Assert.AreEqual(true, m.getSuccess());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1480", {
        methods: {
            TestOverloadUnaryOperator: function () {
                var $int = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1480.IntWrapper(3);
                $int = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1480.IntWrapper.op_Increment($int);
                Bridge.Test.NUnit.Assert.AreEqual(4, $int.ToInt(), "4");
                Bridge.Test.NUnit.Assert.AreEqual(5, ((($int = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1480.IntWrapper.op_Increment($int)))).ToInt(), "++4");
                Bridge.Test.NUnit.Assert.AreEqual(5, (Bridge.identity($int, (($int = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1480.IntWrapper.op_Increment($int))))).ToInt(), "5++");
                Bridge.Test.NUnit.Assert.AreEqual(6, ($int).ToInt(), "6");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1480.IntWrapper", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Increment: function (a) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1480.IntWrapper(((a.value + 1) | 0));
                }
            }
        },
        fields: {
            value: 0
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.value = value;
            }
        },
        methods: {
            ToInt: function () {
                return this.value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1485", {
        methods: {
            TestConstructorName: function () {
                var t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1485.TestName.ctor();

                Bridge.Test.NUnit.Assert.AreEqual(-1, t1.Constructor$1());
                Bridge.Test.NUnit.Assert.AreEqual("Init s", t1.Initialize$1("Init s"));
                Bridge.Test.NUnit.Assert.AreEqual(7, t1.Initialize(7));

                var t2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1485.TestName.$ctor1(5);

                Bridge.Test.NUnit.Assert.AreEqual(5, t2.Constructor$1());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1485.TestName", {
        $kind: "nested class",
        props: {
            Data: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Data = -1;
            },
            $ctor1: function (i) {
                this.$initialize();
                this.Data = i;
            }
        },
        methods: {
            Constructor$1: function () {
                return this.Data;
            },
            Initialize$1: function (s) {
                return s;
            },
            Initialize: function (i) {
                return i;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1486", {
        statics: {
            fields: {
                x: System.Int64(0),
                y: System.UInt64(0)
            },
            ctors: {
                init: function () {
                    this.x = System.Int64(15);
                    this.y = System.UInt64(27);
                }
            }
        },
        methods: {
            TestStaticLongInitialization: function () {
                Bridge.Test.NUnit.Assert.AreEqual("Int64", Bridge.Reflection.getTypeName(System.Int64), "long type");

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1486.x = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1486.x.inc();
                Bridge.Test.NUnit.Assert.True(System.Int64(16).equals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1486.x), "16");
            },
            TestLocalLongInitialization: function () {
                var x = System.Int64(100);
                Bridge.Test.NUnit.Assert.AreEqual("Int64", Bridge.Reflection.getTypeName(System.Int64), "long type");

                x = x.inc();
                Bridge.Test.NUnit.Assert.True(System.Int64(101).equals(x), "101");
            },
            TestStaticUlongInitialization: function () {
                Bridge.Test.NUnit.Assert.AreEqual("UInt64", Bridge.Reflection.getTypeName(System.UInt64), "ulong type");

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1486.y = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1486.y.inc();
                Bridge.Test.NUnit.Assert.True(System.UInt64(28).equals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1486.y), "28");
            },
            TestLocalUlongInitialization: function () {
                var x = System.UInt64(250);
                Bridge.Test.NUnit.Assert.AreEqual("UInt64", Bridge.Reflection.getTypeName(System.UInt64), "ulong type");

                x = x.inc();
                Bridge.Test.NUnit.Assert.True(System.UInt64(251).equals(x), "251");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489", {
        methods: {
            TestLongEnum: function () {
                var $enum = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489.Enum.A;
                Bridge.Test.NUnit.Assert.AreEqual("B", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489.Enum, ($enum.add(System.Int64(1)))));
                Bridge.Test.NUnit.Assert.AreEqual("B", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489.Enum, ((($enum = $enum.add(System.Int64(1)))))));
            },
            TestIntEnum: function () {
                var $enum = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489.IntEnum.C;
                Bridge.Test.NUnit.Assert.AreEqual("D", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489.IntEnum, ((($enum + 1) | 0))));
                Bridge.Test.NUnit.Assert.AreEqual("D", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489.IntEnum, ((($enum = ($enum + 1) | 0)))));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489.Enum", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: System.Int64(1),
                B: System.Int64(2)
            }
        },
        $utype: System.Int64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1489.IntEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                C: 3,
                D: 4
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1490", {
        methods: {
            TestEnumLong: function () {
                var a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1490.Enum.A;
                Bridge.Test.NUnit.Assert.True(a.equals(System.Int64(0)));

                var b = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1490.Enum2.A;
                Bridge.Test.NUnit.Assert.True(b.equals(System.Int64(0)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1490.Enum", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: System.Int64(0)
            }
        },
        $utype: System.Int64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1490.Enum2", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: System.Int64(0)
            }
        },
        $utype: System.Int64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1492", {
        methods: {
            TestEnumLong: function () {
                var $enum = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1492.Enum.A;

                Bridge.Test.NUnit.Assert.True($enum.equals(System.Int64(0)), "0");
                Bridge.Test.NUnit.Assert.True($enum.equals(System.Int64(0)), "0L");
                Bridge.Test.NUnit.Assert.True($enum.equals(System.Int64(0)), "0u");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1492.Enum", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: System.Int64(0)
            }
        },
        $utype: System.Int64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1493", {
        methods: {
            TestEnumLong: function () {
                var $enum = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1493.Enum.A;
                Bridge.Test.NUnit.Assert.True(System.UInt64(0).equals(System.Int64.clipu64($enum)), "ulong");
                Bridge.Test.NUnit.Assert.True(0 === System.Int64.clipu32($enum), "uint");
                Bridge.Test.NUnit.Assert.True(0 === System.Int64.clip32($enum), "int");
                Bridge.Test.NUnit.Assert.True(0 === System.Int64.clip16($enum), "short");
                Bridge.Test.NUnit.Assert.True(0 === System.Int64.clipu16($enum), "ushort");
                Bridge.Test.NUnit.Assert.True(0 === System.Int64.clipu8($enum), "byte");
                Bridge.Test.NUnit.Assert.True(0 === System.Int64.clip8($enum), "sbyte");
                Bridge.Test.NUnit.Assert.True(0 === System.Int64.toNumber($enum), "float");
                Bridge.Test.NUnit.Assert.True(0 === System.Int64.toNumber($enum), "double");
                Bridge.Test.NUnit.Assert.True(System.Decimal(0).equalsT(System.Decimal($enum, null, System.Int64)), "decimal");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1493.Enum", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: System.Int64(0)
            }
        },
        $utype: System.Int64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1499", {
        methods: {
            TestObjectStringCoalesceWorks: function () {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16;
                var def = Bridge.box(1, System.Int32);
                var app = null;
                var o1 = "";
                var o2 = "test";
                var o3 = null;

                Bridge.Test.NUnit.Assert.AreStrictEqual(1, Bridge.unbox(app || def));
                Bridge.Test.NUnit.Assert.AreStrictEqual("", Bridge.unbox(($t = o1, $t != null ? $t : o2)));
                Bridge.Test.NUnit.Assert.AreStrictEqual("", Bridge.unbox(($t1 = o1, $t1 != null ? $t1 : "test")));
                Bridge.Test.NUnit.Assert.AreStrictEqual("test", Bridge.unbox(($t2 = o3, $t2 != null ? $t2 : o2)));
                Bridge.Test.NUnit.Assert.AreStrictEqual("test", Bridge.unbox(($t3 = o3, $t3 != null ? $t3 : "test")));

                var s1 = "";
                var s2 = "test";
                var s3 = null;

                Bridge.Test.NUnit.Assert.AreStrictEqual("", ($t4 = s1, $t4 != null ? $t4 : s2));
                Bridge.Test.NUnit.Assert.AreStrictEqual("", Bridge.unbox(($t5 = s1, $t5 != null ? $t5 : o2)));
                Bridge.Test.NUnit.Assert.AreStrictEqual("", ($t6 = s1, $t6 != null ? $t6 : "test"));
                Bridge.Test.NUnit.Assert.AreStrictEqual("", ($t7 = "", $t7 != null ? $t7 : "test"));
                Bridge.Test.NUnit.Assert.AreStrictEqual("test", ($t8 = s3, $t8 != null ? $t8 : s2));
                Bridge.Test.NUnit.Assert.AreStrictEqual("test", Bridge.unbox(($t9 = s3, $t9 != null ? $t9 : o2)));
                Bridge.Test.NUnit.Assert.AreStrictEqual("test", ($t10 = s3, $t10 != null ? $t10 : "test"));
                Bridge.Test.NUnit.Assert.AreStrictEqual("test", null || "test");

                var i1 = 0;
                var i2 = 1;
                var i3 = null;

                Bridge.Test.NUnit.Assert.AreStrictEqual(0, ($t11 = i1, $t11 != null ? $t11 : i2));
                Bridge.Test.NUnit.Assert.AreStrictEqual(0, Bridge.unbox(($t12 = i1, $t12 != null ? Bridge.box($t12, System.Int32, System.Nullable.toString, System.Nullable.getHashCode) : o2)));
                Bridge.Test.NUnit.Assert.AreStrictEqual(0, ($t13 = i1, $t13 != null ? $t13 : 1));
                Bridge.Test.NUnit.Assert.AreStrictEqual(1, ($t14 = i3, $t14 != null ? $t14 : i2));
                Bridge.Test.NUnit.Assert.AreStrictEqual("test", Bridge.unbox(($t15 = i3, $t15 != null ? Bridge.box($t15, System.Int32, System.Nullable.toString, System.Nullable.getHashCode) : o2)));
                Bridge.Test.NUnit.Assert.AreStrictEqual(1, ($t16 = i3, $t16 != null ? $t16 : 1));
                Bridge.Test.NUnit.Assert.AreStrictEqual(1, null || i2);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1501", {
        methods: {
            TestPropertyChangedEventArgs: function () {
                var ea1 = new System.ComponentModel.PropertyChangedEventArgs("prop1");
                Bridge.Test.NUnit.Assert.AreEqual("prop1", ea1.propertyName, "prop1 PropertyName");
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(ea1.oldValue), "prop1 OldValue");
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(ea1.newValue), "prop1 NewValue");

                var ea2 = new System.ComponentModel.PropertyChangedEventArgs("prop2", Bridge.box(77, System.Int32));
                Bridge.Test.NUnit.Assert.AreEqual("prop2", ea2.propertyName, "prop2 PropertyName");
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(ea2.oldValue), "prop2 OldValue");
                Bridge.Test.NUnit.Assert.AreEqual(77, Bridge.unbox(ea2.newValue), "prop2 NewValue");

                var ea3 = new System.ComponentModel.PropertyChangedEventArgs("prop3", Bridge.box(120, System.Int32), Bridge.box(270, System.Int32));
                Bridge.Test.NUnit.Assert.AreEqual("prop3", ea3.propertyName, "prop3 PropertyName");
                Bridge.Test.NUnit.Assert.AreEqual(270, Bridge.unbox(ea3.oldValue), "prop3 OldValue");
                Bridge.Test.NUnit.Assert.AreEqual(120, Bridge.unbox(ea3.newValue), "prop3 NewValue");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1509", {
        methods: {
            TestPreformanceNowIsDouble: function () {
                var p;
                for (var i = 1; i < 1000; i = (i + 1) | 0) {
                    p = Bridge.global.performance.now();
                    if (!this.HasNoFraction(p)) {
                        Bridge.Test.NUnit.Assert.True(true, "Did " + i + " attempt(s) to check performance.now() returns float");
                        return;
                    }
                }

                Bridge.Test.NUnit.Assert.Fail("performance.now() did 1000 attemps to check if it returns float");
            },
            HasNoFraction: function (n) {
                return n % 1 === 0;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510", {
        statics: {
            methods: {
                Function: function (wrap) {
                    return wrap.v;
                },
                Function2: function (wrap) {
                    return wrap.v;
                },
                Function3: function (wrap) {
                    return wrap.v;
                },
                Function4: function (wrap) {
                    return wrap.v;
                }
            }
        },
        methods: {
            TestPropertyChangedEventArgs: function () {
                var a = 3;
                Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.Function(Bridge.merge(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap(), {v:Bridge.Int.mul(a, 1000)})) === 3000);
                Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.Function2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap2.op_Implicit(Bridge.Int.mul(a, 1000))) === 3000);
                Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.Function3(Bridge.merge(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap3(), {v:System.Int64(Bridge.Int.mul(a, 1000))})).equals(System.Int64(3000)));
                Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.Function4(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap4.op_Implicit(System.Int64(Bridge.Int.mul(a, 1000)))).equals(System.Int64(3000)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap", {
        $kind: "nested class",
        fields: {
            v: 0
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.v = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap2", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (v) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap2(v);
                }
            }
        },
        fields: {
            v: 0
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.v = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap3", {
        $kind: "nested class",
        fields: {
            v: System.Int64(0)
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.v = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap4", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (v) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1510.IntWrap4(v);
                }
            }
        },
        fields: {
            v: System.Int64(0)
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.v = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511", {
        methods: {
            TestOverloadedConstructorCallWithOptionalParameters: function () {
                var o1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass1.$ctor1();
                Bridge.Test.NUnit.Assert.AreEqual(130, o1.Value, "o1 #1");

                var o12 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass1.$ctor1(1);
                Bridge.Test.NUnit.Assert.AreEqual(131, o12.Value, "o1 #2");

                var o13 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass1.$ctor1(1, 2);
                Bridge.Test.NUnit.Assert.AreEqual(133, o13.Value, "o1 #3");

                var o14 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass1.$ctor1(2, 0);
                Bridge.Test.NUnit.Assert.AreEqual(132, o14.Value, "o1 #4");

                var o15 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass1.$ctor1(2, 3);
                Bridge.Test.NUnit.Assert.AreEqual(135, o15.Value, "o1 #5");

                var o16 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass1.$ctor1(4, 3);
                Bridge.Test.NUnit.Assert.AreEqual(137, o16.Value, "o1 #6");

                var o2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass2.$ctor1();
                Bridge.Test.NUnit.Assert.AreEqual(1130, o2.Value, "o2 #1");

                var o22 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass2.$ctor1([1]);
                Bridge.Test.NUnit.Assert.AreEqual(1131, o22.Value, "o2 #2");

                var o23 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass2.$ctor1([1, 2]);
                Bridge.Test.NUnit.Assert.AreEqual(1133, o23.Value, "o2 #3");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass1", {
        $kind: "nested class",
        fields: {
            Value: 0
        },
        ctors: {
            ctor: function (b) {
                this.$initialize();
                this.Value = 7;
            },
            $ctor1: function (a, b) {
                if (a === void 0) { a = 0; }
                if (b === void 0) { b = 0; }

                this.$initialize();
                this.Value = (((130 + a) | 0) + b) | 0;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1511.SomeClass2", {
        $kind: "nested class",
        fields: {
            Value: 0
        },
        ctors: {
            ctor: function (b) {
                this.$initialize();
                this.Value = 1007;
            },
            $ctor1: function (a) {
                if (a === void 0) { a = []; }

                this.$initialize();
                this.Value = 1130;

                if (a != null) {
                    for (var i = 0; i < a.length; i = (i + 1) | 0) {
                        this.Value = (this.Value + a[System.Array.index(i, a)]) | 0;
                    }
                }
            }
        },
        methods: {
            SumOfArray: function (a) {
                if (a === void 0) { a = []; }
                var r = 1130;

                if (a != null) {
                    for (var i = 0; i < a.length; i = (i + 1) | 0) {
                        r = (r + a[System.Array.index(i, a)]) | 0;
                    }
                }

                return r;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1512", {
        statics: {
            methods: {
                MethodParams: function ($arguments) {
                    if ($arguments === void 0) { $arguments = []; }
                    Bridge.Test.NUnit.Assert.AreEqual(0, $arguments.length, "params");
                },
                MethodDefault: function ($arguments) {
                    if ($arguments === void 0) { $arguments = "3"; }
                    Bridge.Test.NUnit.Assert.AreEqual("3", $arguments, "default");
                }
            }
        },
        methods: {
            TestParametersReservedNames: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1512.MethodParams();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1512.MethodDefault();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1517", {
        methods: {
            TestEqualTuples: function () {
                var a1 = { Item1: 1 };
                var b1 = { Item1: 1 };
                Bridge.Test.NUnit.Assert.True(Bridge.objectEquals(a1, b1, true), "1 equals");
                Bridge.Test.NUnit.Assert.True(Bridge.getHashCode(a1, false, true) === Bridge.getHashCode(b1, false, true), "1 ==");
                Bridge.Test.NUnit.Assert.False(Bridge.getHashCode(a1, false, true) !== Bridge.getHashCode(b1, false, true), "1 !=");

                var a2 = { Item1: 1, Item2: 2 };
                var b2 = { Item1: 1, Item2: 2 };
                Bridge.Test.NUnit.Assert.True(Bridge.objectEquals(a2, b2, true), "2 equals");
                Bridge.Test.NUnit.Assert.True(Bridge.getHashCode(a2, false, true) === Bridge.getHashCode(b2, false, true), "2 ==");
                Bridge.Test.NUnit.Assert.False(Bridge.getHashCode(a2, false, true) !== Bridge.getHashCode(b2, false, true), "2 !=");
            },
            TestInequalTuples: function () {
                var a1 = { Item1: 3 };
                var b1 = { Item1: 4 };
                Bridge.Test.NUnit.Assert.False(Bridge.objectEquals(a1, b1, true), "1 equals");
                Bridge.Test.NUnit.Assert.False(Bridge.getHashCode(a1, false, true) === Bridge.getHashCode(b1, false, true), "1 ==");
                Bridge.Test.NUnit.Assert.True(Bridge.getHashCode(a1, false, true) !== Bridge.getHashCode(b1, false, true), "1 !=");

                var a2 = { Item1: 1, Item2: 7 };
                var b2 = { Item1: 1, Item2: 8 };
                Bridge.Test.NUnit.Assert.False(Bridge.objectEquals(a2, b2, true), "2 equals");
                Bridge.Test.NUnit.Assert.False(Bridge.getHashCode(a2, false, true) === Bridge.getHashCode(b2, false, true), "2 ==");
                Bridge.Test.NUnit.Assert.True(Bridge.getHashCode(a2, false, true) !== Bridge.getHashCode(b2, false, true), "2 !=");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1518", {
        methods: {
            TestDefaultConstructorForTypeParameter: function () {
                var x = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1518.TestClass$1(System.Decimal))();
                var y = 0;
                Bridge.Test.NUnit.Assert.True(x.value.equalsT(System.Decimal(y)), "decimal");

                var g = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1518.TestClass$1(System.Guid))();
                Bridge.Test.NUnit.Assert.True(System.Guid.op_Equality(g.value, System.Guid.Empty), "Guid");

                var l = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1518.TestClass$1(System.Int64))();
                var z = 0;
                Bridge.Test.NUnit.Assert.True(l.value.equals(System.Int64(z)), "long");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1518.TestClass$1", function (T) { return {
        $kind: "nested class",
        fields: {
            value: null
        },
        ctors: {
            init: function () {
                this.value = Bridge.createInstance(T);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1519", {
        methods: {
            TestRefOutLocalVars: function () {
                var $t;
                var $boolean = true;
                var dic = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)).ctor();
                dic.add(1, 1);
                dic.add(2, 2);

                if ($boolean) {
                    var sameVal = { };
                    if (dic.tryGetValue(1, sameVal)) {
                        Bridge.Test.NUnit.Assert.AreEqual(1, sameVal.v, "Inside if scope");
                    }
                }

                var i = 0;
                $t = Bridge.getEnumerator(dic.Values);
                try {
                    while ($t.moveNext()) {
                        var sameVal1 = $t.Current;
                        Bridge.Test.NUnit.Assert.AreEqual(((i = (i + 1) | 0)), sameVal1, "Inside foreach scope");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1520", {
        statics: {
            fields: {
                x: System.Decimal(0.0)
            },
            ctors: {
                init: function () {
                    this.x = System.Decimal(30);
                }
            }
        },
        methods: {
            TestStaticDecimalInitialization: function () {
                Bridge.Test.NUnit.Assert.AreEqual("Decimal", Bridge.Reflection.getTypeName(System.Decimal), "decimal type");

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1520.x = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1520.x.inc();
                Bridge.Test.NUnit.Assert.True(System.Decimal(31).equalsT(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1520.x), "31");
            },
            TestLocalDecimalInitialization: function () {
                var x = System.Decimal(100);
                Bridge.Test.NUnit.Assert.AreEqual("Decimal", Bridge.Reflection.getTypeName(System.Decimal), "decimal type");

                x = x.inc();
                Bridge.Test.NUnit.Assert.True(System.Decimal(101).equalsT(x), "101");
            },
            TestUseCase: function () {
                var newVal = System.Decimal(12);
                var item = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1520.CustomList();
                item.value = item.value.add(newVal);

                Bridge.Test.NUnit.Assert.AreEqual("Decimal", Bridge.Reflection.getTypeName(System.Decimal), "decimal type");
                Bridge.Test.NUnit.Assert.True(System.Decimal(19).equalsT(item.value), "19");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1520.CustomList", {
        $kind: "nested class",
        fields: {
            ranges: null,
            value: System.Decimal(0.0)
        },
        ctors: {
            init: function () {
                this.ranges = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.value = System.Decimal(7);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1521", {
        methods: {
            TestDecimalTrueInConditionalBlock: function () {
                var decimalValue1 = System.Decimal(5.0);
                var decimalValue2 = System.Decimal(10.0);
                var assign = true;
                var test1 = assign ? System.Decimal(0) : decimalValue1;
                var test2 = System.Decimal(!assign ? 0 : 1);
                var test3 = !assign ? System.Decimal(0) : decimalValue1;
                var test4 = assign ? decimalValue2 : decimalValue1;

                Bridge.Test.NUnit.Assert.True(test1.equalsT(System.Decimal(0)));
                Bridge.Test.NUnit.Assert.True(test2.equalsT(System.Decimal(1)));
                Bridge.Test.NUnit.Assert.True(test3.equalsT(System.Decimal(5)));
                Bridge.Test.NUnit.Assert.True(test4.equalsT(System.Decimal(10)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1522", {
        methods: {
            TestAssignIntToDecimal: function () {
                var x = System.Decimal(2.0);
                x = System.Decimal(System.Decimal.toInt(x.mul(System.Decimal(60)), System.Int32));
                Bridge.Test.NUnit.Assert.True(x.gt(System.Decimal(2.0)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1523", {
        methods: {
            TestAssignDecimalToInt: function () {
                var x = 0;
                var y = System.Decimal(2);
                x = (x + (System.Decimal.toInt(System.Nullable.getValue(y).mul(System.Decimal(60.0)), System.Int32))) | 0;
                Bridge.Test.NUnit.Assert.AreEqual(120, x);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1524", {
        methods: {
            TestDecimalWithIntOps: function () {
                var x = System.Decimal(3.0);
                var y = 2;
                var z = 1;
                Bridge.Test.NUnit.Assert.False(System.Decimal(((y - z) | 0)).gt(x));
                var a = System.Decimal((y - z) | 0);
                Bridge.Test.NUnit.Assert.False(a.gt(System.Decimal(2)));

                var x1 = 1;
                var y1 = System.Nullable.hasValue(x1) ? System.Decimal(((-System.Nullable.getValue(x1)) | 0)) : System.Decimal(0.0);
                Bridge.Test.NUnit.Assert.False(y1.gt(System.Decimal(1)));
                y1 = System.Nullable.hasValue(x1) ? System.Decimal(Bridge.Int.mul(-1, (System.Nullable.getValue(x1)))) : System.Decimal(0.0);
                Bridge.Test.NUnit.Assert.False(y1.gt(System.Decimal(1)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1526", {
        statics: {
            props: {
                StaticProperty1: {
                    get: function () {
                        var levelKey = { };
                        System.Int32.tryParse("", levelKey);

                        return levelKey.v;
                    }
                },
                StaticProperty2: {
                    get: function () {
                        var levelKey = { v : 1 };
                        System.Int32.tryParse("", levelKey);

                        return levelKey.v;
                    }
                }
            },
            methods: {
                TestOutInClassMembers: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1526.StaticMethod(), "StaticMethod");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1526.StaticProperty1, "StaticProperty1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1526.StaticProperty2, "StaticProperty2");
                },
                StaticMethod: function () {
                    var levelKey = { };
                    System.Int32.tryParse("", levelKey);

                    return levelKey.v;
                }
            }
        },
        props: {
            Property1: {
                get: function () {
                    var i = { v : 1 };
                    this.RefMethod(i);

                    return i.v;
                }
            },
            Property2: {
                get: function () {
                    var i = { v : 2 };
                    this.RefMethod(i);

                    return i.v;
                }
            }
        },
        methods: {
            getItem: function (index) {
                var i = { v : 4 };
                this.RefMethod(i);

                return i.v;
            },
            TestRefInClassMembers: function () {
                Bridge.Test.NUnit.Assert.AreEqual(1, this.Property1, "Property1");
                Bridge.Test.NUnit.Assert.AreEqual(2, this.Property2, "Property2");
                Bridge.Test.NUnit.Assert.AreEqual(3, this.Method(), "Method");
                Bridge.Test.NUnit.Assert.AreEqual(4, this.getItem(0), "Indexer");
            },
            Method: function () {
                var i = { v : 3 };
                this.RefMethod(i);

                return i.v;
            },
            RefMethod: function (i) {
                return i.v;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1527", {
        statics: {
            fields: {
                SomeLiteral: null,
                hello: null
            },
            ctors: {
                init: function () {
                    this.SomeLiteral = "this.hello";
                    this.hello = "test";
                }
            },
            methods: {
                GetValue: function () {
                    return 1 + this.hello + 2;
                }
            }
        },
        methods: {
            TestScriptAttributeWithReference: function () {
                var h = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1527.hello;
                Bridge.Test.NUnit.Assert.AreEqual("1test2", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1527.GetValue());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1530", {
        methods: {
            TestObjectLiteralPropertyImplementingInterface: function () {
                var c = { Name: "name" };
                var p = c;

                Bridge.Test.NUnit.Assert.AreEqual("name", p.Name);
                Bridge.Test.NUnit.Assert.AreEqual("name", c.Name);
            },
            TestObjectLiteralFieldImplementingInterface: function () {
                var c = { Name: "name" };
                var p = c;

                Bridge.Test.NUnit.Assert.AreEqual("name", p.Name);
                Bridge.Test.NUnit.Assert.AreEqual("name", c.Name);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1533", {
        methods: {
            TestStringNullConcationation: function () {
                var s = null;
                var s1 = "b";
                Bridge.Test.NUnit.Assert.AreEqual("b", (s || "") + "b", "s + \"b\"");

                s1 = (s1 || "") + (s || "");
                Bridge.Test.NUnit.Assert.AreEqual("b", s1, "s1 += s");

                s = (s || "") + String.fromCharCode(98);
                Bridge.Test.NUnit.Assert.AreEqual("b", s, "s += 'b'");

                Bridge.Test.NUnit.Assert.AreEqual("b2", (s || "") + "2", "s + \"2\"");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1535", {
        methods: {
            TestAsyncLambdaAssignmentExpression: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    done, 
                    foo, 
                    bar, 
                    baz, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.NUnit.Assert.Async();

                                    foo = null;
                                    bar = Bridge.fn.bind(this, function () {
                                        var $step = 0,
                                            $jumpFromFinally, 
                                            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                            $returnValue, 
                                            $async_e, 
                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                try {
                                                    for (;;) {
                                                        $step = System.Array.min([0], $step);
                                                        switch ($step) {
                                                            case 0: {
                                                                $tcs.setResult((foo = Bridge.box(1, System.Int32)));
                                                                return;
                                                            }
                                                            default: {
                                                                $tcs.setResult(null);
                                                                return;
                                                            }
                                                        }
                                                    }
                                                } catch($async_e1) {
                                                    $async_e = System.Exception.create($async_e1);
                                                    $tcs.setException($async_e);
                                                }
                                            }, arguments);

                                        $asyncBody();
                                        return $tcs.task;
                                    });
                                    $task1 = bar();
                                    $step = 1;
                                    if ($task1.isCompleted()) continue;
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    baz = $taskResult1;
                                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(foo));
                                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(baz));

                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536", {
        statics: {
            events: {
                test: null
            },
            props: {
                test1: 0
            },
            methods: {
                Test: function () {
                    return "method";
                },
                Test1: function () {
                    return 1;
                }
            }
        },
        methods: {
            TestEventNameConflict: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536.addtest($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536.f1);

                Bridge.Test.NUnit.Assert.AreEqual("method", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536.Test());
                Bridge.Test.NUnit.Assert.AreEqual("event", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536.test());
            },
            TestPropertyNameConflict: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536.test1 = 2;

                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536.Test1());
                Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536.test1);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1536, {
        f1: function () {
            return "event";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1538", {
        methods: {
            getItem: function (index) {
                var i = { v : 4 };
                this.OutMethod(i);

                return i.v;
            },
            TestOutParameterInIndexer: function () {
                Bridge.Test.NUnit.Assert.AreEqual(7, this.getItem(0), "Indexer");
            },
            OutMethod: function (i) {
                i.v = 7;
                return i.v;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge156", {
        statics: {
            fields: {
                MyArray: null,
                My2DArray: null
            },
            ctors: {
                init: function () {
                    this.MyArray = System.Array.init(5, 0, System.Int32);
                    this.My2DArray = System.Array.create(0, null, System.Int32, 5, 5);
                }
            },
            methods: {
                TestArrayIndexOutOfRangeException: function () {
                    var lowIndex = -1;

                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.MyArray[System.Array.index(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.MyArray)]);
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.MyArray[System.Array.index(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.MyArray)]);

                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.f1);
                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.MyArray[System.Array.index(lowIndex, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.MyArray)];
                    });

                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([0, 0]));
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([0, 4]));
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([4, 0]));
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([4, 4]));

                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.f2);
                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.f3);
                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.f4);
                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([lowIndex, 4]);
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([4, lowIndex]);
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([lowIndex, lowIndex]);
                    });
                },
                Test1DArrayIndexOutOfRangeExceptionIndexAsVariable: function () {
                    var index = -2;
                    var a = System.Array.init([1, 2, 3], System.Int32);

                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var v = a[System.Array.index(Bridge.identity(index, ((index = (index + 1) | 0))), a)];
                    });

                    Bridge.Test.NUnit.Assert.AreEqual(1, a[System.Array.index(((index = (index + 1) | 0)), a)]);
                    Bridge.Test.NUnit.Assert.AreEqual(2, a[System.Array.index(((index = (index + 1) | 0)), a)]);
                    Bridge.Test.NUnit.Assert.AreEqual(3, a[System.Array.index(((index = (index + 1) | 0)), a)]);

                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var v = a[System.Array.index(((index = (index + 1) | 0)), a)];
                    });
                },
                Test2DArrayIndexOutOfRangeExceptionIndexAsVariable: function () {
                    var index = -2;
                    var a = System.Array.create(0, [[
                        1, 
                        2, 
                        3
                    ], [
                        11, 
                        12, 
                        13
                    ]], System.Int32, 2, 3);

                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var v = a.get([1, Bridge.identity(index, ((index = (index + 1) | 0)))]);
                    });

                    Bridge.Test.NUnit.Assert.AreEqual(11, a.get([1, ((index = (index + 1) | 0))]));
                    Bridge.Test.NUnit.Assert.AreEqual(12, a.get([1, ((index = (index + 1) | 0))]));
                    Bridge.Test.NUnit.Assert.AreEqual(13, a.get([1, ((index = (index + 1) | 0))]));

                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var v = a.get([1, ((index = (index + 1) | 0))]);
                    });
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge156", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge156, {
        f1: function () {
            var v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.MyArray[System.Array.index(5, Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.MyArray)];
        },
        f2: function () {
            var v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([5, 4]);
        },
        f3: function () {
            var v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([4, 5]);
        },
        f4: function () {
            var v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge156.My2DArray.get([5, 5]);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1566", {
        methods: {
            TestMathLog10: function () {
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(0.477121254719662, Bridge.Math.logWithBase(3.0, 10.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NEGATIVE_INFINITY, Bridge.Math.logWithBase(0.0, 10.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.logWithBase(-3.0, 10.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.logWithBase(Number.NaN, 10.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.POSITIVE_INFINITY, Bridge.Math.logWithBase(Number.POSITIVE_INFINITY, 10.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.logWithBase(Number.NEGATIVE_INFINITY, 10.0));
            },
            TestMathLogWithBase: function () {
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1.0, Bridge.Math.logWithBase(3.0, 3.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(2.40217350273, Bridge.Math.logWithBase(14, 3.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NEGATIVE_INFINITY, Bridge.Math.logWithBase(0.0, 3.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.logWithBase(-3.0, 3.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.logWithBase(Number.NaN, 3.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.POSITIVE_INFINITY, Bridge.Math.logWithBase(Number.POSITIVE_INFINITY, 3.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.logWithBase(Number.NEGATIVE_INFINITY, 3.0));
            },
            TestMathLog: function () {
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1.09861228866811, Bridge.Math.log(3.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NEGATIVE_INFINITY, Bridge.Math.log(0.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.log(-3.0));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.log(Number.NaN));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.POSITIVE_INFINITY, Bridge.Math.log(Number.POSITIVE_INFINITY));
                Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(Number.NaN, Bridge.Math.log(Number.NEGATIVE_INFINITY));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1579", {
        methods: {
            TestNullableDecimalToFloatDouble: function () {
                var x1 = System.Decimal(0);

                Bridge.Test.NUnit.Assert.AreEqual(System.Decimal.toFloat(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(10.5, 1)))), 10.5);
                Bridge.Test.NUnit.Assert.AreEqual(System.Decimal.toFloat(System.Nullable.getValue(System.Nullable.lift2("add", x1, System.Decimal(10.5, 1)))), 10.5);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1599", {
        methods: {
            TestCustomIEnumerableForStringJoin: function () {
                var intValues = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1599.MyEnumerable$1(System.Int32))(System.Array.init([1, 5, 6], System.Int32));
                Bridge.Test.NUnit.Assert.AreEqual("1, 5, 6", Bridge.toArray(intValues).join(", "));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1599.MyEnumerable$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        $kind: "nested class",
        fields: {
            _items: null
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            ctor: function (items) {
                this.$initialize();
                this._items = items;
            }
        },
        methods: {
            System$Collections$IEnumerable$GetEnumerator: function () {
                return null;
            },
            GetEnumerator: function () {
                var $t;
                return Bridge.cast(($t = T, System.Linq.Enumerable.from(this._items, $t).toList($t)).GetEnumerator().$clone(), System.Collections.Generic.IEnumerator$1(T));
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1600", {
        methods: {
            TestPositiveInfinity: function () {
                var inf1 = Infinity;
                Bridge.Test.NUnit.Assert.True((inf1 === Number.POSITIVE_INFINITY));

                var inf2 = -Infinity;
                Bridge.Test.NUnit.Assert.False((inf2 === Number.POSITIVE_INFINITY));

                var dinf1 = Infinity;
                Bridge.Test.NUnit.Assert.True((dinf1 === Number.POSITIVE_INFINITY));

                var dinf2 = -Infinity;
                Bridge.Test.NUnit.Assert.False((dinf2 === Number.POSITIVE_INFINITY));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1627", {
        methods: {
            ForeachWithListItemCallbackWorks: function () {
                var result = "";
                $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1627.f1(new (System.Collections.Generic.List$1(System.String)).ctor()).ForEach(function (s) {
                    result += s;
                });

                Bridge.Test.NUnit.Assert.AreEqual(result, "abc");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1627", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1627, {
        f1: function (_o1) {
            _o1.add("a");
            _o1.add("b");
            _o1.add("c");
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1641", {
        statics: {
            fields: {
                _Foo: null
            },
            ctors: {
                init: function () {
                    this._Foo = new (System.Collections.Generic.Dictionary$2(System.UInt32,System.UInt32)).ctor();
                }
            },
            methods: {
                Test: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        bar, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            bar = { };
                                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge1641._Foo.tryGetValue(1, bar);

                                            $tcs.setResult(bar.v);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        },
        methods: {
            TestOutInAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    done, 
                    result, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.NUnit.Assert.Async();
                                    $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1641.Test();
                                    $step = 1;
                                    if ($task1.isCompleted()) continue;
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    result = $taskResult1;
                                    Bridge.Test.NUnit.Assert.AreEqual(0, result);
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653", {
        methods: {
            TestLiftedFunctionsWithGenericInvocation: function () {
                var scope = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653.Table$2;
                Bridge.Test.NUnit.Assert.NotNull(scope.f1, "scope.f1 should exists");
                Bridge.Test.NUnit.Assert.Null(scope.f2, "scope.f2 should be null");
                Bridge.Test.NUnit.Assert.AreEqual(scope.f1(1), "1_v4", "scope.f1(1) should be 1_v4");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653.Table$2", function (U, V) { return {
        $kind: "nested class",
        methods: {
            Test: function () {
                var values = System.Array.init([Bridge.getDefaultValue(U)], U);

                var v1 = System.Linq.Enumerable.from(values, U).select(function (value) {
                        return System.String.concat(value, " ") + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653_Extensions.GetSomething(U, value) || "");
                    });
                var v2 = System.Linq.Enumerable.from(values, U).select(function (value) {
                        return System.String.concat(value, " ") + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653_Extensions.GetSomething(U, value) || "");
                    });
                var v3 = System.Linq.Enumerable.from(values, U).select(function (value) {
                        return System.String.concat(value, " ") + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653_Extensions.GetSomething1(U, value) || "");
                    });
                var v4 = System.Linq.Enumerable.from(values, U).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653.Table$2.f1);
            }
        }
    }; });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653.Table$2", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653.Table$2, {
        f1: function (value) {
            return (Bridge.toString(value) || "") + "_" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653_Extensions.GetSomething1(System.String, "v4") || "");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1653_Extensions", {
        statics: {
            methods: {
                GetSomething1: function (T, value) {
                    return Bridge.toString(value);
                },
                GetSomething: function (T, value) {
                    return Bridge.toString(value);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684", {
        methods: {
            TestStaticInitializationForGenericClass: function () {
                var setOfMessageEditState2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.Set$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.MessageEditState2).Empty.Add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.MessageEditState2());
                Bridge.Test.NUnit.Assert.AreEqual(1, setOfMessageEditState2.Count);

                var setOfMessageEditState = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.Set$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.MessageEditState).Empty.Add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.MessageEditState());
                Bridge.Test.NUnit.Assert.AreEqual(1, setOfMessageEditState.Count);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.MessageEditState", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.MessageEditState2", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.Set$1", function (T) { return {
        $kind: "nested class",
        statics: {
            fields: {
                _empty: null
            },
            props: {
                Empty: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.Set$1(T)._empty;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._empty = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.Set$1(T))();
                }
            }
        },
        props: {
            Count: {
                get: function () {
                    return 1;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Add: function (value) {
                return this;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.PureComponent$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge169", {
        statics: {
            fields: {
                Number: 0
            },
            ctors: {
                init: function () {
                    this.Number = 0;
                }
            },
            methods: {
                M1: function () {
                    ($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge169.f1)();
                },
                M2: function () {
                    ($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge169.f2)();
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge169", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge169, {
        f1: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge169.Number = 1;
        },
        f2: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge169.Number = 2;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1698", {
        statics: {
            props: {
                Output: {
                    get: function () {
                        return Bridge.Console.instance.bufferedOutput;
                    },
                    set: function (value) {
                        Bridge.Console.instance.bufferedOutput = value;
                    }
                }
            },
            methods: {
                ClearOutput: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1698.Output = "";
                },
                ResetOutput: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1698.Output = null;
                    Bridge.Console.hide();
                }
            }
        },
        methods: {
            TestReflectionForNativeTypes: function () {
                var t = Bridge.Reflection.getMembers(System.Console, 8, 284, "WriteLine", System.Array.init([System.String], System.Type));

                Bridge.Test.NUnit.Assert.NotNull(t, "Not null");
                Bridge.Test.NUnit.Assert.True((t.a === 2), "IsPublic");
                Bridge.Test.NUnit.Assert.False((t.a === 1), "IsPrivate");
                Bridge.Test.NUnit.Assert.False((t.t === 1), "IsConstructor");
                Bridge.Test.NUnit.Assert.True((t.is || false), "IsStatic");
                Bridge.Test.NUnit.Assert.AreEqual("WriteLine", t.n, "Name");
                Bridge.Test.NUnit.Assert.NotNull(t.rt, "ReturnType not null");
                Bridge.Test.NUnit.Assert.AreEqual("System.Void", Bridge.Reflection.getTypeFullName(t.rt), "ReturnType");

                var parameters = (t.pi || []);
                Bridge.Test.NUnit.Assert.NotNull(parameters, "parameters not null");
                Bridge.Test.NUnit.Assert.AreEqual(1, parameters.length, "parameters length");
                Bridge.Test.NUnit.Assert.AreEqual("value", parameters[System.Array.index(0, parameters)].n, "parameters[0] Name");
                Bridge.Test.NUnit.Assert.False((parameters[System.Array.index(0, parameters)].out || false), "parameters[0] IsOut");
                Bridge.Test.NUnit.Assert.False((parameters[System.Array.index(0, parameters)].o || false), "parameters[0] IsOptional");

                try {
                    Bridge.Reflection.midel(t, null).apply(null, System.Array.init(["Test #1698"], System.String));
                    Bridge.Test.NUnit.Assert.True(true, "Method executed");
                } catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.Test.NUnit.Assert.Fail(Bridge.toString(ex));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1700", {
        methods: {
            TestULongAsIndex: function () {
                var array = System.Array.create(0, null, System.Int32, 2, 2);
                var n = 1;
                array.set([System.Int64.toNumber(System.Int64(n).mod(System.Int64(1))), System.Int64.toNumber(System.Int64(n).div(System.Int64(1)))], 7);
                n = 4;
                array.set([System.Int64.toNumber(System.Int64(n).mod(System.Int64(3))), System.Int64.toNumber(System.Int64(n).div(System.Int64(4)))], 8);

                Bridge.Test.NUnit.Assert.AreEqual(7, array.get([0, 1]));
                Bridge.Test.NUnit.Assert.AreEqual(8, array.get([1, 1]));
            },
            TestLongAsIndex: function () {
                var array = System.Array.create(0, null, System.Int32, 2, 2);
                var n = 1;
                array.set([System.Int64.toNumber(System.Int64(n).mod(System.Int64(1))), System.Int64.toNumber(System.Int64(n).div(System.Int64(1)))], 3);
                n = 4;
                array.set([System.Int64.toNumber(System.Int64(n).mod(System.Int64(3))), System.Int64.toNumber(System.Int64(n).div(System.Int64(4)))], 5);

                Bridge.Test.NUnit.Assert.AreEqual(3, array.get([0, 1]));
                Bridge.Test.NUnit.Assert.AreEqual(5, array.get([1, 1]));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702", {
        methods: {
            TestFieldWithItemName: function () {
                var $t;
                var set = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1(System.Int32).Empty;
                set = set.Insert(3);
                set = set.Insert(2);
                set = set.Insert(1);

                var idx = 0;
                $t = Bridge.getEnumerator(set);
                try {
                    while ($t.moveNext()) {
                        var i = $t.Current;
                        Bridge.Test.NUnit.Assert.AreEqual(((idx = (idx + 1) | 0)), i);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        $kind: "nested class",
        statics: {
            fields: {
                _empty: null
            },
            props: {
                Empty: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1(T)._empty;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._empty = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1(T))(null);
                }
            }
        },
        fields: {
            _headIfAny: null
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            ctor: function (headIfAny) {
                this.$initialize();
                this._headIfAny = headIfAny;
            }
        },
        methods: {
            Insert: function (item) {
                var $t;
                if (item == null) {
                    throw new System.ArgumentNullException.$ctor1("item");
                }

                if (this._headIfAny == null) {
                    return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1(T))(($t = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1.Node(T))(), $t.Count = 1, $t.Item = item, $t.NextIfAny = null, $t));
                }

                return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1(T))(($t = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1.Node(T))(), $t.Count = ((this._headIfAny.Count + 1) | 0), $t.Item = item, $t.NextIfAny = this._headIfAny, $t));
            },
            GetEnumerator: function () {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    node,
                    $async_e;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    node = this._headIfAny;
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    if ( node != null ) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                }
                                case 2: {
                                    $enumerator.current = node.Item;
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    node = node.NextIfAny;

                                        $step = 1;
                                        continue;
                                }
                                case 4: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1702.Set$1.Node", function (T) { return {
        $kind: "nested class",
        fields: {
            Count: 0,
            Item: Bridge.getDefaultValue(T),
            NextIfAny: null
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1704", {
        methods: {
            TestBaseMethodWithOptionalParams: function () {
                var d = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1704.Derived();
                Bridge.Test.NUnit.Assert.AreEqual(1, d.Show());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1704.Base", {
        $kind: "nested class",
        methods: {
            Show: function (i) {
                if (i === void 0) { i = 1; }
                return i;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1709", {
        methods: {
            MakeArguments: function (T, args) {
                if (args === void 0) { args = []; }
                return args.length;
            },
            TestGenericMethodWithoutTypeArgument: function () {
                var callback = null;
                var $arguments = this.MakeArguments(System.Object, [null, callback]);
                Bridge.Test.NUnit.Assert.AreEqual(2, $arguments);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1711", {
        methods: {
            TestImplicitOperatorOrder: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1711.Wrapper.Call();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1711.Wrapper", {
        $kind: "nested class",
        statics: {
            methods: {
                Method: function (w) {
                    return w.value;
                },
                Call: function () {
                    var a = 5;
                    var b = 6;
                    // At runtime agument type is uint
                    // but Wrapper expected; Because >>> 0 extract value with ValueOf method
                    Bridge.Test.NUnit.Assert.AreEqual(7, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1711.Wrapper.Method(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1711.Wrapper.op_Implicit(((a | b) >>> 0))), "First");
                    //Agument type is Wrapper as expected;
                    Bridge.Test.NUnit.Assert.AreEqual(7, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1711.Wrapper.Method(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1711.Wrapper.op_Implicit((((a | b) >>> 0)))), "Second");
                },
                op_Implicit: function (i) {
                    var $t;
                    return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1711.Wrapper(), $t.value = i, $t);
                }
            }
        },
        fields: {
            value: 0
        },
        methods: {
            valueOf: function () {
                return Bridge.box(this.value, System.UInt32);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712", {
        statics: {
            props: {
                Buffer: null
            }
        },
        methods: {
            TestCollectionAddWithExtensionMethod: function () {
                var $t;
                var collection2 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.f1(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Collection());

                var i = 4;
                $t = Bridge.getEnumerator(collection2);
                try {
                    while ($t.moveNext()) {
                        var item = Bridge.cast($t.Current, System.Int32);
                        Bridge.Test.NUnit.Assert.AreEqual(Bridge.identity(i, ((i = (i + 1) | 0))), item);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            TestCollectionWithAdd_BeforeCS6: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Buffer = "";
                var collection = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.f2(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.MSDNCollectionWithAdd());

                Bridge.Test.NUnit.Assert.AreEqual("123", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Buffer);
            },
            TestCollectionWithAdd_CS6: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Buffer = "";
                var collection = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.f3(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.MSDNCollectionWithoutAdd());

                Bridge.Test.NUnit.Assert.AreEqual("456", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Buffer);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712, {
        f1: function (_o1) {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712Extensions.Add(_o1, 4);
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712Extensions.Add(_o1, 5);
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712Extensions.Add(_o1, 6);
            return _o1;
        },
        f2: function (_o1) {
            _o1.Add(System.Int32, 1);
            _o1.Add(System.Int32, 2);
            _o1.Add(System.Int32, 3);
            return _o1;
        },
        f3: function (_o1) {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712MSDNExtensions.Add(System.Int32, _o1, 4);
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712MSDNExtensions.Add(System.Int32, _o1, 5);
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712MSDNExtensions.Add(System.Int32, _o1, 6);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Collection", {
        inherits: [System.Collections.IEnumerable],
        $kind: "nested class",
        fields: {
            list: null
        },
        alias: ["GetEnumerator", "System$Collections$IEnumerable$GetEnumerator"],
        ctors: {
            init: function () {
                this.list = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            }
        },
        methods: {
            GetEnumerator: function () {
                return this.list.GetEnumerator().$clone();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.MSDNCollectionWithAdd", {
        inherits: [System.Collections.IEnumerable],
        $kind: "nested class",
        alias: ["GetEnumerator", "System$Collections$IEnumerable$GetEnumerator"],
        methods: {
            Add: function (T, item) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Buffer = System.String.concat(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Buffer, item);
            },
            GetEnumerator: function () {
                throw new System.InvalidOperationException.ctor();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.MSDNCollectionWithoutAdd", {
        inherits: [System.Collections.IEnumerable],
        $kind: "nested class",
        alias: ["GetEnumerator", "System$Collections$IEnumerable$GetEnumerator"],
        methods: {
            GetEnumerator: function () {
                throw new System.NotImplementedException.ctor();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712Extensions", {
        statics: {
            methods: {
                Add: function (collection, item) {
                    collection.list.add(item);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712MSDNExtensions", {
        statics: {
            methods: {
                Add: function (T, collection, item) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Buffer = System.String.concat(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1712.Buffer, item);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713", {
        methods: {
            Overloaded$1: function (action) {
                return 1;
            },
            Overloaded: function ($function) {
                return 2;
            },
            DoSomething1: function (i) {
                return 0;
            },
            DoSomething2: function () {
                return 0;
            },
            TestOverloadResolution: function () {
                Bridge.Test.NUnit.Assert.AreEqual(1, this.Overloaded$1(Bridge.fn.cacheBind(this, this.DoSomething1)));
                Bridge.Test.NUnit.Assert.AreEqual(2, this.Overloaded(Bridge.fn.cacheBind(this, this.DoSomething2)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN", {
        statics: {
            fields: {
                buffer: null
            },
            methods: {
                Overloaded: function (action) {
                    Bridge.Test.NUnit.Assert.Fail("overload with action called");
                },
                Overloaded$1: function ($function) {
                    Bridge.Test.NUnit.Assert.True(true, "overload with Func<int> called");
                },
                DoSomething: function () {
                    Bridge.Test.NUnit.Assert.Fail("DoSomething should not be called");
                    return 0;
                },
                Foo$2: function (func) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer || "") + "Func<long>";
                },
                Foo$4: function (func) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer || "") + "Func<ulong>";
                },
                Foo$1: function (func) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer || "") + "Func<int>";
                },
                Foo: function (func) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer || "") + "Func<decimal>";
                },
                Foo$3: function (func) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer || "") + "Func<string>";
                },
                TestOverloadResolutionMSDN2: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.Foo$2($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f2);
                    Bridge.Test.NUnit.Assert.AreEqual("Func<long>", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer, "Should call Func<long>");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.Foo$2($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f4);
                    Bridge.Test.NUnit.Assert.AreEqual("Func<long>", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer, "Should call Func<long>");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.Foo$4($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f6);
                    Bridge.Test.NUnit.Assert.AreEqual("Func<ulong>", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer, "Should call Func<ulong>");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.Foo$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f8);
                    Bridge.Test.NUnit.Assert.AreEqual("Func<int>", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer, "Should call Func<int>");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.Foo($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f10);
                    Bridge.Test.NUnit.Assert.AreEqual("Func<decimal>", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer, "Should call Func<decimal>");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.Foo$3($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f12);
                    Bridge.Test.NUnit.Assert.AreEqual("Func<string>", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.buffer, "Should call Func<string>");
                }
            }
        },
        methods: {
            TestOverloadResolutionMSDN1: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.Overloaded$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.DoSomething);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN, {
        f1: function () {
            return System.Int64(9);
        },
        f2: function () {
            return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f1;
        },
        f3: function () {
            return System.Int64(5);
        },
        f4: function () {
            return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f3;
        },
        f5: function () {
            return System.UInt64(3);
        },
        f6: function () {
            return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f5;
        },
        f7: function () {
            return 7;
        },
        f8: function () {
            return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f7;
        },
        f9: function () {
            return System.Decimal(11.0);
        },
        f10: function () {
            return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f9;
        },
        f11: function () {
            return "15";
        },
        f12: function () {
            return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1713MSDN.f11;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715", {
        methods: {
            TestCollectionInitializerWithAdd: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.MyList.buffer = "";

                var list = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.f1(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.MyList());

                Bridge.Test.NUnit.Assert.AreEqual("Add(1);Add(2, 3);", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.MyList.buffer);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715, {
        f1: function (_o1) {
            _o1.Add(1);
            _o1.Add$1(2, 3);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.MyList", {
        inherits: [System.Collections.IEnumerable],
        $kind: "nested class",
        statics: {
            fields: {
                buffer: null
            }
        },
        alias: ["GetEnumerator", "System$Collections$IEnumerable$GetEnumerator"],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Add: function (i) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.MyList.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.MyList.buffer || "") + (("Add(" + i + ");") || "");
            },
            Add$1: function (i, j) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.MyList.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1715.MyList.buffer || "") + (("Add(" + i + ", " + j + ");") || "");
            },
            GetEnumerator: function () {
                throw new System.Exception();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1721", {
        methods: {
            Method1: function () { },
            Method2: function () { },
            TestDelegateEquals: function () {
                var inst = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1721();
                var fn1 = Bridge.fn.cacheBind(inst, inst.Method1);
                var fn2 = Bridge.fn.cacheBind(inst, inst.Method1);
                var fn3 = Bridge.fn.cacheBind(inst, inst.Method2);

                Bridge.Test.NUnit.Assert.AreEqual(fn1, fn2);
                Bridge.Test.NUnit.Assert.AreNotEqual(fn1, fn3);
                Bridge.Test.NUnit.Assert.True((fn1 === fn2));
                Bridge.Test.NUnit.Assert.False((fn1 === fn3));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722", {
        statics: {
            methods: {
                Foo: function (T) {
                    Bridge.Test.NUnit.Assert.AreEqual("7", Bridge.toString(Bridge.createInstance(T)));
                }
            }
        },
        methods: {
            TestDelegateCreationOfGenericMethods: function () {
                var foo = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722.Foo(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722.ClassA); };
                foo();
            },
            TestDelegateCreationOfGenericMethodsWithLambda: function () {
                var foo = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722.f1;
                foo();
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722, {
        f1: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722.Foo(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722.ClassA);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1722.ClassA", {
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            toString: function () {
                return "7";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735", {
        statics: {
            methods: {
                OutDelegateMethod: function (setter) {
                    setter.v = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735.f1;

                    return true;
                },
                ReferenceDelegateMethod: function (setter) {
                    return setter.v;
                }
            }
        },
        methods: {
            TestTryGetValueOutDelegateParameter: function () {
                var a = 1;

                var delegateCache = function (_o1) {
                        _o1.add("test", function (source) {
                            a = (a + 1) | 0;
                        });
                        return _o1;
                    }(new (System.Collections.Generic.Dictionary$2(System.String,Function)).ctor());

                var setter = { };
                var result = delegateCache.tryGetValue("test", setter);

                Bridge.Test.NUnit.Assert.True(result, "Get a setter from dictionary");

                setter.v(null);
                Bridge.Test.NUnit.Assert.AreEqual(2, a, "Get the right setter from dictionary");
            },
            TestOutDelegateParameter: function () {
                var $t;
                var b = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735.Container(), $t.Value = 7, $t);

                var setter = { };

                var result = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735.OutDelegateMethod(setter);

                Bridge.Test.NUnit.Assert.True(result, "Get a setter from OutDelegateMethod");

                setter.v(b);
                Bridge.Test.NUnit.Assert.AreEqual(8, b.Value, "Get the right setter from OutDelegateMethod");
            },
            TestReferenceDelegateParameter: function () {
                var c = 9;

                var setter = { v : function (source) {
                    c = (c + 3) | 0;
                } };

                var result = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735.ReferenceDelegateMethod(setter);

                Bridge.Test.NUnit.Assert.NotNull(result, "Get a setter from ReferenceDelegateMethod");

                setter.v(null);
                Bridge.Test.NUnit.Assert.AreEqual(12, c, "Get the right setter from ReferenceDelegateMethod");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735, {
        f1: function (source) {
            var $t;
            ($t = Bridge.cast(source, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735.Container)).Value = ($t.Value + 1) | 0;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1735.Container", {
        $kind: "nested class",
        fields: {
            Value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1737", {
        methods: {
            TestTypeFullName: function () {
                var x = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1737.SomethingOfSomethingElse();
                Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1737+SomethingOfSomethingElse", Bridge.Reflection.getTypeFullName(Bridge.getType(x)));
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.Reflection.getTypeFullName(Bridge.getType(x)), Bridge.Reflection.getTypeFullName(Bridge.getType(x))));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1737.Something$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1737.SomethingElse", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1741", {
        methods: {
            TestNumbersHashCode: function () {
                Bridge.Test.NUnit.Assert.AreEqual(10, Bridge.getHashCode((10)), "10/10");
                Bridge.Test.NUnit.Assert.AreNotEqual(Bridge.getHashCode((10)), Bridge.getHashCode((100)), "10/100");

                Bridge.Test.NUnit.Assert.AreEqual(System.Double.getHashCode((100.1)), System.Double.getHashCode((100.1)), "100.1/100.1");
                Bridge.Test.NUnit.Assert.AreNotEqual(System.Double.getHashCode((100.1)), System.Double.getHashCode((100.2)), "100.1/100.2");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1744", {
        statics: {
            methods: {
                Invoke: function (args) {
                    if (args === void 0) { args = []; }
                    if (args == null) {
                        return -1;
                    }

                    return args.length;
                }
            }
        },
        methods: {
            TestMethodInvocationWithParams: function () {
                Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1744.Invoke(), "Invoke()");
                Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1744.Invoke(null), "Invoke(null)");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1754", {
        methods: {
            TestAllUpperCaseNames: function () {
                var app = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1754.App();

                app.PROP1 = "PROP1";
                app.addSOME_EVENT($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1754.f1);
                app.addANOTHER_EVENt($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1754.f1);

                Bridge.Test.NUnit.Assert.AreEqual("ID", Bridge.unbox(app.ID));
                Bridge.Test.NUnit.Assert.AreEqual("X", Bridge.unbox(app.X));
                Bridge.Test.NUnit.Assert.AreEqual("PROP1", Bridge.unbox(app.PROP1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(app.FOO), "FOO");
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(app.M), "M");
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(app.M$1), "M$1");
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(app.AB), "AB");
                // We do not change event name case
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(app.SOME_EVENT), "SOME_EVENT");
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(app.ANOTHER_EVENt), "ANOTHER_EVENt");
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1754", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1754, {
        f1: function (sender, e) { }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1754.App", {
        $kind: "nested class",
        fields: {
            ID: null,
            X: null,
            CONFIG_VAL1: null
        },
        events: {
            SOME_EVENT: null,
            ANOTHER_EVENt: null
        },
        props: {
            PROP1: null
        },
        ctors: {
            init: function () {
                this.ID = "ID";
                this.X = "X";
                this.CONFIG_VAL1 = "CONFIG_VAL1";
            }
        },
        methods: {
            FOO: function () { },
            M: function (i) { },
            M$1: function (s) { },
            AB: function (i) { },
            AB$1: function (s) { },
            UseEvents: function () {
                if (!Bridge.staticEquals(this.SOME_EVENT, null)) {
                    this.SOME_EVENT(null, null);
                }

                if (!Bridge.staticEquals(this.ANOTHER_EVENt, null)) {
                    this.ANOTHER_EVENt(null, null);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1767", {
        methods: {
            TestBaseIndexer: function () {
                var child = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1767.Child();
                Bridge.Test.NUnit.Assert.AreEqual(1, child.getItem(1));
                Bridge.Test.NUnit.Assert.AreEqual(2, child.Method());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1767.Base$1", function (T) { return {
        $kind: "nested class",
        methods: {
            getItem: function (i) {
                return i;
            },
            Method: function () {
                return 2;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768", {
        methods: {
            TestImplicitImplementation: function () {
                var c2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.C2$1(System.Int32))();
                Bridge.Test.NUnit.Assert.AreEqual(0, c2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$System$Int32$getItem(0));
                Bridge.Test.NUnit.Assert.AreEqual(20, c2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$System$Int32$Add(0));
                Bridge.Test.NUnit.Assert.AreEqual(10, c2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$System$Int32$Count);
            },
            TestExplicitImplementation: function () {
                var c1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.C1$1(System.Int32))();
                Bridge.Test.NUnit.Assert.AreEqual(0, c1.getItem(0));
                Bridge.Test.NUnit.Assert.AreEqual(2, c1.Add(0));
                Bridge.Test.NUnit.Assert.AreEqual(1, c1.Count);

                var i1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.C1$1(System.Int32))();
                Bridge.Test.NUnit.Assert.AreEqual(0, i1.getItem(0));
                Bridge.Test.NUnit.Assert.AreEqual(2, i1.Add(0));
                Bridge.Test.NUnit.Assert.AreEqual(1, i1.Count);
            },
            TestListImplicitImplementation: function () {
                var list = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.List1$1(System.Int32))();
                Bridge.Test.NUnit.Assert.AreEqual(0, System.Array.getItem(list, 0, System.Int32));
                Bridge.Test.NUnit.Assert.True(System.Array.contains(list, 0, System.Int32));
                Bridge.Test.NUnit.Assert.AreEqual(100, System.Array.getCount(list, System.Int32));
                Bridge.Test.NUnit.Assert.False(System.Array.getIsReadOnly(list, System.Int32));
                Bridge.Test.NUnit.Assert.Null(Bridge.getEnumerator(list, System.Int32));
                Bridge.Test.NUnit.Assert.AreEqual(200, System.Array.indexOf(list, 0, 0, null, System.Int32));
                Bridge.Test.NUnit.Assert.True(System.Array.remove(list, 0, System.Int32));

                var a = System.Array.init([1, 2], System.Int32);
                System.Array.copyTo(list, a, 0, System.Int32);
                Bridge.Test.NUnit.Assert.AreEqual(0, a[System.Array.index(0, a)]);
            },
            TestListExplicitImplementation: function () {
                var list = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.List2$1(System.Int32))();
                Bridge.Test.NUnit.Assert.AreEqual(0, list.getItem(0));
                Bridge.Test.NUnit.Assert.True(list.contains(0));
                Bridge.Test.NUnit.Assert.AreEqual(1000, list.Count);
                Bridge.Test.NUnit.Assert.False(list.IsReadOnly);
                Bridge.Test.NUnit.Assert.Null(list.GetEnumerator());
                Bridge.Test.NUnit.Assert.AreEqual(2000, list.indexOf(0));
                Bridge.Test.NUnit.Assert.True(list.remove(0));
                var a = System.Array.init([1, 2], System.Int32);
                list.copyTo(a, 0);
                Bridge.Test.NUnit.Assert.AreEqual(0, a[System.Array.index(1, a)]);

                var list2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.List2$1(System.Int32))();
                Bridge.Test.NUnit.Assert.AreEqual(0, System.Array.getItem(list2, 0, System.Int32));
                Bridge.Test.NUnit.Assert.True(System.Array.contains(list2, 0, System.Int32));
                Bridge.Test.NUnit.Assert.AreEqual(1000, System.Array.getCount(list2, System.Int32));
                Bridge.Test.NUnit.Assert.False(list.IsReadOnly);
                Bridge.Test.NUnit.Assert.Null(Bridge.getEnumerator(list2, System.Int32));
                Bridge.Test.NUnit.Assert.AreEqual(2000, System.Array.indexOf(list2, 0, 0, null, System.Int32));
                Bridge.Test.NUnit.Assert.True(System.Array.remove(list2, 0, System.Int32));
                var a2 = System.Array.init([1, 2], System.Int32);
                System.Array.copyTo(list2, a, 0, System.Int32);
                Bridge.Test.NUnit.Assert.AreEqual(2, a2[System.Array.index(1, a2)]);
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.I1$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.List1$1", function (T) { return {
        inherits: [System.Collections.Generic.IList$1(T)],
        $kind: "nested class",
        props: {
            System$Collections$Generic$ICollection$1$Count: {
                get: function () {
                    return 100;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "System$Collections$Generic$IList$1$getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "System$Collections$Generic$IList$1$setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "System$Collections$Generic$ICollection$1$Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly",
            "System$Collections$Generic$ICollection$1$add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "System$Collections$Generic$ICollection$1$clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "System$Collections$Generic$ICollection$1$contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "System$Collections$Generic$ICollection$1$copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "System$Collections$Generic$IEnumerable$1$GetEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator",
            "System$Collections$Generic$IList$1$indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf",
            "System$Collections$Generic$IList$1$insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert",
            "System$Collections$Generic$ICollection$1$remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "System$Collections$Generic$IList$1$removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt"
        ],
        methods: {
            System$Collections$Generic$IList$1$getItem: function (index) {
                return Bridge.getDefaultValue(T);
            },
            System$Collections$Generic$IList$1$setItem: function (index, value) { },
            System$Collections$Generic$ICollection$1$add: function (item) { },
            System$Collections$Generic$ICollection$1$clear: function () { },
            System$Collections$Generic$ICollection$1$contains: function (item) {
                return true;
            },
            System$Collections$Generic$ICollection$1$copyTo: function (array, arrayIndex) {
                array[System.Array.index(0, array)] = Bridge.getDefaultValue(T);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return null;
            },
            System$Collections$Generic$IEnumerable$1$GetEnumerator: function () {
                return null;
            },
            System$Collections$Generic$IList$1$indexOf: function (item) {
                return 200;
            },
            System$Collections$Generic$IList$1$insert: function (index, item) { },
            System$Collections$Generic$ICollection$1$remove: function (item) {
                return true;
            },
            System$Collections$Generic$IList$1$removeAt: function (index) { }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.List2$1", function (T) { return {
        inherits: [System.Collections.Generic.IList$1(T)],
        $kind: "nested class",
        props: {
            Count: {
                get: function () {
                    return 1000;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
            "indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf",
            "insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert",
            "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt"
        ],
        methods: {
            getItem: function (index) {
                return Bridge.getDefaultValue(T);
            },
            setItem: function (index, value) { },
            add: function (item) { },
            clear: function () { },
            contains: function (item) {
                return true;
            },
            copyTo: function (array, arrayIndex) {
                array[System.Array.index(1, array)] = Bridge.getDefaultValue(T);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return null;
            },
            GetEnumerator: function () {
                return null;
            },
            indexOf: function (item) {
                return 2000;
            },
            insert: function (index, item) { },
            remove: function (item) {
                return true;
            },
            removeAt: function (index) { }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1775", {
        methods: {
            TestSumForEmpty: function () {
                var decimalList = new (System.Collections.Generic.List$1(System.Decimal)).ctor();
                var decimalSum = System.Linq.Enumerable.from(decimalList, System.Decimal).sum(System.Decimal.Zero);
                var lessThanOne = decimalSum.lt(System.Decimal(1));

                Bridge.Test.NUnit.Assert.True(Bridge.is(decimalSum, System.Decimal), "is decimal");
                Bridge.Test.NUnit.Assert.True(decimalSum.equalsT(System.Decimal(0)), "== 0");
                Bridge.Test.NUnit.Assert.True(lessThanOne, "less than one");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1776", {
        methods: {
            TestTupleHashCode: function () {
                var key1 = { Item1: 1, Item2: 2 };
                var key2 = { Item1: 1, Item2: 2 };

                Bridge.Test.NUnit.Assert.True(Bridge.objectEquals(key1, key2, true), "Equals works");

                var dic = new (System.Collections.Generic.Dictionary$2(System.Tuple$2(System.Int32,System.Int32),System.Int32)).ctor();
                dic.add(key1, 1);

                var output1 = { };
                dic.tryGetValue(key1, output1);
                Bridge.Test.NUnit.Assert.AreEqual(1, output1.v, "TryGetValue for key1");

                var output2 = { };
                dic.tryGetValue(key2, output2);
                Bridge.Test.NUnit.Assert.AreEqual(1, output2.v, "TryGetValue for key2");

                Bridge.Test.NUnit.Assert.AreEqual(Bridge.getHashCode(key1, false, true), Bridge.getHashCode(key2, false, true), "Same GetHashCode");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1787", {
        methods: {
            TestNamedParams: function () {
                var p = 7;
                var expected = 7;
                var actual;

                actual = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1787.SomeClass2([p]).Value;
                Bridge.Test.NUnit.Assert.AreEqual(expected, actual);

                actual = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1787.SomeClass2([p]).Value;
                Bridge.Test.NUnit.Assert.AreEqual(expected, actual);

                actual = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1787.SomeClass2().SumOfArray([p]);
                Bridge.Test.NUnit.Assert.AreEqual(expected, actual);

                actual = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1787.SomeClass2().SumOfArray([p]);
                Bridge.Test.NUnit.Assert.AreEqual(expected, actual);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1787.SomeClass2", {
        $kind: "nested class",
        fields: {
            Value: 0
        },
        ctors: {
            ctor: function (a) {
                if (a === void 0) { a = []; }

                this.$initialize();
                if (a != null) {
                    for (var i = 0; i < a.length; i = (i + 1) | 0) {
                        this.Value = (this.Value + a[System.Array.index(i, a)]) | 0;
                    }
                }
            }
        },
        methods: {
            SumOfArray: function (a) {
                if (a === void 0) { a = []; }
                var r = 0;

                if (a != null) {
                    for (var i = 0; i < a.length; i = (i + 1) | 0) {
                        r = (r + a[System.Array.index(i, a)]) | 0;
                    }
                }

                return r;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802", {
        statics: {
            methods: {
                bool: function () {
                    return 1;
                },
                byte: function () {
                    return 2;
                },
                sbyte: function () {
                    return 3;
                },
                short: function () {
                    return 4;
                },
                ushort: function () {
                    return 5;
                },
                int: function () {
                    return 6;
                },
                uint: function () {
                    return 7;
                },
                long: function () {
                    return 8;
                },
                ulong: function () {
                    return 9;
                },
                double: function () {
                    return 10;
                },
                float: function () {
                    return 11;
                },
                decimal: function () {
                    return 12;
                },
                string: function () {
                    return 13;
                },
                char: function () {
                    return 14;
                },
                object: function () {
                    return 15;
                },
                typeof: function () {
                    return 16;
                },
                sizeof: function () {
                    return 17;
                },
                null: function () {
                    return 18;
                },
                true: function () {
                    return 19;
                },
                false: function () {
                    return 20;
                },
                if: function () {
                    return 21;
                },
                else: function () {
                    return 22;
                },
                while: function () {
                    return 23;
                },
                for: function () {
                    return 24;
                },
                foreach: function () {
                    return 25;
                },
                do: function () {
                    return 26;
                },
                switch: function () {
                    return 27;
                },
                case: function () {
                    return 28;
                },
                default: function () {
                    return 29;
                },
                lock: function () {
                    return 30;
                },
                try: function () {
                    return 31;
                },
                throw: function () {
                    return 32;
                },
                catch: function () {
                    return 33;
                },
                finally: function () {
                    return 34;
                },
                goto: function () {
                    return 35;
                },
                break: function () {
                    return 36;
                },
                continue: function () {
                    return 37;
                },
                return: function () {
                    return 38;
                },
                public: function () {
                    return 39;
                },
                private: function () {
                    return 40;
                },
                internal: function () {
                    return 41;
                },
                protected: function () {
                    return 42;
                },
                static: function () {
                    return 43;
                },
                readonly: function () {
                    return 44;
                },
                sealed: function () {
                    return 45;
                },
                const: function () {
                    return 46;
                },
                new: function () {
                    return 47;
                },
                override: function () {
                    return 48;
                },
                abstract: function () {
                    return 49;
                },
                virtual: function () {
                    return 50;
                },
                partial: function () {
                    return 51;
                },
                ref: function () {
                    return 52;
                },
                out: function () {
                    return 53;
                },
                in: function () {
                    return 54;
                },
                where: function () {
                    return 55;
                },
                params: function () {
                    return 56;
                },
                this: function () {
                    return 57;
                },
                base: function () {
                    return 58;
                },
                namespace: function () {
                    return 59;
                },
                using: function () {
                    return 60;
                },
                class: function () {
                    return 61;
                },
                struct: function () {
                    return 62;
                },
                interface: function () {
                    return 63;
                },
                delegate: function () {
                    return 64;
                },
                checked: function () {
                    return 65;
                },
                get: function () {
                    return 66;
                },
                set: function () {
                    return 67;
                },
                add: function () {
                    return 68;
                },
                remove: function () {
                    return 69;
                },
                operator: function () {
                    return 70;
                },
                implicit: function () {
                    return 71;
                },
                explicit: function () {
                    return 72;
                },
                fixed: function () {
                    return 73;
                },
                extern: function () {
                    return 74;
                },
                event: function () {
                    return 75;
                },
                enum: function () {
                    return 76;
                },
                unsafe: function () {
                    return 77;
                }
            }
        },
        methods: {
            TestReservedWordsAsMethodName: function () {
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.bool());
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.bool());

                Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.byte());
                Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.byte());

                Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.sbyte());
                Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.sbyte());

                Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.short());
                Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.short());

                Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.ushort());
                Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.ushort());

                Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.int());
                Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.int());

                Bridge.Test.NUnit.Assert.AreEqual(7, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.uint());
                Bridge.Test.NUnit.Assert.AreEqual(7, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.uint());

                Bridge.Test.NUnit.Assert.AreEqual(8, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.long());
                Bridge.Test.NUnit.Assert.AreEqual(8, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.long());

                Bridge.Test.NUnit.Assert.AreEqual(9, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.ulong());
                Bridge.Test.NUnit.Assert.AreEqual(9, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.ulong());

                Bridge.Test.NUnit.Assert.AreEqual(10, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.double());
                Bridge.Test.NUnit.Assert.AreEqual(10, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.double());

                Bridge.Test.NUnit.Assert.AreEqual(11, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.float());
                Bridge.Test.NUnit.Assert.AreEqual(11, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.float());

                Bridge.Test.NUnit.Assert.AreEqual(12, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.decimal());
                Bridge.Test.NUnit.Assert.AreEqual(12, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.decimal());

                Bridge.Test.NUnit.Assert.AreEqual(13, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.string());
                Bridge.Test.NUnit.Assert.AreEqual(13, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.string());

                Bridge.Test.NUnit.Assert.AreEqual(14, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.char());
                Bridge.Test.NUnit.Assert.AreEqual(14, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.char());

                Bridge.Test.NUnit.Assert.AreEqual(15, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.object());
                Bridge.Test.NUnit.Assert.AreEqual(15, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.object());

                Bridge.Test.NUnit.Assert.AreEqual(16, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.typeof());
                Bridge.Test.NUnit.Assert.AreEqual(16, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.typeof());

                Bridge.Test.NUnit.Assert.AreEqual(17, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.sizeof());
                Bridge.Test.NUnit.Assert.AreEqual(17, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.sizeof());

                Bridge.Test.NUnit.Assert.AreEqual(18, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.null());
                Bridge.Test.NUnit.Assert.AreEqual(18, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.null());

                Bridge.Test.NUnit.Assert.AreEqual(19, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.true());
                Bridge.Test.NUnit.Assert.AreEqual(19, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.true());

                Bridge.Test.NUnit.Assert.AreEqual(20, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.false());
                Bridge.Test.NUnit.Assert.AreEqual(20, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.false());

                Bridge.Test.NUnit.Assert.AreEqual(21, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.if());
                Bridge.Test.NUnit.Assert.AreEqual(21, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.if());

                Bridge.Test.NUnit.Assert.AreEqual(22, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.else());
                Bridge.Test.NUnit.Assert.AreEqual(22, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.else());

                Bridge.Test.NUnit.Assert.AreEqual(23, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.while());
                Bridge.Test.NUnit.Assert.AreEqual(23, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.while());

                Bridge.Test.NUnit.Assert.AreEqual(24, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.for());
                Bridge.Test.NUnit.Assert.AreEqual(24, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.for());

                Bridge.Test.NUnit.Assert.AreEqual(25, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.foreach());
                Bridge.Test.NUnit.Assert.AreEqual(25, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.foreach());

                Bridge.Test.NUnit.Assert.AreEqual(26, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.do());
                Bridge.Test.NUnit.Assert.AreEqual(26, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.do());

                Bridge.Test.NUnit.Assert.AreEqual(27, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.switch());
                Bridge.Test.NUnit.Assert.AreEqual(27, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.switch());

                Bridge.Test.NUnit.Assert.AreEqual(28, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.case());
                Bridge.Test.NUnit.Assert.AreEqual(28, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.case());

                Bridge.Test.NUnit.Assert.AreEqual(29, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.default());
                Bridge.Test.NUnit.Assert.AreEqual(29, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.default());

                Bridge.Test.NUnit.Assert.AreEqual(30, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.lock());
                Bridge.Test.NUnit.Assert.AreEqual(30, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.lock());

                Bridge.Test.NUnit.Assert.AreEqual(31, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.try());
                Bridge.Test.NUnit.Assert.AreEqual(31, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.try());

                Bridge.Test.NUnit.Assert.AreEqual(32, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.throw());
                Bridge.Test.NUnit.Assert.AreEqual(32, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.throw());

                Bridge.Test.NUnit.Assert.AreEqual(33, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.catch());
                Bridge.Test.NUnit.Assert.AreEqual(33, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.catch());

                Bridge.Test.NUnit.Assert.AreEqual(34, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.finally());
                Bridge.Test.NUnit.Assert.AreEqual(34, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.finally());

                Bridge.Test.NUnit.Assert.AreEqual(35, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.goto());
                Bridge.Test.NUnit.Assert.AreEqual(35, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.goto());

                Bridge.Test.NUnit.Assert.AreEqual(36, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.break());
                Bridge.Test.NUnit.Assert.AreEqual(36, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.break());

                Bridge.Test.NUnit.Assert.AreEqual(37, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.continue());
                Bridge.Test.NUnit.Assert.AreEqual(37, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.continue());

                Bridge.Test.NUnit.Assert.AreEqual(38, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.return());
                Bridge.Test.NUnit.Assert.AreEqual(38, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.return());

                Bridge.Test.NUnit.Assert.AreEqual(39, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.public());
                Bridge.Test.NUnit.Assert.AreEqual(39, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.public());

                Bridge.Test.NUnit.Assert.AreEqual(40, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.private());
                Bridge.Test.NUnit.Assert.AreEqual(40, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.private());

                Bridge.Test.NUnit.Assert.AreEqual(41, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.internal());
                Bridge.Test.NUnit.Assert.AreEqual(41, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.internal());

                Bridge.Test.NUnit.Assert.AreEqual(42, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.protected());
                Bridge.Test.NUnit.Assert.AreEqual(42, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.protected());

                Bridge.Test.NUnit.Assert.AreEqual(43, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.static());
                Bridge.Test.NUnit.Assert.AreEqual(43, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.static());

                Bridge.Test.NUnit.Assert.AreEqual(44, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.readonly());
                Bridge.Test.NUnit.Assert.AreEqual(44, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.readonly());

                Bridge.Test.NUnit.Assert.AreEqual(45, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.sealed());
                Bridge.Test.NUnit.Assert.AreEqual(45, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.sealed());

                Bridge.Test.NUnit.Assert.AreEqual(46, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.const());
                Bridge.Test.NUnit.Assert.AreEqual(46, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.const());

                Bridge.Test.NUnit.Assert.AreEqual(47, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.new());
                Bridge.Test.NUnit.Assert.AreEqual(47, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.new());

                Bridge.Test.NUnit.Assert.AreEqual(48, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.override());
                Bridge.Test.NUnit.Assert.AreEqual(48, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.override());

                Bridge.Test.NUnit.Assert.AreEqual(49, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.abstract());
                Bridge.Test.NUnit.Assert.AreEqual(49, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.abstract());

                Bridge.Test.NUnit.Assert.AreEqual(50, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.virtual());
                Bridge.Test.NUnit.Assert.AreEqual(50, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.virtual());

                Bridge.Test.NUnit.Assert.AreEqual(51, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.partial());
                Bridge.Test.NUnit.Assert.AreEqual(51, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.partial());

                Bridge.Test.NUnit.Assert.AreEqual(52, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.ref());
                Bridge.Test.NUnit.Assert.AreEqual(52, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.ref());

                Bridge.Test.NUnit.Assert.AreEqual(53, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.out());
                Bridge.Test.NUnit.Assert.AreEqual(53, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.out());

                Bridge.Test.NUnit.Assert.AreEqual(54, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.in());
                Bridge.Test.NUnit.Assert.AreEqual(54, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.in());

                Bridge.Test.NUnit.Assert.AreEqual(55, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.where());
                Bridge.Test.NUnit.Assert.AreEqual(55, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.where());

                Bridge.Test.NUnit.Assert.AreEqual(56, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.params());
                Bridge.Test.NUnit.Assert.AreEqual(56, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.params());

                Bridge.Test.NUnit.Assert.AreEqual(57, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.this());
                Bridge.Test.NUnit.Assert.AreEqual(57, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.this());

                Bridge.Test.NUnit.Assert.AreEqual(58, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.base());
                Bridge.Test.NUnit.Assert.AreEqual(58, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.base());

                Bridge.Test.NUnit.Assert.AreEqual(59, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.namespace());
                Bridge.Test.NUnit.Assert.AreEqual(59, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.namespace());

                Bridge.Test.NUnit.Assert.AreEqual(60, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.using());
                Bridge.Test.NUnit.Assert.AreEqual(60, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.using());

                Bridge.Test.NUnit.Assert.AreEqual(61, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.class());
                Bridge.Test.NUnit.Assert.AreEqual(61, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.class());

                Bridge.Test.NUnit.Assert.AreEqual(62, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.struct());
                Bridge.Test.NUnit.Assert.AreEqual(62, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.struct());

                Bridge.Test.NUnit.Assert.AreEqual(63, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.interface());
                Bridge.Test.NUnit.Assert.AreEqual(63, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.interface());

                Bridge.Test.NUnit.Assert.AreEqual(64, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.delegate());
                Bridge.Test.NUnit.Assert.AreEqual(64, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.delegate());

                Bridge.Test.NUnit.Assert.AreEqual(65, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.checked());
                Bridge.Test.NUnit.Assert.AreEqual(65, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.checked());

                Bridge.Test.NUnit.Assert.AreEqual(66, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.get());
                Bridge.Test.NUnit.Assert.AreEqual(66, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.get());

                Bridge.Test.NUnit.Assert.AreEqual(67, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.set());
                Bridge.Test.NUnit.Assert.AreEqual(67, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.set());

                Bridge.Test.NUnit.Assert.AreEqual(68, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.add());
                Bridge.Test.NUnit.Assert.AreEqual(68, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.add());

                Bridge.Test.NUnit.Assert.AreEqual(69, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.remove());
                Bridge.Test.NUnit.Assert.AreEqual(69, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.remove());

                Bridge.Test.NUnit.Assert.AreEqual(70, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.operator());
                Bridge.Test.NUnit.Assert.AreEqual(70, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.operator());

                Bridge.Test.NUnit.Assert.AreEqual(71, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.implicit());
                Bridge.Test.NUnit.Assert.AreEqual(71, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.implicit());

                Bridge.Test.NUnit.Assert.AreEqual(72, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.explicit());
                Bridge.Test.NUnit.Assert.AreEqual(72, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.explicit());

                Bridge.Test.NUnit.Assert.AreEqual(73, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.fixed());
                Bridge.Test.NUnit.Assert.AreEqual(73, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.fixed());

                Bridge.Test.NUnit.Assert.AreEqual(74, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.extern());
                Bridge.Test.NUnit.Assert.AreEqual(74, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.extern());

                Bridge.Test.NUnit.Assert.AreEqual(75, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.event());
                Bridge.Test.NUnit.Assert.AreEqual(75, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.event());

                Bridge.Test.NUnit.Assert.AreEqual(76, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.enum());
                Bridge.Test.NUnit.Assert.AreEqual(76, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.enum());

                Bridge.Test.NUnit.Assert.AreEqual(77, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.unsafe());
                Bridge.Test.NUnit.Assert.AreEqual(77, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1802.unsafe());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803", {
        methods: {
            TestCollectionInitializerWithStaticMember: function () {
                var list1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test1.GetList();
                var list2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test2.GetList();
                var list3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test3().GetList();

                Bridge.Test.NUnit.Assert.AreEqual(1, list1.Count);
                Bridge.Test.NUnit.Assert.AreEqual("Const", list1.getItem(0));

                Bridge.Test.NUnit.Assert.AreEqual(1, list2.Count);
                Bridge.Test.NUnit.Assert.AreEqual(1, list2.getItem(0));

                Bridge.Test.NUnit.Assert.AreEqual(1, list3.Count);
                Bridge.Test.NUnit.Assert.AreEqual(1, list3.getItem(0));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test1", {
        $kind: "nested class",
        statics: {
            fields: {
                s: null
            },
            ctors: {
                init: function () {
                    this.s = "Const";
                }
            },
            methods: {
                GetList: function () {
                    return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test1.f1(new (System.Collections.Generic.List$1(System.String)).ctor());
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test1", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test1, {
        f1: function (_o1) {
            _o1.add(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test1.s);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test2", {
        $kind: "nested class",
        statics: {
            fields: {
                s: 0
            },
            ctors: {
                init: function () {
                    this.s = 1;
                }
            },
            methods: {
                GetList: function () {
                    return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test2.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test2", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test2, {
        f1: function (_o1) {
            _o1.add(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test2.s);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test3", {
        $kind: "nested class",
        fields: {
            s: 0
        },
        ctors: {
            init: function () {
                this.s = 1;
            }
        },
        methods: {
            GetList: function () {
                return Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test3.f1)(new (System.Collections.Generic.List$1(System.Int32)).ctor());
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test3", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1803.Test3, {
        f1: function (_o1) {
            _o1.add(this.s);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804", {
        methods: {
            TestStructClone: function () {
                var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct1();
                var b = a.$clone();
                a.nested.field = 5;
                a.nested.nested.field = 6;

                Bridge.Test.NUnit.Assert.AreEqual(5, a.nested.field);
                Bridge.Test.NUnit.Assert.AreEqual(6, a.nested.nested.field);

                Bridge.Test.NUnit.Assert.AreEqual(0, b.nested.field);
                Bridge.Test.NUnit.Assert.AreEqual(0, b.nested.nested.field);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct1", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct1(); }
            }
        },
        fields: {
            nested: null
        },
        ctors: {
            init: function () {
                this.nested = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1973676214, this.nested]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct1)) {
                    return false;
                }
                return Bridge.equals(this.nested, o.nested);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct1();
                s.nested = this.nested.$clone();
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct2", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct2(); }
            }
        },
        fields: {
            field: 0,
            nested: null
        },
        ctors: {
            init: function () {
                this.nested = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct3();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1973741750, this.field, this.nested]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct2)) {
                    return false;
                }
                return Bridge.equals(this.field, o.field) && Bridge.equals(this.nested, o.nested);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct2();
                s.field = this.field;
                s.nested = this.nested.$clone();
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct3", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct3(); }
            }
        },
        fields: {
            field: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1973807286, this.field]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct3)) {
                    return false;
                }
                return Bridge.equals(this.field, o.field);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1804.Struct3();
                s.field = this.field;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1810", {
        methods: {
            TestInterfaceIndexersAndCopyToAndIsReadOnly: function () {
                var l = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1810.C$1(System.Int32))();
                Bridge.Test.NUnit.Assert.NotNull(l, "IList created");

                var c = Bridge.as(l, System.Collections.Generic.ICollection$1(System.Int32));
                Bridge.Test.NUnit.Assert.True(System.Array.getIsReadOnly(c, System.Int32), "IsReadOnly");

                var a = System.Array.init([1, 2], System.Int32);
                System.Array.copyTo(c, a, 0, System.Int32);
                Bridge.Test.NUnit.Assert.AreEqual(0, a[System.Array.index(0, a)], "CopyTo()");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1810.C$1", function (T) { return {
        inherits: [System.Collections.Generic.IList$1(T)],
        $kind: "nested class",
        props: {
            System$Collections$Generic$ICollection$1$Count: {
                get: function () {
                    throw new System.NotImplementedException.ctor();
                }
            },
            System$Collections$Generic$ICollection$1$IsReadOnly: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "System$Collections$Generic$IList$1$getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "System$Collections$Generic$IList$1$setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "System$Collections$Generic$ICollection$1$Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "System$Collections$Generic$ICollection$1$IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly",
            "System$Collections$Generic$ICollection$1$add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "System$Collections$Generic$ICollection$1$clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "System$Collections$Generic$ICollection$1$contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "System$Collections$Generic$ICollection$1$copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "System$Collections$Generic$IEnumerable$1$GetEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator",
            "System$Collections$Generic$IList$1$indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf",
            "System$Collections$Generic$IList$1$insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert",
            "System$Collections$Generic$ICollection$1$remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "System$Collections$Generic$IList$1$removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt"
        ],
        methods: {
            System$Collections$Generic$IList$1$getItem: function (index) {
                return Bridge.getDefaultValue(T);
            },
            System$Collections$Generic$IList$1$setItem: function (index, value) { },
            System$Collections$Generic$ICollection$1$add: function (item) {
                throw new System.NotImplementedException.ctor();
            },
            System$Collections$Generic$ICollection$1$clear: function () {
                throw new System.NotImplementedException.ctor();
            },
            System$Collections$Generic$ICollection$1$contains: function (item) {
                throw new System.NotImplementedException.ctor();
            },
            System$Collections$Generic$ICollection$1$copyTo: function (array, arrayIndex) {
                array[System.Array.index(0, array)] = Bridge.getDefaultValue(T);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                throw new System.NotImplementedException.ctor();
            },
            System$Collections$Generic$IEnumerable$1$GetEnumerator: function () {
                throw new System.NotImplementedException.ctor();
            },
            System$Collections$Generic$IList$1$indexOf: function (item) {
                throw new System.NotImplementedException.ctor();
            },
            System$Collections$Generic$IList$1$insert: function (index, item) {
                throw new System.NotImplementedException.ctor();
            },
            System$Collections$Generic$ICollection$1$remove: function (item) {
                throw new System.NotImplementedException.ctor();
            },
            System$Collections$Generic$IList$1$removeAt: function (index) {
                throw new System.NotImplementedException.ctor();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812", {
        methods: {
            TestDoubleConversion: function () {
                var a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Implicit(1);
                a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Addition(a, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Implicit(1));
                Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Implicit$1(a));
                Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Implicit$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.Identity(Bridge.identity(a, (a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Addition(a, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Implicit(1)))))));
                Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Implicit$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.Identity(((a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Addition(a, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object.op_Implicit(1)))))));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object", {
        $kind: "nested class",
        statics: {
            methods: {
                Identity: function (o) {
                    return o;
                },
                op_Implicit: function (d) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object(d);
                },
                op_Implicit$1: function (d) {
                    return d.value;
                },
                op_Addition: function (left, right) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1812._Object(((left.value + right.value) | 0));
                }
            }
        },
        fields: {
            value: 0
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.value = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1813", {
        statics: {
            methods: {
                instance_callback: function (a) {
                    if (a === void 0) { a = null; }
                }
            }
        },
        fields: {
            list: null
        },
        ctors: {
            init: function () {
                this.list = new (System.Collections.Generic.List$1(System.Object)).ctor();
            }
        },
        methods: {
            Add: function (obj) {
                if (obj === void 0) { obj = []; }
                this.list.AddRange(obj);
            },
            TestAddStaticMethod: function () {
                var callbacks = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1813();
                callbacks.Add([(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1813.instance_callback)]);
                Bridge.Test.NUnit.Assert.AreEqual(1, callbacks.list.Count);
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(callbacks.list.getItem(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1813.instance_callback));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1814", {
        methods: {
            TestNamespaceConflictResolution: function () {
                Bridge.Test.NUnit.Assert.AreEqual(".png", achievements.content.ContentAchievements.Method());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1819", {
        methods: {
            TestObjectLiteralWithInheritance: function () {
                var x = { Name: "test" };
                Bridge.Test.NUnit.Assert.AreEqual("test", x.Name);
                Bridge.Test.NUnit.Assert.True(Bridge.isPlainObject(x));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1819.AttributeBase", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821", {
        methods: {
            TestInterfaceMember1: function () {
                var ic = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.AAnother.Create(System.Int32);
                Bridge.Test.NUnit.Assert.NotNull(ic);
                Bridge.Test.NUnit.Assert.True(Bridge.is(ic, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.CClass$1(System.Int32)));
            },
            TestInterfaceMember2: function () {
                var foo = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Foo();
                var x = System.Nullable.lift1("$clone", foo.A.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1821$IBar$1$System$Nullable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1821$Xxx$Value);

                Bridge.Test.NUnit.Assert.NotNull(System.Nullable.lift1("$clone", x));
                Bridge.Test.NUnit.Assert.AreEqual(5, System.Nullable.getValue(x).field);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.AAnother", {
        $kind: "nested class",
        statics: {
            methods: {
                Create: function (T) {
                    var x;
                    x = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.CClass$1(T))();
                    x["Bridge$ClientTest$Batch3$BridgeIssues$Bridge1821$IInterface$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1821$TT$1$" + Bridge.getTypeAlias(T) + "$Act"](new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.TT$1(T))());

                    return x;
                }
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.IBar$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.TT$1", function (T) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.TT$1(T))(); }
            }
        },
        fields: {
            A: Bridge.getDefaultValue(T),
            B: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([21588, this.A, this.B]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.TT$1(T))) {
                    return false;
                }
                return Bridge.equals(this.A, o.A) && Bridge.equals(this.B, o.B);
            },
            $clone: function (to) { return this; }
        }
    }; });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.IInterface$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Foo", {
        $kind: "nested class",
        props: {
            A: {
                get: function () {
                    return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Bar$1(System.Nullable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Xxx)))(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Xxx.$ctor1(5));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Xxx", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Xxx(); }
            }
        },
        fields: {
            field: 0
        },
        ctors: {
            $ctor1: function (f) {
                this.$initialize();
                this.field = f;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([7895128, this.field]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Xxx)) {
                    return false;
                }
                return Bridge.equals(this.field, o.field);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Xxx();
                s.field = this.field;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1832", {
        methods: {
            TestInitWithTempVars: function () {
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1832.IncTest.id);
                var inst = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1832.IncTest();
                Bridge.Test.NUnit.Assert.AreEqual(2, inst.id_instance);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1832.IncTest", {
        $kind: "nested class",
        statics: {
            fields: {
                id_counter: 0,
                id: 0
            },
            ctors: {
                init: function () {
                    var $t;
                    this.id_counter = 0;
                    this.id = (($t = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1832.IncTest.id_counter + 1) | 0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1832.IncTest.id_counter = $t, $t));
                }
            }
        },
        fields: {
            id_instance: 0
        },
        ctors: {
            init: function () {
                var $t;
                this.id_instance = (($t = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1832.IncTest.id_counter + 1) | 0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1832.IncTest.id_counter = $t, $t));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1833", {
        methods: {
            TestInheritedPropertyInLiteral: function () {
                var x = { Id: 12, Name: "test" };
                Bridge.Test.NUnit.Assert.AreEqual(12, x.Id);
                Bridge.Test.NUnit.Assert.AreEqual(12, Bridge.unbox(x.Id));
                Bridge.Test.NUnit.Assert.AreEqual("test", x.Name);
                Bridge.Test.NUnit.Assert.AreEqual("test", Bridge.unbox(x.Name));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1833.AttributeBase", {
        $kind: "nested class",
        props: {
            Id: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1834", {
        statics: {
            methods: {
                Go: function (TValues, routeDetails) {
                    return routeDetails.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1834$ITest1$1$ToRoute(routeDetails);
                }
            }
        },
        methods: {
            TestIgnoreGenericInterface: function () {
                Bridge.Test.NUnit.Assert.AreEqual("Test1<TValues>", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1834.Go(System.String, new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1834.Test1$1(System.String))()));
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1834.ITest1$1", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1835", {
        statics: {
            methods: {
                Go: function (TValues, message) {
                    return message;
                }
            }
        },
        methods: {
            TestGenericMethodWithAnonTypeArg: function () {
                Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1835.Go(System.Object, new $asm.$AnonymousType$13(1)));
            }
        }
    });

    Bridge.define("$AnonymousType$13", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (test) {
                this.Test = test;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$13)) {
                    return false;
                }
                return Bridge.equals(this.Test, o.Test);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550209242, this.Test]);
                return h;
            },
            toJSON: function () {
                return {
                    Test : this.Test
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Test","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_Test","t":8,"rt":System.Int32,"fg":"Test","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Test"}]}; }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842", {
        methods: {
            TestTypeOfConversion: function () {
                var t;
                var $class = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842.Class.op_Implicit(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842);
                t = $class;
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.getType(t), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842.Class));

                $class = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842.Class.op_Implicit(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842);
                t = $class;
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.getType(t), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842.Class));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842.Class", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (t) {
                    var $t;
                    return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1842.Class(), $t.type = t, $t);
                },
                op_Implicit$1: function (t) {
                    return t.type;
                }
            }
        },
        fields: {
            type: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1845", {
        methods: {
            TestCtorMemberName: function () {
                var b1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1845.Base1(null);
                Bridge.Test.NUnit.Assert.NotNull(b1, "b1");
                Bridge.Test.NUnit.Assert.AreEqual(1, b1.ctor$1(), "b1.ctor()");
                Bridge.Test.NUnit.Assert.AreEqual(2, b1.Ctor(), "b1.Ctor()");

                var b2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1845.Base2(null);
                Bridge.Test.NUnit.Assert.NotNull(b2, "b2");
                Bridge.Test.NUnit.Assert.AreEqual(1, b2.ctor$1, "b2.ctor");
                Bridge.Test.NUnit.Assert.AreEqual(2, b2.Ctor, "b2.Ctor");

                var $ctor = 3;
                Bridge.Test.NUnit.Assert.AreEqual(3, $ctor, "var ctor");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1845.Base1", {
        $kind: "nested class",
        ctors: {
            ctor: function (target) {
                this.$initialize();
                this.ctor$1();
                this.Ctor();
            }
        },
        methods: {
            ctor$1: function () {
                return 1;
            },
            Ctor: function () {
                return 2;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1845.Base2", {
        $kind: "nested class",
        props: {
            ctor$1: {
                get: function () {
                    return 1;
                }
            },
            Ctor: {
                get: function () {
                    return 2;
                }
            }
        },
        ctors: {
            ctor: function (target) {
                this.$initialize();
                var r1 = this.ctor$1;
                var r2 = this.Ctor;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1846", {
        methods: {
            TestImplicitOperatorInForeachLoop: function () {
                var $t;
                var arr = System.Array.init(["a", "b"], System.String);
                var i = 0;
                $t = Bridge.getEnumerator(arr);
                try {
                    while ($t.moveNext()) {
                        var o = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1846.Obj.op_Implicit($t.Current);
                        Bridge.Test.NUnit.Assert.AreEqual(arr[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), arr)], o.s);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1846.Obj", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (str) {
                    var $t;
                    return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1846.Obj(), $t.s = str, $t);
                }
            }
        },
        fields: {
            s: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1847", {
        methods: {
            TestActivatorCreateInstanceCallProtectedConstructor: function () {
                var instance = Bridge.createInstance(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1847.CLS, [Bridge.box(1, System.Int32)]);
                Bridge.Test.NUnit.Assert.AreEqual("ok", instance.status);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1847.CLS", {
        $kind: "nested class",
        fields: {
            status: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.status = "Not ok";
            },
            $ctor1: function (i) {
                this.$initialize();
                this.status = "ok";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1848", {
        methods: {
            TestExternalInterfaceProperty: function () {
                Bridge.Bridge1848_ITest = {
                    getNewId: function () { return 123; },
                    name: "editor"
                };
                Bridge.Bridge1848_ITest2 = {
                    Bridge1848_ITest$getNewId: function () { return 123; },
                    Bridge1848_ITest$name: "editor"
                };

                var initialiser = Bridge.Bridge1848_ITest;
                Bridge.Test.NUnit.Assert.AreEqual(123, initialiser.getNewId());
                Bridge.Test.NUnit.Assert.AreEqual("editor", initialiser.name);

                var initialiser2 = Bridge.Bridge1848_ITest2;
                Bridge.Test.NUnit.Assert.AreEqual(123, initialiser2.Bridge1848_ITest$getNewId());
                Bridge.Test.NUnit.Assert.AreEqual("editor", initialiser2.Bridge1848_ITest$name);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1850", {
        methods: {
            TestImplicitInterface: function () {
                var l = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1850.LookupOptions$1(System.Int32))();
                var i = l;
                Bridge.Test.NUnit.Assert.Null(l.GetEnumerator());
                Bridge.Test.NUnit.Assert.Null(Bridge.getEnumerator(i, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1850.LookupOptions$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Collections.Generic.KeyValuePair$2(T,System.String))],
        $kind: "nested class",
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(T) + "$System$String$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        methods: {
            GetEnumerator: function () {
                return null;
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return null;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852", {
        statics: {
            methods: {
                DoSomething: function (T, matcher, cls, cls1, aux1, aux2) {
                    var a = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1.Aux1(System.String))();
                    var a1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1.Aux2$1(System.String,System.Int32))();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1(System.String).Test1Method();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1(System.String).Test1Method2(System.String);

                    var c6 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1.Class2.Class3.Class4();
                    matcher.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1852DispatcherMessageExtensions$IMatchDispatcherMessages$DoSomething(T, null);
                    var c1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1.Aux1(System.Int32))();
                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1();
                    var c3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1.Class2();
                    var c4 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1.Class2();
                    var c5 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1.Class2();

                    return 1;
                }
            }
        },
        methods: {
            TestCase: function () {
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852.DoSomething(System.Int32, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852.MatchDispatcherMessages(), null, null, null, null));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.IMatchDispatcherMessages", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions", {
        statics: {
            fields: {
                cls1: null,
                cls2: null,
                cls3: null,
                cls4: null,
                cls5: null,
                cls6: null,
                cls7: null,
                cls8: null
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1.Class2", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1.Class2.Class3", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.Class1.Class2.Class3.Class4", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1", function (T) { return {
        statics: {
            methods: {
                Test1Method: function () { },
                Test1Method2: function (T1) { }
            }
        },
        fields: {
            field: null
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1.Aux1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1.Aux1.Aux2$1", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1.Aux2$1", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852Test1$1.Aux2$1.Aux1", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1853", {
        methods: {
            TestContainsUseEquals: function () {
                var t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1853.Test();
                var l = function (_o1) {
                        _o1.add(t);
                        return _o1;
                    }(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1853.Test)).ctor());
                Bridge.Test.NUnit.Assert.False(l.contains(t));

                var o = { };
                var l1 = function (_o2) {
                        _o2.add(o);
                        return _o2;
                    }(new (System.Collections.Generic.List$1(System.Object)).ctor());
                Bridge.Test.NUnit.Assert.True(l1.contains(o));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1853.Test", {
        $kind: "nested class",
        methods: {
            equals: function (a) {
                return false;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1854", {
        methods: {
            TestCase: function () {
                var $t;
                var reader = ($t = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1854.UseReader$1(System.String))(), $t.Reader = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1854.SomeReader$1(System.String))("test"), $t.Reader1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1854.SomeReader$1(System.String))("test1"), $t);
                var result = reader.Read();
                Bridge.Test.NUnit.Assert.AreEqual("test", result);

                result = reader.Read1();
                Bridge.Test.NUnit.Assert.AreEqual("test1", result);
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1854.IRead$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1854.UseReader$1", function (T) { return {
        $kind: "nested class",
        props: {
            Reader: null,
            Reader1: null
        },
        methods: {
            Read: function () {
                return this.Reader["Bridge$ClientTest$Batch3$BridgeIssues$Bridge1854$IRead$1$" + Bridge.getTypeAlias(T) + "$Read"]();
            },
            Read1: function () {
                return this.Reader1["Object$" + Bridge.getTypeAlias(T) + "$Read"]();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856", {
        methods: {
            TestCase: function () {
                var x = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.HtmlRenderElement();
                x.Children.Foo();
                Bridge.Test.NUnit.Assert.NotNull(x.Children.Changed);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.Collection$1", function (T) { return {
        $kind: "nested class",
        fields: {
            changed: null
        },
        props: {
            Changed: {
                get: function () {
                    return this.changed || ((this.changed = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.Signal$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.CollectionChangeArgs$1(T)))("Collection<T>.Changed")));
                }
            }
        },
        methods: {
            Foo: function () { }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.CollectionChangeArgs$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.HtmlRenderElement", {
        $kind: "nested class",
        fields: {
            children: null
        },
        props: {
            Children: {
                get: function () {
                    if (this.children == null) {
                        this.children = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.Collection$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.HtmlRenderElement))();
                        this.children.Changed.Bridge$ClientTest$Batch3$BridgeIssues$Bridge1856$IObservable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1856$CollectionChangeArgs$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1856$HtmlRenderElement$Observe(Bridge.fn.cacheBind(this, this.OnChildrenChanged));
                    }
                    return this.children;
                }
            }
        },
        methods: {
            OnChildrenChanged: function (a) { }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.IObservable$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863", {
        statics: {
            fields: {
                sb: null
            }
        },
        methods: {
            TestTrueFalseOperators: function () {
                var $t, $t1;
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.sb = new System.Text.StringBuilder();
                var o1 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj("left"), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj.op_True($t) ? $t : Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj.op_BitwiseOr($t, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj("right")));
                Bridge.Test.NUnit.Assert.AreEqual("c:left;t:left;", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.sb.toString());
                Bridge.Test.NUnit.Assert.AreEqual("left", o1.v);

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.sb = new System.Text.StringBuilder();
                o1 = ($t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj("left"), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj.op_False($t1) ? $t1 : Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj.op_BitwiseAnd($t1, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj("right")));
                Bridge.Test.NUnit.Assert.AreEqual("c:left;f:left;c:right;", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.sb.toString());
                Bridge.Test.NUnit.Assert.AreEqual("right", o1.v);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.Obj", {
        $kind: "nested class",
        statics: {
            methods: {
                op_False: function (o) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.sb.append("f:" + (o.v || "") + ";");
                    return o == null;
                },
                op_True: function (o) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.sb.append("t:" + (o.v || "") + ";");
                    return o != null;
                },
                op_BitwiseOr: function (left, right) {
                    if (left == null) {
                        return right;
                    }

                    if (right == null) {
                        return left;
                    }

                    return left;
                },
                op_BitwiseAnd: function (left, right) {
                    if (left == null) {
                        return null;
                    }

                    if (right == null) {
                        return null;
                    }

                    return right;
                }
            }
        },
        fields: {
            _v: null
        },
        props: {
            v: {
                get: function () {
                    return this._v;
                },
                set: function (value) {
                    this._v = value;
                }
            }
        },
        ctors: {
            ctor: function (v) {
                this.$initialize();
                this.v = v;
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1863.sb.append("c:" + (v || "") + ";");
            }
        },
        methods: {
            toString: function () {
                return this.v;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1865", {
        methods: {
            TestObjectLiteralInterface: function () {
                var $t;
                var contract = ($t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1865.Contract.ctor(), $t.Value = 5, $t);
                var icontract = contract;
                var o = contract;

                Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Object));
                Bridge.Test.NUnit.Assert.True(Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1865.Contract));
                Bridge.Test.NUnit.Assert.False(Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1865.Contract2));

                Bridge.Test.NUnit.Assert.AreEqual(5, contract.Value);
                Bridge.Test.NUnit.Assert.AreEqual(5, icontract.Value);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869", {
        statics: {
            methods: {
                GetFoo: function (name) {
                    return window.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869[name];
                }
            }
        },
        methods: {
            TestGenericTypeDefinition: function () {
                var foo1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869.Foo$1(System.Object))();

                var n1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869.GetFoo("Foo$1$Object");
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(n1), "Foo$1$Object should not exist");

                var n2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869.GetFoo("Foo$1");
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(n2), "Foo$1 should exist");

                var foo2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869.Foo$1(System.Int64))();

                var n3 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869.GetFoo("Foo$1$System.Int64");
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(n1), "Foo$1$System.Int64 should not exist");

                var n4 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869.GetFoo("Foo$1");
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(n2), "Foo$1 should exist");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1869.Foo$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1871", {
        statics: {
            methods: {
                /**
                 * @static
                 * @private
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge1871
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge1871
                 * @param   {string}    args
                 * @return  {void}
                 */
                DoSomething: function (args) { }
            }
        },
        methods: {
            TestErrorCommentNotThrowCompilerException: function () {
                Bridge.Test.NUnit.Assert.True(true, "Should compile successfully");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1872", {
        methods: {
            TestAsyncWithAnonymousDelegate: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    done, 
                    task, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.NUnit.Assert.Async();
                                    task = new System.Threading.Tasks.Task(null);
                                    window.setTimeout(Bridge.fn.bind(this, function () {
                                        var $step = 0,
                                            $task1, 
                                            $jumpFromFinally, 
                                            $asyncBody = Bridge.fn.bind(this, function () {
                                                for (;;) {
                                                    $step = System.Array.min([0,1], $step);
                                                    switch ($step) {
                                                        case 0: {
                                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                                            $step = 1;
                                                            if ($task1.isCompleted()) continue;
                                                            $task1.continue($asyncBody);
                                                            return;
                                                        }
                                                        case 1: {
                                                            $task1.getAwaitedResult();
                                                            task.complete();
                                                            return;
                                                        }
                                                        default: {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }, arguments);

                                        $asyncBody();
                                    }));

                                    $task1 = task;
                                    $step = 1;
                                    if ($task1.isCompleted()) continue;
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    Bridge.Test.NUnit.Assert.True(task.isCompleted());

                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1875", {
        methods: {
            TestDictionaryWithLongVariableAsKey: function () {
                var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1875.ClassA();
                a.Id = System.Int64(1);

                var x = new (System.Collections.Generic.Dictionary$2(System.Int64,System.Int32)).ctor();
                x.setItem(a.Id, 2);
                var y = { };
                x.tryGetValue(a.Id, y);
                Bridge.Test.NUnit.Assert.AreEqual(2, y.v);
                Bridge.Test.NUnit.Assert.True(x.containsKey(a.Id));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1875.ClassA", {
        $kind: "nested class",
        props: {
            Id: System.Int64(0)
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878", {
        methods: {
            TestSumDefaultValue: function () {
                var $t;
                var x = new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA)).ctor();
                x.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA(), $t.DecimalNumber = System.Decimal(1), $t.LongNumber = System.Int64(2), $t));
                x.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA(), $t.DecimalNumber = System.Decimal(5), $t.LongNumber = System.Int64(6), $t));

                var c = System.Linq.Enumerable.from(x, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA).sum($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.f1, System.Int64.Zero);
                Bridge.Test.NUnit.Assert.AreEqual(System.Int64(8), c);

                var b = System.Linq.Enumerable.from(x, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA).sum($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.f2, System.Decimal.Zero);
                Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(6.0), b);

                var e1 = Bridge.as(x, System.Collections.Generic.IEnumerable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA));

                var c1 = System.Linq.Enumerable.from(e1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA).sum($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.f1, System.Int64.Zero);
                Bridge.Test.NUnit.Assert.AreEqual(System.Int64(8), c1);

                var b1 = System.Linq.Enumerable.from(e1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA).sum($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.f2, System.Decimal.Zero);
                Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(6.0), b1);

                var y = new (System.Collections.Generic.List$1(System.Decimal)).ctor();
                y.add(System.Decimal(7));
                y.add(System.Decimal(8));

                var a = System.Linq.Enumerable.from(y, System.Decimal).sum(System.Decimal.Zero);
                Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(15.0), a);

                var y1 = Bridge.as(y, System.Collections.Generic.IEnumerable$1(System.Decimal));
                var a1 = System.Linq.Enumerable.from(y1, System.Decimal).sum(System.Decimal.Zero);
                Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(15.0), a1);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878, {
        f1: function (i) {
            return i.LongNumber;
        },
        f2: function (i) {
            return i.DecimalNumber;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1878.classA", {
        $kind: "nested class",
        props: {
            DecimalNumber: System.Decimal(0.0),
            LongNumber: System.Int64(0)
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1880", {
        methods: {
            TestDefaultValuesWithTemplates: function () {
                Bridge.Test.NUnit.Assert.AreEqual(10, parseInt("10", 10));
                Bridge.Test.NUnit.Assert.AreEqual(8, parseInt("10", 8));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1880.BigInteger", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1880.BigInteger(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882", {
        statics: {
            methods: {
                GetArray: function () {
                    return System.Array.init(1, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.MVCArray$1(System.Int32));
                },
                GetArrayExternal: function () {
                    return System.Array.init(1, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.MVCArray$1(System.Int64));
                },
                GetList: function () {
                    return new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.MVCArray$1(System.Int32))).$ctor1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetArray());
                },
                GetListExternal: function () {
                    return new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.MVCArray$1(System.Int64))).$ctor1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetArrayExternal());
                }
            }
        },
        methods: {
            TestGenericClassCastForArray: function () {
                var $t, $t1, $t2, $t3;
                $t = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetArray());
                try {
                    while ($t.moveNext()) {
                        var i = $t.Current;
                        Bridge.Test.NUnit.Assert.True(true, "No cast for array of generic elements works");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                $t1 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetArray());
                try {
                    while ($t1.moveNext()) {
                        var i1 = $t1.Current;
                        Bridge.Test.NUnit.Assert.True(true, "Cast for array of generic elements works");
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                $t2 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetArrayExternal());
                try {
                    while ($t2.moveNext()) {
                        var i2 = $t2.Current;
                        Bridge.Test.NUnit.Assert.True(true, "No cast for array of external generic elements works");
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }

                $t3 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetArrayExternal());
                try {
                    while ($t3.moveNext()) {
                        var i3 = $t3.Current;
                        Bridge.Test.NUnit.Assert.True(true, "Cast for array of external generic elements works");
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }
            },
            TestGenericClassCastForList: function () {
                var $t, $t1, $t2, $t3;
                $t = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetList());
                try {
                    while ($t.moveNext()) {
                        var i = $t.Current;
                        Bridge.Test.NUnit.Assert.True(true, "No cast for List of generic elements works");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                $t1 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetList());
                try {
                    while ($t1.moveNext()) {
                        var i1 = $t1.Current;
                        Bridge.Test.NUnit.Assert.True(true, "Cast for List of generic elements works");
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                $t2 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetListExternal());
                try {
                    while ($t2.moveNext()) {
                        var i2 = $t2.Current;
                        Bridge.Test.NUnit.Assert.True(true, "No cast for List of external generic elements works");
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }

                $t3 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.GetListExternal());
                try {
                    while ($t3.moveNext()) {
                        var i3 = $t3.Current;
                        Bridge.Test.NUnit.Assert.True(true, "Cast for List of external generic elements works");
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1882.MVCArray$1", function (T) { return {
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884", {
        methods: {
            TestCollectionInitilizers: function () {
                var foo = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884.f2(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884.Foo());

                Bridge.Test.NUnit.Assert.AreEqual(3, foo.Indexed.Count);
                Bridge.Test.NUnit.Assert.AreEqual(4, foo.Items.Count);

                Bridge.Test.NUnit.Assert.AreEqual(1, foo.Indexed1.Count);
                Bridge.Test.NUnit.Assert.AreEqual(1, foo.Items1.Count);

                Bridge.Test.NUnit.Assert.AreEqual(3, foo.Indexed1.getItem(1).Count);
                Bridge.Test.NUnit.Assert.AreEqual(3, foo.Items1.getItem(0).Count);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884, {
        f1: function (_o1) {
            _o1.add("One");
            _o1.add("Two");
            _o1.add("Three");
            return _o1;
        },
        f2: function (_o2) {
            _o2.Items.add("One");
            _o2.Items.add("Two");
            _o2.Items.add("Three");
            _o2.Items1.add($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884.f1(new (System.Collections.Generic.List$1(System.String)).ctor()));
            _o2.Indexed.setItem(1, "Lorem");
            _o2.Indexed.setItem(5, "Ipsum");
            _o2.Indexed1.getItem(1).add("One");
            _o2.Indexed1.getItem(1).add("Two");
            _o2.Indexed1.getItem(1).add("Three");
            return _o2;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884.Foo", {
        $kind: "nested class",
        props: {
            Items: null,
            Items1: null,
            Indexed: null,
            Indexed1: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Items = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.Array.init(["1"], System.String));
                this.Items1 = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.String))).ctor();
                this.Indexed = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884.Foo.f1(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String)).ctor());
                this.Indexed1 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884.Foo.f2(new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.String))).ctor());
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884.Foo", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1884.Foo, {
        f1: function (_o1) {
            _o1.setItem(100, "Dolrt");
            return _o1;
        },
        f2: function (_o2) {
            _o2.setItem(1, new (System.Collections.Generic.List$1(System.String)).ctor());
            return _o2;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1886", {
        methods: {
            TestCase: function () {
                Bridge.Test.NUnit.Assert.True(System.Decimal(23.24, 2).equalsT(System.Convert.toDecimal("23.24")));
                Bridge.Test.NUnit.Assert.True(System.Decimal(23.0).equalsT(System.Convert.toDecimal("23.")));
                Bridge.Test.NUnit.Assert.True(System.Decimal(23.0).equalsT(System.Convert.toDecimal("23")));
                Bridge.Test.NUnit.Assert.True(System.Decimal(0.24, 2).equalsT(System.Convert.toDecimal(".24")));
                Bridge.Test.NUnit.Assert.True(System.Decimal(2.0).equalsT(System.Convert.toDecimal("2")));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892", {
        methods: {
            TestCase: function () {
                var $t;
                var data = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj();
                data = ($t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj.op_False(data) ? data : Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj.op_BitwiseAnd(data, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj.op_Implicit(data.length > 0)), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj.op_False($t) ? $t : Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj.op_BitwiseAnd($t, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj.op_Implicit((Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj.op_Implicit$3(data.getItem(Bridge.box(0, System.Int32)).getItem("key")) === 1))));
                Bridge.Test.NUnit.Assert.NotNull(data);
                var o = data;
                Bridge.Test.NUnit.Assert.True(Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj", {
        $kind: "nested class",
        statics: {
            methods: {
                op_False: function (o) {
                    return o == null;
                },
                op_True: function (o) {
                    return o != null;
                },
                op_Implicit: function (v) {
                    var $t;
                    return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj(), $t.value = Bridge.box(v, System.Boolean, System.Boolean.toString), $t);
                },
                op_Implicit$2: function (v) {
                    return Bridge.unbox(v.value);
                },
                op_Implicit$3: function (v) {
                    return Bridge.unbox(v.value);
                },
                op_Implicit$1: function (v) {
                    var $t;
                    return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj(), $t.value = Bridge.box(v, System.Int32), $t);
                },
                op_BitwiseOr: function (left, right) {
                    if (left == null) {
                        return right;
                    }

                    if (right == null) {
                        return left;
                    }

                    return left;
                },
                op_BitwiseAnd: function (left, right) {
                    if (left == null) {
                        return null;
                    }

                    if (right == null) {
                        return null;
                    }

                    return right;
                }
            }
        },
        fields: {
            value: null
        },
        props: {
            length: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getItem: function (key) {
                return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1892.Obj();
            },
            setItem: function (key, value) { },
            toString: function () {
                return Bridge.toString(this.value);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1896", {
        methods: {
            TestHexStringToInt: function () {
                var radix = 16;

                var v1 = System.UInt32.parse("ffff", radix);
                Bridge.Test.NUnit.Assert.AreEqual(65535, v1);

                Bridge.Test.NUnit.Assert.Throws$2(System.FormatException, function () {
                    System.UInt32.parse("0xffff", radix);
                });

                var v2 = { };
                var b2 = System.UInt32.tryParse("1700ffff", v2, radix);
                Bridge.Test.NUnit.Assert.True(b2, "b2");
                Bridge.Test.NUnit.Assert.AreEqual(385941503, v2.v);

                var v3 = { };
                var b3 = System.UInt32.tryParse("0x1700fff\u0410", v3, radix);
                Bridge.Test.NUnit.Assert.False(b3, "b3: " + v3.v);

                var v4 = { };
                var b4 = System.UInt32.tryParse("1700fffg", v4, radix);
                Bridge.Test.NUnit.Assert.False(b4, "b4: " + v4.v);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1897", {
        methods: {
            TestNestedNotEscapedBracketsInRegex: function () {
                var pattern = "([)])";
                var text = ")";

                var rx = new System.Text.RegularExpressions.Regex.ctor(pattern);
                var m = rx.match(text);
                Bridge.Test.NUnit.Assert.True(m.getSuccess());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899", {
        methods: {
            TestPropertyAndMethodNameConflict: function () {
                var item = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.Item();
                Bridge.Test.NUnit.Assert.AreEqual(1, item.Value);
                Bridge.Test.NUnit.Assert.AreEqual(2, item.GetValue());

                var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.B.ctor();
                Bridge.Test.NUnit.Assert.AreEqual(1, b.GetResult());

                b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.B.$ctor1(5);
                Bridge.Test.NUnit.Assert.AreEqual(15, b.GetResult());

                var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.C.ctor();
                Bridge.Test.NUnit.Assert.AreEqual(1, c.GetResult());

                c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.C.$ctor1(5);
                Bridge.Test.NUnit.Assert.AreEqual(15, c.GetResult());

                var item2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.Item2.ctor();
                Bridge.Test.NUnit.Assert.AreEqual(1, item2.GetResult());

                item2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.Item2.$ctor1(5);
                Bridge.Test.NUnit.Assert.AreEqual(15, item2.GetResult());

                var item3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.Item3.ctor();
                Bridge.Test.NUnit.Assert.AreEqual(1, item3.GetResult(true));

                item3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.Item3.$ctor1(5);
                Bridge.Test.NUnit.Assert.AreEqual(15, item3.GetResult(false));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.A", {
        $kind: "nested class",
        methods: {
            GetValue: function () {
                return 0;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.C", {
        $kind: "nested class",
        fields: {
            getValue: 0
        },
        props: {
            Value: {
                get: function () {
                    return this.getValue;
                },
                set: function (value) {
                    this.getValue = value;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Value = 1;
            },
            $ctor1: function (i) {
                this.$initialize();
                this.SetValue(i);
            }
        },
        methods: {
            SetValue: function (value) {
                this.getValue = (value + 10) | 0;
            },
            GetResult: function () {
                return this.getValue;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.IItem", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.Item2", {
        $kind: "nested class",
        fields: {
            value: 0
        },
        props: {
            Value: {
                get: function () {
                    return this.value;
                },
                set: function (value) {
                    this.value = value;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Value = 1;
            },
            $ctor1: function (i) {
                this.$initialize();
                this.SetValue(i);
            }
        },
        methods: {
            GetValue: function () {
                return this.Value;
            },
            SetValue: function (value) {
                this.value = (value + 10) | 0;
            },
            GetResult: function () {
                return this.value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.Item3", {
        $kind: "nested class",
        fields: {
            value: 0
        },
        props: {
            Value: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Value = 1;
            },
            $ctor1: function (i) {
                this.$initialize();
                this.SetValue(i);
            }
        },
        methods: {
            GetValue: function () {
                return this.Value;
            },
            SetValue: function (value) {
                this.value = (value + 10) | 0;
            },
            GetResult: function (prop) {
                return prop ? this.Value : this.value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1900", {
        statics: {
            methods: {
                TryGetValue1: function (value) {
                    value.v = 1;
                    return true;
                },
                TryGetValue2: function (value, value2) {
                    value.v = 1;
                    value2.v = "";
                    return true;
                },
                GetValue: function (T, value) {
                    value.v = Bridge.getDefaultValue(T);
                    return null;
                },
                TestOutRef: function (value, s) {
                    value.v = 1;
                    return true;
                }
            }
        },
        methods: {
            TestOutParamInMetadata: function () {
                var $t, $t1, $t2, $t3;
                var flags = 40;
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(($t = (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1900, 8, flags | 256, "TryGetValue1").p || []))[System.Array.index(0, $t)], System.Int32));
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(($t1 = (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1900, 8, flags | 256, "TryGetValue2").p || []))[System.Array.index(1, $t1)], System.String));
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(($t2 = (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1900, 8, flags | 256, "TestOutRef").p || []))[System.Array.index(1, $t2)], System.String));
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(($t3 = (Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1900, 8, 284, "GetValue").p || []))[System.Array.index(0, $t3)], System.Object));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1904", {
        methods: {
            TestDateTimeConstructorConvertsValueToMs: function () {
                var d1 = System.DateTime.getNow();
                var tickValue = System.DateTime.getTicks(d1);
                var d2 = System.DateTime.create$2(tickValue);

                Bridge.Test.NUnit.Assert.True(Bridge.equals(d1, d2), "d1 (" + (System.DateTime.format(d1) || "") + ") == d2(" + (System.DateTime.format(d2) || "") + ")");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1906", {
        methods: {
            TestIsOperatorInaccuracy: function () {
                Bridge.Test.NUnit.Assert.True(Bridge.is(true, System.Object));
                Bridge.Test.NUnit.Assert.True(Bridge.is("string", System.Object));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1909", {
        methods: {
            TestActivatorEnumCreation: function () {
                var et = Bridge.createInstance(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1909.EnumType);
                Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.unbox(et));
                Bridge.Test.NUnit.Assert.True(Bridge.is(et, System.Int32));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1909.EnumType", {
        $kind: "nested enum",
        statics: {
            fields: {
                Item1: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1910", {
        methods: {
            TestGenericTypeCasting: function () {
                var item1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1910.Item$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1910.ItemValue))(null);

                Bridge.Test.NUnit.Assert.True(item1.Value1 == null, "item1.Value1");
                Bridge.Test.NUnit.Assert.True(item1.Value2 == null, "item1.Value2");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1910.Item$1", function (T) { return {
        $kind: "nested class",
        fields: {
            value: null
        },
        props: {
            Value1: {
                get: function () {
                    return Bridge.cast(this.value, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1910.ItemValue);
                }
            },
            Value2: {
                get: function () {
                    return Bridge.cast(Bridge.unbox(this.value, T), T);
                }
            }
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.value = value;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1910.ItemValue", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911", {
        statics: {
            methods: {
                GetValue1: function (value) {
                    return value;
                },
                GetValue2: function (value) {
                    return Bridge.box(value, System.Int32);
                }
            }
        },
        methods: {
            TestExtensionMethodOfBaseClass: function () {
                var item = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911_DerivedItem$1(System.Int32))();
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911_BaseItemExtensions.GetValue(System.Int32, item));
                Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911_BaseItemExtensions.GetValue$1(System.Int32, item, 3));
            },
            TestExtensionMethodOfBaseClassLinqCase: function () {
                var values = System.Array.init([0, 1, 2], System.Int32);

                var max1 = System.Linq.Enumerable.from(values, System.Int32).select(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911.GetValue1).max();
                var max2 = System.Linq.Enumerable.from(System.Linq.Enumerable.from(values, System.Int32).select(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911.GetValue2), System.Object).max();

                Bridge.Test.NUnit.Assert.AreEqual(2, max1);
                Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(max2));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911_BaseItem$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911_BaseItemExtensions", {
        statics: {
            methods: {
                GetValue: function (T, item) {
                    return 1;
                },
                GetValue$1: function (T, item, i) {
                    return i;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1912", {
        methods: {
            TestExtentionMethod: function () {
                var Bridge1912_Item = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1912_Item();
                var Bridge1912_Item2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1912_Item();

                Bridge.Test.NUnit.Assert.True(Bridge.is(Bridge.ClientTest.Batch3.BridgeIssues.ItemExtensions.SetValue(Bridge1912_Item), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1912_Item));
                Bridge.Test.NUnit.Assert.True(Bridge.is(Bridge.ClientTest.Batch3.BridgeIssues.ItemExtensions.SetValue(Bridge1912_Item2), Bridge.ClientTest.Batch3.BridgeIssues.Bridge1912_Item));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1912_Item");

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1913", {
        methods: {
            TestIsSubclassOfTemplate: function () {
                var type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1913;

                var result1 = !(type.prototype instanceof type);
                var result2 = !((type.prototype instanceof type));

                Bridge.Test.NUnit.Assert.True(result1 === result2);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1914", {
        methods: {
            TestCase: function () {
                var list = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                list.add(1);

                var readOnlyList = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.Int32))(list);
                list.add(2);

                Bridge.Test.NUnit.Assert.True(list.Count === readOnlyList.Count);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1915", {
        methods: {
            TestImplementingExternalInterface: function () {
                var item = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1915.LocalItem();

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1915.LocalTest.Test(item);
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(item.Bridge$ClientTestHelper$IItem$Value));
                Bridge.ClientTestHelper.ClassLibraryTest.Test(item);
                Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(item.Bridge$ClientTestHelper$IItem$Value));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1915.LocalItem", {
        inherits: [Bridge.ClientTestHelper.IWriteableItem],
        $kind: "nested class",
        fields: {
            value: null
        },
        props: {
            Value: {
                get: function () {
                    return this.value;
                }
            }
        },
        alias: [
            "Value", "Bridge$ClientTestHelper$IItem$Value",
            "SetValue", "Bridge$ClientTestHelper$IWriteableItem$SetValue"
        ],
        methods: {
            SetValue: function (value) {
                this.value = value;
                return true;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1915.LocalTest", {
        $kind: "nested class",
        statics: {
            methods: {
                Test: function (item) {
                    item.Bridge$ClientTestHelper$IWriteableItem$SetValue(Bridge.box(1, System.Int32));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1920", {
        methods: {
            TestGeneratedStringConcatenation: function () {
                var s1 = "s1";
                var s2 = "s2";
                var s3 = "s3";
                var s4 = "s4";

                var s = (s1 || "") + (s2 || "") + (s3 || "") + (s4 || "");
                Bridge.Test.NUnit.Assert.AreEqual("s1s2s3s4", s);

                s = System.String.concat("a" + 1, null);
                Bridge.Test.NUnit.Assert.AreEqual("a1", s);

                s = System.String.concat(null, "a") + 1;
                Bridge.Test.NUnit.Assert.AreEqual("a1", s);

                s = System.String.concat("a", null) + 1;
                Bridge.Test.NUnit.Assert.AreEqual("a1", s);

                s = "a" + 1 + "b" + "c";
                Bridge.Test.NUnit.Assert.AreEqual("a1bc", s);

                s = null;
                s = String.fromCharCode(123) + (s || "") + String.fromCharCode(125);
                Bridge.Test.NUnit.Assert.AreEqual("{}", s);

                s = "" + (s || "") + "";
                Bridge.Test.NUnit.Assert.AreEqual("{}", s);

                s = (s1 || "") + "" + (s2 || "");
                Bridge.Test.NUnit.Assert.AreEqual("s1s2", s);

                s = (s1 || "") + "" + (s2 || "") + "";
                Bridge.Test.NUnit.Assert.AreEqual("s1s2", s);

                s = (s1 || "") + "" + (s2 || "") + "" + (s3 || "");
                Bridge.Test.NUnit.Assert.AreEqual("s1s2s3", s);

                s = "Test" + 2;
                Bridge.Test.NUnit.Assert.AreEqual("Test2", s);

                var i = 2;
                s = "" + i + "";
                Bridge.Test.NUnit.Assert.AreEqual("2", s);

                s = "" + ((Bridge.Int.div(i, 2)) | 0);
                Bridge.Test.NUnit.Assert.AreEqual("1", s);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1933", {
        methods: {
            TestRounding: function () {
                // decimal
                var x = System.Decimal(0.25, 2);
                Bridge.Test.NUnit.Assert.AreEqual(".3", Bridge.Int.format(x, "##.#"), "decimal");
                Bridge.Test.NUnit.Assert.AreEqual("0.3", Bridge.Int.format(x, "F1"), "decimal");

                x = System.Decimal(-0.25, 2);
                Bridge.Test.NUnit.Assert.AreEqual("-.3", Bridge.Int.format(x, "##.#"), "decimal");
                Bridge.Test.NUnit.Assert.AreEqual("-0.3", Bridge.Int.format(x, "F1"), "decimal");

                x = System.Decimal(0.025, 3);
                Bridge.Test.NUnit.Assert.AreEqual("", Bridge.Int.format(x, "##.#"), "decimal");
                Bridge.Test.NUnit.Assert.AreEqual("0.0", Bridge.Int.format(x, "F1"), "decimal");

                x = System.Decimal(-0.025, 3);
                Bridge.Test.NUnit.Assert.AreEqual("", Bridge.Int.format(x, "##.#"), "decimal");
                Bridge.Test.NUnit.Assert.AreEqual("0.0", Bridge.Int.format(x, "F1"), "decimal");

                // double
                var d = 0.25;
                Bridge.Test.NUnit.Assert.AreEqual(".3", System.Double.format(d, "##.#"), "double");
                Bridge.Test.NUnit.Assert.AreEqual("0.3", System.Double.format(d, "F1"), "double");

                d = -0.25;
                Bridge.Test.NUnit.Assert.AreEqual("-.3", System.Double.format(d, "##.#"), "double");
                Bridge.Test.NUnit.Assert.AreEqual("-0.3", System.Double.format(d, "F1"), "double");

                d = 0.025;
                Bridge.Test.NUnit.Assert.AreEqual("", System.Double.format(d, "##.#"), "double");
                Bridge.Test.NUnit.Assert.AreEqual("0.0", System.Double.format(d, "F1"), "double");

                d = -0.025;
                Bridge.Test.NUnit.Assert.AreEqual("", System.Double.format(d, "##.#"), "double");
                Bridge.Test.NUnit.Assert.AreEqual("0.0", System.Double.format(d, "F1"), "double");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1934", {
        methods: {
            TestEscapeSequencesInRegex: function () {
                var patterns = System.Array.init(["\\\\", "\\@", "\\<", "\\>"], System.String);
                var inputs = System.Array.init(["\\", "@", "<", ">"], System.String);
                var expResults = System.Array.init([true, true, true, true], System.Boolean);

                for (var i = 0; i < patterns.length; i = (i + 1) | 0) {
                    var pattern = patterns[System.Array.index(i, patterns)];
                    var input = inputs[System.Array.index(i, inputs)];
                    var expected = expResults[System.Array.index(i, expResults)];

                    var rgx = new System.Text.RegularExpressions.Regex.ctor(pattern);
                    var actual = rgx.isMatch(input);

                    Bridge.Test.NUnit.Assert.AreEqual(expected, actual);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1938", {
        methods: {
            TestIsArrayTemplate: function () {
                var type = System.Int32;

                var result1 = !Bridge.isArray(null, type);
                var result2 = !(Bridge.isArray(null, type));

                Bridge.Test.NUnit.Assert.True(result1, "Non array");
                Bridge.Test.NUnit.Assert.AreEqual(result1, result2, "IsArray (for non array)");

                var type2 = Bridge.getType((System.Array.init(0, 0, System.Int32)));

                var result3 = !Bridge.isArray(null, type2);
                var result4 = !(Bridge.isArray(null, type2));

                Bridge.Test.NUnit.Assert.False(result3, "Array");
                Bridge.Test.NUnit.Assert.AreEqual(result3, result4, "IsArray (for array)");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948", {
        methods: {
            TestCollectionLikeInitialization: function () {
                var $t, $t1, $t2;
                $t = Bridge.getEnumerator(System.Array.init([new $asm.$AnonymousType$14()], System.Object));
                try {
                    while ($t.moveNext()) {
                        var item = { v : $t.Current };
                        if (false) {
                            continue;
                        }

                        var newJObj1 = (function ($me, item) {
                                return function (_o1) {
                                    _o1.Add("name", item.v);
                                    return _o1;
                                };
                            })(this, item)(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948.AddObj());

                        $t1 = Bridge.getEnumerator(newJObj1);
                        try {
                            while ($t1.moveNext()) {
                                var jObj = $t1.Current;
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                        Bridge.Test.NUnit.Assert.AreEqual(false, newJObj1.isGeneric);
                        Bridge.Test.NUnit.Assert.AreEqual(1, newJObj1.dic.Count);

                        var newJObj2 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948.f1(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948.AddObj());
                        $t2 = Bridge.getEnumerator(newJObj2, System.Collections.Generic.KeyValuePair$2(System.String,System.Object));
                        try {
                            while ($t2.moveNext()) {
                                var jObj1 = $t2.Current;
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                        Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.cast(newJObj2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948.AddObj).isGeneric);
                        Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.cast(newJObj2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948.AddObj).dic.Count);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("$AnonymousType$14", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function () {
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$14)) {
                    return false;
                }
                return ;
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550209498]);
                return h;
            },
            toJSON: function () {
                return {

                };
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948, {
        f1: function (_o2) {
            _o2.Add("name", Bridge.box(1, System.Int32));
            return _o2;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1951", {
        statics: {
            fields: {
                Counter: 0
            }
        },
        methods: {
            TestBindFunctionNoMemoryLeaks: function () {
                new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1951.LeakedObject();
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1951.Counter, "1");

                new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1951.LeakedObject();
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1951.Counter, "2");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1951.LeakedObject", {
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                // This is to generate Bridge.fn.bind(this, this.method);
                var a = Bridge.fn.cacheBind(this, this.method);

                var m = this;
                var count = m.$$bind.length;
                //Bridge.fn.bind save "this" to the $$bind property of the function.
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1951.Counter = count;
            }
        },
        methods: {
            method: function () { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1955", {
        statics: {
            methods: {
                ScriptFunc: function () {
                    return 10;
                }
            }
        },
        fields: {
            i: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            ctor: function (i) {
                this.$initialize();
                this.i = i;
            }
        },
        methods: {
            TestScriptAttributeForExternMethods: function () {
                Bridge.Test.NUnit.Assert.AreEqual(10, Bridge.ClientTest.Batch3.BridgeIssues.Bridge1955.ScriptFunc());
                Bridge.Test.NUnit.Assert.AreEqual(5, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1955.ctor(5).i);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1964", {
        statics: {
            methods: {
                GetCharCode: function (s, isLast) {
                    if (isLast === void 0) { isLast = true; }
                    if (s == null) {
                        return "null";
                    }

                    if (s.length < 1) {
                        return "empty";
                    }

                    var i = isLast ? ((s.length - 1) | 0) : 0;

                    return System.Char.format(s.charCodeAt(i), "X");
                }
            }
        },
        methods: {
            TestStringIsNullOrWhiteSpaceCase: function () {
                var p = System.Array.init([null, "", String.fromCharCode((9)), String.fromCharCode((10)), String.fromCharCode((11)), String.fromCharCode((12)), String.fromCharCode((13)), String.fromCharCode((32)), String.fromCharCode((133)), String.fromCharCode((160)), String.fromCharCode((5760)), String.fromCharCode((8192)), String.fromCharCode((8193)), String.fromCharCode((8194)), String.fromCharCode((8195)), String.fromCharCode((8196)), String.fromCharCode((8197)), String.fromCharCode((8198)), String.fromCharCode((8199)), String.fromCharCode((8200)), String.fromCharCode((8201)), String.fromCharCode((8202)), String.fromCharCode((8239)), String.fromCharCode((8287)), String.fromCharCode((12288))], System.String);

                var s;
                var c;

                for (var i = 0; i < p.length; i = (i + 1) | 0) {
                    s = p[System.Array.index(i, p)];
                    c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1964.GetCharCode(s);
                    Bridge.Test.NUnit.Assert.True(System.String.isNullOrWhiteSpace(s), "White-spaces table 1. Index:" + i + " Char code:" + (c || ""));
                }

                for (var i1 = 0; i1 < p.length; i1 = (i1 + 1) | 0) {
                    s = " " + (p[System.Array.index(i1, p)] || "");
                    c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1964.GetCharCode(s);
                    Bridge.Test.NUnit.Assert.True(System.String.isNullOrWhiteSpace(s), "White-spaces table 2. Index:" + i1 + " Char code:" + (c || ""));
                }

                for (var i2 = 0; i2 < p.length; i2 = (i2 + 1) | 0) {
                    s = (p[System.Array.index(i2, p)] || "") + " ";
                    c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1964.GetCharCode(s, false);
                    Bridge.Test.NUnit.Assert.True(System.String.isNullOrWhiteSpace(s), "White-spaces table 3. Index:" + i2 + " Char code:" + (c || ""));
                }

                for (var i3 = 0; i3 < p.length; i3 = (i3 + 1) | 0) {
                    s = "a" + (p[System.Array.index(i3, p)] || "");
                    c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1964.GetCharCode(s);
                    Bridge.Test.NUnit.Assert.False(System.String.isNullOrWhiteSpace(s), "Non white-spaces table 1. Index:" + i3 + " Char code:" + (c || ""));
                }

                for (var i4 = 0; i4 < p.length; i4 = (i4 + 1) | 0) {
                    s = (p[System.Array.index(i4, p)] || "") + "b";
                    c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1964.GetCharCode(s, false);
                    Bridge.Test.NUnit.Assert.False(System.String.isNullOrWhiteSpace(s), "Non white-spaces table 2. Index:" + i4 + " Char code:" + (c || ""));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1965", {
        methods: {
            TestIsClassForNumberTypes: function () {
                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(System.Byte));
                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(System.Int16));
                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(System.UInt16));
                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(System.Int32));
                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(System.UInt32));
                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(System.Single));
                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(System.Double));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1966", {
        methods: {
            TestDoubleInfinityGetHashCode: function () {
                Bridge.Test.NUnit.Assert.AreEqual(System.Double.getHashCode(Number.POSITIVE_INFINITY), System.Double.getHashCode(Number.POSITIVE_INFINITY));
                Bridge.Test.NUnit.Assert.AreEqual(System.Double.getHashCode(Number.NEGATIVE_INFINITY), System.Double.getHashCode(Number.NEGATIVE_INFINITY));
                Bridge.Test.NUnit.Assert.AreEqual(2146435072, System.Double.getHashCode(Number.POSITIVE_INFINITY));
                Bridge.Test.NUnit.Assert.AreEqual(4293918720, System.Double.getHashCode(Number.NEGATIVE_INFINITY));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1968", {
        methods: {
            TestGenericNullable: function () {
                var type1 = System.Double;
                var type2 = System.Nullable$1(System.Double);
                var value1 = Bridge.createInstance(type1);
                var value2 = Bridge.createInstance(type2);

                Bridge.Test.NUnit.Assert.False(Bridge.referenceEquals(type1, type2));
                Bridge.Test.NUnit.Assert.False(Bridge.referenceEquals(value1, value2));

                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(type1));
                Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isClass(type2));

                Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.unbox(value1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(value2));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969", {
        statics: {
            fields: {
                buffer: null
            }
        },
        methods: {
            TestStaticConstructorsForBaseClasses: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer = "";
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.Test3.Foo();
                Bridge.Test.NUnit.Assert.AreEqual("Test3", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer);

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer = "";
                var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.Test3();
                Bridge.Test.NUnit.Assert.AreEqual("Test2Test1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.Test1", {
        $kind: "nested class",
        statics: {
            ctors: {
                ctor: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer || "") + "Test1";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1970", {
        methods: {
            TestRunClassConstructor: function () {
                var type1 = Bridge.Reflection.getType("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1970.Test, Bridge.ClientTest.Batch3");

                Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.unbox(Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(type1, 4, 284, "IsInitialized"), null)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1970.Test", {
        $kind: "nested class",
        statics: {
            fields: {
                IsInitialized: false
            },
            ctors: {
                init: function () {
                    this.IsInitialized = Bridge.ClientTest.Batch3.BridgeIssues.Bridge1970.Test.GetIsInitializedValue();
                }
            },
            methods: {
                GetIsInitializedValue: function () {
                    return true;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1996", {
        methods: {
            TestTemplateForGetEnumerator: function () {
                var $t;
                var holder = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge1996.ArrayHolder(System.Array.init([1, 2, 3], System.Int32));

                var i = 0;
                $t = new Bridge.ArrayEnumerator(holder.array);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        Bridge.Test.NUnit.Assert.AreEqual(((i = (i + 1) | 0)), Bridge.unbox(item));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1996.ArrayHolder", {
        inherits: [System.Collections.IEnumerable],
        $kind: "nested class",
        fields: {
            array: null
        },
        ctors: {
            ctor: function (array) {
                this.$initialize();
                this.array = array;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2003", {
        statics: {
            methods: {
                TestThisIsBindInTemplatedMemberMethods: function () {
                    var sut = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2003.Helper();
                    sut.SomeProp = 5;
                    sut.CreateAndCallLambda();
                    Bridge.Test.NUnit.Assert.AreEqual(6, sut.SomeProp);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2003.Helper", {
        $kind: "nested class",
        props: {
            SomeProp: 0
        },
        methods: {
            CreateAndCallLambda: function () {
                var cb = Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2003.Helper.f1);
                cb();
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2003.Helper", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2003.Helper, {
        f1: function () {
            return (this.SomeProp = this.SomeProp + 1);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011", {
        statics: {
            methods: {
                OverloadedMethod: function (T, value) {
                    return 1;
                },
                OverloadedMethod$1: function (T, valueUpdater) {
                    return 2;
                }
            }
        },
        methods: {
            TestOverloadSelectionWhenNullCoalescingOperator: function () {
                var $t;
                var nullableBool = false;
                var varValue = ($t = nullableBool, $t != null ? Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(System.Boolean).op_Implicit($t) : Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(System.Boolean).Missing);

                var typedValue = varValue;
                Bridge.Test.NUnit.Assert.AreStrictEqual(false, varValue.field);
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.OverloadedMethod(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(System.Boolean), typedValue));
                Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.OverloadedMethod(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(System.Boolean), varValue));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1", function (T) { return {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(T))]; },
        $kind: "nested struct",
        statics: {
            fields: {
                _missing: null
            },
            props: {
                Missing: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(T)._missing;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._missing = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(T))();
                }
            },
            methods: {
                op_Implicit: function (value) {
                    return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(T))();
                },
                op_Equality: function (x, y) {
                    return x.equalsT(y);
                },
                op_Inequality: function (x, y) {
                    return !(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(T).op_Equality(x, y));
                },
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2011.Optional$1(T))(); }
            }
        },
        fields: {
            field: Bridge.getDefaultValue(T)
        },
        alias: ["equalsT", "System$IEquatable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2011$Optional$1$" + Bridge.getTypeAlias(T) + "$equalsT"],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equalsT: function (other) {
                return false;
            },
            getHashCode: function () {
                var h = Bridge.addHash([3587563198, this.field]);
                return h;
            },
            $clone: function (to) { return this; }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013", {
        statics: {
            methods: {
                AttachViaExtension: function (T, self) {
                    self["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2013$IEvGen$1$" + Bridge.getTypeAlias(T) + "$addEv"]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013.f1);
                }
            }
        },
        methods: {
            TestSubscriptionToEventDefinedInGenericInterfaceViaExtensionMethod: function () {
                var sut = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013.EvGen$1(System.Int32))();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013.AttachViaExtension(System.Int32, sut);

                Bridge.Test.NUnit.Assert.True(sut.HasListeners);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013, {
        f1: function () { }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013.IEvGen$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2019", {
        statics: {
            methods: {
                Process: function (T) {
                    var actionSet = function (c) {
                        c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2019$ISome$1$" + Bridge.getTypeAlias(T) + "$SomeProp"] = (c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2019$ISome$1$" + Bridge.getTypeAlias(T) + "$SomeProp"] + 1) | 0;
                    };
                    var actionCall = function (c) {
                        c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2019$ISome$1$" + Bridge.getTypeAlias(T) + "$SomeMethod"]();
                    };

                    var items = function (_o1) {
                            var $t;
                            _o1.add(($t = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2019.Some$1(T))(), $t.SomeProp = 5, $t));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2019.ISome$1(T))).ctor());

                    items.ForEach(actionSet);
                    items.ForEach(actionCall);

                    return System.Linq.Enumerable.from(items, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2019.ISome$1(T)).select(function (c) {
                            return c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2019$ISome$1$" + Bridge.getTypeAlias(T) + "$SomeProp"];
                        }).sum();
                }
            }
        },
        methods: {
            TestLambdaExpressionsInGenericMethod: function () {
                var res = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2019.Process(System.String);
                Bridge.Test.NUnit.Assert.AreEqual(17, res);
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2019.ISome$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2024", {
        statics: {
            methods: {
                TestAccessEnumInAnotherClassUsingStatic: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2024.Class2.Options.Hello);
                    Bridge.Test.NUnit.Assert.AreEqual("Test", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2024.Class2.Inner.Name);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2024.Class2", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2024.Class2.Inner", {
        $kind: "nested class",
        statics: {
            props: {
                Name: {
                    get: function () {
                        return "Test";
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2024.Class2.Options", {
        $kind: "nested enum",
        statics: {
            fields: {
                Hello: 0,
                Goodbyte: 1
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027", {
        statics: {
            props: {
                Status: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Options.Whatever;
                    }
                }
            },
            methods: {
                TestToStringForEnumWhenConcatWithString: function () {
                    var value = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Options.Whatever;
                    Bridge.Test.NUnit.Assert.AreEqual("Value: Whatever", "Value: " + System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Options, value));
                    Bridge.Test.NUnit.Assert.AreEqual("Value: Whatever", "Value: " + (System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Options, value) || ""));
                    Bridge.Test.NUnit.Assert.AreEqual("Value: Whatever", "Value: " + System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Options, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Status));
                    Bridge.Test.NUnit.Assert.AreEqual("Value: Whatever", "Value: " + (System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Options, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Status) || ""));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2027.Options", {
        $kind: "nested enum",
        statics: {
            fields: {
                Whatever: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2033", {
        statics: {
            fields: {
                state: "new",
                state1: "new"
            },
            ctors: {
                init: function () {
                    this.state = "new";
                }
            },
            methods: {
                TestClassEnumPropertiesInitialization: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("new", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2033.state);
                    Bridge.Test.NUnit.Assert.AreEqual("new", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2033.state1);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2033.GameState", {
        $kind: "nested enum",
        statics: {
            fields: {
                new: "new",
                playing: "playing",
                finished: "finished"
            }
        },
        $utype: System.String
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038", {
        statics: {
            methods: {
                TestIncrementAssignmentInStructs: function () {
                    var ss = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038.SimpleStruct.$ctor1(5);
                    ss.DoubleIncrement();

                    Bridge.Test.NUnit.Assert.AreEqual(7, ss.GetField());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038.SimpleStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                op_Addition: function (t, val) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038.SimpleStruct.$ctor1(((t.field1 + 1) | 0));
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038.SimpleStruct(); }
            }
        },
        fields: {
            field1: 0
        },
        ctors: {
            $ctor1: function (f) {
                this.$initialize();
                this.field1 = f;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            DoubleIncrement: function () {
                (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038.SimpleStruct.op_Addition(this, 1)).$clone(this);
                (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038.SimpleStruct.op_Addition(this, 1)).$clone(this);
            },
            GetField: function () {
                return this.field1;
            },
            getHashCode: function () {
                var h = Bridge.addHash([5790516273, this.field1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038.SimpleStruct)) {
                    return false;
                }
                return Bridge.equals(this.field1, o.field1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2038.SimpleStruct();
                s.field1 = this.field1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2039", {
        statics: {
            methods: {
                TestNaNToString: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(System.Globalization.CultureInfo.invariantCulture.numberFormat.nanSymbol, System.Double.format(Number.NaN));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2042", {
        statics: {
            methods: {
                TestAppDomain: function () {
                    Bridge.Test.NUnit.Assert.True(System.AppDomain.getAssemblies().length > 0);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2045", {
        statics: {
            methods: {
                TestDoubleEscapingInterpolation: function () {
                    var s = System.String.format("Hello \"World!\"", null);
                    Bridge.Test.NUnit.Assert.AreEqual("Hello \"World!\"", s);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2046", {
        statics: {
            methods: {
                TestSafeNavigationOperator: function () {
                    var $t;
                    var dt = System.DateTime.getNow();
                    var ndt = Bridge.cast(dt, System.DateTime, true);
                    var s1 = !Bridge.equals(ndt, null) ? System.DateTime.format(System.Nullable.getValue(ndt), "yyyy-MM-dd HH:mm:ss") : null;
                    var s2 = !Bridge.equals(($t = Bridge.cast(dt, System.DateTime, true)), null) ? System.DateTime.format($t, "yyyy-MM-dd HH:mm:ss") : null;

                    Bridge.Test.NUnit.Assert.AreEqual(s1, s2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2048", {
        statics: {
            methods: {
                TestUnaryOperatorBlockCompilationError: function () {
                    var a = !new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2048.Derived().property;
                    Bridge.Test.NUnit.Assert.True(a);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2048.Base", {
        $kind: "nested class",
        props: {
            property: {
                get: function () {
                    return false;
                },
                set: function (value) { }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2049", {
        statics: {
            methods: {
                TestNullableGetUnderlyingType: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int32, System.Nullable.getUnderlyingType(System.Nullable$1(System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual(null, System.Nullable.getUnderlyingType(System.Int32));
                    Bridge.Test.NUnit.Assert.AreEqual(null, System.Nullable.getUnderlyingType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2049.G$1(System.Int32)));
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2049.f1);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2049", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2049, {
        f1: function () {
            System.Nullable.getUnderlyingType(null);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2049.G$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2050", {
        statics: {
            methods: {
                TestIList: function () {
                    var list = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2050.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    var l = list;
                    var o = list;

                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.IList));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.ICollection));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.IEnumerable));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.Generic.IList$1(System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual(3, list.Count);
                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Array.getCount(l));
                    Bridge.Test.NUnit.Assert.AreEqual(2, list.getItem(1));
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(System.Array.getItem(l, 1)));

                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    l = arr;
                    o = arr;

                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.IList));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.ICollection));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.IEnumerable));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.Generic.IList$1(System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual(3, arr.length);
                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Array.getCount(l));
                    Bridge.Test.NUnit.Assert.AreEqual(2, arr[System.Array.index(1, arr)]);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(System.Array.getItem(l, 1)));
                },
                TestIDictionary: function () {
                    var dict = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2050.f2(new (System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)).ctor());
                    var d = dict;
                    var o = dict;

                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.ICollection));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.IEnumerable));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.IDictionary));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Collections.Generic.IDictionary$2(System.Int32,System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual(2, dict.Count);
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Array.getCount(d));
                    Bridge.Test.NUnit.Assert.AreEqual(2, dict.getItem(1));
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(d.System$Collections$IDictionary$getItem(1)));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2050", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2050, {
        f1: function (_o1) {
            _o1.add(1);
            _o1.add(2);
            _o1.add(3);
            return _o1;
        },
        f2: function (_o1) {
            _o1.add(1, 2);
            _o1.add(2, 3);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2051", {
        statics: {
            methods: {
                TestGetElementType: function () {
                    var array = System.Array.init([
                        1, 
                        2, 
                        3
                    ], System.Int32);
                    var t = Bridge.getType(array);
                    var t2 = (t.$elementType || null);

                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.type(System.Int32), t);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int32, t2);

                    var newMe = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2051();
                    t = Bridge.getType(newMe);
                    t2 = (t.$elementType || null);

                    Bridge.Test.NUnit.Assert.Null(t2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052", {
        statics: {
            methods: {
                TestArrayCreateInstance: function () {
                    var $t, $t1, $t2, $t3;
                    var my1DArray = ($t = System.Int32, System.Array.init(5, Bridge.getDefaultValue($t), $t));
                    for (var i = System.Array.getLower(my1DArray, 0); i <= (System.Array.getLength(my1DArray, 0) - 1); i = (i + 1) | 0) {
                        System.Array.set(my1DArray, Bridge.box(((i + 1) | 0), System.Int32), i);
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.type(System.Int32), Bridge.getType(my1DArray));
                    Bridge.Test.NUnit.Assert.AreEqual(5, my1DArray.length);
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(my1DArray[0]));
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.unbox(my1DArray[4]));

                    var my2DArray = ($t1 = System.String, System.Array.create(Bridge.getDefaultValue($t1), null, $t1, 2, 3));
                    for (var i1 = System.Array.getLower(my2DArray, 0); i1 <= (System.Array.getLength(my2DArray, 0) - 1); i1 = (i1 + 1) | 0) {
                        for (var j = System.Array.getLower(my2DArray, 1); j <= (System.Array.getLength(my2DArray, 1) - 1); j = (j + 1) | 0) {
                            System.Array.set(my2DArray, "abc" + i1 + j, i1, j);
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.type(System.String, 2), Bridge.getType(my2DArray));
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Array.getRank(my2DArray));
                    Bridge.Test.NUnit.Assert.AreEqual(1, (System.Array.getLength(my2DArray, 0) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual(2, (System.Array.getLength(my2DArray, 1) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual("abc00", Bridge.unbox(System.Array.get(my2DArray, 0, 0)));
                    Bridge.Test.NUnit.Assert.AreEqual("abc12", Bridge.unbox(System.Array.get(my2DArray, 1, 2)));

                    var my3DArray = ($t2 = System.Object, System.Array.create(Bridge.getDefaultValue($t2), null, $t2, 2, 3, 4));
                    for (var i2 = System.Array.getLower(my3DArray, 0); i2 <= (System.Array.getLength(my3DArray, 0) - 1); i2 = (i2 + 1) | 0) {
                        for (var j1 = System.Array.getLower(my3DArray, 1); j1 <= (System.Array.getLength(my3DArray, 1) - 1); j1 = (j1 + 1) | 0) {
                            for (var k = System.Array.getLower(my3DArray, 2); k <= (System.Array.getLength(my3DArray, 2) - 1); k = (k + 1) | 0) {
                                System.Array.set(my3DArray, "abc" + i2 + j1 + k, i2, j1, k);
                            }
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.type(System.Object, 3), Bridge.getType(my3DArray));
                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Array.getRank(my3DArray));
                    Bridge.Test.NUnit.Assert.AreEqual(1, (System.Array.getLength(my3DArray, 0) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual(2, (System.Array.getLength(my3DArray, 1) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual(3, (System.Array.getLength(my3DArray, 2) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual("abc000", Bridge.unbox(System.Array.get(my3DArray, 0, 0, 0)));
                    Bridge.Test.NUnit.Assert.AreEqual("abc123", Bridge.unbox(System.Array.get(my3DArray, 1, 2, 3)));

                    var myLengthsArray = System.Array.init([2, 3, 4, 5], System.Int32);
                    var my4DArray = ($t3 = System.String, System.Array.create(Bridge.getDefaultValue($t3), null, $t3, myLengthsArray));
                    for (var i3 = System.Array.getLower(my4DArray, 0); i3 <= (System.Array.getLength(my4DArray, 0) - 1); i3 = (i3 + 1) | 0) {
                        for (var j2 = System.Array.getLower(my4DArray, 1); j2 <= (System.Array.getLength(my4DArray, 1) - 1); j2 = (j2 + 1) | 0) {
                            for (var k1 = System.Array.getLower(my4DArray, 2); k1 <= (System.Array.getLength(my4DArray, 2) - 1); k1 = (k1 + 1) | 0) {
                                for (var l = System.Array.getLower(my4DArray, 3); l <= (System.Array.getLength(my4DArray, 3) - 1); l = (l + 1) | 0) {
                                    var myIndicesArray = System.Array.init([i3, j2, k1, l], System.Int32);
                                    System.Array.set.apply(System.Array, [my4DArray, (System.Convert.toString(Bridge.box(i3, System.Int32)) || "") + j2 + k1 + l].concat(myIndicesArray));
                                }
                            }
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.type(System.String, 4), Bridge.getType(my4DArray));
                    Bridge.Test.NUnit.Assert.AreEqual(4, System.Array.getRank(my4DArray));
                    Bridge.Test.NUnit.Assert.AreEqual(1, (System.Array.getLength(my4DArray, 0) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual(2, (System.Array.getLength(my4DArray, 1) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual(3, (System.Array.getLength(my4DArray, 2) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual(4, (System.Array.getLength(my4DArray, 3) - 1));
                    Bridge.Test.NUnit.Assert.AreEqual("0000", Bridge.unbox(System.Array.get(my4DArray, 0, 0, 0, 0)));
                    Bridge.Test.NUnit.Assert.AreEqual("1234", Bridge.unbox(System.Array.get(my4DArray, 1, 2, 3, 4)));
                },
                TestArrayCreateInstanceShouldThrow: function () {
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f1);
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f2);
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f3);
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f4);
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f5);

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f6);
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f7);
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f8);
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052.f9);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052, {
        f1: function () {
            var $t;
            ($t = null, System.Array.init(5, Bridge.getDefaultValue($t), $t));
        },
        f2: function () {
            var $t;
            ($t = null, System.Array.create(Bridge.getDefaultValue($t), null, $t, 2, 3));
        },
        f3: function () {
            var $t;
            ($t = null, System.Array.create(Bridge.getDefaultValue($t), null, $t, 2, 3, 4));
        },
        f4: function () {
            var $t;
            ($t = null, System.Array.create(Bridge.getDefaultValue($t), null, $t, System.Array.init([2, 3, 4, 5], System.Int32)));
        },
        f5: function () {
            var $t;
            ($t = System.Int32, System.Array.create(Bridge.getDefaultValue($t), null, $t, null));
        },
        f6: function () {
            var $t;
            ($t = System.Int32, System.Array.init(-1, Bridge.getDefaultValue($t), $t));
        },
        f7: function () {
            var $t;
            ($t = System.Int32, System.Array.create(Bridge.getDefaultValue($t), null, $t, 2, -1));
        },
        f8: function () {
            var $t;
            ($t = System.Int32, System.Array.create(Bridge.getDefaultValue($t), null, $t, 2, 3, -1));
        },
        f9: function () {
            var $t;
            ($t = System.Int32, System.Array.create(Bridge.getDefaultValue($t), null, $t, System.Array.init([2, 3, 4, -1], System.Int32)));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056", {
        statics: {
            methods: {
                TestArrayCasting: function () {
                    var arr1 = System.Array.init(0, null, System.String);
                    var arr2 = System.Array.init(0, null, System.Object);
                    var arr3 = System.Array.create(null, null, System.String, 1, 1);
                    var arr4 = System.Array.create(null, null, System.Object, 1, 1);

                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr1, System.Array.type(System.String)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr1, System.Array.type(System.Object)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr1, System.Array.type(System.Int32)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr1, System.Array.type(System.String, 2)));

                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr2, System.Array.type(System.String)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr2, System.Array.type(System.Object)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr2, System.Array.type(System.Int32)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr2, System.Array.type(System.String, 2)));

                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr3, System.Array.type(System.String)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr3, System.Array.type(System.Object)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr3, System.Array.type(System.Int32)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr3, System.Array.type(System.String, 2)));

                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr4, System.Array.type(System.String)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr4, System.Array.type(System.Object)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr4, System.Array.type(System.Int32)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr4, System.Array.type(System.String, 2)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr4, System.Array.type(System.Object, 2)));

                    var arr5 = System.Array.init(0, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B);
                    var arr6 = System.Array.init(0, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A);
                    var arr7 = System.Array.create(null, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B, 1, 1);
                    var arr8 = System.Array.create(null, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A, 1, 1);

                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr5, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr5, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr5, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.C)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr5, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B, 2)));

                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr6, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr6, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr6, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.C)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr6, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B, 2)));

                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr7, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr7, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr7, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.C)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr7, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B, 2)));

                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr8, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr8, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr8, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.C)));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(arr8, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B, 2)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(arr8, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A, 2)));
                },
                TestArrayTypeName: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Array", Bridge.Reflection.getTypeFullName(Array));
                    Bridge.Test.NUnit.Assert.AreEqual("System.Int32[]", Bridge.Reflection.getTypeFullName(System.Array.type(System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual("System.Int32[,]", Bridge.Reflection.getTypeFullName(System.Array.type(System.Int32, 2)));
                    Bridge.Test.NUnit.Assert.AreEqual("System.Int32[,,]", Bridge.Reflection.getTypeFullName(System.Array.type(System.Int32, 3)));
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056+B[]", Bridge.Reflection.getTypeFullName(System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B)));
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056+B[,]", Bridge.Reflection.getTypeFullName(System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B, 2)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.C", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2067", {
        statics: {
            methods: {
                TestGetGenericTypeDefinition: function () {
                    Bridge.Test.NUnit.Assert.Throws$2(System.InvalidOperationException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2067.f1);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2067", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2067, {
        f1: function () {
            var t = Bridge.Reflection.getGenericTypeDefinition(System.Int32);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2068", {
        statics: {
            methods: {
                TestGetGenericTypeDefinition: function () {
                    var genericTypeDefinition = Bridge.Reflection.getGenericTypeDefinition(System.Collections.Generic.List$1);

                    Bridge.Test.NUnit.Assert.AreEqual(System.Collections.Generic.List$1, genericTypeDefinition);
                    Bridge.Test.NUnit.Assert.AreEqual("System.Collections.Generic.List`1", Bridge.Reflection.getTypeFullName(genericTypeDefinition));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073", {
        statics: {
            methods: {
                GetString: function () {
                    return "m";
                },
                TestUserDefinedWithStringConcat: function () {
                    var a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit("a");
                    var b = "b";

                    var s = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Addition(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit((b || "") + (b || "")), a));
                    Bridge.Test.NUnit.Assert.AreEqual("bba", s);

                    s = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Addition(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit((b || "") + (b || "") + (b || "")), a));
                    Bridge.Test.NUnit.Assert.AreEqual("bbba", s);

                    s = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Addition(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit((Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.GetString() || "") + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.GetString() || "")), a));
                    Bridge.Test.NUnit.Assert.AreEqual("mma", s);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj", {
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (s) {
                    var $t;
                    return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj(), $t.v = s, $t);
                },
                op_Implicit$1: function (s) {
                    return s.v;
                },
                op_Addition: function (left, right) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit((Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit$1(left) || "") + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2073.Obj.op_Implicit$1(right) || ""));
                }
            }
        },
        fields: {
            v: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2076", {
        statics: {
            methods: {
                TestLinqGlobalPollution: function () {
                    var en = window.Enumerable;
                    Bridge.Test.NUnit.Assert.Null(en);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077");

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1290", {
        $kind: "nested class",
        statics: {
            methods: {
                TestBoxedChar: function () {
                    var v = Bridge.box(97, System.Char, String.fromCharCode, System.Char.getHashCode);
                    Bridge.Test.NUnit.Assert.AreEqual("a", Bridge.toString(v));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1292", {
        $kind: "nested class",
        statics: {
            methods: {
                TestBoxedChar: function () {
                    var v = Bridge.box(97, System.Char, String.fromCharCode, System.Char.getHashCode);
                    Bridge.Test.NUnit.Assert.AreEqual("System.Char", Bridge.Reflection.getTypeFullName(Bridge.getType(v)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1301", {
        $kind: "nested class",
        statics: {
            methods: {
                TestBoxedNumbers: function () {
                    var v = Bridge.box(3, System.Byte);
                    Bridge.Test.NUnit.Assert.AreEqual("System.Byte", Bridge.Reflection.getTypeFullName(Bridge.getType(v)));
                    v = Bridge.box(3, System.UInt32);
                    Bridge.Test.NUnit.Assert.AreEqual("System.UInt32", Bridge.Reflection.getTypeFullName(Bridge.getType(v)));
                    v = Bridge.box(3, System.UInt16);
                    Bridge.Test.NUnit.Assert.AreEqual("System.UInt16", Bridge.Reflection.getTypeFullName(Bridge.getType(v)));
                    v = Bridge.box(3, System.Int16);
                    Bridge.Test.NUnit.Assert.AreEqual("System.Int16", Bridge.Reflection.getTypeFullName(Bridge.getType(v)));
                    v = Bridge.box(1.0, System.Double, System.Double.format, System.Double.getHashCode);
                    Bridge.Test.NUnit.Assert.AreEqual("System.Double", Bridge.Reflection.getTypeFullName(Bridge.getType(v)));
                    v = Bridge.box(1.0, System.Single, System.Single.format, System.Single.getHashCode);
                    Bridge.Test.NUnit.Assert.AreEqual("System.Single", Bridge.Reflection.getTypeFullName(Bridge.getType(v)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1309", {
        $kind: "nested class",
        statics: {
            methods: {
                TestBoxedBooleans: function () {
                    var val1 = Bridge.box(false, System.Boolean, System.Boolean.toString);
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.toString(val1), System.Boolean.falseString));

                    var val2 = Bridge.box(true, System.Boolean, System.Boolean.toString);
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.toString(val2), System.Boolean.trueString));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312", {
        $kind: "nested class",
        statics: {
            methods: {
                TestStringFormatForEnums: function () {
                    var r1 = System.String.format("{0} {1} {2}", Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum.A, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum)), Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum.B, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum)), Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum.C, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum)));
                    Bridge.Test.NUnit.Assert.AreEqual("A B C", r1);

                    var r2 = System.String.format("{0} {1}", Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum.A, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum)), Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum.B, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum)));
                    Bridge.Test.NUnit.Assert.AreEqual("A B", r2);

                    var r3 = System.String.format("{0} {1} {2}", Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum.A, System.Int32), Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum.B, System.Int32), Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum.C, System.Int32));
                    Bridge.Test.NUnit.Assert.AreEqual("0 3 4", r3);

                    var r4 = System.String.format("{0} {1}", Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum.A, System.Int32), Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum.B, System.Int32));
                    Bridge.Test.NUnit.Assert.AreEqual("0 3", r4);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.ByteEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: 0,
                B: 3
            }
        },
        $utype: System.Byte
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1312.SimpleEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: 0,
                B: 3,
                C: 4,
                D: 10
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1317", {
        $kind: "nested class",
        statics: {
            methods: {
                TestStringFormatForEnums: function () {
                    Bridge.Console.instance.bufferedOutput = "";

                    try {
                        System.Console.WriteLine("Language: " + System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1317.Enum, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1317.Enum.English));

                        Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTestHelper.StringHelper.CombineLinesNL(["Language: English"]), Bridge.Console.instance.bufferedOutput);
                    } finally {
                        Bridge.Console.instance.bufferedOutput = null;
                        Bridge.Console.hide();
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1317.Enum", {
        $kind: "nested enum",
        statics: {
            fields: {
                English: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1347", {
        $kind: "nested class",
        methods: {
            TestFixed: function () {
                var $t;
                var types = System.Array.init([Bridge.box(7, System.Int32), Bridge.box(7, System.Byte), Bridge.box(7, System.UInt32), System.Int64(7), System.UInt64(7), Bridge.box(7, System.Int16), Bridge.box(8, System.UInt16), Bridge.box(9, System.SByte), Bridge.box(3.0, System.Double, System.Double.format, System.Double.getHashCode), Bridge.box(3.0, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(97, System.Char, String.fromCharCode, System.Char.getHashCode), System.Decimal(7.0), new $asm.$AnonymousType$15(3), $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1347.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor())], System.Object);

                var expected = System.Array.init(["System.Int32", "System.Byte", "System.UInt32", "System.Int64", "System.UInt64", "System.Int16", "System.UInt16", "System.SByte", "System.Double", "System.Single", "System.Char", "System.Decimal", "$AnonymousType$15", "System.Collections.Generic.List`1[[System.Int32, mscorlib]]"], System.String);


                var actual = ($t = System.Object, System.Linq.Enumerable.from(types, $t).toList($t)).ConvertAll(System.String, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1347.f2).ToArray();

                for (var i = 0; i < actual.length; i = (i + 1) | 0) {
                    Bridge.Test.NUnit.Assert.AreEqual(expected[System.Array.index(i, expected)], actual[System.Array.index(i, actual)], "#" + i);
                }
            }
        }
    });

    Bridge.define("$AnonymousType$15", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (id) {
                this.Id = id;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$15)) {
                    return false;
                }
                return Bridge.equals(this.Id, o.Id);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550209754, this.Id]);
                return h;
            },
            toJSON: function () {
                return {
                    Id : this.Id
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Id","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_Id","t":8,"rt":System.Int32,"fg":"Id","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Id"}]}; }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1347", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1347, {
        f1: function (_o1) {
            _o1.add(1);
            _o1.add(2);
            _o1.add(3);
            return _o1;
        },
        f2: function (v) {
            return Bridge.Reflection.getTypeFullName(Bridge.getType(v));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1357", {
        $kind: "nested class",
        statics: {
            methods: {
                TestBoxedValueType: function () {
                    var a1 = Bridge.box(7, System.Int32);
                    var b1 = Bridge.box(7, System.Int32);
                    var c1 = a1;

                    var r1 = Bridge.referenceEquals(a1, b1);
                    var r2 = Bridge.referenceEquals(a1, c1);
                    Bridge.Test.NUnit.Assert.False(r1);
                    Bridge.Test.NUnit.Assert.True(r2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1514", {
        $kind: "nested class",
        statics: {
            fields: {
                a: null,
                b: null
            },
            ctors: {
                init: function () {
                    this.a = "hello";
                    this.b = "hello";
                }
            }
        },
        fields: {
            c: null,
            d: null
        },
        ctors: {
            init: function () {
                this.c = "hello";
                this.d = "hello";
            }
        },
        methods: {
            TestBoxedChar: function () {
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1514.a, "hello"));
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge1514.b, "hello"));
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(this.c, "hello"));
                Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(this.d, "hello"));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge2065", {
        $kind: "nested class",
        statics: {
            methods: {
                TestBoxedEnum: function () {
                    var vehicleType = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge2065.VehicleType.Boat;
                    var box = Bridge.box(vehicleType, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge2065.VehicleType, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge2065.VehicleType));

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge2065.VehicleType.Boat, vehicleType);
                    Bridge.Test.NUnit.Assert.AreEqual("Boat", Bridge.toString(box));
                    Bridge.Test.NUnit.Assert.AreEqual("Boat", Bridge.toString(System.Enum.parse(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge2065.VehicleType, "Boat")));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2077.Bridge2065.VehicleType", {
        $kind: "nested enum",
        statics: {
            fields: {
                Car: 0,
                Plane: 1,
                Boat: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079", {
        statics: {
            methods: {
                TestQueryAsArgument: function () {
                    Bridge.Test.NUnit.Assert.True(true, "Just check that Bridge2079Parsers is compiled ok");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079.Result$1", function (TValue) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079.Source", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079Parsers", {
        statics: {
            methods: {
                Bad2: function (TValue1, TValue2, p, sep) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079Parsers.SelectMany(TValue1, System.Collections.Generic.IEnumerable$1(TValue1), System.Collections.Generic.IEnumerable$1(TValue1), p, function (head) {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079Parsers.Many(TValue1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079Parsers.SelectMany(TValue2, TValue1, TValue1, sep, function (_) {
                            return p;
                        }, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079Parsers.f1));
                    }, function (head, tail) {
                        return Bridge.cast(System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079Parsers.ToEnumerable(TValue1, head), TValue1).concat(tail), System.Collections.Generic.IEnumerable$1(TValue1));
                    });
                },
                SelectMany: function (TValue, TIntermediate, TValue2, parser, selector, projector) {
                    return function (i) {
                        var res = parser(i);
                        return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079.Result$1(TValue2))();
                    };
                },
                Many: function (TValue, parser) {
                    return function (i) {
                        return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079.Result$1(System.Collections.Generic.IEnumerable$1(TValue)))();
                    };
                },
                ToEnumerable: function (TValue, head) {
                    return new (Bridge.GeneratorEnumerable$1(TValue))(Bridge.fn.bind(this, function (TValue, head) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(TValue))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            $enumerator.current = head;
                                                $step = 1;
                                                return true;
                                        }
                                        case 1: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079Parsers", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2079Parsers, {
        f1: function (_, t) {
            return t;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080", {
        statics: {
            props: {
                TestProperty1: false
            },
            methods: {
                TestAssigmentOrWithProperty: function () {
                    var testVariable = true;
                    var newValue1 = false;
                    testVariable = !!(testVariable | newValue1);
                    Bridge.Test.NUnit.Assert.True(testVariable);

                    var myTestClass = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass();
                    myTestClass.TestProperty = true;
                    var newValue2 = false;
                    myTestClass.TestProperty = !!(myTestClass.TestProperty | newValue2);
                    Bridge.Test.NUnit.Assert.True(myTestClass.TestProperty);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestProperty1 = true;
                    var newValue3 = false;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestProperty1 = !!(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestProperty1 | newValue3);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestProperty1);
                },
                TestAssigmentOrWithPropertyChangingCounter: function () {
                    var myTestClass = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass2();

                    myTestClass.TestProperty = true;
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass2.GetCount);

                    var newValue2 = false;
                    myTestClass.TestProperty = !!(myTestClass.TestProperty | newValue2);
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass2.GetCount);

                    Bridge.Test.NUnit.Assert.True(myTestClass.TestProperty);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass2.GetCount);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass", {
        $kind: "nested class",
        props: {
            TestProperty: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass2", {
        $kind: "nested class",
        statics: {
            fields: {
                GetCount: 0
            },
            ctors: {
                init: function () {
                    this.GetCount = 0;
                }
            }
        },
        fields: {
            b: false
        },
        props: {
            TestProperty: {
                get: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass2.GetCount = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2080.TestClass2.GetCount + 1) | 0;
                    return this.b;
                },
                set: function (value) {
                    this.b = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.b = false;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2081", {
        statics: {
            methods: {
                TestMethod: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        j, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([1,2,3,4,5], $step);
                                    switch ($step) {

                                        case 1: {
                                            //await to force state-machine generation
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            //raise exception
                                            j = 1;
                                            j = (Bridge.Int.div(j, 0)) | 0;

                                            $returnValue = "OK";
                                            $step = 4;
                                            continue;
                                        }
                                        case 3: {
                                            $returnValue = "ERROR";
                                            $async_e = null;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            //may be empty

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                $tcs.setException($async_e);
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                if ($step >= 1 && $step <= 3) {
                                    $step = 4;
                                    $asyncBody();
                                    return;
                                }
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestReturnFromCatch: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        s, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2081.TestMethod();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        s = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("ERROR", s);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088", {
        statics: {
            methods: {
                TestObjectLiteralReflection: function () {
                    var $t;
                    var ol = { };
                    var props = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(ol), 16, 28), System.Reflection.PropertyInfo).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.f1).ToArray(System.String);
                    Bridge.Test.NUnit.Assert.AreEqual(0, props.length);

                    var obj = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.T();
                    props = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(obj), 16, 28), System.Reflection.PropertyInfo).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.f1).ToArray(System.String);
                    Bridge.Test.NUnit.Assert.AreEqual(1, props.length);
                    Bridge.Test.NUnit.Assert.AreEqual("ShouldSeeThis", props[System.Array.index(0, props)]);

                    var ol1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL1.ctor();
                    props = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(ol1), 16, 28), System.Reflection.PropertyInfo).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.f1).ToArray(System.String);
                    Bridge.Test.NUnit.Assert.AreEqual(1, props.length);
                    Bridge.Test.NUnit.Assert.AreEqual("ShouldSeeThis1", props[System.Array.index(0, props)]);

                    var ol2 = ($t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL2.ctor(), $t.ShouldSeeThis2 = 2, $t);
                    props = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.getType(ol2), 16, 28), System.Reflection.PropertyInfo).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.f1).ToArray(System.String);
                    Bridge.Test.NUnit.Assert.AreEqual(2, props.length);
                    Bridge.Test.NUnit.Assert.AreEqual("ShouldSeeThis2", props[System.Array.index(0, props)]);
                    Bridge.Test.NUnit.Assert.AreEqual("ShouldSeeThis1", props[System.Array.index(1, props)]);

                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.getType(ol2), 16, 284, "ShouldSeeThis2").g, ol2)()));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088, {
        f1: function (x) {
            return x.n;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL1", {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function () {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL1; };
                (function (){
                    this.ShouldSeeThis1 = 0;
                }).call($this);
                return $this;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.T", {
        $kind: "nested class",
        props: {
            ShouldSeeThis: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2092", {
        statics: {
            methods: {
                Combine: function (value, toAdd, combiner) {
                    return combiner(value, toAdd);
                },
                ExtendTuple: function (tuple, value) {
                    return { Item1: tuple.Item1, Item2: value };
                },
                TestIgnoreGenericForDelegate: function () {
                    var stringValueInTuple = { Item1: "abc" };
                    var stringAndIntValuesInTuple = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2092.Combine(stringValueInTuple, 123, function (tuple, value) { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2092.ExtendTuple(tuple, value); });

                    Bridge.Test.NUnit.Assert.AreEqual("abc", stringAndIntValuesInTuple.Item1);
                    Bridge.Test.NUnit.Assert.AreEqual(123, stringAndIntValuesInTuple.Item2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2094", {
        statics: {
            methods: {
                Outer1: function (T1, value) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2094.DoSomething(System.Int32, System.String, 123, function (value) { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2094.GetName(System.Int32, value); });
                },
                Outer2: function (T1, value) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2094.DoSomething(T1, System.String, value, function (value) { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2094.GetName(T1, value); });
                },
                DoSomething: function (T1, T2, value, work) {
                    return work(value);
                },
                GetName: function (T, value) {
                    return Bridge.Reflection.getTypeName(Bridge.getType(value, T));
                },
                TestGenericMethodAsDelegate: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Int32", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2094.Outer1(System.Int32, 123));
                    Bridge.Test.NUnit.Assert.AreEqual("Int32", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2094.Outer2(System.Int32, 123));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2106", {
        statics: {
            methods: {
                TestGenericMethodInObjectLiteral: function () {
                    var o1 = { };
                    var o2 = { };
                    var o3 = Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2106.c1$1(System.String).prototype.m1.call(o1, System.Int32, o2), System.Int32);

                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.unbox(o3));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o1, System.Object));
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2106.c1$1(System.String).prototype.m2.call(o1, System.Int32, o2));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2106.c1$1", function (TA) { return {
        $kind: "nested class",
        $literal: true,
        methods: {
            m1: function (TB, p1) {
                return Bridge.getDefaultValue(TB);
            },
            m2: function (TB, p1) {
                var oThis = this;
                return Bridge.is(oThis, System.Object);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114", {
        statics: {
            methods: {
                TestNonStandardNames: function () {
                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass1(5);
                    Bridge.Test.NUnit.Assert.AreEqual(5, c1["0a"]);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(c1["0a"]), c1["0a"]);

                    Bridge.Test.NUnit.Assert.AreEqual(5, c1["0p"]);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(c1["0p"]), c1["0p"]);

                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass1["0p1"]);

                    Bridge.Test.NUnit.Assert.True(System.Int64(7).equals(c1["0l"]));
                    Bridge.Test.NUnit.Assert.True(System.Nullable.getValue(Bridge.cast(Bridge.unbox(c1["0l"], System.Int64), System.Int64)).equals(c1["0l"]));

                    Bridge.Test.NUnit.Assert.AreEqual(2, c1["0a3"]);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(c1["0a3"]), c1["0a3"]);

                    Bridge.Test.NUnit.Assert.AreEqual(0, c1["0a4"]);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(c1["0a4"]), c1["0a4"]);
                },
                TestFieldTemplates: function () {
                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass2(5);
                    Bridge.Test.NUnit.Assert.AreEqual(5, c2["0a"]);
                    Bridge.Test.NUnit.Assert.AreEqual(5, c2.testMethod());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass1", {
        $kind: "nested class",
        statics: {
            fields: {
                STestField: 0
            },
            props: {
                "0p1": 0
            },
            ctors: {
                init: function () {
                    this.STestField = 1;
                }
            }
        },
        fields: {
            "0a": 0,
            "0a3": 0,
            "0l": System.Int64(0),
            "0a4": 0
        },
        props: {
            "0p": 0
        },
        ctors: {
            init: function () {
                this["0a3"] = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass1.STestField + 1) | 0;
            },
            ctor: function (value) {
                var $t;
                this.$initialize();
                this["0a"] = value;
                this["0a"] = value;
                var v = this["0a"];
                v = this["0a"];

                this["0p"] = value;
                this["0p"] = value;
                v = this["0p"];
                v = this["0p"];

                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass1["0p1"] = value;
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass1["0p1"] = value;
                v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass1["0p1"];
                v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass1["0p1"];

                this["0l"] = System.Int64(value);
                this["0l"] = System.Int64(value);
                v = System.Int64.clip32(this["0l"]);
                v = System.Int64.clip32(this["0l"]);
                var l = ($t = this["0l"], this["0l"] = this["0l"].inc(), $t);
                l = ($t = this["0l"], this["0l"] = this["0l"].inc(), $t);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2114.TestClass2", {
        $kind: "nested class",
        fields: {
            TestField: 0,
            TestField2: 0,
            f: 0
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this["0a"] = value;
                this["0a"] = value;
                var v = this["0a"];
                v = this["0a"];

                this.testMethod(value);
                this.testMethod(value);
                v = this.testMethod();
                v = this.testMethod();
            }
        },
        methods: {
            testMethod: function () {
                if (arguments.length > 0) {
                    this.f = System.Nullable.getValue(Bridge.cast(Bridge.unbox(arguments[0], System.Int32), System.Int32));
                }
                return this.f;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2121", {
        statics: {
            methods: {
                TestLongAsDictionaryKey: function () {
                    var dict = new (System.Collections.Generic.Dictionary$2(System.Int64,System.String)).ctor();
                    var i = 0;
                    dict.setItem(System.Int64(i), "test");

                    var l = System.Int64(0);
                    Bridge.Test.NUnit.Assert.AreEqual("test", dict.getItem(System.Int64(i)));
                    Bridge.Test.NUnit.Assert.AreEqual("test", dict.getItem(l));

                    var s = System.Array.init(["test"], System.String);
                    Bridge.Test.NUnit.Assert.AreEqual("test", s[System.Array.index(System.Int64.toNumber(l), s)]);
                    Bridge.Test.NUnit.Assert.AreEqual("test", s[System.Array.index(System.Int64.toNumber(System.Int64(i)), s)]);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2127", {
        statics: {
            methods: {
                TestNumberFormatInfoNaNSymbol: function () {
                    var c = System.Globalization.CultureInfo.getCultureInfo("es-US");
                    var nanSymbol = c.numberFormat.nanSymbol;

                    Bridge.Test.NUnit.Assert.AreEqual("NaN", nanSymbol);


                    c = System.Globalization.CultureInfo.getCultureInfo("nb-NO");
                    nanSymbol = c.numberFormat.nanSymbol;

                    Bridge.Test.NUnit.Assert.AreEqual("NaN", nanSymbol);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2135", {
        statics: {
            methods: {
                TestNestedTypesNames: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("_Bridge2135_1+Config", Bridge.Reflection.getTypeFullName(_Bridge2135_1.Config));
                    Bridge.Test.NUnit.Assert.AreEqual("_Bridge2135_2.Class2_1$1+Config", Bridge.Reflection.getTypeFullName(_Bridge2135_2.Class2_1$1.Config));
                    Bridge.Test.NUnit.Assert.AreEqual("_Bridge2135_3.Config$1", Bridge.Reflection.getTypeFullName(_Bridge2135_3.Config$1));
                    Bridge.Test.NUnit.Assert.AreEqual("_Bridge2135_4.Class4_1$1.Config[[System.Object, mscorlib]]", Bridge.Reflection.getTypeFullName(_Bridge2135_4.Class4_1$1.Config(System.Object)));
                }
            }
        }
    });

    Bridge.define("_Bridge2135_1", {
        $kind: "nested class"
    });

    Bridge.define("_Bridge2135_1.Config", {
        $kind: "nested class",
        props: {
            Msg: null
        }
    });

    Bridge.define("_Bridge2135_2", {
        $kind: "nested class"
    });

    Bridge.define("_Bridge2135_2.Class2_1$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("_Bridge2135_2.Class2_1$1.Config", {
        $kind: "nested class",
        props: {
            Msg: null
        }
    });

    Bridge.define("_Bridge2135_3", {
        $kind: "nested class"
    });

    Bridge.define("_Bridge2135_3.Config$1", function (T) { return {
        $kind: "nested class",
        props: {
            Msg: null
        }
    }; });

    Bridge.define("_Bridge2135_4", {
        $kind: "nested class"
    });

    Bridge.define("_Bridge2135_4.Class4_1$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("_Bridge2135_4.Class4_1$1.Config", function (T) { return {
        $kind: "nested class",
        props: {
            Msg: null
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2137", {
        statics: {
            props: {
                E1: null,
                E2: null
            },
            ctors: {
                init: function () {
                    this.E1 = System.String.fromCharCount(69, 3);
                    this.E2 = System.String.concat(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2137.E1, System.String.fromCharCount(69, 3));
                }
            },
            methods: {
                TestPropertiesWithNonPrimitiveInitializers: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2137();
                    Bridge.Test.NUnit.Assert.AreEqual("EEE", Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2137.E1));
                    Bridge.Test.NUnit.Assert.AreEqual("EEEEEE", Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2137.E2));
                    Bridge.Test.NUnit.Assert.AreEqual("testEEE", Bridge.unbox(c.E3));
                    Bridge.Test.NUnit.Assert.AreEqual("_testEEE", Bridge.unbox(c.E4));
                }
            }
        },
        props: {
            E3: null,
            E4: null
        },
        ctors: {
            init: function () {
                this.E3 = System.String.concat("test", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2137.E1);
            },
            ctor: function () {
                this.$initialize();
                this.E4 = System.String.concat("_", this.E3);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138", {
        statics: {
            fields: {
                _test1Success: false,
                _test2Success: false
            },
            methods: {
                Test1: function () {
                    var onSuccess = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.f1;
                    var el = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Elem$1(System.Int32))(function (_o1) {
                            _o1.add(new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Something$1(System.Int32))(onSuccess));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Something$1(System.Int32))).ctor()));

                    var hld = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Holder$1(System.Int32))(el);
                    hld.Access1()();
                },
                Test2: function () {
                    var onSuccess = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.f2;
                    var el = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Elem$1(System.Int32))(function (_o1) {
                            _o1.add(new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Something$1(System.Int32))(onSuccess));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Something$1(System.Int32))).ctor()));

                    var hld = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Holder$1(System.Int32))(el);
                    hld.Access2()();
                },
                TestGenericInterfaceIndexer: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Test1();
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138._test1Success);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Test2();
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138._test2Success);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138, {
        f1: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138._test1Success = true;
        },
        f2: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138._test2Success = true;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Elem$1", function (T) { return {
        $kind: "nested class",
        props: {
            Itms: null
        },
        ctors: {
            ctor: function (itms) {
                this.$initialize();
                this.Itms = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.SomeCollection$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Something$1(T)))(itms);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Holder$1", function (RecordT) { return {
        $kind: "nested class",
        fields: {
            _itms: null
        },
        ctors: {
            ctor: function (itms) {
                this.$initialize();
                this._itms = itms;
            }
        },
        methods: {
            Access1: function () {
                return Bridge.fn.bind(this, function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Ext.ForEach(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Something$1(RecordT), this._itms.Itms, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Holder$1.f1);

                    this._itms.Itms["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2138$ISomeCollection$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2138$Something$1$" + Bridge.getTypeAlias(RecordT) + "$getItem"](0).SomeAction();
                });
            },
            Access2: function () {
                return Bridge.fn.bind(this, function () {
                    this._itms.Itms["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2138$ISomeCollection$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2138$Something$1$" + Bridge.getTypeAlias(RecordT) + "$getItem"](0).SomeAction();
                });
            }
        }
    }; });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Holder$1", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Holder$1, {
        f1: function (x) { }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.ISomeCollection$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.Something$1", function (T) { return {
        $kind: "nested class",
        fields: {
            _action: null
        },
        ctors: {
            ctor: function (action) {
                this.$initialize();
                this._action = action;
            }
        },
        methods: {
            SomeAction: function () {
                this._action();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2141", {
        statics: {
            methods: {
                TestExternalObjectLiteral: function () {
                    var config = { Name: "test" };

                    Bridge.Test.NUnit.Assert.AreEqual("test", config.Name);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2143", {
        statics: {
            methods: {
                TestIgnoreGenericForNestedClass: function () {
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2143.ComponentPropsHelpers$1));
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isGenericTypeDefinition(System.Object));
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isGenericTypeDefinition(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2143.ComponentPropsHelpers2$1));
                    // NRefactory incorrectly resolves ComponentPropsHelpers2<>.WrappedProps type
                    // It provides ComponentPropsHelpers2<TProps>.WrappedProps instead of definition
                    //Assert.True(typeof(ComponentPropsHelpers2<>.WrappedProps).IsGenericTypeDefinition);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2143.ComponentPropsHelpers$1", {
        $kind: "nested class",
        statics: {
            methods: {
                WrapProps: function (propsIfAny) {
                    return { Value: propsIfAny };
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2143.ComponentPropsHelpers2$1", function (TProps) { return {
        $kind: "nested class",
        statics: {
            methods: {
                WrapProps: function (propsIfAny) {
                    return { Value: propsIfAny };
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2146", {
        statics: {
            props: {
                TokenTerminator: 0
            },
            methods: {
                GetDefault: function (T) {
                    return Bridge.getDefaultValue(T);
                },
                TestCharDefaultValue: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.getDefaultValue(System.Char));
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2146.GetDefault(System.Char));
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2146.TokenTerminator);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2147", {
        statics: {
            methods: {
                TestLinqExcept: function () {
                    var $t, $t1, $t2, $t3, $t4;
                    var numbers1 = System.Array.init([
                        2.0, 
                        2.0, 
                        2.1, 
                        2.2, 
                        2.3, 
                        2.3, 
                        2.4, 
                        2.5
                    ], System.Double);
                    var numbers2 = System.Array.init([2.2, 2.2], System.Double);
                    var numbers = System.Linq.Enumerable.from(numbers1, System.Double).except(numbers2).ToArray(System.Double);

                    Bridge.Test.NUnit.Assert.AreEqual(5, numbers.length);
                    Bridge.Test.NUnit.Assert.False(System.Array.contains(numbers, 2.2, System.Double));
                    Bridge.Test.NUnit.Assert.AreEqual(2.0, numbers[System.Array.index(0, numbers)]);
                    Bridge.Test.NUnit.Assert.AreEqual(2.5, numbers[System.Array.index(4, numbers)]);

                    var numbers3 = System.Array.init([2.2], System.Double);
                    var numbers4 = System.Array.init([2.2], System.Double);
                    var count3 = 0;
                    $t = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers3, System.Double).except(numbers4));
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            Bridge.Test.NUnit.Assert.Fail("numbers3.Except(numbers4) should be empty");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(0, count3, "numbers3.Except(numbers4) should be empty");

                    var numbers5 = System.Array.init([2.0], System.Double);
                    var numbers6 = System.Array.init([2.2], System.Double);
                    var count5 = 0;
                    $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers5, System.Double).except(numbers6));
                    try {
                        while ($t1.moveNext()) {
                            var item1 = $t1.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(2.0, item1);
                            count5 = (count5 + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(1, count5);

                    var numbers7 = System.Array.init([], System.Double);
                    var numbers8 = System.Array.init([2.0], System.Double);
                    var count7 = 0;
                    $t2 = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers7, System.Double).except(numbers8));
                    try {
                        while ($t2.moveNext()) {
                            var item2 = $t2.Current;
                            Bridge.Test.NUnit.Assert.Fail("numbers7.Except(numbers8) should be empty");
                            count7 = (count7 + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(0, count7, "numbers7.Except(numbers8) should be empty");

                    var numbers9 = System.Array.init([7.0], System.Double);
                    var numbers10 = System.Array.init([], System.Double);
                    var count9 = 0;
                    $t3 = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers9, System.Double).except(numbers10));
                    try {
                        while ($t3.moveNext()) {
                            var item3 = $t3.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(7.0, item3);
                            count9 = (count9 + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(1, count9);

                    var numbers11 = System.Array.init([], System.Double);
                    var numbers12 = System.Array.init([], System.Double);
                    var count11 = 0;
                    $t4 = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers11, System.Double).except(numbers12));
                    try {
                        while ($t4.moveNext()) {
                            var item4 = $t4.Current;
                            Bridge.Test.NUnit.Assert.Fail("numbers11.Except(numbers12) should be empty");
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(0, count11, "numbers11.Except(numbers12) should be empty");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2156", {
        statics: {
            methods: {
                TestLinqIntersect: function () {
                    var $t, $t1, $t2, $t3, $t4;
                    var numbers1 = System.Array.init([
                        2.0, 
                        2.0, 
                        2.1, 
                        2.2, 
                        2.3, 
                        2.3, 
                        2.4, 
                        2.5
                    ], System.Double);
                    var numbers2 = System.Array.init([
                        2.2, 
                        2.2, 
                        2.4, 
                        2.4, 
                        2.7
                    ], System.Double);
                    var numbers = System.Linq.Enumerable.from(numbers1, System.Double).intersect(numbers2).ToArray(System.Double);

                    Bridge.Test.NUnit.Assert.AreEqual(2, numbers.length);
                    Bridge.Test.NUnit.Assert.AreEqual(2.2, numbers[System.Array.index(0, numbers)]);
                    Bridge.Test.NUnit.Assert.AreEqual(2.4, numbers[System.Array.index(1, numbers)]);

                    var numbers3 = System.Array.init([2.2], System.Double);
                    var numbers4 = System.Array.init([2.4], System.Double);
                    var count3 = 0;
                    $t = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers3, System.Double).intersect(numbers4));
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            Bridge.Test.NUnit.Assert.Fail("numbers3.Intersect(numbers4) should be empty");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(0, count3, "numbers3.Intersect(numbers4) should be empty");

                    var numbers5 = System.Array.init([2.0], System.Double);
                    var numbers6 = System.Array.init([2.0], System.Double);
                    var count5 = 0;
                    $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers5, System.Double).intersect(numbers6));
                    try {
                        while ($t1.moveNext()) {
                            var item1 = $t1.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(2.0, item1);
                            count5 = (count5 + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(1, count5);

                    var numbers7 = System.Array.init([], System.Double);
                    var numbers8 = System.Array.init([2.0], System.Double);
                    var count7 = 0;
                    $t2 = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers7, System.Double).intersect(numbers8));
                    try {
                        while ($t2.moveNext()) {
                            var item2 = $t2.Current;
                            Bridge.Test.NUnit.Assert.Fail("numbers7.Intersect(numbers8) should be empty");
                            count7 = (count7 + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(0, count7, "numbers7.Intersect(numbers8) should be empty");

                    var numbers9 = System.Array.init([7.0], System.Double);
                    var numbers10 = System.Array.init([], System.Double);
                    var count9 = 0;
                    $t3 = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers9, System.Double).intersect(numbers10));
                    try {
                        while ($t3.moveNext()) {
                            var item3 = $t3.Current;
                            Bridge.Test.NUnit.Assert.Fail("numbers9.Intersect(numbers10) should be empty");
                            count9 = (count9 + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(0, count9);

                    var numbers11 = System.Array.init([], System.Double);
                    var numbers12 = System.Array.init([], System.Double);
                    var count11 = 0;
                    $t4 = Bridge.getEnumerator(System.Linq.Enumerable.from(numbers11, System.Double).intersect(numbers12));
                    try {
                        while ($t4.moveNext()) {
                            var item4 = $t4.Current;
                            Bridge.Test.NUnit.Assert.Fail("numbers11.Intersect(numbers12) should be empty");
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(0, count11, "numbers11.Intersect(numbers12) should be empty");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2157", {
        statics: {
            methods: {
                TestMethod: function (TType) {
                    var $t;
                    return ($t = new TType(), $t.TestIntProperty = 2, $t.TestStringProperty = "initializer", $t.TestObjectProperty = System.String.fromCharArray(System.Array.init([105], System.Char)), $t);
                },
                TestCreatingGenericInstanceWithInitializer: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2157.TestMethod(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2157.TestClass).TestIntProperty);
                    Bridge.Test.NUnit.Assert.AreEqual("initializer", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2157.TestMethod(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2157.TestClass).TestStringProperty);
                    Bridge.Test.NUnit.Assert.AreEqual("i", Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2157.TestMethod(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2157.TestClass).TestObjectProperty));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2157.TestClass", {
        $kind: "nested class",
        props: {
            TestIntProperty: 0,
            TestStringProperty: null,
            TestObjectProperty: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.TestIntProperty = 1;
                this.TestStringProperty = "constructor";
                this.TestObjectProperty = System.String.fromCharArray(System.Array.init([99], System.Char));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2159", {
        statics: {
            methods: {
                TestBaseTypeForGenericDefinition: function () {
                    var derivedType = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2159.Derived$1;
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2159.Base$2(System.Int32,System.String), Bridge.Reflection.getBaseType(derivedType));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2159.Base$2", function (T, U) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2160", {
        statics: {
            methods: {
                TestBaseTypeForGenericDefinition: function () {
                    var $t;
                    var derivedType = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2160.Derived$1;
                    var args = ($t = System.Type, System.Linq.Enumerable.from(Bridge.Reflection.getGenericArguments(derivedType), $t).ToArray($t));
                    Bridge.Test.NUnit.Assert.AreEqual(1, args.length);
                    Bridge.Test.NUnit.Assert.AreEqual("V", Bridge.Reflection.getTypeName(args[System.Array.index(0, args)]));
                    Bridge.Test.NUnit.Assert.True((args[System.Array.index(0, args)].$isTypeParameter || false));

                    var baseArgs = Bridge.Reflection.getGenericArguments(Bridge.Reflection.getBaseType(derivedType));
                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.init([System.Int32, System.String], System.Type), baseArgs);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2160.Base$2", function (T, U) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2163", {
        statics: {
            methods: {
                TestDecimalToFormat: function () {
                    var d1 = System.Decimal(1.0, 1);
                    Bridge.Test.NUnit.Assert.AreEqual("1.00", d1.toFormat(2));
                    Bridge.Test.NUnit.Assert.AreEqual("1", d1.toFormat());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2167", {
        statics: {
            methods: {
                TestMerge: function () {
                    var $t;
                    var o1 = new $asm.$AnonymousType$16(1);

                    var o2 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2167.Data(), $t.p1 = System.Decimal(2.0, 1), $t.p2 = System.Decimal(2.0, 1), $t);
                    o2 = Bridge.merge(o2, Bridge.unbox(o1));

                    var o3 = System.Decimal(3.0, 1);
                    var o4 = Bridge.box(1, System.Int32);
                    o3 = Bridge.merge(o3, Bridge.unbox(o4));

                    Bridge.Test.NUnit.Assert.True(Bridge.is(o2.p1, System.Decimal));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o2.p2, System.Decimal));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o3, System.Decimal));
                }
            }
        }
    });

    Bridge.define("$AnonymousType$16", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (p1) {
                this.p1 = p1;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$16)) {
                    return false;
                }
                return Bridge.equals(this.p1, o.p1);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550210010, this.p1]);
                return h;
            },
            toJSON: function () {
                return {
                    p1 : this.p1
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"p1","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_p1","t":8,"rt":System.Int32,"fg":"p1","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"p1"}]}; }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2167.Data", {
        $kind: "nested class",
        props: {
            p1: System.Decimal(0.0),
            p2: System.Decimal(0.0)
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174", {
        statics: {
            methods: {
                TestGenericComparerDefault: function () {
                    //comparer Default "as such" works
                    {
                        var cmp = new (System.Collections.Generic.Comparer$1(System.String))(System.Collections.Generic.Comparer$1.$default.fn);
                        Bridge.Test.NUnit.Assert.True(cmp.compare("a", "b") < 0, "[1]is less than zero as expected?");
                    }

                    //comparer Create "as such" works
                    {
                        var cmp1 = new (System.Collections.Generic.Comparer$1(System.String))($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.f1);
                        Bridge.Test.NUnit.Assert.True(cmp1.compare("a", "b") < 0, "[2]is less than zero as expected?");
                    }

                    //custom comparer "as such" works
                    {
                        var cmp2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.CustomCmp$1(System.String))();
                        Bridge.Test.NUnit.Assert.True(cmp2.compare("a", "b") < 0, "[3]is less than zero as expected?");
                    }

                    //custom comparer wrapped works
                    {
                        var cmp3 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.WrappingCmp$1(System.String))(new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.CustomCmp$1(System.String))());
                        Bridge.Test.NUnit.Assert.True(cmp3.compare("a", "b") < 0, "[4]is less than zero as expected?");
                    }

                    //default comparer wrapped doesn't work
                    {
                        var cmp4 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.WrappingCmp$1(System.String))(new (System.Collections.Generic.Comparer$1(System.String))(System.Collections.Generic.Comparer$1.$default.fn));
                        Bridge.Test.NUnit.Assert.True(cmp4.compare("a", "b") < 0, "[5]is less than zero as expected?");
                    }

                    //created comparer wrapped doesn't work
                    {
                        var cmp5 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.WrappingCmp$1(System.String))(new (System.Collections.Generic.Comparer$1(System.String))($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.f1));
                        Bridge.Test.NUnit.Assert.True(cmp5.compare("a", "b") < 0, "[6]is less than zero as expected?");
                    }
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174, {
        f1: function (x, y) {
            return System.String.compare(x, y);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.CustomCmp$1", function (T) { return {
        inherits: [System.Collections.Generic.IComparer$1(T)],
        $kind: "nested class",
        alias: ["compare", ["System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare"]],
        methods: {
            compare: function (x, y) {
                return Bridge.compare(x, y, false, T);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2174.WrappingCmp$1", function (T) { return {
        inherits: [System.Collections.Generic.IComparer$1(T)],
        $kind: "nested class",
        fields: {
            _wrapped: null
        },
        alias: ["compare", ["System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare"]],
        ctors: {
            ctor: function (wrapped) {
                this.$initialize();
                this._wrapped = wrapped;
            }
        },
        methods: {
            compare: function (x, y) {
                return this._wrapped[Bridge.geti(this._wrapped, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](x, y);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2176", {
        statics: {
            methods: {
                TestExternalObjectLiteralConstructorMode: function () {
                    var $t;
                    // This emulates external Config1
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2176.Config1 = function()
                    {
                        return { id: 1 };
                    };

                    // This emulates external Config2
                    var Config2 = function()
                    {
                        return { id: 2 };
                    };

                    var c1 = ($t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2176.Config1(), $t.name = "Config1", $t);
                    Bridge.Test.NUnit.Assert.AreEqual("Config1", c1.name);
                    Bridge.Test.NUnit.Assert.AreEqual(1, c1.id);

                    var c2 = ($t = Config2(), $t.name = "Config2", $t);
                    Bridge.Test.NUnit.Assert.AreEqual("Config2", c2.name);
                    Bridge.Test.NUnit.Assert.AreEqual(2, c2.id);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2181", {
        statics: {
            methods: {
                TestStringPadForEmptyString: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("LLL", System.String.alignString((""), 3, 76));
                    Bridge.Test.NUnit.Assert.AreEqual("RRR", System.String.alignString((""), -3, 82));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2186", {
        statics: {
            props: {
                Output: {
                    get: function () {
                        return Bridge.Console.instance.bufferedOutput;
                    },
                    set: function (value) {
                        Bridge.Console.instance.bufferedOutput = value;
                    }
                }
            },
            methods: {
                ClearOutput: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2186.Output = "";
                },
                ResetOutput: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2186.Output = null;
                    Bridge.Console.hide();
                },
                TestConsoleWriteLineParameterless: function () {
                    System.Console.WriteLine();
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTestHelper.StringHelper.CombineLinesNL([""]), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2186.Output);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2189", {
        statics: {
            methods: {
                TestInheritanceFromExternalAndBaseCtor: function () {
                    var employee = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2189.Employee("John Doe", 100);
                    var o = employee;
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, Bridge.$MyPerson2189));
                    Bridge.Test.NUnit.Assert.AreEqual("John Doe", employee.Name);
                    Bridge.Test.NUnit.Assert.AreEqual(100, employee.Salary);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2189.Employee", {
        inherits: [Bridge.$MyPerson2189],
        $kind: "nested class",
        fields: {
            Salary: 0
        },
        ctors: {
            ctor: function (name, salary) {
                this.$initialize();
                Bridge.$MyPerson2189.call(this, name);
                this.Salary = salary;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2190", {
        statics: {
            methods: {
                TestInternalsVisibleTo: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Hi", Bridge.ClientTestHelper.N2190.Greeting());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2192", {
        statics: {
            methods: {
                GetLoggablePerson: function (name, id) {
                    var person = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2192.Person(name);
                    var loggable = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2192.Loggable(id);

                    person.Log = loggable.Log;
                    person.id = loggable.id;

                    return person;
                },
                TestIntersection: function () {
                    var person = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2192.GetLoggablePerson("John Doe #1", 5);
                    Bridge.Test.NUnit.Assert.AreEqual("John Doe #1", person.Name);
                    Bridge.Test.NUnit.Assert.AreEqual(5, person.Log());
                    Bridge.Test.NUnit.Assert.AreEqual(5, person.id);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2192.Loggable", {
        $kind: "nested class",
        fields: {
            id: 0
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                this.id = id;
            }
        },
        methods: {
            Log: function () {
                return this.id;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2192.Person", {
        $kind: "nested class",
        fields: {
            Name: null
        },
        ctors: {
            ctor: function (name) {
                this.$initialize();
                this.Name = name;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2195", {
        statics: {
            methods: {
                Generic: function (T) {
                    return 1;
                },
                TestGenericInvocationInTryBlock: function () {
                    var i = 0;
                    try {
                        i = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2195.Generic(System.String);
                        Bridge.Test.NUnit.Assert.AreEqual(1, i);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        var ex;
                        if (Bridge.is($e1, System.ArgumentException)) {
                            ex = $e1;
                            Bridge.Test.NUnit.Assert.Fail("Should not get into catch. However the test is to check the try/catch compiles successfully");
                            System.Console.WriteLine(ex.Message);
                        } else {
                            throw $e1;
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2199", {
        statics: {
            methods: {
                AssertTypeName: function (T, value, realType) {
                    Bridge.Test.NUnit.Assert.AreEqual(realType, Bridge.getType(value, T));
                    Bridge.Test.NUnit.Assert.AreEqual(realType, T);
                },
                TestTypeParameterName: function () {
                    var x = 2;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2199.AssertTypeName(System.UInt16, x, System.UInt16);

                    var f = 1.0;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2199.AssertTypeName(System.Single, f, System.Single);

                    var ts = System.Threading.Tasks.TaskStatus.running;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2199.AssertTypeName(System.Threading.Tasks.TaskStatus, ts, System.Threading.Tasks.TaskStatus);

                    var c = 97;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2199.AssertTypeName(System.Char, c, System.Char);

                    var l = System.Int64(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2199.AssertTypeName(System.Int64, l, System.Int64);

                    var d = System.Decimal(10);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2199.AssertTypeName(System.Decimal, d, System.Decimal);

                    var s = "s";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2199.AssertTypeName(System.String, s, System.String);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2200", {
        statics: {
            methods: {
                TestSequence: function () {
                    var seq = [1, "one"];
                    Bridge.Test.NUnit.Assert.AreEqual(1, seq[0]);
                    Bridge.Test.NUnit.Assert.AreEqual("one", seq[1]);

                    seq[0] = 2;
                    seq[1] = "two";
                    Bridge.Test.NUnit.Assert.AreEqual(2, seq[0]);
                    Bridge.Test.NUnit.Assert.AreEqual("two", seq[1]);

                    seq[0] = 3;
                    seq[1] = "three";
                    Bridge.Test.NUnit.Assert.AreEqual(3, seq[0]);
                    Bridge.Test.NUnit.Assert.AreEqual("three", seq[1]);

                    Bridge.Test.NUnit.Assert.True(Bridge.is(seq, Array));
                    Bridge.Test.NUnit.Assert.AreEqual(2, seq.length);
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.unbox(seq[0]));
                    Bridge.Test.NUnit.Assert.AreEqual("three", Bridge.unbox(seq[1]));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2203", {
        statics: {
            methods: {
                TestLocalVarsRenaming: function () {
                    for (var n = 0; false; ) {
                        ;
                    }

                    for (var n1 = 1; n1 < 2; n1 = (n1 + 1) | 0) {
                        for (var n11 = 2; n11 < 3; n11 = (n11 + 1) | 0) {
                            Bridge.Test.NUnit.Assert.AreEqual(1, n1);
                            Bridge.Test.NUnit.Assert.AreEqual(2, n11);
                            Bridge.Test.NUnit.Assert.AreEqual(1, n1);
                            Bridge.Test.NUnit.Assert.AreEqual(2, n11);
                        }
                    }

                    var counter = 0;
                    for (var n2 = 1; n2 < 2; n2 = (n2 + 1) | 0) {
                        for (var n12 = 2; n12 < 4; n12 = (n12 + 1) | 0) {
                            counter = (counter + 1) | 0;
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(2, counter);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2204", {
        statics: {
            methods: {
                TestDecimalToString: function () {
                    var d = System.Decimal(0.00000000000000000000000001, 26);
                    Bridge.Test.NUnit.Assert.AreEqual("0.00000000000000000000000001", d.toString());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207", {
        statics: {
            methods: {
                SomeMethod: function (T, input) {
                    if (input === void 0) { input = Bridge.getDefaultValue(T); }
                    return input;
                },
                TestDefaultOptionalParam: function () {
                    var first = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207.SomeMethod(System.String);
                    Bridge.Test.NUnit.Assert.Null(first);

                    var second = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207.SomeMethod(System.Int32);
                    Bridge.Test.NUnit.Assert.AreEqual(0, second);

                    var third = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207.SomeMethod(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207.SomeStruct).$clone();
                    Bridge.Test.NUnit.Assert.True(third.IsDefault());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207.SomeStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207.SomeStruct(); }
            }
        },
        fields: {
            i: null
        },
        ctors: {
            $ctor1: function (i) {
                this.$initialize();
                this.i = i;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            IsDefault: function () {
                return this.i == null;
            },
            getHashCode: function () {
                var h = Bridge.addHash([3672135689, this.i]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207.SomeStruct)) {
                    return false;
                }
                return Bridge.equals(this.i, o.i);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2207.SomeStruct();
                s.i = this.i;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210", {
        statics: {
            methods: {
                TestTypeOrdering: function () {
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.Hello);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.Agent_Logic", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.GoSington$1", function (T) { return {
        $kind: "nested class",
        statics: {
            fields: {
                instance: null
            },
            props: {
                Instance: {
                    get: function () {
                        if (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.GoSington$1(T).instance == null) {
                        }
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.GoSington$1(T).instance;
                    }
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.ObjSingleton$1", function (T) { return {
        $kind: "nested class",
        statics: {
            fields: {
                instance: null
            },
            props: {
                Instance: {
                    get: function () {
                        if (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.ObjSingleton$1(T).instance == null) {
                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.ObjSingleton$1(T).instance = Bridge.createInstance(T);
                        }
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.ObjSingleton$1(T).instance;
                    }
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2211", {
        statics: {
            methods: {
                TestConditionAccess: function () {
                    var $t;
                    Bridge.Test.NUnit.Assert.False(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2211.A().IsAssistantRoot);
                    Bridge.Test.NUnit.Assert.False(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2211.A(), $t.ParentNode = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2211.A(), $t).IsAssistantRoot);

                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2211.A();
                    a.ParentNode = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2211.A(), $t.AssistantsRoot = a, $t);
                    Bridge.Test.NUnit.Assert.True(a.IsAssistantRoot);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2211.A", {
        $kind: "nested class",
        fields: {
            AssistantsRoot: null,
            ParentNode: null
        },
        props: {
            IsAssistantRoot: {
                get: function () {
                    return Bridge.referenceEquals((this.ParentNode != null ? this.ParentNode.AssistantsRoot : null), this);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2212", {
        statics: {
            methods: {
                TestDelegateBindCache: function () {
                    var app = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2212();

                    app.Run();

                    var length = app.$$bind ? app.$$bind.length : 0;

                    Bridge.Test.NUnit.Assert.AreEqual(0, length);
                    Bridge.Test.NUnit.Assert.AreEqual(1, app.test);
                    Bridge.Test.NUnit.Assert.AreEqual(1000, app.runCounter);
                }
            }
        },
        fields: {
            test: 0,
            runCounter: 0
        },
        ctors: {
            init: function () {
                this.test = 0;
                this.runCounter = 0;
            }
        },
        methods: {
            Run: function () {
                this.runCounter = 0;

                var mytest = 1;
                var a = Bridge.fn.bind(this, function () {
                    var b = Bridge.fn.bind(this, function () {
                        this.test = mytest;
                    });

                    this.runCounter = (this.runCounter + 1) | 0;

                    return b;
                });

                for (var i = 0; i < 1000; i = (i + 1) | 0) {
                    a()();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2213", {
        statics: {
            methods: {
                TestCase: function () {
                    var t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2213.UIUtils.DataTables.GetTable();
                    Bridge.Test.NUnit.Assert.AreEqual(1, t.i);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2213.UIUtils", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2213.UIUtils.DataTable", {
        $kind: "nested class",
        fields: {
            i: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2213.UIUtils.DataTables", {
        $kind: "nested class",
        statics: {
            methods: {
                GetTable: function () {
                    return {i:1};
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2214", {
        statics: {
            methods: {
                TestCheckedULong: function () {
                    var a = 0;
                    var b = Bridge.Int.check(a, System.UInt64);

                    Bridge.Test.NUnit.Assert.True(b.equals(System.UInt64(0)));
                    Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2214.f1);

                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2214.ULongChecked(0).equals(System.UInt64(0)));
                    Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2214.f2);
                },
                ULongChecked: function (n) {
                    return Bridge.Int.check(n, System.UInt64);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2214", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2214, {
        f1: function () {
            var i = -1;
            var ul = Bridge.Int.check(i, System.UInt64);
        },
        f2: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge2214.ULongChecked(-1);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2216", {
        statics: {
            methods: {
                TestExternalInterface: function () {
                    var person = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2216.Person("John Smith");
                    Bridge.Test.NUnit.Assert.AreEqual("John Smith", person.Name);
                    Bridge.Test.NUnit.Assert.AreEqual("This is John Smith", person.Introduce());

                    var iperson = Bridge.cast(person, Bridge.virtual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2216.IPerson"));
                    Bridge.Test.NUnit.Assert.AreEqual("John Smith", iperson[Bridge.geti(iperson, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2216$IPerson$Name")]);
                    Bridge.Test.NUnit.Assert.AreEqual("This is John Smith", iperson[Bridge.geti(iperson, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2216$IPerson$Introduce")]());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2220", {
        statics: {
            methods: {
                TestHasElementType: function () {
                    var nums = System.Array.init([
                        1, 
                        1, 
                        2, 
                        3, 
                        5, 
                        8, 
                        13
                    ], System.Int32);
                    var t = Bridge.getType(nums);

                    Bridge.Test.NUnit.Assert.True((!!t.$elementType));

                    t = System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2220);
                    Bridge.Test.NUnit.Assert.True((!!t.$elementType));

                    var mi = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2220, 8, 284, "Test");
                    var parms = (mi.pi || []);

                    t = parms[System.Array.index(0, parms)].pt;
                    Bridge.Test.NUnit.Assert.True((!!t.$elementType));

                    t = parms[System.Array.index(1, parms)].pt;
                    Bridge.Test.NUnit.Assert.False((!!t.$elementType));
                }
            }
        },
        methods: {
            Test: function (arr, x) { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2221", {
        statics: {
            methods: {
                TestMakeArrayType: function () {
                    var t = System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2221);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2221), t);

                    t = System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2221, 2);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2221, 2), t);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2222", {
        statics: {
            methods: {
                TestGetTypeWithNullArgument: function () {
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentNullException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2222.f1);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2222", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2222, {
        f1: function () {
            Bridge.Reflection.getType(null);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2225", {
        statics: {
            methods: {
                TestVolatile: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2225.VolatileTest();
                    c.Test(5);
                    Bridge.Test.NUnit.Assert.AreEqual(5, c.i);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2225.VolatileTest", {
        $kind: "nested class",
        fields: {
            i: 0
        },
        methods: {
            Test: function (_i) {
                this.i = _i;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2243", {
        statics: {
            methods: {
                TestElementHiddenField: function () {
                    var d = document.createElement("div");
                    var root = Bridge.ClientTestHelper.HtmlHelper.FixtureElement;
                    root.appendChild(d);

                    d.hidden = true;
                    Bridge.Test.NUnit.Assert.True(d.hidden);

                    d.hidden = false;
                    Bridge.Test.NUnit.Assert.False(d.hidden);

                    d.hidden = true;
                    Bridge.Test.NUnit.Assert.True(d.hidden);

                    d.hidden = false;
                    Bridge.Test.NUnit.Assert.False(d.hidden);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2246", {
        main: function Main () {
            if (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2246.isExecuted) {
                throw new System.InvalidOperationException.$ctor1("Double entry point execution");
            }

            Bridge.ClientTest.Batch3.BridgeIssues.Bridge2246.isExecuted = true;
        },
        statics: {
            fields: {
                array: null,
                isExecuted: false
            },
            ctors: {
                init: function () {
                    this.array = System.Array.init(["string"], System.String);
                    this.isExecuted = false;
                }
            },
            methods: {
                TestEntryPoint: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2246.isExecuted);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2249", {
        statics: {
            methods: {
                TestPropertyInitializerWithDirective: function () {
                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2249.c1();
                    Bridge.Test.NUnit.Assert.AreEqual("test", c1.p1);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2249.c1", {
        $kind: "nested class",
        props: {
            p1: null
        },
        ctors: {
            init: function () {
                this.p1 = "test";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2251", {
        statics: {
            methods: {
                TestListGetRange: function () {
                    var l = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2251.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());

                    Bridge.Test.NUnit.Assert.AreEqual(0, l.GetRange(0, 0).Count);
                    Bridge.Test.NUnit.Assert.AreEqual(0, l.GetRange(1, 0).Count);
                    Bridge.Test.NUnit.Assert.AreEqual(0, l.GetRange(2, 0).Count);

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, function () {
                        l.GetRange(0, -1);
                    });

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, function () {
                        l.GetRange(-1, 2);
                    });

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, function () {
                        l.GetRange(-1, 0);
                    });

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        l.GetRange(0, 3);
                    });

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        l.GetRange(1, 2);
                    });

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentOutOfRangeException, function () {
                        var i = l.getItem(l.Count);
                    });
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2251", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2251, {
        f1: function (_o1) {
            _o1.add(1);
            _o1.add(2);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278", {
        statics: {
            methods: {
                TestGenericInterface: function () {
                    var itemString = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Item$1(System.String))();
                    var s = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Something$1(System.String))();

                    Bridge.Test.NUnit.Assert.AreEqual(itemString, s.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$ISomething$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$Item$1$System$String$DoSomething(itemString));

                    var itemLong = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Item$1(System.Int64))();
                    var sLong = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Something$1(System.Int64))();

                    Bridge.Test.NUnit.Assert.AreEqual(itemLong, sLong.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$ISomething$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$Item$1$System$Int64$DoSomething(itemLong));

                    var itemDecimal = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Item$1(System.Decimal))();
                    var sDecimal = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Something$1(System.Decimal))();

                    Bridge.Test.NUnit.Assert.AreEqual(itemDecimal, sDecimal.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$ISomething$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$Item$1$System$Decimal$DoSomething(itemDecimal));
                }
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.ISomething$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Item$1", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2279", {
        statics: {
            methods: {
                TestPropertyWithInitializerAndNestedClass: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("test1", new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2279.NestedClass().Value);
                    Bridge.Test.NUnit.Assert.AreEqual("test2", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2279.NestedClass.Value2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2279.NestedClass", {
        $kind: "nested class",
        statics: {
            props: {
                Value2: null
            },
            ctors: {
                init: function () {
                    this.Value2 = "test2";
                }
            }
        },
        props: {
            Value: null
        },
        ctors: {
            init: function () {
                this.Value = "test1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2279.NestedClass.Config", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2280", {
        statics: {
            methods: {
                Test: function (source) {
                    return Bridge.Reflection.getTypeFullName(Bridge.getType(source));
                },
                Test1: function (T, source) {
                    return Bridge.Reflection.getTypeFullName(Bridge.getType(source, T));
                },
                TestGetTypeInIgnoreGenericMethod: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("System.String", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2280.Test("abc"));
                    Bridge.Test.NUnit.Assert.AreEqual("System.String", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2280.Test("xyz"));

                    Bridge.Test.NUnit.Assert.AreEqual("System.String", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2280.Test1(System.String, "abc"));
                    Bridge.Test.NUnit.Assert.AreEqual("System.String", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2280.Test1(System.String, "xyz"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281", {
        statics: {
            methods: {
                TestFieldMerge: function () {
                    var $t;
                    var item = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Optional$1(System.String)).$ctor1("abc");
                    Bridge.Test.NUnit.Assert.AreEqual("abc", item.Value);

                    var node = ($t = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Node$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Optional$1(System.String)))(), $t.Item = item, $t);
                    Bridge.Test.NUnit.Assert.AreEqual(item, node.Item);
                    Bridge.Test.NUnit.Assert.AreEqual("abc", node.Item.Value);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.FieldMerge(System.String, "xyz");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.FieldMerge(System.Int32, 5);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.FieldMerge(System.Decimal, System.Decimal(6.0));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.FieldMerge(System.Int64, System.Int64(7));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.FieldMerge(System.UInt64, System.UInt64(8));
                },
                FieldMerge: function (T, value) {
                    var $t;
                    var item = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Optional$1(T)).$ctor1(value);
                    Bridge.Test.NUnit.Assert.AreEqual(value, item.Value);

                    var node = ($t = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Node$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Optional$1(T)))(), $t.Item = item, $t);
                    Bridge.Test.NUnit.Assert.AreEqual(item, node.Item);
                    Bridge.Test.NUnit.Assert.AreEqual(value, node.Item.Value);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Node$1", function (T) { return {
        $kind: "nested class",
        fields: {
            Item: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Optional$1", function (T) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Optional$1(T))(); }
            }
        },
        props: {
            IsDefined: false,
            Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            $ctor1: function (value) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Optional$1(T).$ctor2.call(this, value, value != null);
            },
            $ctor2: function (value, isDefined) {
                this.$initialize();
                this.IsDefined = isDefined && (value != null);
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            toString: function () {
                return this.IsDefined ? Bridge.toString(this.Value) : "{Missing}";
            },
            getHashCode: function () {
                var h = Bridge.addHash([3587563198, this.IsDefined, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2281.Optional$1(T))) {
                    return false;
                }
                return Bridge.equals(this.IsDefined, o.IsDefined) && Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) { return this; }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2284", {
        statics: {
            methods: {
                TestNameAttrOnProperty: function () {
                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2284.Person();
                    var v = null;

                    p.NAME = "Frank1";
                    v = p.NAME;
                    Bridge.Test.NUnit.Assert.AreEqual("Frank1", v);
                    p.NAME = "John1";
                    Bridge.Test.NUnit.Assert.AreEqual("John1", p.NAME);

                    p.Name2 = "Frank2";
                    v = p.Name2;
                    Bridge.Test.NUnit.Assert.AreEqual("Frank2", v);
                    p.getN2 = "John2";
                    Bridge.Test.NUnit.Assert.AreEqual("John2", p.getN2);

                    p.Name3 = "Frank3";
                    v = p.Name3;
                    Bridge.Test.NUnit.Assert.AreEqual("Frank3", v);
                    p.nm3 = "John3";
                    Bridge.Test.NUnit.Assert.AreEqual("John3", p.nm3);

                    p.Name4 = "Frank4";
                    v = p.Name4;
                    Bridge.Test.NUnit.Assert.AreEqual("Frank4", v);
                    p.Name4 = "John4";
                    Bridge.Test.NUnit.Assert.AreEqual("John4", p.Name4);

                    p.Name5 = "Frank5";
                    v = p.Name5;
                    Bridge.Test.NUnit.Assert.AreEqual("Frank5", v);
                    p.nm5 = "John5";
                    Bridge.Test.NUnit.Assert.AreEqual("John5", p.nm5);

                    p.NAME6 = "Frank6";
                    v = p.NAME6;
                    Bridge.Test.NUnit.Assert.AreEqual("Frank6", v);
                    p.NAME6 = "John6";
                    Bridge.Test.NUnit.Assert.AreEqual("John6", p.NAME6);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2284.Person", {
        $kind: "nested class",
        props: {
            NAME: null,
            Name2: null,
            Name3: null,
            Name4: null,
            Name5: null,
            NAME6: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2293", {
        methods: {
            TestAttributeUsage: function () {
                var cd = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2293.f1;

                // Just check that [Custom] can be applied with no [AttributeUsage(AttributeTargets.All)] required
                Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.unbox(cd(Bridge.box(5, System.Int32))));
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2293", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2293, {
        f1: function (sender) {
            return sender;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2293.CustomAttribute", {
        inherits: [System.Attribute],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298", {
        statics: {
            methods: {
                TestGenericInterfaceWithNestedTypeParameters: function () {
                    var $t, $t1;
                    var b = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.BugTest$1(System.String))();
                    b._MyThing = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.MyThing$1(System.String))();

                    Bridge.Test.NUnit.Assert.AreEqual("MyThing", b.DoStuff());


                    var m = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.DecimalBugTest$1(System.Decimal))();
                    m._MyThing = ($t = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.DecimalThing$1(System.Decimal))(), $t.A = ($t1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(System.Decimal,System.Decimal))(), $t1.a = System.Decimal(1.1, 1), $t1.b = System.Decimal(2.2, 1), $t1), $t.B = ($t1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(System.Decimal,System.Int64))(), $t1.a = System.Decimal(3.3, 1), $t1.b = System.Int64(4), $t1), $t);

                    Bridge.Test.NUnit.Assert.AreEqual("1.1|2.2|3.3|4", m.DoStuff());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.BugTest$1", function (TX) { return {
        $kind: "nested class",
        fields: {
            _MyThing: null
        },
        methods: {
            DoStuff: function () {
                return this._MyThing["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$IThing$2$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$V2$2$" + Bridge.getTypeAlias(TX) + "$System$Double$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$V2$2$System$Double$System$Double$MyMethod"]();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.DecimalBugTest$1", function (TX) { return {
        $kind: "nested class",
        fields: {
            _MyThing: null
        },
        methods: {
            DoStuff: function () {
                return this._MyThing["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$IThing$2$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$V2$2$" + Bridge.getTypeAlias(TX) + "$System$Decimal$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$V2$2$System$Decimal$System$Int64$MyMethod"]();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2", function (TA, TB) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(TA,TB))(); }
            }
        },
        fields: {
            a: Bridge.getDefaultValue(TA),
            b: Bridge.getDefaultValue(TB)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([12886, this.a, this.b]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(TA,TB))) {
                    return false;
                }
                return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
            },
            $clone: function (to) {
                var s = to || new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(TA,TB))();
                s.a = this.a;
                s.b = this.b;
                return s;
            }
        }
    }; });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.IThing$2", function (TC, TD) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310", {
        statics: {
            methods: {
                TestBridgeFields: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component();
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.InstanceField));
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.InstanceProperty));
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component.StaticField));
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component.StaticProperty));

                    c.ctor$2 = Bridge.box(6, System.Int32);
                    c.config = Bridge.box(1, System.Int32);
                    c.events = Bridge.box(2, System.Int32);
                    c.inherits = Bridge.box(3, System.Int32);
                    c.properties = Bridge.box(4, System.Int32);
                    c.statics = Bridge.box(5, System.Int32);

                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.unbox(c.ctor$2));
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(c.config));
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(c.events));
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.unbox(c.inherits));
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.unbox(c.properties));
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.unbox(c.statics));

                    Bridge.Test.NUnit.Assert.AreEqual(1, c.InstanceEventResult);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component.StaticEventResult);

                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component1();
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c1.any));

                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component2();
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c2.any));

                    var c3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component3();
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c3.any));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.BaseComponent", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component1", {
        $kind: "nested class",
        fields: {
            config: null,
            any: null
        },
        ctors: {
            init: function () {
                this.any = { };
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component2", {
        $kind: "nested class",
        fields: {
            config: null,
            any: null
        },
        ctors: {
            init: function () {
                this.any = { };
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component3", {
        $kind: "nested class",
        fields: {
            any: null
        },
        props: {
            config: null
        },
        ctors: {
            init: function () {
                this.any = { };
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313", {
        statics: {
            methods: {
                TestExternalInterfaceOverloadedMembers: function () {
                    var log1 = null;
                    log1 = {log: function (msg) {return msg || "[Empty1]";}};

                    Bridge.Test.NUnit.Assert.AreEqual("[Empty1]", log1.log());
                    Bridge.Test.NUnit.Assert.AreEqual("[Msg1]", log1.log("[Msg1]"));
                },
                TestExternalClassInheritingInterface: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Consoler = { };
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Consoler.console1 = {log: function (msg) {return msg || "[Empty]";}};
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Consoler.Console2 = {log: function (msg) {return msg || "[Empty]";}};

                    Bridge.Test.NUnit.Assert.AreEqual("[Empty]", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Consoler.console1.log());
                    Bridge.Test.NUnit.Assert.AreEqual("[Msg]", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Consoler.console1.log("[Msg]"));

                    Bridge.Test.NUnit.Assert.AreEqual("[Empty]", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Consoler.Console2.log());
                    Bridge.Test.NUnit.Assert.AreEqual("[Msg]", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Consoler.Console2.log("[Msg]"));
                },
                TestExternalInheritingInterfaces: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.IBaseContainer = function() { };
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.IContainer = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.IBaseContainer;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Container = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.IBaseContainer;

                    var baseCnt = Bridge.cast(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Container(), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.IBaseContainer);
                    baseCnt.Value = 1;
                    var r1 = 0;
                    r1 = baseCnt.Value;
                    Bridge.Test.NUnit.Assert.AreEqual(1, r1);

                    var cnt = Bridge.cast(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.Container(), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2313.IContainer);
                    cnt.Value = 2;
                    var r2 = 0;
                    r2 = cnt.Value;
                    Bridge.Test.NUnit.Assert.AreEqual(2, r2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2318", {
        statics: {
            methods: {
                TestBoxing: function () {
                    var o1 = Bridge.box(1, System.Int32);
                    var o2 = Bridge.box(1, System.Int32);
                    var o3 = System.Array.init([Bridge.box(1, System.Int32), Bridge.box(true, System.Boolean, System.Boolean.toString)], System.Object);
                    var o4 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2318.MyStruct();
                    var o5 = System.Decimal(1.0, 1);
                    var o6 = System.Int64(1);

                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.unbox(o1.$boxed));
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.unbox(o2.$boxed));
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.unbox(o3[System.Array.index(0, o3)].$boxed));
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.unbox(o3[System.Array.index(1, o3)].$boxed));
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o4.$boxed));
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o5.$boxed));
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(o6.$boxed));

                    var c = null;
                    c = {isBoxed: function (o) {return o.$boxed;}, isBoxedArray: function (o) {return o[0].$boxed;}};
                    Bridge.Test.NUnit.Assert.False(c.isBoxed(Bridge.unbox(o1)));
                    Bridge.Test.NUnit.Assert.False(c.isBoxed(Bridge.unbox(o2)));
                    Bridge.Test.NUnit.Assert.False(c.isBoxedArray(Bridge.unbox(o3)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2318.MyStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2318.MyStruct(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2320", {
        statics: {
            fields: {
                invoked: false
            },
            ctors: {
                init: function () {
                    Bridge.ready(this.Main);
                }
            },
            methods: {
                Main: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2320.invoked = true;
                },
                TestReadyAndMain: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2320.invoked);
                }
            }
        },
        $entryPoint: true
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322", {
        statics: {
            methods: {
                TestSequence: function () {
                    var x1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct.$ctor1(1.0);
                    var x2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct.Add(x1.$clone(), new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct.$ctor1(2.0));
                    Bridge.Test.NUnit.Assert.AreEqual(1, x1.Value);
                    Bridge.Test.NUnit.Assert.AreEqual(3, x2.Value);

                    var y1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct.$ctor1(1.0);
                    var y2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct.op_Addition(y1.$clone(), new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct.$ctor1(2.0));
                    Bridge.Test.NUnit.Assert.AreEqual(1, y1.Value);
                    Bridge.Test.NUnit.Assert.AreEqual(3, y2.Value);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                Add: function (a, b) {
                    a.Value += b.Value;
                    return a.$clone();
                },
                op_Addition: function (a, b) {
                    a.Value += b.Value;
                    return a.$clone();
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct(); }
            }
        },
        fields: {
            Value: 0
        },
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3904302783, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2322.MyStruct();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327", {
        statics: {
            methods: {
                TestEnumInterfaces: function () {
                    var e = Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo.Bar, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo));
                    var comparable = e;
                    var formattable = e;

                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.compare(comparable, Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo.Baz, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo))));
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.compare(comparable, Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo.Bar, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo))));
                    Bridge.Test.NUnit.Assert.AreEqual("Bar", Bridge.format(formattable, "G", null));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(e, System.IFormattable));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(e, System.IComparable));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2327.Foo", {
        $kind: "nested enum",
        statics: {
            fields: {
                Bar: 0,
                Baz: 1
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2330", {
        statics: {
            methods: {
                TestMultipleTryCatchBlocks: function () {
                    var catched = false;
                    var message = null;

                    try {
                        try {
                        } catch (e) {
                            e = System.Exception.create(e);
                            throw e;
                        }

                        try {
                            throw new System.Exception("Second try block");
                        } catch (e1) {
                            e1 = System.Exception.create(e1);
                            throw e1;
                        }
                    } catch (e2) {
                        e2 = System.Exception.create(e2);
                        message = e2.Message;
                        catched = true;
                    }

                    Bridge.Test.NUnit.Assert.True(catched);
                    Bridge.Test.NUnit.Assert.AreEqual("Second try block", message);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2337", {
        statics: {
            methods: {
                TestFDateModifier: function () {
                    var date = System.DateTime.create(2017, 2, 6, 10, 42, 52, 0);
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0000000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.000000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.00000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.00", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.F"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.f"));

                    date = System.DateTime.create(2017, 2, 6, 10, 42, 52, 1);
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.001", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0010000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.001", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.001000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.001", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.00100", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.001", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0010", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.001", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.001", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.00", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.F"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.f"));

                    date = System.DateTime.create(2017, 2, 6, 10, 42, 52, 10);
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.01", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0100000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.01", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.010000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.01", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.01000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.01", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0100", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.01", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.010", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.01", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.01", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.F"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.0", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.f"));

                    date = System.DateTime.create(2017, 2, 6, 10, 42, 52, 100);
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1000000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.100000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.10000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.100", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.10", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.F"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.1", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.f"));

                    date = System.DateTime.create(2017, 2, 6, 10, 42, 52, 999);
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.999", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.9990000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.999", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.999000", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.999", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.99900", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.999", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.9990", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ffff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.999", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FFF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.999", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.fff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.99", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.FF"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.99", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.ff"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.9", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.F"));
                    Bridge.Test.NUnit.Assert.AreEqual("2017-02-06 10:42:52.9", System.DateTime.format(date, "yyyy-MM-dd HH:mm:ss.f"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2338", {
        statics: {
            methods: {
                Foo: function (T, value) {
                    var type = Bridge.getType(value, T);
                    return type;
                },
                TestGenericGetType: function () {
                    var bar = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2338.Bar();
                    var type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2338.Foo(System.Exception, bar);
                    Bridge.Test.NUnit.Assert.AreEqual("Bar", Bridge.Reflection.getTypeName(type));

                    var b = 1;
                    type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2338.Foo(System.Byte, b);
                    Bridge.Test.NUnit.Assert.AreEqual("Byte", Bridge.Reflection.getTypeName(type));

                    var c = 49;
                    type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2338.Foo(System.Char, c);
                    Bridge.Test.NUnit.Assert.AreEqual("Char", Bridge.Reflection.getTypeName(type));

                    var o = { };
                    type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2338.Foo(System.Object, o);
                    Bridge.Test.NUnit.Assert.AreEqual("Object", Bridge.Reflection.getTypeName(type));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2338.Bar", {
        inherits: [System.Exception],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2342", {
        statics: {
            methods: {
                TestCastParanthesize: function () {
                    var bar = 2.0;

                    var foo1 = 1.0 / (Math.abs(bar) / Math.abs(bar));
                    Bridge.Test.NUnit.Assert.AreEqual(1, foo1);

                    var foo2 = 1.0 / (Math.abs(bar) / Math.abs(bar));
                    Bridge.Test.NUnit.Assert.AreEqual(1, foo2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2343", {
        statics: {
            methods: {
                TestBoxedEqualsAndGetHashCode: function () {
                    var d = new (System.Collections.Generic.Dictionary$2(System.Object,System.Object)).ctor();
                    d.add(Bridge.box(1, System.Int32), Bridge.box(2.0, System.Double, System.Double.format, System.Double.getHashCode));

                    Bridge.Test.NUnit.Assert.True(d.containsKey(Bridge.box(1, System.Int32)));
                    Bridge.Test.NUnit.Assert.False(d.containsKey(Bridge.box(1.0, System.Double, System.Double.format, System.Double.getHashCode)));
                    Bridge.Test.NUnit.Assert.True(d.ContainsValue(Bridge.box(2.0, System.Double, System.Double.format, System.Double.getHashCode)));
                    Bridge.Test.NUnit.Assert.False(d.ContainsValue(Bridge.box(2, System.Int32)));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(d.getItem(Bridge.box(1, System.Int32))), 2);

                    d.add(Bridge.box(1.0, System.Double, System.Double.format, System.Double.getHashCode), Bridge.box(3.0, System.Double, System.Double.format, System.Double.getHashCode));
                    Bridge.Test.NUnit.Assert.True(d.containsKey(Bridge.box(1.0, System.Double, System.Double.format, System.Double.getHashCode)));
                    Bridge.Test.NUnit.Assert.True(d.ContainsValue(Bridge.box(3.0, System.Double, System.Double.format, System.Double.getHashCode)));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(d.getItem(Bridge.box(1, System.Int32))), 2);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(d.getItem(Bridge.box(1.0, System.Double, System.Double.format, System.Double.getHashCode))), 3);

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        d.add(Bridge.box(1.0, System.Double, System.Double.format, System.Double.getHashCode), Bridge.box(4, System.Int32));
                    });
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2344", {
        statics: {
            methods: {
                TestHtmlElementName: function () {
                    if (Bridge.ClientTest.Batch3.Utilities.BrowserHelper.IsPhantomJs()) {
                        Bridge.Test.NUnit.Assert.True(true, "The test is excluded on PhantomJS engine");
                        return;
                    }

                    var instance = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2344.Foo();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2344.Foo.SomeMethod(HTMLElement, System.String, instance);

                    Bridge.Test.NUnit.Assert.AreEqual("zzz", instance.Second);
                }
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2344.IFoo$2", function (T, V) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345", {
        statics: {
            methods: {
                TestArrayAsIList: function () {
                    var a = System.Array.init(10, 0, System.Int32);
                    var list = a;
                    System.Array.setItem(list, 0, null);

                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Array.getItem(list, 0), System.Int32), System.Int32)));
                    // Expected InvalidCastException will be fixed as part of another issue
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, "string");
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, { });
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1());
                    });

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(false, System.Boolean, System.Boolean.toString));
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(1.5, System.Double, System.Double.format, System.Double.getHashCode));
                    });

                    System.Array.setItem(list, 0, Bridge.box(1, System.Int32));
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(System.Array.getItem(list, 0)));
                },
                TestByteArrayAsIList: function () {
                    var a = System.Array.init(10, 0, System.Byte);
                    var list = a;

                    // Expected InvalidCastException will be fixed as part of another issue
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, "string");
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, { });
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1());
                    });

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(256, System.Int32));
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(-1, System.Int32));
                    });

                    System.Array.setItem(list, 0, Bridge.box(1, System.Byte));
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(System.Array.getItem(list, 0)));
                },
                TestLongArrayAsIList: function () {
                    var a = System.Array.init(10, System.Int64(0), System.Int64);
                    var list = a;

                    System.Array.setItem(list, 0, null);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(System.Array.getItem(list, 0), System.Int64));
                    Bridge.Test.NUnit.Assert.True(System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Array.getItem(list, 0), System.Int64), System.Int64)).equals(System.Int64(0)));

                    System.Array.setItem(list, 0, Bridge.box(1, System.Int32));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(System.Array.getItem(list, 0), System.Int64));
                    Bridge.Test.NUnit.Assert.True(System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Array.getItem(list, 0), System.Int64), System.Int64)).equals(System.Int64(1)));

                    // Expected InvalidCastException will be fixed as part of another issue
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, "string");
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, { });
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1());
                    });

                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(false, System.Boolean, System.Boolean.toString));
                    });
                },
                TestDecimalArrayAsIList: function () {
                    var a = System.Array.init(10, System.Decimal(0.0), System.Decimal);
                    var list = a;

                    System.Array.setItem(list, 0, null);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(System.Array.getItem(list, 0), System.Decimal));
                    Bridge.Test.NUnit.Assert.True(System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Array.getItem(list, 0), System.Decimal), System.Decimal)).equalsT(System.Decimal(0.0)));

                    System.Array.setItem(list, 0, System.Decimal(1.0));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(System.Array.getItem(list, 0), System.Decimal));
                    Bridge.Test.NUnit.Assert.True(System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Array.getItem(list, 0), System.Decimal), System.Decimal)).equalsT(System.Decimal(1.0)));

                    // Expected InvalidCastException will be fixed as part of another issue
                    //Assert.Throws<ArgumentException>(() => list[0] = 1);
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, "string");
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, { });
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1());
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(false, System.Boolean, System.Boolean.toString));
                    });
                },
                TestStructArrayAsIList: function () {
                    var a = System.Array.init(10, function (){
                        return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1();
                    }, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1);
                    var list = a;
                    System.Array.setItem(list, 0, null);

                    Bridge.Test.NUnit.Assert.NotNull(a[System.Array.index(0, a)]);
                    // Expected InvalidCastException will be fixed as part of another issue
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, "string");
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, { });
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(false, System.Boolean, System.Boolean.toString));
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(-1, System.Int32));
                    });
                    //list[0] = new Struct1();
                    //Assert.True(list[0].Equals(new Struct1()));
                },
                TestStringArrayAsIList: function () {
                    var a = System.Array.init(10, null, System.String);
                    var list = a;
                    System.Array.setItem(list, 0, null);

                    Bridge.Test.NUnit.Assert.Null(a[System.Array.index(0, a)]);

                    // Expected InvalidCastException will be fixed as part of another issue
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, { });
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1());
                    });
                    Bridge.Test.NUnit.Assert.Throws$2(System.ArgumentException, function () {
                        System.Array.setItem(list, 0, Bridge.box(false, System.Boolean, System.Boolean.toString));
                    });

                    System.Array.setItem(list, 0, "test");
                    Bridge.Test.NUnit.Assert.AreEqual("test", Bridge.unbox(System.Array.getItem(list, 0)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2345.Struct1(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2347", {
        statics: {
            methods: {
                TestG17FormatSpecifier: function () {
                    var d = 36.099999999999994;
                    Bridge.Test.NUnit.Assert.AreEqual("36.099999999999994", System.Double.format(d, "G17"));
                    Bridge.Test.NUnit.Assert.AreEqual("36.09999999999999", System.Double.format(d, "G16"));
                    Bridge.Test.NUnit.Assert.AreEqual("36.1", System.Double.format(d, "G15"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2349", {
        statics: {
            methods: {
                TestExternalIgnoreGenericClass: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2349.Logger = function () { this.field = 10; };
                    var logger = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2349.Logger();

                    Bridge.Test.NUnit.Assert.AreEqual(10, logger.field);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2352", {
        statics: {
            methods: {
                TestOperatorOnAnonymousType: function () {
                    var anonymous = new $asm.$AnonymousType$17(false);

                    Bridge.Test.NUnit.Assert.True(!anonymous.IsTrue);
                    Bridge.Test.NUnit.Assert.True(anonymous.IsTrue === false);

                    var b = anonymous.IsTrue === false; // Works
                    Bridge.Test.NUnit.Assert.True(b);
                }
            }
        }
    });

    Bridge.define("$AnonymousType$17", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (isTrue) {
                this.IsTrue = isTrue;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$17)) {
                    return false;
                }
                return Bridge.equals(this.IsTrue, o.IsTrue);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550210266, this.IsTrue]);
                return h;
            },
            toJSON: function () {
                return {
                    IsTrue : this.IsTrue
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"IsTrue","t":16,"rt":System.Boolean,"g":{"a":2,"n":"get_IsTrue","t":8,"rt":System.Boolean,"fg":"IsTrue","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsTrue"}]}; }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355", {
        statics: {
            methods: {
                TestLinqGrouping: function () {
                    var $t;
                    var query = System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plants.Flowers, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant).groupBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.f1);

                    $t = Bridge.getEnumerator(query);
                    try {
                        while ($t.moveNext()) {
                            var grp = Bridge.cast($t.Current, System.Linq.IGrouping$2);
                            Bridge.Test.NUnit.Assert.True(Bridge.is(grp, System.Linq.Grouping$2));
                            Bridge.Test.NUnit.Assert.True(Bridge.is(grp, System.Linq.IGrouping$2));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                TestLinqLookup: function () {
                    var query = System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plants.Flowers, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant).toLookup($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.f1);

                    Bridge.Test.NUnit.Assert.True(Bridge.is(query, System.Linq.Lookup$2));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(query, System.Linq.ILookup$2));
                    Bridge.Test.NUnit.Assert.AreEqual(2, query.get("Shade").count());
                },
                TestLinqOrderedEnumerable: function () {
                    var query = System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plants.Flowers, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant).orderBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.f2);

                    Bridge.Test.NUnit.Assert.True(Bridge.is(query, System.Linq.OrderedEnumerable$1));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(query, System.Linq.IOrderedEnumerable$1));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355, {
        f1: function (flower) {
            return flower.Light;
        },
        f2: function (flower) {
            return flower.Common;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant", {
        $kind: "nested class",
        props: {
            Common: null,
            Light: null,
            Indoor: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plants", {
        $kind: "nested class",
        statics: {
            props: {
                Flowers: {
                    get: function () {
                        return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plants.f1(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant)).ctor());
                    }
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plants", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plants, {
        f1: function (_o1) {
            var $t;
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant(), $t.Common = "Anemone", $t.Light = "Shade", $t.Indoor = true, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant(), $t.Common = "Columbine", $t.Light = "Shade", $t.Indoor = true, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant(), $t.Common = "Marsh Marigold", $t.Light = "Sunny", $t.Indoor = false, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant(), $t.Common = "Gential", $t.Light = "Sun or Shade", $t.Indoor = false, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2355.Plant(), $t.Common = "Woodland", $t.Light = "Sun or Shade", $t.Indoor = false, $t));
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2359", {
        statics: {
            methods: {
                Compare_Equals_TestData: function () {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.Object)))(Bridge.fn.bind(this, function ()  {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.Object)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            $enumerator.current = System.Array.init([null, null, Bridge.box(0, System.Int32)], System.Object);
                                                $step = 1;
                                                return true;
                                        }
                                        case 1: {
                                            $enumerator.current = System.Array.init([Bridge.box(7, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), null, Bridge.box(1, System.Int32)], System.Object);
                                                $step = 2;
                                                return true;
                                        }
                                        case 2: {
                                            $enumerator.current = System.Array.init([null, Bridge.box(7, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(-1, System.Int32)], System.Object);
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $enumerator.current = System.Array.init([Bridge.box(7, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(7, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(0, System.Int32)], System.Object);
                                                $step = 4;
                                                return true;
                                        }
                                        case 4: {
                                            $enumerator.current = System.Array.init([Bridge.box(7, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(5, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(1, System.Int32)], System.Object);
                                                $step = 5;
                                                return true;
                                        }
                                        case 5: {
                                            $enumerator.current = System.Array.init([Bridge.box(5, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(7, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), Bridge.box(-1, System.Int32)], System.Object);
                                                $step = 6;
                                                return true;
                                        }
                                        case 6: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }));
                },
                TestNullableCompareEquals: function () {
                    var $t;
                    $t = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2359.Compare_Equals_TestData(), System.Array.type(System.Object));
                    try {
                        while ($t.moveNext()) {
                            var data = $t.Current;
                            var n1 = Bridge.cast(Bridge.unbox(data[System.Array.index(0, data)], System.Int32), System.Int32, true);
                            var n2 = Bridge.cast(Bridge.unbox(data[System.Array.index(1, data)], System.Int32), System.Int32, true);
                            var expected = System.Nullable.getValue(Bridge.cast(Bridge.unbox(data[System.Array.index(2, data)], System.Int32), System.Int32));

                            Bridge.Test.NUnit.Assert.AreEqual(expected === 0, System.Nullable.equals(n1, n2));
                            Bridge.Test.NUnit.Assert.AreEqual(expected === 0, System.Nullable.equals(n1, Bridge.box(n2, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), function ($t, other) { return System.Int32.equals($t, other); }));
                            Bridge.Test.NUnit.Assert.AreEqual(expected, System.Nullable.compare(n1, n2));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369", {
        statics: {
            methods: {
                TestArrayTypeAlias: function () {
                    var foo = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.G1$1(System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IBar)))();
                    Bridge.Test.NUnit.Assert.AreEqual(1, foo.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2369$IFoo$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2369$IBar$Array$Foo(null));

                    var foo1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.G2();
                    Bridge.Test.NUnit.Assert.AreEqual(2, foo1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2369$IFoo$1$System$String$Foo(null));

                    var g3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.G3();
                    var ibar = g3;
                    var istr = g3;

                    g3.tracker = 0;
                    g3.equalsT(System.Array.init(0, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IBar));
                    Bridge.Test.NUnit.Assert.AreEqual(1, g3.tracker);

                    g3.tracker = 0;
                    Bridge.equalsT(ibar, System.Array.init(0, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IBar), System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IBar));
                    Bridge.Test.NUnit.Assert.AreEqual(1, g3.tracker);

                    g3.tracker = 0;
                    Bridge.equalsT(istr, System.Array.init(0, null, System.String), System.Array.type(System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(2, g3.tracker);
                }
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IFoo$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IBar", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2374", {
        statics: {
            methods: {
                TestPropertyInitializer: function () {
                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2374.Person();

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.Reflection.getTypeFullName(System.DateTime), Bridge.Reflection.getTypeFullName(Bridge.getType(Bridge.box(p.CreatedOn, System.DateTime, System.DateTime.format))));
                    Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getYear(System.DateTime.getNow()), System.DateTime.getYear(p.CreatedOn));

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.Reflection.getTypeFullName(System.DateTime), Bridge.Reflection.getTypeFullName(Bridge.getType(Bridge.box(p.CreatedOnNullable, System.DateTime, System.Nullable.toStringFn(System.DateTime.format), System.Nullable.getHashCode))));
                    Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getYear(System.DateTime.getNow()), System.DateTime.getYear(System.Nullable.getValue(p.CreatedOnNullable)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2374.Person", {
        $kind: "nested class",
        props: {
            CreatedOn: null,
            CreatedOnNullable: null
        },
        ctors: {
            init: function () {
                this.CreatedOn = System.DateTime.getDefaultValue();
                this.CreatedOn = System.DateTime.getNow();
                this.CreatedOnNullable = System.DateTime.getNow();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2375", {
        statics: {
            methods: {
                TestNameofWithReflection: function () {
                    var result = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2375.Person, 16, 284, "FirstName");

                    Bridge.Test.NUnit.Assert.AreEqual("Test value", Bridge.unbox(Bridge.Reflection.midel(result.g, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2375.Person())()));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2375.Person", {
        $kind: "nested class",
        props: {
            FirstName: null
        },
        ctors: {
            init: function () {
                this.FirstName = "Test value";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386", {
        statics: {
            methods: {
                TestStructBoxingOperations: function () {
                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.Point.$ctor1(1, 1);
                    Bridge.Test.NUnit.Assert.AreEqual("(1, 1)", p.toString());

                    p.Change(2, 2);
                    Bridge.Test.NUnit.Assert.AreEqual("(2, 2)", p.toString());

                    var o = p.$clone();
                    Bridge.Test.NUnit.Assert.AreEqual("(2, 2)", Bridge.toString(o));

                    System.Nullable.getValue(Bridge.cast(Bridge.unbox(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.Point), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.Point)).Change(3, 3);
                    Bridge.Test.NUnit.Assert.AreEqual("(2, 2)", Bridge.toString(o));

                    Bridge.cast(p.$clone(), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.IChangeBoxedPoint).Bridge$ClientTest$Batch3$BridgeIssues$Bridge2386$IChangeBoxedPoint$Change(4, 4);
                    Bridge.Test.NUnit.Assert.AreEqual("(2, 2)", p.toString());

                    Bridge.cast(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.IChangeBoxedPoint).Bridge$ClientTest$Batch3$BridgeIssues$Bridge2386$IChangeBoxedPoint$Change(5, 5);
                    Bridge.Test.NUnit.Assert.AreEqual("(5, 5)", Bridge.toString(o));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.IChangeBoxedPoint", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393", {
        statics: {
            methods: {
                TestLambdaInLiteral: function () {
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393.c2.ctor().m1);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393.c1", {
        $kind: "nested class",
        props: {
            p1: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393.c2", {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function () {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393.c2; };
                (function (){
                    this.a1 = null;
                    this.m1 = null;
                    this.m1 = Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393.c2.f1);
                }).call($this);
                return $this;
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393.c2", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393.c2, {
        f1: function (x_) {
            var o1 = System.Linq.Enumerable.from(this.a1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2393.c1).firstOrDefault(function (i_) {
                    return Bridge.referenceEquals(i_.p1, x_.p3);
                }, null);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2399", {
        statics: {
            methods: {
                TestSqrt: function () {
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1.73205080756888, Math.sqrt(3.0));
                    Bridge.Test.NUnit.Assert.AreEqual(0.0, Math.sqrt(0.0));
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NaN, Math.sqrt(-3.0));
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NaN, Math.sqrt(Number.NaN));
                    Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY, Math.sqrt(Number.POSITIVE_INFINITY));
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NaN, Math.sqrt(Number.NEGATIVE_INFINITY));
                    Bridge.Test.NUnit.Assert.AreEqual(3, Math.sqrt(9));
                    Bridge.Test.NUnit.Assert.AreEqual(3, Math.sqrt(System.Int64(9)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2401", {
        statics: {
            methods: {
                TestArrayInitializer: function () {
                    var vals1 = System.Array.create(0, [[1, 2], [3, 4]], System.Double, 2, 2);
                    var vals2 = System.Array.create(0, [[1, 2], [3, 4]], System.Double, 2, 2);

                    var vals3 = System.Array.init([1, 2], System.Double);
                    var vals4 = System.Array.init([1, 2], System.Double);

                    Bridge.Test.NUnit.Assert.AreDeepEqual(vals1, vals2);
                    Bridge.Test.NUnit.Assert.AreDeepEqual(vals3, vals4);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(vals1, System.Array.type(System.Double, 2)));
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Array.getRank(vals1));
                    Bridge.Test.NUnit.Assert.AreEqual(1, vals1.get([0, 0]));
                    Bridge.Test.NUnit.Assert.AreEqual(2, vals1.get([0, 1]));
                    Bridge.Test.NUnit.Assert.AreEqual(3, vals1.get([1, 0]));
                    Bridge.Test.NUnit.Assert.AreEqual(4, vals1.get([1, 1]));
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring the exception thrown when an async
     task is cancelled at run-time.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge2405
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2405", {
        statics: {
            methods: {
                /**
                 * Tests by calling an async task, cancelling it, then checking the
                 thrown exception in the end.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge2405
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge2405
                 * @return  {void}
                 */
                TestDelayWithCancelation: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        source, 
                        t, 
                        ae, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            source = new System.Threading.CancellationTokenSource();

                                            t = System.Threading.Tasks.Task.run(function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $jumpFromFinally, 
                                                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                    $returnValue, 
                                                    $async_e, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        try {
                                                            for (;;) {
                                                                $step = System.Array.min([0,1], $step);
                                                                switch ($step) {
                                                                    case 0: {
                                                                        // Support required for .Delay with Token
                                                                        $task1 = System.Threading.Tasks.Task.delay(100, source.token);
                                                                        $step = 1;
                                                                        if ($task1.isCompleted()) continue;
                                                                        $task1.continue($asyncBody);
                                                                        return;
                                                                    }
                                                                    case 1: {
                                                                        $task1.getAwaitedResult();
                                                                        $tcs.setResult(42);
                                                                        return;
                                                                    }
                                                                    default: {
                                                                        $tcs.setResult(null);
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        } catch($async_e1) {
                                                            $async_e = System.Exception.create($async_e1);
                                                            $tcs.setException($async_e);
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                                return $tcs.task;
                                            });

                                            source.cancel();
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            // Support required for .Wait
                                            $task1 = t.wait();
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            $step = 4;
                                            continue;
                                        }
                                        case 3: {
                                            Bridge.Test.NUnit.Assert.True(Bridge.is(ae.InnerException, System.Threading.Tasks.TaskCanceledException), "Canceled task's exception is TaskCanceledException.");
                                            $async_e = null;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            Bridge.Test.NUnit.Assert.AreEqual(System.Threading.Tasks.TaskStatus.canceled, t.status, "Canceled task has the 'Canceled' status.");

                                            source.dispose();
                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    if (Bridge.is($async_e, System.AggregateException)) {
                                        ae = $async_e;
                                        $step = 3;
                                        $asyncBody();
                                        return;
                                    }
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                },
                /**
                 * Ensures exception won't be thrown if the cancellation is attempted
                 after the async task has completed.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge2405
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge2405
                 * @return  {void}
                 */
                TestDelayWithCancelation2: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        source, 
                        t, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            source = new System.Threading.CancellationTokenSource();

                                            t = System.Threading.Tasks.Task.run(function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $jumpFromFinally, 
                                                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                    $returnValue, 
                                                    $async_e, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        try {
                                                            for (;;) {
                                                                $step = System.Array.min([0,1], $step);
                                                                switch ($step) {
                                                                    case 0: {
                                                                        // Support required for .Delay with Token
                                                                        $task1 = System.Threading.Tasks.Task.delay(100, source.token);
                                                                        $step = 1;
                                                                        if ($task1.isCompleted()) continue;
                                                                        $task1.continue($asyncBody);
                                                                        return;
                                                                    }
                                                                    case 1: {
                                                                        $task1.getAwaitedResult();
                                                                        $tcs.setResult(42);
                                                                        return;
                                                                    }
                                                                    default: {
                                                                        $tcs.setResult(null);
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        } catch($async_e1) {
                                                            $async_e = System.Exception.create($async_e1);
                                                            $tcs.setException($async_e);
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                                return $tcs.task;
                                            });
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = t.waitt(200);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            source.cancel();
                                            $step = 4;
                                            continue;
                                        }
                                        case 3: {
                                            Bridge.Test.NUnit.Assert.Fail("Should not be an exception");
                                            $async_e = null;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            Bridge.Test.NUnit.Assert.AreEqual(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Late-canceled task's status is 'RanToCompletion'.");
                                            Bridge.Test.NUnit.Assert.AreEqual(42, t.getResult(), "Late-canceled task result matches the expected value bound at the task's end.");

                                            source.dispose();
                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    if (Bridge.is($async_e, System.AggregateException)) {
                                        $step = 3;
                                        $asyncBody();
                                        return;
                                    }
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    /**
     * This test consists in running async tasks and calling the task's Wait()
     method to wait for the tast execution to finish. At each step, a string
     buffer is padded with a number indicating the expected order, which is
     then checked at the end of the execution, to ensure every call ran in
     the expected order.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge2406
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2406", {
        statics: {
            methods: {
                TestTaskWait: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        done, 
                        buffer, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        buffer = "";
                                        result = System.Threading.Tasks.Task.run(function () {
                                            buffer = (buffer || "") + "1";
                                        });

                                        $task1 = result.continueWith(function (test) {
                                            buffer = (buffer || "") + "2";
                                        }).wait();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        buffer = (buffer || "") + "3";

                                        Bridge.Test.NUnit.Assert.AreEqual("123", buffer, "The response buffer was filled in the correct order.");
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestTaskWaitWithDelay: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $task4, 
                        $task5, 
                        $jumpFromFinally, 
                        done, 
                        buffer, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        buffer = "";

                                        result = System.Threading.Tasks.Task.run(function () {
                                            buffer = (buffer || "") + "1";
                                        });

                                        $task1 = result.continueWith(function (test) {
                                            buffer = (buffer || "") + "2";
                                        }).wait();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        buffer = (buffer || "") + "3";

                                        buffer = (buffer || "") + "4";
                                        $task2 = System.Threading.Tasks.Task.delay(100);
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        buffer = (buffer || "") + "5";

                                        result = System.Threading.Tasks.Task.run(function () {
                                            buffer = (buffer || "") + "6";
                                        });

                                        buffer = (buffer || "") + "7";
                                        $task3 = System.Threading.Tasks.Task.delay(100);
                                        $step = 3;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task3.getAwaitedResult();
                                        buffer = (buffer || "") + "8";

                                        $task4 = result.continueWith(function (test) {
                                            buffer = (buffer || "") + "9";
                                        }).wait();
                                        $step = 4;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task4.getAwaitedResult();
                                        buffer = (buffer || "") + "10";
                                        $task5 = System.Threading.Tasks.Task.delay(100);
                                        $step = 5;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task5.getAwaitedResult();
                                        buffer = (buffer || "") + "11";

                                        buffer = (buffer || "") + "12";

                                        Bridge.Test.NUnit.Assert.AreEqual("123457689101112", buffer, "The result buffer was filled up in the correct order.");

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestTaskWaitDelayInlineFn: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        buffer, 
                        t, 
                        ts, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        buffer = "";

                                        t = System.Threading.Tasks.Task.run(function () {
                                            var $step = 0,
                                                $task1, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    buffer = (buffer || "") + "1";
                                                                    $task1 = System.Threading.Tasks.Task.delay(1000);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) continue;
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    buffer = (buffer || "") + "2";
                                                                    Bridge.Test.NUnit.Assert.AreEqual("132", buffer, "The result buffer was filled up in the correct order.");
                                                                    done();
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        });

                                        ts = System.TimeSpan.fromMilliseconds(150);

                                        $task1 = t.waitt(ts);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (!$taskResult1) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 2: {
                                        buffer = (buffer || "") + "3";
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        Bridge.Test.NUnit.Assert.AreEqual("13", buffer, "The result buffer had the correct state during execution (before slower task finishes).");
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestTaskDelayAndWait: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        buffer, 
                        ts, 
                        t, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            buffer = "";

                                            ts = new System.Threading.CancellationTokenSource();

                                            t = System.Threading.Tasks.Task.run(function () {
                                                var $step = 0,
                                                    $task1, 
                                                    $jumpFromFinally, 
                                                    $asyncBody = Bridge.fn.bind(this, function () {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    buffer = (buffer || "") + "2";
                                                                    ts.cancel();
                                                                    $task1 = System.Threading.Tasks.Task.delay(50).wait();
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) continue;
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    buffer = (buffer || "") + "4";
                                                                    return;
                                                                }
                                                                default: {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }, arguments);

                                                $asyncBody();
                                            });
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            buffer = (buffer || "") + "1";
                                            $task1 = t.wait(ts.token);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            $step = 5;
                                            continue;
                                        }
                                        case 3: {
                                            buffer = (buffer || "") + "3";
                                            $task2 = System.Threading.Tasks.Task.delay(100);
                                            $step = 4;
                                            if ($task2.isCompleted()) continue;
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 4: {
                                            $task2.getAwaitedResult();
                                            buffer = (buffer || "") + "5";
                                            Bridge.Test.NUnit.Assert.AreEqual("12345", buffer, "The result buffer was filled up in the correct order.");
                                            $async_e = null;
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            ts.dispose();

                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    if (Bridge.is($async_e, System.OperationCanceledException)) {
                                        $step = 3;
                                        $asyncBody();
                                        return;
                                    }
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge240A", {
        props: {
            Data: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2419", {
        statics: {
            methods: {
                TestExternalEnum: function () {
                    var s1 = System.Enum.toString(System.String, "one");
                    var s2 = System.Enum.toString(System.Int32, (0));

                    Bridge.Test.NUnit.Assert.AreEqual("one", s1);
                    Bridge.Test.NUnit.Assert.AreEqual("0", s2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2430", {
        statics: {
            fields: {
                IntProp: 0
            },
            ctors: {
                init: function () {
                    this.IntProp = 2;
                }
            },
            methods: {
                TestPropertyInitializer: function () {
                    var d2 = { Value2: 0, Value1: 0 };
                    Bridge.Test.NUnit.Assert.AreEqual(0, d2.Value1);
                    Bridge.Test.NUnit.Assert.AreEqual(0, d2.Value2);

                    var d3 = { Value4: Bridge.ClientTest.Batch3.BridgeIssues.Bridge2430.IntProp, Value5: 1, Value7: Bridge.ClientTest.Batch3.BridgeIssues.Bridge2430.IntProp, Value8: 1, Value1: Bridge.ClientTest.Batch3.BridgeIssues.Bridge2430.IntProp, Value2: 1 };
                    Bridge.Test.NUnit.Assert.AreEqual(2, d3.Value1);
                    Bridge.Test.NUnit.Assert.AreEqual(1, d3.Value2);
                    Bridge.Test.NUnit.Assert.Null(d3.Value3);
                    Bridge.Test.NUnit.Assert.AreEqual(2, d3.Value4);
                    Bridge.Test.NUnit.Assert.AreEqual(1, d3.Value5);
                    Bridge.Test.NUnit.Assert.Null(d3.Value6);
                    Bridge.Test.NUnit.Assert.AreEqual(2, d3.Value7);
                    Bridge.Test.NUnit.Assert.AreEqual(1, d3.Value8);
                    Bridge.Test.NUnit.Assert.Null(d3.Value9);

                    var d4 = { Value4: Bridge.ClientTest.Batch3.BridgeIssues.Bridge2430.IntProp, Value5: 1, Value6: 0, Value7: Bridge.ClientTest.Batch3.BridgeIssues.Bridge2430.IntProp, Value8: 1, Value9: 0, Value1: Bridge.ClientTest.Batch3.BridgeIssues.Bridge2430.IntProp, Value2: 1, Value3: 0 };
                    Bridge.Test.NUnit.Assert.AreEqual(2, d4.Value1);
                    Bridge.Test.NUnit.Assert.AreEqual(1, d4.Value2);
                    Bridge.Test.NUnit.Assert.AreEqual(0, d4.Value3);
                    Bridge.Test.NUnit.Assert.AreEqual(2, d4.Value4);
                    Bridge.Test.NUnit.Assert.AreEqual(1, d4.Value5);
                    Bridge.Test.NUnit.Assert.AreEqual(0, d4.Value6);
                    Bridge.Test.NUnit.Assert.AreEqual(2, d4.Value7);
                    Bridge.Test.NUnit.Assert.AreEqual(1, d4.Value8);
                    Bridge.Test.NUnit.Assert.AreEqual(0, d4.Value9);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2443", {
        statics: {
            methods: {
                TestNaNCompareForDouble: function () {
                    var vals = System.Array.init([4, 3, Number.NaN, 0, 1, 2, 1], System.Double);

                    Bridge.Test.NUnit.Assert.AreEqual(4, System.Linq.Enumerable.from(vals, System.Double).max());
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NaN, System.Linq.Enumerable.from(vals, System.Double).min());

                    vals = System.Array.init([4, 3, Number.POSITIVE_INFINITY, Number.NaN, Number.NEGATIVE_INFINITY, 0, 1, 2, 1], System.Double);

                    Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY, System.Linq.Enumerable.from(vals, System.Double).max());
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NaN, System.Linq.Enumerable.from(vals, System.Double).min());

                    vals = System.Array.init([4, 3, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, 0, 1, 2, 1], System.Double);

                    Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY, System.Linq.Enumerable.from(vals, System.Double).max());
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NEGATIVE_INFINITY, System.Linq.Enumerable.from(vals, System.Double).min());
                },
                TestNaNCompareForFloat: function () {
                    var vals = System.Array.init([4, 3, Number.NaN, 0, 1, 2, 1], System.Single);

                    Bridge.Test.NUnit.Assert.AreEqual(4, System.Linq.Enumerable.from(vals, System.Float).max());
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NaN, System.Linq.Enumerable.from(vals, System.Float).min());

                    vals = System.Array.init([4, 3, Number.POSITIVE_INFINITY, Number.NaN, Number.NEGATIVE_INFINITY, 0, 1, 2, 1], System.Single);

                    Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY, System.Linq.Enumerable.from(vals, System.Float).max());
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NaN, System.Linq.Enumerable.from(vals, System.Float).min());

                    vals = System.Array.init([4, 3, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, 0, 1, 2, 1], System.Single);

                    Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY, System.Linq.Enumerable.from(vals, System.Float).max());
                    Bridge.Test.NUnit.Assert.AreEqual(Number.NEGATIVE_INFINITY, System.Linq.Enumerable.from(vals, System.Float).min());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2445", {
        statics: {
            methods: {
                TestEmptyForLoop: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        done, 
                        i, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        i = 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( true ) {
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 3;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        if (((i = (i + 1) | 0)) > 10) {
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {
                                        Bridge.Test.NUnit.Assert.AreEqual(11, i);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2446", {
        statics: {
            methods: {
                TestDoubleMinValue: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(System.Double.min, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2446.ReturnDouble1());
                    Bridge.Test.NUnit.Assert.AreEqual(System.Double.max, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2446.ReturnDouble2());

                    Bridge.Test.NUnit.Assert.True(System.Decimal.MinValue.equalsT(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2446.ReturnDecimal1()));
                    Bridge.Test.NUnit.Assert.True(System.Decimal.MaxValue.equalsT(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2446.ReturnDecimal2()));
                    Bridge.Test.NUnit.Assert.True(System.Decimal.Zero.equalsT(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2446.ReturnDecimal3()));
                    Bridge.Test.NUnit.Assert.True(System.Decimal.One.equalsT(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2446.ReturnDecimal4()));
                    Bridge.Test.NUnit.Assert.True(System.Decimal.MinusOne.equalsT(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2446.ReturnDecimal5()));
                },
                ReturnDouble1: function (x) {
                    if (x === void 0) { x = -1.7976931348623157E+308; }
                    return x;
                },
                ReturnDouble2: function (x) {
                    if (x === void 0) { x = 1.7976931348623157E+308; }
                    return x;
                },
                ReturnDecimal1: function (x) {
                    if (x === void 0) { x = System.Decimal("-79228162514264337593543950335"); }
                    return x;
                },
                ReturnDecimal2: function (x) {
                    if (x === void 0) { x = System.Decimal("79228162514264337593543950335"); }
                    return x;
                },
                ReturnDecimal3: function (x) {
                    if (x === void 0) { x = System.Decimal(0.0); }
                    return x;
                },
                ReturnDecimal4: function (x) {
                    if (x === void 0) { x = System.Decimal(1.0); }
                    return x;
                },
                ReturnDecimal5: function (x) {
                    if (x === void 0) { x = System.Decimal(-1.0); }
                    return x;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454", {
        statics: {
            methods: {
                Test: function (values) {
                    var $t;
                    $t = Bridge.getEnumerator(values, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.MyStruct);
                    try {
                        while ($t.moveNext()) {
                            var value = $t.Current.$clone();
                            value.Intersect(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.MyStruct.$ctor1(5, 20));
                            Bridge.Test.NUnit.Assert.AreEqual("5-10", value.toString());
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                TestForEachClone: function () {
                    var x = System.Array.init([new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.MyStruct.$ctor1(1, 10)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.MyStruct);
                    Bridge.Test.NUnit.Assert.AreEqual("1-10", x[System.Array.index(0, x)].toString());
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.Test(x);
                    Bridge.Test.NUnit.Assert.AreEqual("1-10", x[System.Array.index(0, x)].toString());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.MyStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.MyStruct(); }
            }
        },
        props: {
            X1: 0,
            X2: 0
        },
        ctors: {
            $ctor1: function (x1, x2) {
                this.$initialize();
                this.X1 = x1;
                this.X2 = x2;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Intersect: function (other) {
                var x1 = Math.max(this.X1, other.X1);
                var x2 = Math.min(this.X2, other.X2);
                this.X1 = x1;
                this.X2 = x2;
            },
            toString: function () {
                return this.X1 + "-" + this.X2;
            },
            getHashCode: function () {
                var h = Bridge.addHash([3904302783, this.X1, this.X2]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.MyStruct)) {
                    return false;
                }
                return Bridge.equals(this.X1, o.X1) && Bridge.equals(this.X2, o.X2);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2454.MyStruct();
                s.X1 = this.X1;
                s.X2 = this.X2;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2456", {
        statics: {
            methods: {
                TestIsArrayFromIFrame: function () {
                    var frame = document.createElement("iframe");
                    document.body.appendChild(frame);

                    try {
                        var xFrame = window.frames[System.Array.index(((window.frames.length - 1) | 0), window.frames)];
                        var xArray = xFrame.Array;

                        // Create an array in the iframe
                        var array = new Bridge.unbox(xArray)(1,2,3);

                        var contains = System.Array.contains(array, 3, System.Int32);
                        Bridge.Test.NUnit.Assert.True(contains, "Checks that an array [1, 2, 3] created in another frame contains 3");

                        var isArray = Bridge.isArray(array);
                        Bridge.Test.NUnit.Assert.True(isArray, "Checks that an array created in another frame returns true for Bridge.isArray(array)");
                    } finally {
                        if (frame != null && frame.parentNode != null) {
                            frame.parentNode.removeChild(frame);
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458", {
        statics: {
            methods: {
                Rethrow: function () {
                    try {
                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.DivideByZero();
                    } catch (ex) {
                        ex = System.Exception.create(ex);
                        throw new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.ThirdLevelException(ex);
                    }
                },
                DivideByZero: function () {
                    try {
                        var zero = 0;
                        var ecks = (Bridge.Int.div(1, zero)) | 0;
                    } catch (ex) {
                        ex = System.Exception.create(ex);
                        throw new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.SecondLevelException(ex);
                    }
                },
                TestGetBaseException: function () {
                    try {
                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.Rethrow();
                    } catch (ex) {
                        ex = System.Exception.create(ex);
                        var list = new (System.Collections.Generic.List$1(System.Exception)).ctor();
                        var current;
                        current = ex;

                        while (current != null) {
                            list.add(current);
                            current = current.InnerException;
                        }

                        Bridge.Test.NUnit.Assert.AreEqual(3, list.Count);

                        var l0 = list.getItem(0);
                        Bridge.Test.NUnit.Assert.True(Bridge.is(l0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.ThirdLevelException), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.GetType(l0));

                        var l1 = list.getItem(1);
                        Bridge.Test.NUnit.Assert.True(Bridge.is(l1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.SecondLevelException), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.GetType(l1));

                        var l2 = list.getItem(2);
                        Bridge.Test.NUnit.Assert.True(Bridge.is(l2, System.DivideByZeroException), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.GetType(l2));

                        var l3 = ex.getBaseException();
                        Bridge.Test.NUnit.Assert.True(Bridge.is(l3, System.DivideByZeroException), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.GetType(l3));
                    }
                },
                GetType: function (o) {
                    if (o == null) {
                        return "[null]";
                    }

                    return Bridge.Reflection.getTypeName(Bridge.getType(o));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.SecondLevelException", {
        inherits: [System.Exception],
        $kind: "nested class",
        ctors: {
            ctor: function (inner) {
                this.$initialize();
                System.Exception.ctor.call(this, null, inner);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2458.ThirdLevelException", {
        inherits: [System.Exception],
        $kind: "nested class",
        ctors: {
            ctor: function (inner) {
                this.$initialize();
                System.Exception.ctor.call(this, null, inner);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2462", {
        statics: {
            methods: {
                TestAsync: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        result, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2462.ValidateAsync();
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            result = $taskResult1;

                                            $tcs.setResult(result.ToArray());
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                ValidateAsync: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        result, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            result = new (System.Collections.Generic.List$1(System.String)).ctor();
                                            result.add("xxx");
                                            result.add("yyy");

                                            $task1 = System.Threading.Tasks.Task.fromResult(result, System.Collections.Generic.List$1(System.String));
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult($taskResult1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestReturnInAsync: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        step, 
                        items, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();

                                            step = 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            step = 1;

                                            $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2462.TestAsync();
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            items = $taskResult1;
                                            if (items.length !== 0) {
                                                step = 2;
                                                $step = 3;
                                                continue;
                                            }

                                            step = 3;
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            step = Bridge.Int.mul(step, 10);

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                throw $async_e;
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            Bridge.Test.NUnit.Assert.AreEqual(20, step);

                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ($step >= 1 && $step <= 2) {
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2467", {
        statics: {
            methods: {
                TestPropertyInitializerInStruct: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(123, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2467.MyStruct.Example.Value);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2467.MyStruct", {
        $kind: "nested struct",
        statics: {
            props: {
                Example: null
            },
            ctors: {
                init: function () {
                    this.Example = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2467.MyStruct();
                    this.Example = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2467.MyStruct.$ctor1(123);
                }
            },
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2467.MyStruct(); }
            }
        },
        props: {
            Value: 0
        },
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3904302783, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2467.MyStruct)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2467.MyStruct();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469", {
        statics: {
            methods: {
                TestLambdaLiftingWithStaticGenericMember: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Hello1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class1$1(System.Int32).Method()());
                    Bridge.Test.NUnit.Assert.AreEqual("Hello2", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class2$1.Method()());

                    var scope2 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class2$1;
                    Bridge.Test.NUnit.Assert.NotNull(scope2, "scope2 exists");
                    Bridge.Test.NUnit.Assert.NotNull(scope2.f1, "scope2.f1 exists");

                    var scope1 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class1$1;
                    Bridge.Test.NUnit.Assert.Null(scope1, "scope1 should not exist");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class1$1", function (T) { return {
        $kind: "nested class",
        statics: {
            fields: {
                Hello: null
            },
            ctors: {
                init: function () {
                    this.Hello = "Hello1";
                }
            },
            methods: {
                Method: function () {
                    return function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class1$1(T).Hello;
                    };
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class2$1", {
        $kind: "nested class",
        statics: {
            fields: {
                Hello: null
            },
            ctors: {
                init: function () {
                    this.Hello = "Hello2";
                }
            },
            methods: {
                Method: function () {
                    return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class2$1.f1;
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class2$1", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class2$1, {
        f1: function () {
            return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2469.Class2$1.Hello;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2481", {
        statics: {
            methods: {
                bug6_m: function () {
                    return System.Threading.Tasks.Task.fromResult("a", System.String);
                },
                bug6: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        oC1, 
                        s, 
                        z, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5], $step);
                                    switch ($step) {
                                        case 0: {
                                            oC1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2481.c1();
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2481.bug6_m();
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            s = $taskResult1;
                                            if (!Bridge.referenceEquals(s, "")) {
                                                $returnValue = "1" + (s || "");
                                                $step = 4;
                                                continue;
                                            }

                                            $task2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2481.bug6_m();
                                            $step = 3;
                                            if ($task2.isCompleted()) continue;
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            z = $taskResult2;
                                            if (!Bridge.referenceEquals(z, "")) {
                                                $returnValue = "2" + (z || "");
                                                $step = 4;
                                                continue;
                                            }
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            if (Bridge.hasValue(oC1)) oC1.System$IDisposable$Dispose();

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                $tcs.setException($async_e);
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            $tcs.setResult("");
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ($step >= 1 && $step <= 3) {
                                    $step = 4;
                                    $asyncBody();
                                    return;
                                }
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestReturnInAsyncUsing: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        msg, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2481.bug6();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        msg = $taskResult1;

                                        Bridge.Test.NUnit.Assert.AreEqual("1a", msg);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2481.c1", {
        inherits: [System.IDisposable],
        $kind: "nested class",
        alias: ["Dispose", "System$IDisposable$Dispose"],
        methods: {
            Dispose: function () { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486", {
        statics: {
            methods: {
                TestGenericArrayInterface: function () {
                    var x = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.Linear();
                    var r = x.Function(null);

                    Bridge.Test.NUnit.Assert.AreEqual(123, r);

                    var x1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.Linear1();
                    var r1 = x1.Function(System.Array.init([1.1], System.Double));

                    Bridge.Test.NUnit.Assert.AreEqual(1.1, r1);

                    var x2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.Linear2();
                    var r2 = x2.Function(System.Array.create(0, [[
                        1.1, 
                        2.2, 
                        3.3
                    ], [
                        4.1, 
                        5.1, 
                        6.1
                    ]], System.Double, 2, 3));

                    Bridge.Test.NUnit.Assert.AreEqual(5.1, r2);

                    var x3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.Linear3();
                    var r3 = x3.Function(new (System.Collections.Generic.List$1(System.Double)).$ctor1(System.Array.init([1.1, 2.1], System.Double)));

                    Bridge.Test.NUnit.Assert.AreEqual(2.1, r3);
                }
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.IKernel$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489", {
        statics: {
            methods: {
                TestReflectableInherits: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.BaseClass, 4, 284, "Field").t, "Should have Field in metadata as type has its own [Reflectable]");
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar, 4, 284, "Field00").t, "Should have Field in metadata as base type has [Reflectable] with Inherits = true");
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar1, 4, 284, "Field01").t, "Should have Field in metadata as type has its own [Reflectable]");

                    Bridge.Test.NUnit.Assert.AreEqual(null, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar2, 4, 284, "Field02"), "Should NOT have Field in metadata as base type has [Reflectable] with Inherits = false");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.BaseClass", {
        $kind: "nested class",
        fields: {
            Field: 0
        },
        ctors: {
            init: function () {
                this.Field = 1;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497", {
        statics: {
            methods: {
                TestPropertyInitializerWithDirective: function () {
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.Options().TraceLevels));
                    Bridge.Test.NUnit.Assert.NotNull(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.GeneralOptions().CurrentCulture);
                    Bridge.Test.NUnit.Assert.NotNull(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.GeneralOptions().CurrentUICulture);
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.ServerOptions().ApplicationType));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.ConnectOptions", {
        $kind: "nested class",
        props: {
            BrandName: {
                get: function () {
                    return Bridge.toString(this.Provider);
                }
            },
            HasHdsAlwaysEnabled: false,
            Name: null,
            Password: null,
            Provider: null,
            User: null
        },
        ctors: {
            init: function () {
                this.Name = "";
                this.Password = "";
                this.Provider = { };
                this.User = "";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.GeneralOptions", {
        $kind: "nested class",
        props: {
            CurrentCulture: null,
            CurrentUICulture: null
        },
        ctors: {
            init: function () {
                this.CurrentCulture = System.Globalization.CultureInfo.getCurrentCulture();
                this.CurrentUICulture = System.Globalization.CultureInfo.getCurrentCulture();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.Options", {
        $kind: "nested class",
        props: {
            TraceLevels: null
        },
        ctors: {
            init: function () {
                this.TraceLevels = { };
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.ServerOptions", {
        $kind: "nested class",
        props: {
            ApplicationType: null
        },
        ctors: {
            init: function () {
                this.ApplicationType = { };
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2499", {
        statics: {
            methods: {
                CompareDinosByLength: function (x, y) {
                    if (x == null) {
                        return y == null ? 0 : -1;
                    }

                    if (y == null) {
                        return 1;
                    }

                    var retval = Bridge.compare(x.length, y.length);

                    return retval !== 0 ? retval : System.String.compare(x, y);
                },
                TestArraySortComparison: function () {
                    var dinosaurs = System.Array.init([
                        "Pachycephalosaurus", 
                        "Amargasaurus", 
                        "", 
                        null, 
                        "Mamenchisaurus", 
                        "Deinonychus"
                    ], System.String);
                    System.Array.sort(dinosaurs, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2499.CompareDinosByLength);

                    Bridge.Test.NUnit.Assert.Null(dinosaurs[System.Array.index(0, dinosaurs)]);
                    Bridge.Test.NUnit.Assert.AreEqual("", dinosaurs[System.Array.index(1, dinosaurs)]);
                    Bridge.Test.NUnit.Assert.AreEqual("Deinonychus", dinosaurs[System.Array.index(2, dinosaurs)]);
                    Bridge.Test.NUnit.Assert.AreEqual("Amargasaurus", dinosaurs[System.Array.index(3, dinosaurs)]);
                    Bridge.Test.NUnit.Assert.AreEqual("Mamenchisaurus", dinosaurs[System.Array.index(4, dinosaurs)]);
                    Bridge.Test.NUnit.Assert.AreEqual("Pachycephalosaurus", dinosaurs[System.Array.index(5, dinosaurs)]);
                },
                TestArraySortComparisonWithEntity: function () {
                    var $t;
                    var items = System.Array.init([($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2499.Named(), $t.Name = "C", $t), ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2499.Named(), $t.Name = "B", $t), ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2499.Named(), $t.Name = "A", $t)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge2499.Named);

                    var theLittle = "C";

                    System.Array.sort(items, function (x, y) {
                            if (Bridge.referenceEquals(x.Name, theLittle)) {
                                return -1;
                            }

                            if (Bridge.referenceEquals(y.Name, theLittle)) {
                                return 1;
                            }

                            return System.String.compare(x.Name, y.Name);
                        });

                    if (!Bridge.ClientTest.Batch3.Utilities.BrowserHelper.IsPhantomJs()) {
                        Bridge.Test.NUnit.Assert.AreEqual(3, items.length);
                        Bridge.Test.NUnit.Assert.AreEqual("C", items[System.Array.index(0, items)].Name);
                        Bridge.Test.NUnit.Assert.AreEqual("A", items[System.Array.index(1, items)].Name);
                        Bridge.Test.NUnit.Assert.AreEqual("B", items[System.Array.index(2, items)].Name);
                    } else {
                        Bridge.Test.NUnit.Assert.AreEqual(3, items.length);
                        Bridge.Test.NUnit.Assert.AreEqual("A", items[System.Array.index(0, items)].Name);
                        Bridge.Test.NUnit.Assert.AreEqual("B", items[System.Array.index(1, items)].Name);
                        Bridge.Test.NUnit.Assert.AreEqual("C", items[System.Array.index(2, items)].Name);
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2499.Named", {
        $kind: "nested class",
        props: {
            Name: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2502", {
        statics: {
            methods: {
                Test: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        i, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3], $step);
                                    switch ($step) {
                                        case 0: {
                                            if ( true ) {
                                                $step = 1;
                                                continue;
                                            } 
                                            $step = 3;
                                            continue;
                                        }
                                        case 1: {
                                            i = -1;

                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            switch (i) {
                                                case -1: 
                                                    break;
                                            }

                                            for (i = 0; i < 10; i = (i + 1) | 0) {
                                                break;
                                            }

                                            $tcs.setResult(i);
                                            return;
                                        }
                                        case 3: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestAsyncBreak: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2502.Test();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.AreEqual(0, $taskResult1);
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2505", {
        statics: {
            methods: {
                MakeArgb: function (alpha, red, green, blue) {
                    return System.Int64.clip64((Bridge.Int.clipu64((((red << 16) | (green << 8)) | blue) | (alpha << 24))).and(System.UInt64(System.Int64([-1,0]))));
                },
                TestNegativeNumberToULong: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("4281808695", Bridge.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2505.MakeArgb(255, 55, 55, 55)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2515", {
        statics: {
            methods: {
                TestPreprocessorConditionalAccess: function () {
                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2515();
                    var i = null;
                    i = p != null ? p.DoSomething() : null;
                    Bridge.Test.NUnit.Assert.True(System.Nullable.hasValue(i));
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Nullable.getValue(i));
                }
            }
        },
        methods: {
            DoSomething: function () {
                return 1;
            }
        }
    });

    /**
     * This test consists in ensuring the types' IsPrimitive property returns
     'true' to the main primitive types, and 'false' to other types.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge2522
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2522", {
        statics: {
            methods: {
                /**
                 * Just ensures
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge2522
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge2522
                 * @return  {void}
                 */
                TestIsPrimitive: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.Byte), "'Byte' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.SByte), "'SByte' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.Int16), "'Int16' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.UInt16), "'UInt16' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.Int32), "'Int32' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.UInt32), "'UInt32' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.Int64), "'Int64' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.UInt64), "'UInt64' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.Boolean), "'Boolean' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.Char), "'Char' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.Double), "'Double' is primitive.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isPrimitive(System.Single), "'Single' is primitive.");

                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isPrimitive(System.Decimal), "'Decimal' is not primitive.");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isPrimitive(System.DateTime), "'DateTime' is not primitive.");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isPrimitive(System.String), "'String' is not primitive.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2523", {
        statics: {
            methods: {
                TestAsyncConditionalAccess: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2523.Class1.ReturnObject(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2523.Class2());
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(result));
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalAccessWorkaround: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2523.Class1Workaround.ReturnObject(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2523.Class2());
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(result));
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2523.Class1", {
        $kind: "nested class",
        statics: {
            methods: {
                ReturnObject: function (class2) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = (class2 != null ? class2.ReturnObject2() : null);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult({ });
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2523.Class1Workaround", {
        $kind: "nested class",
        statics: {
            methods: {
                ReturnObject: function (class2) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = (class2 != null ? class2.ReturnObject2() : null);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult({ });
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2523.Class2", {
        $kind: "nested class",
        methods: {
            ReturnObject2: function () {
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                tcs.setResult({ });

                return tcs.task;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2525", {
        statics: {
            methods: {
                TestCastAttribute: function () {
                    var $t;
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2525.A();
                    a.value = 33;

                    var b = ($t = a, Bridge.cast($t, Bridge.hasValue($t) && ($t.value == 33)));

                    Bridge.Test.NUnit.Assert.AreEqual(33, b.value, "value 33 casts");


                    a.value = 34;

                    Bridge.Test.NUnit.Assert.Throws$1(function () {
                        var $t1;
                        var c = ($t1 = a, Bridge.cast($t1, Bridge.hasValue($t1) && ($t1.value == 33)));
                    }, "value 34 should throw");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2525.A", {
        $kind: "nested class",
        fields: {
            value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2525.B", {
        $kind: "nested class",
        fields: {
            value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2538", {
        statics: {
            methods: {
                TestArraySegment: function () {
                    var arr = System.Array.init(65535, 0, System.Byte);
                    var buffer = new System.ArraySegment(arr);

                    Bridge.Test.NUnit.Assert.AreEqual(65535, buffer.getCount());
                    Bridge.Test.NUnit.Assert.AreEqual(arr, buffer.getArray());
                    Bridge.Test.NUnit.Assert.AreEqual(0, buffer.getOffset());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2550", {
        statics: {
            methods: {
                TestExplictImplementationReflectability: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2550.B, 16, 28).length);
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2550.IA, 16, 28).length);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2550.IA", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558", {
        statics: {
            methods: {
                TestEnumReflection: function () {
                    var a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558EnumExtensions.GetAttribute(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.DisplayAttribute, Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status.Item1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status)));
                    Bridge.Test.NUnit.Assert.AreEqual("tst", a.Name);

                    var a1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558EnumExtensions.GetAttribute(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.DisplayAttribute, Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status.Item1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status)));
                    Bridge.Test.NUnit.Assert.AreEqual("tst", a1.Name);

                    var a2 = Bridge.cast(System.Linq.Enumerable.from(System.Attribute.getCustomAttributes(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status, 4, 284, System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status.Item1)), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.DisplayAttribute, false), System.Object).firstOrDefault(null, null), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.DisplayAttribute);

                    Bridge.Test.NUnit.Assert.AreEqual("tst", a2.Name);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.DisplayAttribute", {
        inherits: [System.Attribute],
        $kind: "nested class",
        props: {
            Name: null
        },
        ctors: {
            ctor: function (name) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this.Name = name;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                Item1: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558EnumExtensions", {
        statics: {
            methods: {
                GetAttribute: function (T, value) {
                    return Bridge.as(System.Linq.Enumerable.from(System.Attribute.getCustomAttributes(Bridge.Reflection.getMembers(Bridge.getType(value), 4, 284, System.Enum.toString(Bridge.getType(value), value)), T, false), System.Object).firstOrDefault(null, null), T);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2565", {
        statics: {
            methods: {
                RunTest: function (callback) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            callback();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestLambdaInAsyncLoop: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        done, 
                        counter, 
                        action, 
                        i, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        counter = 0;
                                        i = 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( i < 5 ) {
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        action = function () {
                                            Bridge.identity(counter, ((counter = (counter + 1) | 0)));
                                        };
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2565.RunTest(function () {
                                            action();
                                        });
                                        $step = 3;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {
                                        Bridge.Test.NUnit.Assert.AreEqual(5, counter);
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2571", {
        statics: {
            methods: {
                TestContainsFunction: function () {
                    var types = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2571.f1(new (System.Collections.Generic.List$1(System.Type)).ctor());

                    Bridge.Test.NUnit.Assert.True(types.contains(System.Double));
                    Bridge.Test.NUnit.Assert.False(types.contains(System.Int16));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2571", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2571, {
        f1: function (_o1) {
            _o1.add(System.Int32);
            _o1.add(System.Double);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2574", {
        statics: {
            methods: {
                Cool: function () {
                    return {Yes:6};
                },
                TestOperatorTemplate: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2574.Cool().Yes);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2574.A", {
        $kind: "nested class",
        fields: {
            Yes: 0
        },
        ctors: {
            init: function () {
                this.Yes = 7;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584", {
        statics: {
            methods: {
                TestBindingFlags: function () {
                    var fields = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584.Class1, 4, 20);
                    Bridge.Test.NUnit.Assert.AreEqual(1, fields.length);
                    Bridge.Test.NUnit.Assert.AreEqual("field1", fields[System.Array.index(0, fields)].n);

                    fields = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584.Class1, 4, 40);
                    Bridge.Test.NUnit.Assert.AreEqual(3, fields.length);
                    Bridge.Test.NUnit.Assert.AreEqual("s_field2", fields[System.Array.index(0, fields)].n);
                    Bridge.Test.NUnit.Assert.AreEqual("s_field3", fields[System.Array.index(1, fields)].n);
                    Bridge.Test.NUnit.Assert.AreEqual("s_field4", fields[System.Array.index(2, fields)].n);

                    fields = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584.Class1, 4, 28);
                    Bridge.Test.NUnit.Assert.AreEqual(2, fields.length);

                    fields = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584.Class1, 4, 60);
                    Bridge.Test.NUnit.Assert.AreEqual(8, fields.length);

                    var field = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584.Class1, 4, 21 | 256, "FIELD1");
                    Bridge.Test.NUnit.Assert.NotNull(field);
                    Bridge.Test.NUnit.Assert.AreEqual("field1", field.n);

                    field = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584.Class1, 4, 20 | 256, "FIELD1");
                    Bridge.Test.NUnit.Assert.Null(field);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584.Class1", {
        $kind: "nested class",
        statics: {
            fields: {
                s_field1: 0,
                s_field2: 0,
                s_field3: 0,
                s_field4: 0
            }
        },
        fields: {
            field1: 0,
            field2: 0,
            field3: 0,
            field4: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2587", {
        statics: {
            methods: {
                TestNamedParams: function () {
                    var result = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2587.Test.Method(void 0, ["test"]);
                    Bridge.Test.NUnit.Assert.AreEqual(1, result);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2587.Test", {
        $kind: "nested class",
        statics: {
            methods: {
                Method: function (useless, list) {
                    if (useless === void 0) { useless = null; }
                    if (list === void 0) { list = []; }
                    return list.length;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2591", {
        main: function MAIN () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge2591.run = true;
        },
        statics: {
            fields: {
                run: false
            },
            ctors: {
                init: function () {
                    this.run = false;
                }
            },
            methods: {
                TestEntryPointCustomName: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2591.run);
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2591.MAIN));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2592", {
        statics: {
            props: {
                Prop1: {
                    get: function () {
                        throw new System.Exception("ThrownFromGetterProp1");
                    },
                    set: function (value) {
                        throw new System.Exception("ThrownFromSetterProp1");
                    }
                }
            },
            methods: {
                MethodThrowsException1: function () {
                    var nulref = null;
                    var ch = nulref.charAt(1);
                },
                MethodThrowsException2: function () {
                    throw new System.Exception("ThrownFromMethod2");
                },
                TestStackTrace: function () {
                    try {
                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge2592.MethodThrowsException1();
                        Bridge.Test.NUnit.Assert.Fail("Should have thrown at MethodThrowsException1");
                    } catch (e) {
                        e = System.Exception.create(e);
                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge2592.AssertStackTrace(e.StackTrace, "MethodThrowsException1");
                    }

                    try {
                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge2592.MethodThrowsException2();
                        Bridge.Test.NUnit.Assert.Fail("Should have thrown at MethodThrowsException2");
                    } catch (e1) {
                        e1 = System.Exception.create(e1);
                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge2592.AssertStackTrace(e1.StackTrace, "MethodThrowsException2");
                    }

                    /* try
                    {
                       var i = Prop1;
                       Assert.Fail("Should have thrown at getter Prop1");
                    }
                    catch (Exception e)
                    {
                       AssertStackTrace(e.StackTrace, "Prop1.get");
                    }

                    try
                    {
                       Prop1 = 1;
                       Assert.Fail("Should have thrown at setter Prop1");
                    }
                    catch (Exception e)
                    {
                       AssertStackTrace(e.StackTrace, "Prop1.set");
                    }*/
                },
                AssertStackTrace: function (stack, fragment) {
                    if (stack == null) {
                        Bridge.Test.NUnit.Assert.Fail(stack);
                        return;
                    }

                    if (System.String.contains(stack,fragment)) {
                        Bridge.Test.NUnit.Assert.True(true);
                    } else {
                        Bridge.Test.NUnit.Assert.Fail(stack);
                    }
                }
            }
        }
    });

    /**
     * This test consists in checking whether Bridge can translate
     instantiation of the System.ComponentModel.BrowsableAttribute.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600", {
        statics: {
            methods: {
                /**
                 * Checks whether it is possible to fetch the BrowsableAttribute from
                 a class using it.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600
                 * @return  {void}
                 */
                TestBrowsableAttribute: function () {
                    var props = System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600.Properties, 16, 28), System.Reflection.PropertyInfo).where($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600.f1);

                    Bridge.Test.NUnit.Assert.AreEqual(1, props.count(), "Found one match of the BrowsableAttribute in the checked class.");
                    Bridge.Test.NUnit.Assert.AreEqual("Prop1", props.first().n, "Matching property with BrowsableAttribute is the 'Prop1' one.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600, {
        f1: function (p) {
            return System.Attribute.getCustomAttributes(p, System.ComponentModel.BrowsableAttribute).length > 0;
        }
    });

    /**
     * Class using the Browsable attribute in one of its properties.
     *
     * @private
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600.Properties
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600.Properties", {
        $kind: "nested class",
        props: {
            Prop1: 0,
            Prop2: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610", {
        statics: {
            methods: {
                TryToGetResult: function (T, value) {
                    // The "handleResult" lambda gets lifted into an anonymous method but it shouldn't be allowed to because
                    // it relies on the generic type param T because there is an implicit cast from T on to OptionalTest<T>
                    return value.Match(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(T), function (result) {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(T).op_Implicit(result);
                    }, function (error) {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(T).Missing;
                    });
                },
                TestLambdaLifting: function () {
                    var myValue = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.ResultOrErrorTest$1(System.String)).ctor("WOOOO");
                    try {
                        var result = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.TryToGetResult(System.String, myValue);
                        Bridge.Test.NUnit.Assert.AreEqual("WOOOO", result.Value);
                    } catch (e) {
                        e = System.Exception.create(e);
                        Bridge.Test.NUnit.Assert.Fail(e.Message);
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1", function (T) { return {
        $kind: "nested class",
        statics: {
            props: {
                Missing: null
            },
            ctors: {
                init: function () {
                    this.Missing = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(T))(Bridge.getDefaultValue(T), false);
                }
            },
            methods: {
                op_Implicit: function (value) {
                    return (value == null) ? Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(T).Missing : new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(T))(value, true);
                }
            }
        },
        props: {
            IsDefined: false,
            Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function (value, isDefined) {
                this.$initialize();
                this.Value = value;
                this.IsDefined = isDefined;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.ResultOrErrorTest$1", function (T) { return {
        $kind: "nested class",
        fields: {
            _result: null,
            _error: null
        },
        ctors: {
            ctor: function (result) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.ResultOrErrorTest$1(T).$ctor1.call(this, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(T).op_Implicit(result), null);
            },
            $ctor2: function (error) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.ResultOrErrorTest$1(T).$ctor1.call(this, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(T).Missing, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2610.OptionalTest$1(System.Exception).op_Implicit(error));
            },
            $ctor1: function (result, error) {
                this.$initialize();
                this._result = result;
                this._error = error;
            }
        },
        methods: {
            Match: function (TResult, handleResult, handleError) {
                return this._result.IsDefined ? handleResult(this._result.Value) : handleError(this._error.Value);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2614", {
        statics: {
            methods: {
                TestInitializers: function () {
                    var x = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2614.X();
                    Bridge.Test.NUnit.Assert.True(x.Id1.gt(System.Int64(0)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(x.Id1, System.Int64));

                    Bridge.Test.NUnit.Assert.True(x.Id2.gt(System.UInt64(0)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(x.Id2, System.UInt64));

                    Bridge.Test.NUnit.Assert.True(x.Id3.gt(System.Decimal(0)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(x.Id3, System.Decimal));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2614.X", {
        $kind: "nested class",
        props: {
            Id1: System.Int64(0),
            Id2: System.UInt64(0),
            Id3: System.Decimal(0.0)
        },
        ctors: {
            init: function () {
                this.Id1 = System.Int64(1);
                this.Id2 = System.UInt64(1);
                this.Id3 = System.Decimal(1);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2632", {
        statics: {
            methods: {
                TestTemplateIdentifier: function () {
                    var x = new Bridge.ClientTest.Batch3.BridgeIssues.Derived();
                    x.Test();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2633", {
        statics: {
            methods: {
                TestAsyncCaptureVariable: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        done, 
                        array, 
                        a, 
                        $t, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        array = System.Array.init(10, null, Function);

                                        for (var n = 0; n < 10; n = (n + 1) | 0) {
                                            a = { v : ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2633.A(), $t.Value = n, $t) };
                                            array[System.Array.index(n, array)] = (function ($me, a) {
                                                return function (i) {
                                                    Bridge.Test.NUnit.Assert.AreEqual(i, a.v.Value);
                                                };
                                            })(this, a);
                                        }

                                        for (var n1 = 0; n1 < 10; n1 = (n1 + 1) | 0) {
                                            array[System.Array.index(n1, array)](n1);
                                        }

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2633.A", {
        $kind: "nested class",
        fields: {
            Value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635", {
        statics: {
            methods: {
                TestInitializers: function () {
                    var $t;
                    var c = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635.Class1(), $t.SubProperty1.Property1 = "test", $t.SubProperty1.Property2 = 5, $t.SubProperty2.Property1 = "test2", $t.SubProperty2.Property2 = 6, $t);

                    Bridge.Test.NUnit.Assert.AreEqual("test", c.SubProperty1.Property1);
                    Bridge.Test.NUnit.Assert.AreEqual(5, c.SubProperty1.Property2);
                    Bridge.Test.NUnit.Assert.AreEqual("test2", c.SubProperty2.Property1);
                    Bridge.Test.NUnit.Assert.AreEqual(6, c.SubProperty2.Property2);

                    var c3 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635.Class3(), $t.Property3.SubProperty1.Property1 = "test3", $t.Property3.SubProperty1.Property2 = 7, $t.Property3.SubProperty2.Property1 = "test4", $t.Property3.SubProperty2.Property2 = 8, $t);

                    Bridge.Test.NUnit.Assert.AreEqual("test3", c3.Property3.SubProperty1.Property1);
                    Bridge.Test.NUnit.Assert.AreEqual(7, c3.Property3.SubProperty1.Property2);
                    Bridge.Test.NUnit.Assert.AreEqual("test4", c3.Property3.SubProperty2.Property1);
                    Bridge.Test.NUnit.Assert.AreEqual(8, c3.Property3.SubProperty2.Property2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635.Class1", {
        $kind: "nested class",
        props: {
            SubProperty1: null,
            SubProperty2: null
        },
        ctors: {
            init: function () {
                this.SubProperty1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635.Class2();
                this.SubProperty2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635.Class2();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635.Class2", {
        $kind: "nested class",
        props: {
            Property1: null,
            Property2: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635.Class3", {
        $kind: "nested class",
        props: {
            Property3: null
        },
        ctors: {
            init: function () {
                this.Property3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2635.Class1();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2636", {
        statics: {
            methods: {
                TestUsingStatic: function () {
                    var b = Other.Util.fun(System.String, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2636.f1);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(b, Function));
                    Bridge.Test.NUnit.Assert.AreEqual("hello", b());

                    var b2 = Bridge.ClientTest.Batch3.BridgeIssues.Util.fun2(System.String, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2636.f1);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(b2, Function));
                    Bridge.Test.NUnit.Assert.AreEqual("hello", b2());
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2636", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2636, {
        f1: function () {
            return "hello";
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638", {
        statics: {
            methods: {
                DoSomething: function (TProps, TStoreState, props) {
                    Bridge.Test.NUnit.Assert.AreEqual("It works!", props[Bridge.geti(props, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638$IHaveStore$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638$IAmSinglePropertyStore$1$" + Bridge.getTypeAlias(TStoreState) + "$Store", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638$IHaveStore$1$Store")]["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638$IAmSinglePropertyStore$1$" + Bridge.getTypeAlias(TStoreState) + "$ViewModel"]);
                },
                TestContrvariance: function () {
                    var $t;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.DoSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.Props, System.String, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.Props(), $t.Store = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.FormEditStore(), $t));
                }
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.IAmSinglePropertyStore$1", function (TViewModel) { return {
        $kind: "nested interface"
    }; });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.IHaveStore$1", function (TStore) { return {
        $kind: "nested interface",
        $variance: [1]
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A", {
        statics: {
            fields: {
                baseClassAlias: null,
                stringAlias: null
            },
            ctors: {
                init: function () {
                    this.baseClassAlias = "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass";
                    this.stringAlias = "System$String";
                }
            }
        },
        methods: {
            TestG1: function () {
                var c = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G1$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.BaseClass))();
                var i = c;

                Bridge.Test.NUnit.Assert.AreEqual(1, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem(0));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$getItem));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$getItem"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$setItem));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$setItem"]));

                Bridge.Test.NUnit.Assert.AreEqual(2, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1);
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1, Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Prop1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1, Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$Prop1"]));

                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$adde1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$adde1"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$removee1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$removee1"]));

                Bridge.Test.NUnit.Assert.AreEqual(3, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1());
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.M1));
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1(), Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$M1)());
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1(), Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$M1"])());
            },
            TestG2: function () {
                var c = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G2$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.BaseClass))();
                var i = c;

                Bridge.Test.NUnit.Assert.AreEqual(1, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem(0));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$getItem"]));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$setItem"]));

                Bridge.Test.NUnit.Assert.AreEqual(2, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1);
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1, Bridge.unbox(c.Prop1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1, Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$Prop1"]));

                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$adde1"]));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$removee1"]));

                Bridge.Test.NUnit.Assert.AreEqual(3, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1());
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$M1));
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1(), Bridge.unbox(c.M1)());
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1(), Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$M1"])());
            },
            TestG3: function () {
                var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G3();
                var i = c;

                Bridge.Test.NUnit.Assert.AreEqual(1, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$getItem(0));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$getItem));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$getItem"]));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$setItem));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$setItem"]));

                Bridge.Test.NUnit.Assert.AreEqual(2, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$Prop1);
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Prop1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$Prop1, Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$Prop1"]));

                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$adde1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$adde1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$adde1"]));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$removee1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$removee1"]));

                Bridge.Test.NUnit.Assert.AreEqual(3, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$M1());
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$M1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.M1));
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$M1(), Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$M1"])());
            },
            TestG4: function () {
                var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G4();
                var i = c;

                Bridge.Test.NUnit.Assert.AreEqual(1, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$getItem(0));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$getItem"]));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$setItem"]));

                Bridge.Test.NUnit.Assert.AreEqual(2, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$Prop1);
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$Prop1, Bridge.unbox(c.Prop1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$Prop1, Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$Prop1"]));

                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$adde1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$adde1"]));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$removee1"]));

                Bridge.Test.NUnit.Assert.AreEqual(3, i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$M1());
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$M1));
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$M1(), Bridge.unbox(c.M1)());
                Bridge.Test.NUnit.Assert.AreEqual(i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$M1(), Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.stringAlias || "") + "$M1"])());
            },
            TestG5: function () {
                var c = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G5$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.BaseClass))();
                var i = c;
                var id = c;

                Bridge.Test.NUnit.Assert.AreEqual(1, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem")](0));
                Bridge.Test.NUnit.Assert.AreEqual(1, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem")](0));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$getItem"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$setItem"]));

                Bridge.Test.NUnit.Assert.AreEqual(2, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")]);
                Bridge.Test.NUnit.Assert.AreEqual(2, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")]);
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$Prop1"]));

                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1")]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1")]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$adde1"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$removee1"]));

                Bridge.Test.NUnit.Assert.AreEqual(3, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")]());
                Bridge.Test.NUnit.Assert.AreEqual(3, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")]());
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.M1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1)());
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$M1"])());
            },
            TestG6: function () {
                var c = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G6$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.BaseClass))();
                var i = c;
                var id = c;

                Bridge.Test.NUnit.Assert.AreEqual(1, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem")](0));
                Bridge.Test.NUnit.Assert.AreEqual(1, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem")](0));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$getItem"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$setItem"]));

                Bridge.Test.NUnit.Assert.AreEqual(2, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")]);
                Bridge.Test.NUnit.Assert.AreEqual(2, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")]);
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c.Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$Prop1"]));

                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1")]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1")]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$adde1"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$removee1"]));

                Bridge.Test.NUnit.Assert.AreEqual(3, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")]());
                Bridge.Test.NUnit.Assert.AreEqual(3, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")]());
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1)());
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c.M1)());
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$M1"])());
            },
            TestG7: function () {
                var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G7();
                var i = c;
                var id = c;

                Bridge.Test.NUnit.Assert.AreEqual(1, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem")](0));
                Bridge.Test.NUnit.Assert.AreEqual(1, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem")](0));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$getItem"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$setItem"]));

                Bridge.Test.NUnit.Assert.AreEqual(2, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")]);
                Bridge.Test.NUnit.Assert.AreEqual(2, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")]);
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$Prop1"]));

                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1")]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1")]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$adde1"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1));
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$removee1"]));

                Bridge.Test.NUnit.Assert.AreEqual(3, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")]());
                Bridge.Test.NUnit.Assert.AreEqual(3, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")]());
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1)());
                Bridge.Test.NUnit.Assert.Null(Bridge.unbox(c.M1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$M1"])());
            },
            TestG8: function () {
                var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G8();
                var i = c;
                var id = c;

                Bridge.Test.NUnit.Assert.AreEqual(1, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem")](0));
                Bridge.Test.NUnit.Assert.AreEqual(1, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem")](0));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.getItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$getItem"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.setItem));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$setItem"]));

                Bridge.Test.NUnit.Assert.AreEqual(2, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")]);
                Bridge.Test.NUnit.Assert.AreEqual(2, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")]);
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c.Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1));
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1")], Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$Prop1"]));

                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1")]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.Throws$2(System.NotImplementedException, function () {
                    id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1")]($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.f1);
                });
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.adde1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$adde1"]));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.removee1));
                Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$removee1"]));

                Bridge.Test.NUnit.Assert.AreEqual(3, i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")]());
                Bridge.Test.NUnit.Assert.AreEqual(3, id[Bridge.geti(id, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$DerivedClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")]());
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1)());
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c.M1)());
                Bridge.Test.NUnit.Assert.AreEqual(i[Bridge.geti(i, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1")](), Bridge.unbox(c["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.baseClassAlias || "") + "$M1"])());
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A, {
        f1: function () { }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.BaseClass", {
        $kind: "nested class"
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I1$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I2$1", function (T) { return {
        $kind: "nested interface",
        $variance: [2]
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2644", {
        statics: {
            methods: {
                TestMax: function () {
                    var byte1 = 10;
                    var byte2 = 20;
                    byte1 = Math.max(byte1, byte2);
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(Bridge.box(20, System.Byte), Bridge.box(byte1, System.Byte), "byte");

                    var sbyte1 = 10;
                    var sbyte2 = 20;
                    sbyte1 = Math.max(sbyte1, sbyte2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(20, System.SByte), sbyte1, "sbyte");

                    var short1 = 10;
                    var short2 = 20;
                    short1 = Math.max(short1, short2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(20, System.Int16), short1, "short");

                    var ushort1 = 10;
                    var ushort2 = 20;
                    ushort1 = Math.max(ushort1, ushort2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(20, System.UInt16), ushort1, "ushort");

                    var int1 = 10;
                    var int2 = 20;
                    int1 = Math.max(int1, int2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(20, System.Int32), int1, "int");

                    var uint1 = 10;
                    var uint2 = 20;
                    uint1 = Math.max(uint1, uint2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(20, System.UInt32), uint1, "unit");

                    var long1 = System.Int64(10);
                    var long2 = System.Int64(20);
                    long1 = System.Int64.max(long1, long2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Int64(20), System.Int64.toNumber(long1), "long");

                    var ulong1 = System.UInt64(10);
                    var ulong2 = System.UInt64(20);
                    ulong1 = System.UInt64.max(ulong1, ulong2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.UInt64(20), System.Int64.toNumber(ulong1), "ulong");

                    var float1 = 10;
                    var float2 = 20;
                    float1 = Math.max(float1, float2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(20.0, System.Single, System.Single.format, System.Single.getHashCode), float1, "float");

                    var double1 = 10;
                    var double2 = 20;
                    double1 = Math.max(double1, double2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(20.0, System.Double, System.Double.format, System.Double.getHashCode), double1, "double");

                    var decimal1 = System.Decimal(10);
                    var decimal2 = System.Decimal(20);
                    decimal1 = System.Decimal.max(decimal1, decimal2);
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(System.Decimal(20.0), decimal1, "decimal");
                },
                TestMin: function () {
                    var byte1 = 10;
                    var byte2 = 20;
                    byte2 = Math.min(byte1, byte2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(10, System.Byte), byte2, "byte");

                    var sbyte1 = 10;
                    var sbyte2 = 20;
                    sbyte2 = Math.min(sbyte1, sbyte2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(10, System.SByte), sbyte2, "sbyte");

                    var short1 = 10;
                    var short2 = 20;
                    short2 = Math.min(short1, short2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(10, System.Int16), short2, "short");

                    var ushort1 = 10;
                    var ushort2 = 20;
                    ushort2 = Math.min(ushort1, ushort2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(10, System.UInt16), ushort2, "ushort");

                    var int1 = 10;
                    var int2 = 20;
                    int2 = Math.min(int1, int2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(10, System.Int32), int2, "int");

                    var uint1 = 10;
                    var uint2 = 20;
                    uint2 = Math.min(uint1, uint2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(10, System.UInt32), uint2, "uint");

                    var long1 = System.Int64(10);
                    var long2 = System.Int64(20);
                    long2 = System.Int64.min(long1, long2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Int64(10), System.Int64.toNumber(long2), "long");

                    var ulong1 = System.UInt64(10);
                    var ulong2 = System.UInt64(20);
                    ulong2 = System.UInt64.min(ulong1, ulong2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.UInt64(10), System.Int64.toNumber(ulong2), "ulong");

                    var float1 = 10;
                    var float2 = 20;
                    float2 = Math.min(float1, float2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(10.0, System.Single, System.Single.format, System.Single.getHashCode), float2, "float");

                    var double1 = 10;
                    var double2 = 20;
                    double2 = Math.min(double1, double2);
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(Bridge.box(10.0, System.Double, System.Double.format, System.Double.getHashCode), double2, "double");

                    var decimal1 = System.Decimal(10);
                    var decimal2 = System.Decimal(20);
                    decimal2 = System.Decimal.min(decimal1, decimal2);
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(System.Decimal(10.0), decimal2, "decimal");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2657", {
        statics: {
            methods: {
                TestRoundtripFormat: function () {
                    var a = System.DateTime.format(System.DateTime.getUtcNow(), "o");
                    var b = System.DateTime.parseExact(a, "o", System.Globalization.CultureInfo.invariantCulture);

                    b = System.DateTime.toUniversalTime(b);

                    Bridge.Test.NUnit.Assert.AreEqual(a, System.DateTime.format(b, "o"));

                    var c1 = System.DateTime.parseExact("2017-05-15T14:34:03.6762498+00:00", "o", System.Globalization.CultureInfo.invariantCulture);
                    var c2 = System.DateTime.parseExact("2017-05-15T14:34:03.6760000+00:00", "o", System.Globalization.CultureInfo.invariantCulture);

                    Bridge.Test.NUnit.Assert.AreEqual(2017, System.DateTime.getYear(c1));
                    Bridge.Test.NUnit.Assert.AreEqual(5, System.DateTime.getMonth(c1));
                    // JS limitation - ms part may be different compared to .Net
                    Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.format(c1, "o"), System.DateTime.format(c2, "o"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2667", {
        statics: {
            methods: {
                TestOrder: function () {
                    var list = new Paige.PaigeObject.PaigeObjectList();
                    list.AddPaigeObject(null);
                    Bridge.Test.NUnit.Assert.AreEqual(1, list.Count);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge266A", {
        statics: {
            methods: {
                Test: function () {
                    // Nothing gets written for Class1 in the output JavaScript due to the "new object()" argument.
                    // If null is used instead (as commented-out) then it works as expected.
                    // No compile error.
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge266B.Test("test", { });
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge266B", {
        statics: {
            methods: {
                Test: function (arg1, arg2) {
                    return arg2;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2671", {
        statics: {
            methods: {
                TestInterfaceIndexer: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2671.GenericClass$1(System.Int32))().TestMethod());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2671.GenericClass$1", function (T) { return {
        $kind: "nested class",
        methods: {
            TestMethod: function () {
                var dictionary = new (System.Collections.Generic.Dictionary$2(System.String,T)).ctor();

                dictionary["System$Collections$Generic$IDictionary$2$System$String$" + Bridge.getTypeAlias(T) + "$setItem"]("key", Bridge.getDefaultValue(T));
                return dictionary["System$Collections$Generic$IDictionary$2$System$String$" + Bridge.getTypeAlias(T) + "$getItem"]("key");
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2685", {
        statics: {
            methods: {
                TestPartialClasses: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("123 - 456", new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2685.TestClass(123, 456).toString());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2685.BaseClass", {
        $kind: "nested class",
        props: {
            Y: 0
        },
        ctors: {
            ctor: function (y) {
                this.$initialize();
                this.Y = y;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2685.IBase", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2686", {
        statics: {
            methods: {
                TestCapturedReferenceVariable: function () {
                    for (var i = 0; i < 1; i = (i + 1) | 0) {
                        var accounts = new (System.Collections.Generic.Dictionary$2(System.Int64,System.Collections.Generic.List$1(System.Object))).ctor();
                        var accountId = System.Int64(1);
                        var args;
                        var api = { v : 1 };
                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge2686.M1(api);
                        accounts.add(accountId, (args = (function ($me, api) {
                                return function (_o1) {
                                    _o1.add(Bridge.box(api.v, System.Int32));
                                    _o1.add(Bridge.box(0, System.Int32));
                                    return _o1;
                                };
                            })(this, api)(new (System.Collections.Generic.List$1(System.Object)).ctor())));

                        Bridge.Test.NUnit.Assert.AreEqual(2, System.Nullable.getValue(Bridge.cast(Bridge.unbox(args.getItem(0), System.Int32), System.Int32)));
                    }
                },
                TestChangeableCapturedReferenceVariable: function () {
                    for (var i = 0; i < 1; i = (i + 1) | 0) {
                        var k = { v : 1 };
                        var a = (function ($me, k) {
                            return function () {
                                Bridge.identity(k.v, ((k.v = (k.v + 1) | 0)));
                            };
                        })(this, k);
                        a();
                        Bridge.Test.NUnit.Assert.AreEqual(2, k.v);
                    }
                },
                M1: function (api) {
                    api.v = 2;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2688", {
        statics: {
            methods: {
                TestCaseNull: function () {
                    var value = Bridge.unbox(undefined);
                    switch (value) {
                        case null: 
                        case undefined: 
                            Bridge.Test.NUnit.Assert.True(true);
                            return;
                        default: 
                            Bridge.Test.NUnit.Assert.Fail();
                            break;
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689", {
        statics: {
            methods: {
                TestAsyncConditionalExpression1: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = false;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $taskResult1 = c.ShouldNotBeInvoked(System.String, "1");
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = c.GetStr("2");
                                        $step = 3;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $taskResult1 = Bridge.toString(($taskResult2));
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("2", result);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression2: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = false;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task2 = c.ShouldNotBeInvokedAsync(System.String, "1");
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $taskResult1 = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task3 = c.GetStr("2");
                                        $step = 4;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $taskResult1 = $taskResult3;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("2", result);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression3: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = true;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task2 = c.GetStr("1");
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $taskResult1 = $taskResult2;
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $taskResult1 = c.ShouldNotBeInvoked(System.String, "2");
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("1", result);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression4: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = true;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task2 = c.GetStr("1");
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $taskResult1 = $taskResult2;
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task3 = c.ShouldNotBeInvokedAsync(System.String, "2");
                                        $step = 4;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $taskResult1 = $taskResult3;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("1", result);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression5: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = false;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $taskResult1 = c.ShouldNotBeInvoked(System.String, "1");
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = c.GetStr("3");
                                        $step = 3;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $task3 = c.GetStr("2", $taskResult2);
                                        $step = 4;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $taskResult1 = $taskResult3;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("3", result);
                                        Bridge.Test.NUnit.Assert.AreEqual("32", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression6: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = false;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $taskResult1 = c.ShouldNotBeInvoked(System.String, "1");
                                        $step = 6;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = c.GetStr("4");
                                        $step = 3;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $task3 = c.GetStr("3", $taskResult2);
                                        $step = 4;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $task4 = c.GetStr("2", $taskResult3);
                                        $step = 5;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult1 = $taskResult4;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("4", result);
                                        Bridge.Test.NUnit.Assert.AreEqual("432", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression7: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = true;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 5;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task2 = c.GetStr("4");
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $task3 = c.GetStr("3", $taskResult2);
                                        $step = 3;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $task4 = c.GetStr("2", $taskResult3);
                                        $step = 4;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult1 = $taskResult4;
                                        $step = 6;
                                        continue;
                                    }
                                    case 5: {
                                        $taskResult1 = c.ShouldNotBeInvoked(System.String, "1");
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("4", result);
                                        Bridge.Test.NUnit.Assert.AreEqual("432", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression8: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $taskResult2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = false;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 2;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $taskResult1 = c.ShouldNotBeInvoked(System.String, "1");
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        if (condition) {
                                            $step = 3;
                                            continue;
                                        }  else {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 3: {
                                        $taskResult2 = c.ShouldNotBeInvoked(System.String, "3_1");
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task3 = c.GetStr("3_2");
                                        $step = 5;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $taskResult2 = $taskResult3;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        $task4 = c.GetStr("3", $taskResult2);
                                        $step = 7;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $task5 = c.GetStr("2", $taskResult4);
                                        $step = 8;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult1 = $taskResult5;
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("3_2", result);
                                        Bridge.Test.NUnit.Assert.AreEqual("3_232", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression9: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        condition, 
                        result, 
                        $taskResult1, 
                        $taskResult2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();
                                        condition = true;

                                        if (condition) {
                                            $step = 1;
                                            continue;
                                        }  else {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        if (!condition) {
                                            $step = 2;
                                            continue;
                                        }  else {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $taskResult2 = c.ShouldNotBeInvoked(System.String, "1");
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task3 = c.GetStr("2");
                                        $step = 4;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $taskResult2 = $taskResult3;
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $taskResult1 = ($taskResult2);
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task4 = c.ShouldNotBeInvokedAsync(System.String, "3");
                                        $step = 7;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult1 = $taskResult4;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("2", result);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncConditionalExpression10: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task2 = c.GetBool("1", true);
                                        $step = 1;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        if ($taskResult2) {
                                            $step = 2;
                                            continue;
                                        }  else {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $task3 = c.GetStr("2");
                                        $step = 3;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $taskResult1 = $taskResult3;
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task4 = c.ShouldNotBeInvokedAsync(System.String, "3");
                                        $step = 5;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult1 = $taskResult4;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("2", result);
                                        Bridge.Test.NUnit.Assert.AreEqual("12", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression1: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $task6, 
                        $taskResult6, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult1, 
                        $taskResult2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task3 = c.GetBool("1", true);
                                        $step = 1;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if ($taskResult3) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult1 = false;
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        $task4 = c.GetBool("2", true);
                                        $step = 3;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        if ($taskResult4) {
                                            $step = 4;
                                            continue;
                                        }  else {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 4: {
                                        $task5 = c.GetBool("3", true);
                                        $step = 5;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult2 = $taskResult5;
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task6 = c.ShouldNotBeInvokedAsync(System.Boolean, "4");
                                        $step = 7;
                                        if ($task6.isCompleted()) continue;
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        $taskResult2 = $taskResult6;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $taskResult1 = ($taskResult2);
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("123", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression2: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult2, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task3 = c.GetBool("1", true);
                                        $step = 1;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if ($taskResult3) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult2 = false;
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task4 = c.GetBool("2", true);
                                        $step = 3;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult2 = $taskResult4;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ($taskResult2) {
                                            $step = 5;
                                            continue;
                                        }
                                        $taskResult1 = false;
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task5 = c.GetBool("3", true);
                                        $step = 6;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult1 = $taskResult5;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("123", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression3: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult2, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task3 = c.GetBool("1", true);
                                        $step = 1;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if ($taskResult3) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult2 = false;
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task4 = c.GetBool("2", false);
                                        $step = 3;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult2 = $taskResult4;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ($taskResult2) {
                                            $step = 5;
                                            continue;
                                        }
                                        $taskResult1 = false;
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task5 = c.GetBool("3", true);
                                        $step = 6;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult1 = $taskResult5;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.False(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("12", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression4: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $task6, 
                        $taskResult6, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult3, 
                        $taskResult2, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        if (true) {
                                            $step = 1;
                                            continue;
                                        }
                                        $taskResult3 = false;
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task4 = c.GetBool("1", true);
                                        $step = 2;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult3 = $taskResult4;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($taskResult3) {
                                            $step = 4;
                                            continue;
                                        }
                                        $taskResult2 = false;
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task5 = c.GetBool("2", true);
                                        $step = 5;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult2 = $taskResult5;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if ($taskResult2) {
                                            $step = 7;
                                            continue;
                                        }
                                        $taskResult1 = false;
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $task6 = c.GetBool("3", true);
                                        $step = 8;
                                        if ($task6.isCompleted()) continue;
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        $taskResult1 = $taskResult6;
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("123", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression5: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $task6, 
                        $taskResult6, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult1, 
                        $taskResult2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task3 = c.GetBool("1", false);
                                        $step = 1;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if (!$taskResult3) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult1 = true;
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        $task4 = c.GetBool("2", true);
                                        $step = 3;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        if ($taskResult4) {
                                            $step = 4;
                                            continue;
                                        }  else {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 4: {
                                        $task5 = c.GetBool("3", true);
                                        $step = 5;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult2 = $taskResult5;
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task6 = c.ShouldNotBeInvokedAsync(System.Boolean, "4");
                                        $step = 7;
                                        if ($task6.isCompleted()) continue;
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        $taskResult2 = $taskResult6;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $taskResult1 = ($taskResult2);
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("123", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression6: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult2, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task3 = c.GetBool("1", false);
                                        $step = 1;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if (!$taskResult3) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult2 = true;
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task4 = c.GetBool("2", false);
                                        $step = 3;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult2 = $taskResult4;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (!$taskResult2) {
                                            $step = 5;
                                            continue;
                                        }
                                        $taskResult1 = true;
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task5 = c.GetBool("3", true);
                                        $step = 6;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult1 = $taskResult5;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("123", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression7: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult2, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task3 = c.GetBool("1", true);
                                        $step = 1;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if (!$taskResult3) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult2 = true;
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task4 = c.GetBool("2", false);
                                        $step = 3;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult2 = $taskResult4;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (!$taskResult2) {
                                            $step = 5;
                                            continue;
                                        }
                                        $taskResult1 = true;
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task5 = c.GetBool("3", true);
                                        $step = 6;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult1 = $taskResult5;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("1", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression8: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $task6, 
                        $taskResult6, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult3, 
                        $taskResult2, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        if (!false) {
                                            $step = 1;
                                            continue;
                                        }
                                        $taskResult3 = true;
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task4 = c.GetBool("1", false);
                                        $step = 2;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult3 = $taskResult4;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if (!$taskResult3) {
                                            $step = 4;
                                            continue;
                                        }
                                        $taskResult2 = true;
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task5 = c.GetBool("2", false);
                                        $step = 5;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult2 = $taskResult5;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if (!$taskResult2) {
                                            $step = 7;
                                            continue;
                                        }
                                        $taskResult1 = true;
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $task6 = c.GetBool("3", false);
                                        $step = 8;
                                        if ($task6.isCompleted()) continue;
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        $taskResult1 = $taskResult6;
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.False(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("123", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression9: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult2, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task3 = c.GetBool("1", true);
                                        $step = 1;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if ($taskResult3) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult2 = false;
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task4 = c.GetBool("2", false);
                                        $step = 3;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult2 = $taskResult4;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (!$taskResult2) {
                                            $step = 5;
                                            continue;
                                        }
                                        $taskResult1 = true;
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task5 = c.GetBool("3", true);
                                        $step = 6;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult1 = $taskResult5;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("123", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncBinaryExpression10: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $taskResult3, 
                        $task4, 
                        $taskResult4, 
                        $task5, 
                        $taskResult5, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        result, 
                        $taskResult2, 
                        $taskResult1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2689();

                                        $task3 = c.GetBool("1", true);
                                        $step = 1;
                                        if ($task3.isCompleted()) continue;
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        if ($taskResult3) {
                                            $step = 2;
                                            continue;
                                        }
                                        $taskResult2 = false;
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task4 = c.GetBool("2", true);
                                        $step = 3;
                                        if ($task4.isCompleted()) continue;
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $taskResult2 = $taskResult4;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (!$taskResult2) {
                                            $step = 5;
                                            continue;
                                        }
                                        $taskResult1 = true;
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task5 = c.GetBool("3", false);
                                        $step = 6;
                                        if ($task5.isCompleted()) continue;
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $taskResult1 = $taskResult5;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        result = $taskResult1;
                                        Bridge.Test.NUnit.Assert.True(result);
                                        Bridge.Test.NUnit.Assert.AreEqual("12", c.tracker.toString());

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        },
        fields: {
            tracker: null
        },
        ctors: {
            init: function () {
                this.tracker = new System.Text.StringBuilder();
            }
        },
        methods: {
            GetStr: function (tag, arg) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (arg === void 0) { arg = null; }
                                        this.tracker.append(tag);
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(($t = arg, $t != null ? $t : tag));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ShouldNotBeInvokedAsync: function (T, tag) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        throw new System.InvalidOperationException.$ctor1(tag);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ShouldNotBeInvoked: function (T, tag) {
                throw new System.InvalidOperationException.$ctor1(tag);
            },
            GetBool: function (tag, result) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.tracker.append(tag);
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(result);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2692", {
        statics: {
            methods: {
                TestUnusedGotoLabel: function () {
                    var value = 7;
                    Bridge.Test.NUnit.Assert.AreEqual(7, value);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2693", {
        statics: {
            methods: {
                TestListCapacity: function () {
                    var parts = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                    Bridge.Test.NUnit.Assert.AreEqual(0, parts.Capacity);

                    parts.add(1);
                    parts.add(2);
                    parts.add(3);
                    parts.add(4);
                    parts.add(5);

                    Bridge.Test.NUnit.Assert.AreEqual(8, parts.Capacity);
                    Bridge.Test.NUnit.Assert.AreEqual(5, parts.Count);

                    parts.TrimExcess();
                    Bridge.Test.NUnit.Assert.AreEqual(5, parts.Capacity);
                    Bridge.Test.NUnit.Assert.AreEqual(5, parts.Count);

                    parts.clear();
                    Bridge.Test.NUnit.Assert.AreEqual(5, parts.Capacity);
                    Bridge.Test.NUnit.Assert.AreEqual(0, parts.Count);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2703", {
        statics: {
            methods: {
                TestDoubleGetHashCode: function () {
                    var d = 0.0;

                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Double.getHashCode(d));
                    var o1 = Bridge.box(System.Double.getHashCode(d), System.Int32);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o1, System.Int32));

                    var v1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2703.Vector1(0, 0);
                    var v2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2703.Vector1(1, 2);

                    Bridge.Test.NUnit.Assert.AreEqual(0, v1.getHashCode());
                    Bridge.Test.NUnit.Assert.AreEqual(v2.getHashCode(), v2.getHashCode());
                    Bridge.Test.NUnit.Assert.AreNotEqual(0, v2.getHashCode());
                    var o2 = Bridge.box(v2.getHashCode(), System.Int32);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o2, System.Int32));
                },
                TestSingleGetHashCode: function () {
                    var d = 0.0;

                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Single.getHashCode(d));
                    var o1 = Bridge.box(System.Single.getHashCode(d), System.Int32);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o1, System.Int32));

                    var v1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2703.Vector2(0.0, 0.0);
                    var v2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2703.Vector2(1.0, 2.0);

                    Bridge.Test.NUnit.Assert.AreEqual(0, v1.getHashCode());
                    Bridge.Test.NUnit.Assert.AreEqual(v2.getHashCode(), v2.getHashCode());
                    Bridge.Test.NUnit.Assert.AreNotEqual(0, v2.getHashCode());
                    var o2 = Bridge.box(v2.getHashCode(), System.Int32);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o2, System.Int32));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2703.Vector1", {
        $kind: "nested class",
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        },
        methods: {
            getHashCode: function () {
                return ((System.Double.getHashCode(this.X) + System.Double.getHashCode(this.Y)) | 0);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2703.Vector2", {
        $kind: "nested class",
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        },
        methods: {
            getHashCode: function () {
                return ((System.Single.getHashCode(this.X) + System.Single.getHashCode(this.Y)) | 0);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2705", {
        statics: {
            methods: {
                TestCatchWithoutVariable: function () {
                    var a = null;
                    for (var i = 0; i < 1; i = (i + 1) | 0) {
                        try {
                            throw new System.Exception();
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            var i1 = { v : 2 };

                            a = (function ($me, i1) {
                                return function () {
                                    Bridge.Test.NUnit.Assert.AreEqual(2, i1.v);
                                    Bridge.Test.NUnit.Assert.AreEqual(1, i);
                                };
                            })(this, i1);
                        }
                    }

                    Bridge.Test.NUnit.Assert.NotNull(a);
                    a();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2712", {
        statics: {
            methods: {
                TestLambda: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2712();
                    c.Test();
                }
            }
        },
        methods: {
            GetStr: function () {
                return "2712";
            },
            Test: function () {
                for (var i = 0; i < 1; i = (i + 1) | 0) {
                    var idx = { v : i };
                    var str = { v : null };
                    var a = (function ($me, idx, str) {
                        return Bridge.fn.bind($me, function () {
                            var idx2 = idx.v;
                            str.v = this.GetStr();
                            idx.v = 5;
                        });
                    })(this, idx, str);
                    a();
                    Bridge.Test.NUnit.Assert.AreEqual(5, idx.v);
                    Bridge.Test.NUnit.Assert.AreEqual("2712", str.v);

                    var a1 = (function ($me, idx) {
                        return function () {
                            var idx2 = idx.v;
                            idx.v = 6;
                        };
                    })(this, idx);
                    a1();
                    Bridge.Test.NUnit.Assert.AreEqual(6, idx.v);

                    var f1 = Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2712.f1);
                    Bridge.Test.NUnit.Assert.AreEqual("2712", f1());
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2712", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2712, {
        f1: function () {
            return this.GetStr();
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.bridge2713", {
        statics: {
            methods: {
                TestConventionForNestedClass: function () {
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(bridge2713.bridge2713_Startup1));
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(bridge2713.bridge2713_Startup1.next));
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(bridge2713.bridge2713_Startup2));

                    Bridge.Test.NUnit.Assert.AreEqual(1, bridge2713.bridge2713_Startup1.next.Test());
                    Bridge.Test.NUnit.Assert.AreEqual(2, bridge2713.bridge2713_Startup2.Test());
                }
            }
        }
    });

    Bridge.define("bridge2713.bridge2713_Startup1", {
        $kind: "nested class"
    });

    Bridge.define("bridge2713.bridge2713_Startup1.next", {
        $kind: "nested class",
        statics: {
            methods: {
                Test: function () {
                    return 1;
                }
            }
        }
    });

    Bridge.define("bridge2713.bridge2713_Startup2", {
        $kind: "nested class",
        statics: {
            methods: {
                Test: function () {
                    return 2;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2716", {
        statics: {
            methods: {
                Test: function (value) {
                    return value;
                },
                TestDelegateWithOptionalParameter: function () {
                    var callback = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2716.f1;
                    Bridge.Test.NUnit.Assert.AreEqual(123, callback(123));
                    Bridge.Test.NUnit.Assert.AreEqual(7, callback(7));

                    callback = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2716.Test;
                    Bridge.Test.NUnit.Assert.AreEqual(123, callback(123));
                    Bridge.Test.NUnit.Assert.AreEqual(8, callback(8));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2716", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2716, {
        f1: function (context) {
            var test = context;
            return test;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge272", {
        statics: {
            methods: {
                Test: function (i) {
                    return i;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge272.MyEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                Abc: 1,
                Def: 2,
                Ghi: 3
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2720", {
        statics: {
            methods: {
                TestLong: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(System.Int64(1));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestDecimal: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(System.Decimal(5.1, 1));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestAsyncAssignmentForLong: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        longResult, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        longResult = System.Int64(0);
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2720.TestLong();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        longResult = $taskResult1;

                                        Bridge.Test.NUnit.Assert.True(longResult.equals(System.Int64(1)));
                                        Bridge.Test.NUnit.Assert.AreEqual("1", Bridge.toString(longResult));
                                        Bridge.Test.NUnit.Assert.AreEqual("System.Int64", Bridge.Reflection.getTypeFullName(System.Int64));

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestAsyncAssignmentForDecimal: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        decimalResult, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        decimalResult = System.Decimal(0);
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2720.TestDecimal();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        decimalResult = $taskResult1;

                                        Bridge.Test.NUnit.Assert.True(decimalResult.equalsT(System.Decimal(5.1, 1)));
                                        Bridge.Test.NUnit.Assert.AreEqual("5.1", decimalResult.toString());
                                        Bridge.Test.NUnit.Assert.AreEqual("System.Decimal", Bridge.Reflection.getTypeFullName(System.Decimal));

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2722", {
        statics: {
            methods: {
                TestEnumParsing: function () {
                    var section = null;

                    var mode = { v : new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2722.Mode() };
                    if (System.Enum.tryParse(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2722.Mode, section, mode, true) === false) {
                        mode.v = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2722.Mode.A;
                    }

                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2722.Mode.A === mode.v);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2722.Mode", {
        $kind: "nested enum",
        statics: {
            fields: {
                None: 0,
                A: 1,
                B: 2,
                C: 3
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2723", {
        statics: {
            methods: {
                TestAmbigiousSymbols: function () {
                    var problem = new Derived2723.Problem2723();
                    problem.Test();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2735", {
        statics: {
            methods: {
                TestExternalInheritanceWithoutCtor: function () {
                    var employee = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2735.Employee.Create("John Doe", 100);

                    Bridge.Test.NUnit.Assert.AreEqual("John Doe", employee.Name);
                    Bridge.Test.NUnit.Assert.AreEqual(100, employee.Salary);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2735.Employee", {
        inherits: [Person2735],
        $kind: "nested class",
        statics: {
            methods: {
                Create: function (name, salary) {
                    var employee = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2735.Employee();
                    employee.Name = name;
                    employee.Salary = salary;
                    return employee;
                }
            }
        },
        fields: {
            Salary: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2738", {
        statics: {
            methods: {
                TestAmbigiousSymbols: function () {
                    var $t;
                    var testDataDates = System.Array.init([System.Array.init([Bridge.box(System.DateTime.create(2017, 1, 1), System.DateTime, System.DateTime.format), Bridge.box(System.DateTime.create(2018, 1, 1), System.DateTime, System.DateTime.format)], System.Object)], System.Array.type(System.Object));

                    var method = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2738, 8, 284, "LogDates");

                    $t = Bridge.getEnumerator(testDataDates, System.Array.type(System.Object));
                    try {
                        while ($t.moveNext()) {
                            var dates = $t.Current;
                            Bridge.Reflection.midel(method, null).apply(null, Bridge.unbox(dates));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                LogDates: function (a, b) {
                    Bridge.Test.NUnit.Assert.AreEqual(2017, System.DateTime.getYear(a));
                    Bridge.Test.NUnit.Assert.AreEqual(2018, System.DateTime.getYear(b));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2745", {
        statics: {
            methods: {
                TestFieldInitialization: function () {
                    var hoho = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2745.Hoho();
                    Bridge.Test.NUnit.Assert.AreEqual("hoho", hoho.AsdInstance.Test1);
                    Bridge.Test.NUnit.Assert.AreEqual("haha", hoho.AsdInstance.Test2);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2745.Asd", {
        $kind: "nested class",
        fields: {
            Test1: null
        },
        props: {
            Test2: null
        },
        ctors: {
            $ctor1: function (forTest2) {
                this.$initialize();
                this.Test2 = forTest2;
            },
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2745.Hoho", {
        $kind: "nested class",
        fields: {
            AsdInstance: null
        },
        props: {
            Property: null
        },
        ctors: {
            init: function () {
                var $t;
                this.AsdInstance = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2745.Asd.$ctor1("haha"), $t.Test1 = "hoho", $t);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2749", {
        statics: {
            methods: {
                TestExtensionMethodBoxing: function () {
                    var val1 = System.DateTime.create$2(System.Int64([629669888,148154497]));
                    var val2 = (val1);
                    var offset = Bridge.box(val2.getTimezoneOffset(), System.Int32);

                    Bridge.Test.NUnit.Assert.True(Bridge.is(offset, System.Int32));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2759", {
        statics: {
            methods: {
                TestOrder: function () {
                    var a = new Test2759.Test2.Test3.A();
                    Bridge.Test.NUnit.Assert.NotNull(a);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2763", {
        statics: {
            methods: {
                TestAsyncArgument: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        list, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2763.GetList();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        list = $taskResult1;
                                        Bridge.Test.NUnit.Assert.NotNull(list);
                                        Bridge.Test.NUnit.Assert.AreEqual(1, list.Count);
                                        Bridge.Test.NUnit.Assert.True(Bridge.is(list.getItem(0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2763));
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                GetList: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2763.f1(new (System.Collections.Generic.List$1(System.Object)).ctor());
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult($taskResult1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                A: function () {
                    var $step = 0,
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0], $step);
                                    switch ($step) {
                                        case 0: {
                                            $tcs.setResult(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2763());
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2763", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2763, {
        f1: function (_o1) {
        var $step = 0,
            $task1, 
            $taskResult1, 
            $jumpFromFinally, 
            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
            $returnValue, 
            $async_e, 
            $asyncBody = Bridge.fn.bind(this, function () {
                try {
                    for (;;) {
                        $step = System.Array.min([0,1], $step);
                        switch ($step) {
                            case 0: {
                                $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2763.A();
                                $step = 1;
                                if ($task1.isCompleted()) continue;
                                $task1.continue($asyncBody);
                                return;
                            }
                            case 1: {
                                $taskResult1 = $task1.getAwaitedResult();
                                _o1.add($taskResult1);
                                $tcs.setResult(_o1);
                                return;
                            }
                            default: {
                                $tcs.setResult(null);
                                return;
                            }
                        }
                    }
                } catch($async_e1) {
                    $async_e = System.Exception.create($async_e1);
                    $tcs.setException($async_e);
                }
            }, arguments);

        $asyncBody();
        return $tcs.task;
    }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2764", {
        statics: {
            methods: {
                TestNonGenericClassName: function () {
                    var Bridge2764Generic = function () {};
                    var c = new Bridge2764Generic();
                    Bridge.Test.NUnit.Assert.NotNull(c);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge277", {
        $kind: "enum",
        statics: {
            fields: {
                Int: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2770", {
        statics: {
            methods: {
                TestExternalMethodName: function () {
                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2770.Person();
                    Bridge.Test.NUnit.Assert.AreEqual("test", p.Foo("test"));
                    Bridge.Test.NUnit.Assert.AreEqual("Empty", p.Foo());
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(p.Foo$1));
                },
                TestExternalMethodOverload: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2770.SubClass();
                    Bridge.Test.NUnit.Assert.AreEqual("test", c.toString$1("test"));
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.toString(c));
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(c.toString$1));
                },
                TestExternalClass: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2770.ExternalClass = function() {
                        this.Foo = function(s) {
                            if (s == null) {
                                return "Empty";
                            }
                            return s.toString();
                        }
                    };

                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2770.ExternalClass();

                    Bridge.Test.NUnit.Assert.AreEqual("test", c.Foo("test"));
                    Bridge.Test.NUnit.Assert.AreEqual("true", c.Foo(true));
                    Bridge.Test.NUnit.Assert.AreEqual("Empty", c.Foo());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2770.Person", {
        $kind: "nested class",
        methods: {
            Foo: function (msg) {
                var $t;
                return ($t = msg, $t != null ? $t : "Empty");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2770.SubClass", {
        $kind: "nested class",
        methods: {
            toString$1: function (s) {
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2792", {
        statics: {
            methods: {
                TestOverridenReadOnlyProperty: function () {
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2792.B();
                    Bridge.Test.NUnit.Assert.AreEqual("Pass", b.Name);
                    Bridge.Test.NUnit.Assert.AreEqual("Fail", b.BaseName);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2792.A", {
        $kind: "nested class",
        props: {
            Name: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ensureBaseProperty(this, "Name").$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2792$A$Name = "Fail";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2793", {
        statics: {
            methods: {
                TestAsyncBlockStatement: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        done, 
                        $t, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $t = "a";
                                        if ($t === "a") {
                                            $step = 1;
                                            continue;
                                        }
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 2;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.True(true);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2794", {
        statics: {
            methods: {
                DoSomething: function (o) {
                    return o;
                },
                dosomething: function (o) {
                    return Bridge.box(77, System.Int32);
                },
                TestTemplateTokens: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("test", Bridge.unbox(this.DoSomething("test")));
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2794.DoSomething(5)));
                    Bridge.Test.NUnit.Assert.AreEqual(77, Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2794.dosomething()));
                },
                TestNameTokens: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2794();
                    Bridge.Test.NUnit.Assert.AreEqual(1, c.M_1(1));
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(c.M_1)());

                    Bridge.Test.NUnit.Assert.AreEqual(2, c.M_2(""));
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(c.M_2)());

                    Bridge.Test.NUnit.Assert.AreEqual(3, c.m_3(true));
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.unbox(c.m_3)());
                }
            }
        },
        methods: {
            M_1: function (i) {
                return 1;
            },
            M_2: function (s) {
                return 2;
            },
            m_3: function (b) {
                return 3;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795", {
        statics: {
            methods: {
                TestVirtualClass: function () {
                    var s = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Student();
                    Bridge.Test.NUnit.Assert.True(Bridge.is(s, Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Person")), "Student is Person");

                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Professor();
                    Bridge.Test.NUnit.Assert.True(Bridge.is(p, Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Person")), "Professor is Person");

                    var w = new (Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Wizard"))();
                    Bridge.Test.NUnit.Assert.True(Bridge.is(w, Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Wizard")), "Wizard is Person");
                    //Assert.True(w is Person, "Wizard is Person");
                    //Assert.True(w is Professor, "Wizard is Professor");
                },
                TestVirtualInterface: function () {
                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Postgraduate();
                    Bridge.Test.NUnit.Assert.True(Bridge.is(p, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.IStudent), "Postgraduate is IStudent");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(p, Bridge.virtual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.IPerson")), "Postgraduate is IPerson");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.IStudent", {
        inherits: [Bridge.virtual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.IPerson")],
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Student", {
        inherits: [Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Person")],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2802", {
        statics: {
            methods: {
                TestLocalesWithoutAmPm: function () {
                    var culture = new System.Globalization.CultureInfo("nb-NO");
                    culture.dateTimeFormat.timeSeparator = ".";
                    var testValue = { };
                    if (System.DateTime.tryParseExact("13.00", System.String.format("H{0}mm", [culture.dateTimeFormat.timeSeparator]), culture, testValue)) {
                        var now = System.DateTime.getNow();
                        Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getYear(now), System.DateTime.getYear(testValue.v));
                        Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getMonth(now), System.DateTime.getMonth(testValue.v));
                        Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getDay(now), System.DateTime.getDay(testValue.v));
                        Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(testValue.v));
                        Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getMinute(testValue.v));
                    } else {
                        Bridge.Test.NUnit.Assert.Fail("Date is not parsed correctly");
                    }

                    culture = new System.Globalization.CultureInfo("ru-RU");
                    culture.dateTimeFormat.timeSeparator = ".";
                    if (System.DateTime.tryParseExact("13.00", System.String.format("H{0}mm", [culture.dateTimeFormat.timeSeparator]), culture, testValue)) {
                        var now1 = System.DateTime.getNow();
                        Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getYear(now1), System.DateTime.getYear(testValue.v));
                        Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getMonth(now1), System.DateTime.getMonth(testValue.v));
                        Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getDay(now1), System.DateTime.getDay(testValue.v));
                        Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(testValue.v));
                        Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getMinute(testValue.v));
                    } else {
                        Bridge.Test.NUnit.Assert.Fail("Date is not parsed correctly");
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(System.DateTime.parse("13:00", new System.Globalization.CultureInfo("en-GB"))));
                    Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(System.DateTime.parse("13:00", new System.Globalization.CultureInfo("nb-NO"))));
                    Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(System.DateTime.parse("13:00", new System.Globalization.CultureInfo("ru-RU"))));
                    Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(System.DateTime.parse("13:00", new System.Globalization.CultureInfo("es-ES"))));
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.DateTime.getHour(System.DateTime.parse("01:00", new System.Globalization.CultureInfo("nb-NO"))));
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.DateTime.getHour(System.DateTime.parse("01:00", new System.Globalization.CultureInfo("ru-RU"))));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818", {
        statics: {
            methods: {
                MyStructToString: function (s) {
                    return s.Value;
                },
                MyStructGetHashCode: function (s) {
                    return 143;
                },
                TestMethod: function (i) {
                    return i;
                },
                TestFnProperty: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("abc", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.MyStructToString(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.MyStruct.$ctor1("abc")));
                    Bridge.Test.NUnit.Assert.AreEqual(143, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.MyStructGetHashCode(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.MyStruct.$ctor1("abc")));

                    var o = Bridge.box(1.0, System.Double, System.Double.format, System.Double.getHashCode);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Double.getHashCode((1.0)), Bridge.getHashCode(o));

                    Bridge.Test.NUnit.Assert.AreEqual(10, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.TestMethod(10));

                    var func = function (i) { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.TestMethod(i); };
                    Bridge.Test.NUnit.Assert.AreEqual(10, func(10));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.MyStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.MyStruct(); }
            }
        },
        props: {
            Value: null
        },
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3904302783, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.MyStruct)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2818.MyStruct();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840", {
        statics: {
            methods: {
                TestScope: function () {
                    var x = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840.ApiCaller(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840.NullSerialiser());
                    Bridge.Test.NUnit.Assert.AreEqual("_abc", x.Test("abc"));
                    Bridge.Test.NUnit.Assert.AreEqual("_abc2", x.Test2("abc2"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840.ApiCaller", {
        $kind: "nested class",
        statics: {
            methods: {
                Something: function (data, serialiser) {
                    return serialiser(data);
                }
            }
        },
        fields: {
            _serialiser: null
        },
        ctors: {
            ctor: function (serialiser) {
                this.$initialize();
                this._serialiser = serialiser;
            }
        },
        methods: {
            Test: function (data) {
                return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840.ApiCaller.Something(data, Bridge.fn.bind(this, function (value) { return this._serialiser.Bridge$ClientTest$Batch3$BridgeIssues$Bridge2840$ISerialiseToAndFromJson$Serialise(System.Object, value); }));
            },
            Test2: function (data) {
                return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840.ApiCaller.Something(data, Bridge.fn.bind(this, function (value) { return this.Serialise(System.Object, value); }));
            },
            Serialise: function (T, value) {
                return System.String.concat("_", value);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840.ISerialiseToAndFromJson", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2844", {
        statics: {
            methods: {
                TestPropertyInitialization: function () {
                    var $t;
                    var chartControl = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2844.ChartControl(), $t.Properties = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2844.ChartProperties(), $t);
                    Bridge.Test.NUnit.Assert.NotNull(chartControl.Properties);
                    Bridge.Test.NUnit.Assert.NotNull(chartControl.Properties.Font);
                    Bridge.Test.NUnit.Assert.AreEqual("Arial", chartControl.Properties.Font.FontFamily);
                    Bridge.Test.NUnit.Assert.AreEqual(14, chartControl.Properties.Font.Height);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2844.ChartControl", {
        $kind: "nested class",
        props: {
            Properties: null
        },
        ctors: {
            init: function () {
                this.Properties = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2844.ChartProperties();
            },
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2844.ChartProperties", {
        $kind: "nested class",
        props: {
            Font: null,
            HalfYAxisLabelHeight: {
                get: function () {
                    return Bridge.Int.clip32(Math.ceil(1.2 * this.Font.Height / 2));
                }
            }
        },
        ctors: {
            init: function () {
                var $t;
                this.Font = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2844.Font(), $t.FontFamily = "Arial", $t.Height = 14, $t);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2844.Font", {
        $kind: "nested class",
        props: {
            FontFamily: null,
            Height: 0
        },
        ctors: {
            init: function () {
                this.FontFamily = "Arial";
                this.Height = 12;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2847", {
        statics: {
            methods: {
                Test1: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $t, 
                        a, 
                        $t1, 
                        a1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                    switch ($step) {
                                        case 0: {
                                            $t = 1;
                                            if ($t === 1) {
                                                $step = 1;
                                                continue;
                                            }
                                            $step = 3;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            $t1 = 1;
                                            if ($t1 === 1) {
                                                $step = 4;
                                                continue;
                                            }
                                            $step = 6;
                                            continue;
                                        }
                                        case 4: {
                                            $task2 = System.Threading.Tasks.Task.delay(1);
                                            $step = 5;
                                            if ($task2.isCompleted()) continue;
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 5: {
                                            $task2.getAwaitedResult();
                                            $step = 6;
                                            continue;
                                        }
                                        case 6: {
                                            $tcs.setResult(1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                Test2: function () {
                    switch (1) {
                        case 1: 
                            var a;
                            break;
                    }

                    switch (1) {
                        case 1: 
                            var a1;
                            break;
                    }

                    return 1;
                },
                TestCommonSwitch: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2847.Test2());
                },
                TestAsyncSwitch: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2847.Test1();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.AreEqual(1, $taskResult1);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855", {
        statics: {
            methods: {
                TestVirtualNestedClasses: function () {
                    var sub1 = new (Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass.Sub1"))();
                    var b = new (Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass"))();
                    var sub1_1 = new (Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass.Sub1"))();

                    Bridge.Test.NUnit.Assert.True(Bridge.is(b, Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass")));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(sub1, Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass.Sub1")));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(sub1, Bridge.virtual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass.I1")));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(sub1_1, Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass.Sub1")));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(sub1_1, Bridge.virtual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass.I1")));

                    var p = new (Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.Person"))();
                    Bridge.Test.NUnit.Assert.True(Bridge.is(p, Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.Person")));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(p, Bridge.virtual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.Person.IPerson")));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(p, Bridge.virtualc("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass")));
                    Bridge.Test.NUnit.Assert.False(Bridge.is(p, Bridge.virtual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2855.BaseClass.I1")));

                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2859", {
        statics: {
            methods: {
                TestContractAssertWithThis: function () {
                    new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2859.A().Works();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2859.A", {
        $kind: "nested class",
        props: {
            J: {
                get: function () {
                    return 3;
                }
            }
        },
        methods: {
            Works: function () {
                Bridge.Test.NUnit.Assert.Throws$2(System.Diagnostics.Contracts.ContractException, Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2859.A.f1));

                System.Diagnostics.Contracts.Contract.assert(4, this, function () { return this.J === 3; });
                Bridge.Test.NUnit.Assert.True(true);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2859.A", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2859.A, {
        f1: function () {
            System.Diagnostics.Contracts.Contract.assert(5, this, function () { return this.J === 4; });
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2863", {
        statics: {
            methods: {
                TestIndexChecking: function () {
                    var arr = System.Array.init([1, 2, 3], System.Int32);

                    var i = arr[10];
                    Bridge.Test.NUnit.Assert.Null(i);

                    Bridge.Test.NUnit.Assert.Null(arr[10]);

                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var i1 = arr[System.Array.index(10, arr)];
                    });

                    var p = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2863.C1()[1];
                    Bridge.Test.NUnit.Assert.Null(p);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2863.C1", {
        $kind: "nested class",
        props: {
            length: {
                get: function () {
                    throw new System.Exception("This should not happen.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871", {
        statics: {
            methods: {
                TestCloneOnAssignment: function () {
                    var $t, $t1;
                    var vector3s = System.Array.init(3, function (){
                        return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Vector3();
                    }, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Vector3);
                    var vec = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Vector3();
                    vector3s[System.Array.index(0, vector3s)] = (vector3s[System.Array.index(1, vector3s)] = vec.$clone(), vec.$clone());
                    vector3s[System.Array.index(0, vector3s)].x = 1;
                    Bridge.Test.NUnit.Assert.AreNotEqual(vector3s[System.Array.index(0, vector3s)].x, vector3s[System.Array.index(1, vector3s)].x);

                    var transform = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Transform();
                    vector3s[System.Array.index(0, vector3s)] = ($t = ($t1 = transform.localPosition.$clone(), vector3s[System.Array.index(2, vector3s)] = $t1.$clone(), $t1), vector3s[System.Array.index(1, vector3s)] = $t.$clone(), $t);
                    vector3s[System.Array.index(0, vector3s)].x = 1;
                    Bridge.Test.NUnit.Assert.AreNotEqual(vector3s[System.Array.index(0, vector3s)].x, vector3s[System.Array.index(1, vector3s)].x);
                    Bridge.Test.NUnit.Assert.AreNotEqual(vector3s[System.Array.index(0, vector3s)].x, vector3s[System.Array.index(2, vector3s)].x);

                    vector3s[System.Array.index(1, vector3s)].x = 2;
                    Bridge.Test.NUnit.Assert.AreNotEqual(vector3s[System.Array.index(1, vector3s)].x, vector3s[System.Array.index(2, vector3s)].x);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Transform", {
        $kind: "nested class",
        props: {
            localPosition: {
                get: function () {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Vector3();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Vector3", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Vector3(); }
            }
        },
        fields: {
            x: 0,
            y: 0,
            z: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1956042693, this.x, this.y, this.z]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Vector3)) {
                    return false;
                }
                return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y) && Bridge.equals(this.z, o.z);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2871.Vector3();
                s.x = this.x;
                s.y = this.y;
                s.z = this.z;
                return s;
            }
        }
    });

    /**
     * The tests here consist in checking whether chained assingment of
     variable values works.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge2872
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2872", {
        statics: {
            methods: {
                /**
                 * From several scenarios, using the string type, check if the
                 chained assingment results in the expected variable contents.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge2872
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge2872
                 * @return  {void}
                 */
                TestChainingAssignment: function () {
                    var a;
                    a = (a = "test");
                    Bridge.Test.NUnit.Assert.AreEqual(a, "test", "String chained assignment on same variable works.");

                    var s;
                    var s2;
                    s2 = (s = "test");
                    Bridge.Test.NUnit.Assert.AreEqual(s2, "test", "On more than one variable, works to the indirect variable.");
                    Bridge.Test.NUnit.Assert.AreEqual(s, "test", "On more than one variable, works to the direct variable."); /// Variable is declared but never used
                    var c;
                    var c3;
                    var c2;
                    c2 = (c = "test");
                    var c4; /// Variable is declared but never used
                    Bridge.Test.NUnit.Assert.AreEqual(c2, "test", "With unrelated variables, works on indirect variable.");
                    Bridge.Test.NUnit.Assert.AreEqual(c, "test", "With unrelated variables, works on direct variable.");

                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2872.f1, "Unrelated variable to the left is untouched.");
                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2872.f2, "Unrelated variable to the right is untouched.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2872", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2872, {
        f1: function () {
            var x = c3;
        },
        f2: function () {
            var x = c4;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874", {
        statics: {
            methods: {
                TestExternalOverriding: function () {
                    var d1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived1();
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d1.Foo$1), "Derived1 in group 1 should not have Foo$1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d1.Foo$2), "Derived1 in group 1 should not have Foo$2");
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(d1.Foo)(), "Derived1 in group 1 [Foo] should return 2");
                    Bridge.Test.NUnit.Assert.AreEqual(2, d1.Foo(), "Derived1 in group 1 Foo should return 2");
                    Bridge.Test.NUnit.Assert.AreEqual(2, d1.Foo(""), "Derived1 in group 1 Foo() should return 2");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.CheckBridge2874Base(d1, "2", 2);

                    var d11 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived11();
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d11.Foo$1), "Derived11 in group 3 should not have Foo$1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d11.Foo$2), "Derived11 in group 3 should not have Foo$2");
                    Bridge.Test.NUnit.Assert.AreEqual(11, Bridge.unbox(d11.Foo)(), "Derived11 in group 3 [Foo] should return 11");
                    Bridge.Test.NUnit.Assert.AreEqual(11, d11.Foo(), "Derived11 in group 3 Foo should return 11");
                    Bridge.Test.NUnit.Assert.AreEqual(11, d11.Foo(""), "Derived11 in group 3 Foo() should return 11");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.CheckBridge2874Base(d11, "4", 11);

                    var d12 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived12();
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d12.Foo$1), "Derived12 in group 5 should not have Foo$1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d12.Foo$2), "Derived12 in group 5 should not have Foo$2");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(d12.Foo)(), "Derived12 in group 5 [Foo] should return 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, d12.Foo(), "Derived12 in group 5 Foo should return 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, d12.Foo(""), "Derived12 in group 5 Foo() should return 1");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.CheckBridge2874Base(d12, "6", 1);

                    var d21 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived21();
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d21.Foo$1), "Derived21 in group 7 should not have Foo$1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d21.Foo$2), "Derived21 in group 7 should not have Foo$2");
                    Bridge.Test.NUnit.Assert.AreEqual(21, Bridge.unbox(d21.Foo)(), "Derived21 in group 7 [Foo] should return 21");
                    Bridge.Test.NUnit.Assert.AreEqual(21, d21.Foo(), "Derived21 in group 7 Foo should return 21");
                    Bridge.Test.NUnit.Assert.AreEqual(21, d21.Foo(""), "Derived21 in group 7 Foo() should return 21");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.CheckBridge2874Base(d21, "8", 21);

                    var d22 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived22();
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(d22.Foo$1), "Derived22 in group 9 should have Foo$1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d22.Foo$2), "Derived22 in group 9 should not have Foo$2");
                    Bridge.Test.NUnit.Assert.AreEqual(22, Bridge.unbox(d22.Foo$1)(), "Derived22 in group 9 [Foo$1] should return 22");
                    Bridge.Test.NUnit.Assert.AreEqual(22, d22.Foo$1(), "Derived22 in group 9 Foo should return 22");
                    Bridge.Test.NUnit.Assert.AreEqual(2, d22.Foo(""), "Derived22 in group 9 Foo() should return 2");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.CheckBridge2874Base(d22, "10", 2, false);

                    var d23 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived23();
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d23.Foo$1), "Derived23 in group 11 should not have Foo$1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d23.Foo$2), "Derived23 in group 11 should not have Foo$2");
                    Bridge.Test.NUnit.Assert.AreEqual(23, Bridge.unbox(d23.Foo)(), "Derived23 in group 11 [Foo] should return 23");
                    Bridge.Test.NUnit.Assert.AreEqual(23, d23.Foo(), "Derived23 in group 11 Foo should return 23");
                    Bridge.Test.NUnit.Assert.AreEqual(23, d23.Foo(""), "Derived23 in group 11 Foo() should return 23");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.CheckBridge2874Base(d23, "12", 23);

                    var d24 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived24();
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(d24.Foo$1), "Derived24 in group 13 should not have Foo$1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d24.Foo$2), "Derived24 in group 13 should not have Foo$2");
                    Bridge.Test.NUnit.Assert.AreEqual(24, Bridge.unbox(d24.Foo$1)(), "Derived24 in group 13 [Foo] should return 24");
                    Bridge.Test.NUnit.Assert.AreEqual(2, d24.Foo(), "Derived24 in group 13 Foo should return 2");
                    Bridge.Test.NUnit.Assert.AreEqual(24, d24.Foo$1(""), "Derived24 in group 13 Foo() should return 24");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.CheckBridge2874Base(d24, "14", 2, false);

                    var d25 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived25();
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d25.Foo$1), "Derived25 in group 15 should not have Foo$1");
                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d25.Foo$2), "Derived25 in group 15 should not have Foo$2");
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(d25.Foo)(), "Derived25 in group 15 [Foo] should return 2");
                    Bridge.Test.NUnit.Assert.AreEqual(2, d25.Foo(), "Derived25 in group 15 Foo should return 2");
                    Bridge.Test.NUnit.Assert.AreEqual(2, d25.Foo(""), "Derived25 in group 15 Foo() should return 2");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.CheckBridge2874Base(d25, "16", 2);
                },
                CheckBridge2874Base: function (d, n, expected, checkIndex) {
                    if (checkIndex === void 0) { checkIndex = true; }
                    if (checkIndex) {
                        Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d.Foo$1), "Bridge2874Base in group " + (n || "") + " should not have Foo$1");
                    } else {
                        Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(d.Foo$1), "Bridge2874Base in group " + (n || "") + " should have Foo$1");
                    }

                    Bridge.Test.NUnit.Assert.Null(Bridge.unbox(d.Foo$2), "Bridge2874Base in group " + (n || "") + " should not have Foo$2");

                    Bridge.Test.NUnit.Assert.AreEqual(expected, Bridge.unbox(d.Foo)(), "Bridge2874Base in group " + (n || "") + " [Foo] should return " + expected);
                    Bridge.Test.NUnit.Assert.AreEqual(expected, d.Foo(), "Bridge2874Base in group " + (n || "") + " Foo should return " + expected);
                    Bridge.Test.NUnit.Assert.AreEqual(expected, d.Foo(""), "Bridge2874Base in group " + (n || "") + " Foo() should return " + expected);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived1", {
        inherits: [Bridge2874Base],
        $kind: "nested class",
        methods: {
            Foo: function (msg) {
                return 2;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived11", {
        inherits: [Bridge2874Base],
        $kind: "nested class",
        methods: {
            Foo: function () {
                return 11;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived12", {
        inherits: [Bridge2874Base],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2886", {
        statics: {
            methods: {
                Test2DArrayDefValue: function () {
                    var $t, $t1, $t2, $t3, $t4, $t5;
                    $t = Bridge.getEnumerator(System.Array.create(0, null, System.Int32, 1, 1));
                    try {
                        while ($t.moveNext()) {
                            var value = $t.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(0, value, "Default int[,]");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    $t1 = Bridge.getEnumerator(System.Array.create(false, null, System.Boolean, 1, 1));
                    try {
                        while ($t1.moveNext()) {
                            var value1 = $t1.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(false, value1, "Default bool[,]");
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    $t2 = Bridge.getEnumerator(System.Array.create(System.Int64(0), null, System.Int64, 1, 1));
                    try {
                        while ($t2.moveNext()) {
                            var value2 = $t2.Current;
                            var o = value2;
                            Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.Int64), "Default long[,] is long");
                            Bridge.Test.NUnit.Assert.AreEqual(System.Int64(0), value2, "Default long[,] is 0L");
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    $t3 = Bridge.getEnumerator(System.Array.create(System.Decimal(0.0), null, System.Decimal, 1, 1));
                    try {
                        while ($t3.moveNext()) {
                            var value3 = $t3.Current;
                            var o1 = value3;
                            Bridge.Test.NUnit.Assert.True(Bridge.is(o1, System.Decimal), "Default decimal[,] is decimal");
                            Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(0.0), value3, "Default decimal[,] is 0m");
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                    $t4 = Bridge.getEnumerator(System.Array.create(function (){
                        return System.DateTime.getDefaultValue();
                    }, null, System.DateTime, 1, 1));
                    try {
                        while ($t4.moveNext()) {
                            var value4 = $t4.Current;
                            var o2 = Bridge.box(value4, System.DateTime, System.DateTime.format);
                            Bridge.Test.NUnit.Assert.True(Bridge.is(o2, System.DateTime), "Default DateTime[,] is DateTime");
                            Bridge.Test.NUnit.Assert.AreEqual(Bridge.getDefaultValue(System.DateTime), value4, "Default DateTime[,] is default(DateTime)");
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }

                    $t5 = Bridge.getEnumerator(System.Array.create(null, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2886.Class1, 1, 1));
                    try {
                        while ($t5.moveNext()) {
                            var value5 = $t5.Current;
                            var o3 = value5;
                            Bridge.Test.NUnit.Assert.AreEqual(null, value5, "Default Class1[,] is default(Class1)");
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2886.Class1", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898", {
        statics: {
            fields: {
                a: null,
                b: null
            },
            methods: {
                TestCreateDelegate: function () {
                    (Bridge.Reflection.createDelegate(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898, 8, 284, "Run"), null))(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.ctor(), "Hello", "World");
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.a, "Hello"));
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.b, "World"));

                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.$ctor1(5);
                    (Bridge.Reflection.createDelegate(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898, 8, 284, "Run1"), null))(c, "Hello1", "World1", 9);
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.a, "Hello1"));
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.b, "World1"));
                    Bridge.Test.NUnit.Assert.True(c.x === 9);
                }
            }
        },
        fields: {
            x: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();

            },
            $ctor1: function (_x) {
                this.$initialize();
                this.x = _x;
            }
        },
        methods: {
            Run: function (a, b) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.a = a;
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.b = b;
            },
            Run1: function (a, b, _x) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.a = a;
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898.b = b;
                this.x = _x;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2", {
        statics: {
            fields: {
                buffer: null
            },
            methods: {
                TestCreateDelegateReflection: function () {
                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.C(42);

                    var mi1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.C, 8, 20 | 256, "M1");
                    var mi2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.C, 8, 24 | 256, "M2");

                    var d1;
                    var d2;
                    var d3;

                    var test = Bridge.Reflection.createDelegate(mi1, c1);

                    Bridge.Test.NUnit.Assert.NotNull(test);

                    d2 = test;

                    d2("S1");
                    Bridge.Test.NUnit.Assert.AreEqual("M1,42,S1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer);

                    d2("S2");
                    Bridge.Test.NUnit.Assert.AreEqual("M1,42,S2", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer);

                    d1 = Bridge.Reflection.createDelegate(mi1, null);

                    d1(c1, "S3");
                    Bridge.Test.NUnit.Assert.AreEqual("M1,42,S3", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer);

                    d1(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.C(5280), "S4");
                    Bridge.Test.NUnit.Assert.AreEqual("M1,5280,S4", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer);

                    d2 = Bridge.Reflection.createDelegate(mi2, null);

                    d2("S5");
                    Bridge.Test.NUnit.Assert.AreEqual("M2,S5", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer);

                    d2("S6");
                    Bridge.Test.NUnit.Assert.AreEqual("M2,S6", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer);

                    d3 = Bridge.Reflection.createDelegate(mi2, "S7");
                    d3();
                    Bridge.Test.NUnit.Assert.AreEqual("M2,S7", Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.C", {
        $kind: "nested class",
        statics: {
            methods: {
                M2: function (s) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer = System.String.format("M2,{0}", [s]);
                }
            }
        },
        fields: {
            id: 0
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                this.id = id;
            }
        },
        methods: {
            M1: function (s) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.buffer = System.String.format("M1,{0},{1}", Bridge.box(this.id, System.Int32), s);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2899", {
        statics: {
            fields: {
                pass: 0
            },
            methods: {
                A: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2899.pass = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2899.pass | 1;
                },
                B: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2899.pass = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2899.pass | 2;
                },
                TestDelegateCombining: function () {
                    (Bridge.fn.combine(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2899.A, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2899.B))();
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2899.pass);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2901", {
        statics: {
            methods: {
                TestDelegateRemoving: function () {
                    var x = 5;
                    var a = function () {
                        Bridge.identity(x, ((x = (x - 1) | 0)));
                    };
                    var combo = (Bridge.fn.combine(a, a));
                    (Bridge.fn.remove(combo, a))();
                    Bridge.Test.NUnit.Assert.AreEqual(4, x);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2903", {
        statics: {
            methods: {
                TestGetInvocationList: function () {
                    var i = 0;
                    var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2903.Test();
                    test.addRegister(function (sender, args) {
                        i = (i + 1) | 0;
                    });
                    test.addRegister(function (sender, args) {
                        i = (i + 5) | 0;
                    });

                    test.OnRegister({ });
                    Bridge.Test.NUnit.Assert.AreEqual(6, i);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2903.Test", {
        $kind: "nested class",
        fields: {
            register: null
        },
        methods: {
            addRegister: function (value) {
                if (Bridge.staticEquals(this.register, null) || System.Array.contains(Bridge.fn.getInvocationList(this.register), value, Function) === false) {
                    this.register = Bridge.fn.combine(this.register, value);
                }
            },
            removeRegister: function (value) {
                this.register = Bridge.fn.remove(this.register, value);
            },
            OnRegister: function (args) {
                !Bridge.staticEquals(this.register, null) ? this.register(this, args) : null;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904", {
        statics: {
            fields: {
                temp: 0
            },
            methods: {
                Test_RegisterCommon: function (sender, e) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904.temp = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904.temp + 1) | 0;
                },
                TestGetInvocationList: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904.temp = 0;

                    var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904.Test();
                    test.addRegister(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904.Test_RegisterCommon);
                    test.addRegister(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904.Test_RegisterCommon);

                    test.OnRegister({ });
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904.temp);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2904.Test", {
        $kind: "nested class",
        fields: {
            register: null
        },
        methods: {
            addRegister: function (value) {
                if (Bridge.staticEquals(this.register, null) || System.Linq.Enumerable.from(Bridge.fn.getInvocationList(this.register), Function).any() === false) {
                    this.register = Bridge.fn.combine(this.register, value);
                }
            },
            removeRegister: function (value) {
                this.register = Bridge.fn.remove(this.register, value);
            },
            OnRegister: function (args) {
                !Bridge.staticEquals(this.register, null) ? this.register(this, args) : null;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2911", {
        statics: {
            methods: {
                TestGenericHtmlClass: function () {
                    var mouseEventList = new (System.Collections.Generic.List$1(MouseEvent)).ctor();
                    Bridge.Test.NUnit.Assert.NotNull(mouseEventList);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2915", {
        statics: {
            methods: {
                TestLocalesWithoutColonInTime: function () {
                    var culture = new System.Globalization.CultureInfo("en-GB");
                    Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(System.DateTime.parse("13:00", culture)));

                    culture.dateTimeFormat.timeSeparator = ".";
                    Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(System.DateTime.parse("13:00", culture)));

                    culture = new System.Globalization.CultureInfo("nb-NO");
                    Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(System.DateTime.parse("13:00", culture)));

                    culture.dateTimeFormat.timeSeparator = ".";
                    Bridge.Test.NUnit.Assert.AreEqual(13, System.DateTime.getHour(System.DateTime.parse("13:00", culture)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916", {
        statics: {
            methods: {
                Test: function (values) {
                    for (var i = 0; i < values.Count; i = (i + 1) | 0) {
                        values.getItem(i).$clone().Intersect(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.MyStruct.$ctor1(5, 20));
                    }
                },
                TestIndexerClone: function () {
                    var x = new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.MyStruct)).$ctor1(System.Array.init([new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.MyStruct.$ctor1(1, 10)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.MyStruct));
                    Bridge.Test.NUnit.Assert.AreEqual("1-10", x.getItem(0).$clone().toString());
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.Test(x);
                    Bridge.Test.NUnit.Assert.AreEqual("1-10", x.getItem(0).$clone().toString());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.MyStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.MyStruct(); }
            }
        },
        props: {
            X1: 0,
            X2: 0
        },
        ctors: {
            $ctor1: function (x1, x2) {
                this.$initialize();
                this.X1 = x1;
                this.X2 = x2;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Intersect: function (other) {
                var x1 = Math.max(this.X1, other.X1);
                var x2 = Math.min(this.X2, other.X2);
                this.X1 = x1;
                this.X2 = x2;
            },
            toString: function () {
                return this.X1 + "-" + this.X2;
            },
            getHashCode: function () {
                var h = Bridge.addHash([3904302783, this.X1, this.X2]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.MyStruct)) {
                    return false;
                }
                return Bridge.equals(this.X1, o.X1) && Bridge.equals(this.X2, o.X2);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2916.MyStruct();
                s.X1 = this.X1;
                s.X2 = this.X2;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2918", {
        statics: {
            fields: {
                instance: null
            },
            ctors: {
                init: function () {
                    this.instance = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2918();
                }
            },
            methods: {
                P: function () {
                    var $step = 0,
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0], $step);
                                    switch ($step) {
                                        case 0: {
                                            $tcs.setResult(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2918());
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestAsyncEquals: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2918.P();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.False(Bridge.referenceEquals(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2918(), $taskResult1));
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                GetInstance: function () {
                    var $step = 0,
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0], $step);
                                    switch ($step) {
                                        case 0: {
                                            $tcs.setResult(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2918.instance);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestAsyncEquals2: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2918.GetInstance();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2918.instance, $taskResult1));
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2923", {
        statics: {
            events: {
                Test: null
            },
            ctors: {
                init: function () {
                    Bridge.event(this, "Test", $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2923.f1);
                }
            },
            methods: {
                InvokeEvent: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2923.Test(null, { });
                },
                TestEventInitializer: function () {
                    var i = 0;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2923.addTest(function (sender, ev) {
                        i = 5;
                    });

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2923.InvokeEvent();

                    Bridge.Test.NUnit.Assert.AreEqual(5, i);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2923", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2923, {
        f1: function (sender, e) { }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2931", {
        statics: {
            methods: {
                _3: function () {
                    var $step = 0,
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0], $step);
                                    switch ($step) {
                                        case 0: {
                                            $tcs.setResult(3);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestAsyncVarInitializer: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        a, 
                        b, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        a = 3;
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2931._3();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        b = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual(3, b);
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2932", {
        statics: {
            methods: {
                TestEnumBaseType: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("System.Enum", Bridge.Reflection.getTypeFullName(Bridge.Reflection.getBaseType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2932.A)));
                    Bridge.Test.NUnit.Assert.AreEqual(System.Enum, Bridge.Reflection.getBaseType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2932.A));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2932.A", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: 0,
                B: 1,
                C: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2935", {
        statics: {
            methods: {
                TestStringAsEnumerableChar: function () {
                    var $t;
                    var s = "Hello";
                    var numerable = Bridge.as(s, System.Collections.Generic.IEnumerable$1(System.Char));

                    Bridge.Test.NUnit.Assert.NotNull(numerable);

                    var i = 0;
                    $t = Bridge.getEnumerator(numerable, System.Char);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(s.charCodeAt(i), c);
                            i = (i + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937", {
        statics: {
            methods: {
                TestAssignmentConversion: function () {
                    var e = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter.C;

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter.C, Bridge.unbox(Bridge.box(e, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter))), "e C");
                    Bridge.Test.NUnit.Assert.AreEqual("C", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter, e), "e ToString()");

                    var r = Bridge.box((e = (e - 2) | 0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter));

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter.A, Bridge.unbox(r), "r A");
                    Bridge.Test.NUnit.Assert.AreEqual("A", Bridge.toString(r), "r A ToString()");
                    Bridge.Test.NUnit.Assert.AreEqual("Letter", Bridge.Reflection.getTypeName(Bridge.getType(r)), "r A Type");
                    Bridge.Test.NUnit.Assert.AreEqual("A", Bridge.toString(r));

                    r = Bridge.box((e = (e - 1) | 0), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter));

                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.unbox(r), "r -1");
                    Bridge.Test.NUnit.Assert.AreEqual("-1", Bridge.toString(r), "r -1 ToString()");
                    Bridge.Test.NUnit.Assert.AreEqual("Letter", Bridge.Reflection.getTypeName(Bridge.getType(r)), "r -1 Type");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2937.Letter", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: 0,
                B: 1,
                C: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2939", {
        statics: {
            fields: {
                Disposable: null,
                pass: false
            },
            props: {
                Something: {
                    get: function () {
                        var $t;
                        $t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2939.Disposable;
                        try {
                            return 1;
                        }
                        finally {
                            if (Bridge.hasValue($t)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                }
            },
            ctors: {
                init: function () {
                    this.Disposable = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2939.ADisposable();
                }
            },
            methods: {
                TestUsingForIdentifier: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2939.pass = false;
                    var t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2939.Something;
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2939.pass);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2939.ADisposable", {
        inherits: [System.IDisposable],
        $kind: "nested class",
        alias: ["Dispose", "System$IDisposable$Dispose"],
        methods: {
            Dispose: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2939.pass = true;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge294", {
        fields: {
            Name: null
        },
        ctors: {
            ctor: function (name) {
                this.$initialize();
                this.Name = name;
            }
        },
        methods: {
            GetName: function () {
                return this.Name;
            },
            GetNameThroughGeneric: function (T) {
                return this.Name;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940", {
        statics: {
            methods: {
                TestReflectionBoxing: function () {
                    var str = System.Array.convertAll(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A, 4, 56), $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.f1).join(", ");

                    Bridge.Test.NUnit.Assert.AreEqual("A, B, C", str);
                    Bridge.Test.NUnit.Assert.AreEqual("B", Bridge.toString(Bridge.Reflection.midel(System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.C, 16, 56), System.Reflection.PropertyInfo).first().g, null)()));
                    Bridge.Test.NUnit.Assert.AreEqual("B", Bridge.toString(Bridge.Reflection.midel(System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.C, 16, 56), System.Reflection.PropertyInfo).first().g, null)(null)));
                    Bridge.Test.NUnit.Assert.AreEqual("C", Bridge.toString(Bridge.Reflection.midel(System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.C, 8, 56), System.Reflection.MethodInfo).first(), null)(null)));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940, {
        f1: function (v) {
            return Bridge.toString(Bridge.Reflection.fieldAccess(v, null));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: 0,
                B: 1,
                C: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.C", {
        $kind: "nested class",
        statics: {
            props: {
                Item: 0
            },
            ctors: {
                init: function () {
                    this.Item = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A.B;
                }
            },
            methods: {
                GetItem: function () {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A.C;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2942", {
        statics: {
            methods: {
                TestEnumFlagsToStr: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("E, B A", System.String.format("{0} {1}", Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2942.SimpleEnum.B, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2942.SimpleEnum, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2942.SimpleEnum)), Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2942.SimpleEnum.E, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2942.SimpleEnum, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2942.SimpleEnum))));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2942.SimpleEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: 0,
                B: 3,
                C: 4,
                D: 10,
                E: 0
            }
        },
        $flags: true
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2943", {
        statics: {
            fields: {
                passed: false
            },
            ctors: {
                init: function () {
                    this.passed = true;
                }
            },
            methods: {
                TestStaticCtorGenericClass: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2943.passed);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2943.A$1", function (T) { return {
        $kind: "nested class",
        statics: {
            ctors: {
                ctor: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2943.passed = false;
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2943.C", {
        $kind: "nested class",
        statics: {
            ctors: {
                ctor: function () {
                    var msg = "Static ctor of Bridge2943.C should not be invoked";
                    Bridge.Test.NUnit.Assert.Fail(msg);
                    throw new System.Exception(msg);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2944", {
        statics: {
            methods: {
                TestGenericsNaming: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(9, Bridge2944_A$1(System.Int32).Get());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2950", {
        statics: {
            methods: {
                TestNullCast: function () { /// The result of the expression is always 'null'
                    Bridge.Test.NUnit.Assert.False(System.Nullable.hasValue(System.Int64.lift((System.Int64.lift(Bridge.as(null, System.Int64, true))))));
                    Bridge.Test.NUnit.Assert.False(System.Nullable.hasValue(System.Int64.lift((System.Int64.lift(Bridge.as(null, System.Int64, true))))) ? true : false); /// The result of the expression is always 'null'
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2955", {
        statics: {
            methods: {
                TestNestedClassName: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2955.Validation.Options.Name.Minimum);
                    Bridge.Test.NUnit.Assert.AreEqual(400, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2955.Validation.Options.Name.Maximum);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2955.Validation", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2955.Validation.Options", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2955.Validation.Options.Name", {
        $kind: "nested class",
        statics: {
            fields: {
                Minimum: 0,
                Maximum: 0
            },
            ctors: {
                init: function () {
                    this.Minimum = 2;
                    this.Maximum = 400;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2957", {
        statics: {
            methods: {
                TestNameof: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.NS2.Program.Test();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2961", {
        statics: {
            methods: {
                TestEnumMemberName: function () {
                    var o = null;

                    o = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2961.TestEnum1.Name;
                    Bridge.Test.NUnit.Assert.AreEqual(1, o);

                    o = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2961.TestEnum2.$name;
                    Bridge.Test.NUnit.Assert.AreEqual(3, o);

                    o = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2961.TestEnum3.$name;
                    Bridge.Test.NUnit.Assert.AreEqual(4, o);

                    o = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2961.TestEnum3.Name;
                    Bridge.Test.NUnit.Assert.AreEqual(5, o);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2961.TestEnum1", {
        $kind: "nested enum",
        statics: {
            fields: {
                Name: 1,
                Life: 2
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2961.TestEnum2", {
        $kind: "nested enum",
        statics: {
            fields: {
                One: 1,
                $name: 3
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2961.TestEnum3", {
        $kind: "nested enum",
        statics: {
            fields: {
                Two: 2,
                $name: 4,
                Name: 5
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2962", {
        statics: {
            methods: {
                TestGenericMethodIdentifier: function () {
                    new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2962.Class2().Method2();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2962.Class1", {
        $kind: "nested class",
        methods: {
            Method1: function (T, parameter1) {
                Bridge.Test.NUnit.Assert.AreEqual("parameter1value", parameter1);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964", {
        statics: {
            fields: {
                lastOperatorTypeName: null
            },
            methods: {
                DoSomething: function (value) { },
                DoSomethingElse: function (value) { },
                TestGenericOperator: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.DoSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.Wrapped$1(System.String).op_Implicit(null));
                    Bridge.Test.NUnit.Assert.AreEqual(System.String, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.lastOperatorTypeName);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.DoSomethingElse(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.Wrapped$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.IWhatever).op_Implicit(null));
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.IWhatever, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.lastOperatorTypeName);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.IWhatever", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.Wrapped$1", function (T) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                op_Implicit: function (value) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.lastOperatorTypeName = T;
                    return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.Wrapped$1(T)).$ctor1(value);
                },
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.Wrapped$1(T))(); }
            }
        },
        props: {
            Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1892014023, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2964.Wrapped$1(T))) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) { return this; }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2983", {
        statics: {
            methods: {
                TestIListIndexer: function () {
                    var list = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2983.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    var num = System.Array.getItem(list, 0, System.Int32);
                    Bridge.Test.NUnit.Assert.True(0 === num, Bridge.toString(num));

                    list = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2983.f2(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    num = System.Array.getItem(list, 1, System.Int32);
                    Bridge.Test.NUnit.Assert.True(7 === num, Bridge.toString(num));
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2983", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge2983, {
        f1: function (_o1) {
            _o1.add(0);
            return _o1;
        },
        f2: function (_o2) {
            _o2.add(0);
            _o2.add(7);
            return _o2;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2986", {
        statics: {
            methods: {
                TestGenericTaskReflection: function () {
                    var type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2986.ISomeInterface;
                    var methods = Bridge.Reflection.getMembers(type, 8, 28);
                    var firstMethod = methods[System.Array.index(0, methods)];
                    Bridge.Test.NUnit.Assert.AreEqual("GetString", firstMethod.n);
                    var genericArgs = Bridge.Reflection.getGenericArguments(firstMethod.rt);
                    Bridge.Test.NUnit.Assert.AreEqual(1, genericArgs.length);
                    Bridge.Test.NUnit.Assert.AreEqual(System.String, genericArgs[System.Array.index(0, genericArgs)]);
                    Bridge.Test.NUnit.Assert.AreEqual(System.Threading.Tasks.Task$1(System.String), firstMethod.rt);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2986.ISomeInterface", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992", {
        statics: {
            methods: {
                TestRefThis: function () {
                    var q = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2.$ctor1(10, 10);
                    var x = q.X;
                    var y = q.Y;

                    q.Normalize();
                    Bridge.Test.NUnit.Assert.AreNotEqual(x, q.X);
                    Bridge.Test.NUnit.Assert.AreNotEqual(y, q.Y);

                    q.Normalize(true);
                    Bridge.Test.NUnit.Assert.AreEqual(7, q.X);
                    Bridge.Test.NUnit.Assert.AreEqual(7, q.Y);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2", {
        $kind: "nested struct",
        statics: {
            fields: {
                zeroVector: null
            },
            ctors: {
                init: function () {
                    this.zeroVector = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2();
                    this.zeroVector = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2.$ctor1(0.0, 0.0);
                }
            },
            methods: {
                DistanceSquared: function (value1, value2) {
                    return (value1.X - value2.X) * (value1.X - value2.X) + (value1.Y - value2.Y) * (value1.Y - value2.Y);
                },
                Normalize: function (value, result) {
                    var factor = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2.DistanceSquared(value.v.$clone(), Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2.zeroVector.$clone());
                    factor = 1.0 / Math.sqrt(factor);
                    result.v.X = value.v.X * factor;
                    result.v.Y = value.v.Y * factor;
                },
                SetNewValue: function (value) {
                    value.v = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2.$ctor1(7, 7);
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2(); }
            }
        },
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            $ctor1: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Normalize: function (setNewValue) {
                if (setNewValue === void 0) { setNewValue = false; }
                if (setNewValue) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2.SetNewValue(Bridge.ref(this));
                } else {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2.Normalize(Bridge.ref(this), Bridge.ref(this));
                }

            },
            getHashCode: function () {
                var h = Bridge.addHash([1955977157, this.X, this.Y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2)) {
                    return false;
                }
                return Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2992.Vector2();
                s.X = this.X;
                s.Y = this.Y;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3001", {
        statics: {
            methods: {
                TestExternalReflectable: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.Reflection.getMembers(Bridge3001_SomeLib, 4, 28).length);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3009", {
        statics: {
            methods: {
                TestMultiplicationInOverflowContext: function () {
                    var x = (715827882);
                    x = Bridge.Int.mul(x, x);
                    Bridge.Test.NUnit.Assert.AreEqual(-477218588, x);

                    x = (715827882);
                    x = Bridge.Int.mul(x, x);
                    Bridge.Test.NUnit.Assert.AreEqual(-477218588, x);

                    Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3009.f1);

                    Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3009.f1);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3009", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3009, {
        f1: function () {
            var x1 = (Bridge.Int.check(715827882, System.Int32));
            x1 = Bridge.Int.mul(x1, x1, 1);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027", {
        statics: {
            methods: {
                TestGenericInvocationClone: function () {
                    var $t;
                    var foo = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.Foo$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.MyValueType))(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.MyValueType(), $t.Value = 1, $t));

                    var iShouldBeACopy = foo.GetField().$clone();
                    iShouldBeACopy.Value = 2;

                    Bridge.Test.NUnit.Assert.AreEqual(1, foo.GetField().Value);
                    Bridge.Test.NUnit.Assert.AreEqual(2, iShouldBeACopy.Value);
                },
                TestNonGenericInvocationClone: function () {
                    var $t;
                    var foo = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.FooNonGeneric(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.MyValueType(), $t.Value = 3, $t));

                    var iShouldBeACopy = foo.GetField();
                    iShouldBeACopy.Value = 4;

                    Bridge.Test.NUnit.Assert.AreEqual(3, foo.GetField().Value);
                    Bridge.Test.NUnit.Assert.AreEqual(4, iShouldBeACopy.Value);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.Foo$1", function (T) { return {
        $kind: "nested class",
        fields: {
            _Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function (v) {
                this.$initialize();
                this._Value = v;
            }
        },
        methods: {
            GetField: function () {
                return this._Value;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.FooNonGeneric", {
        $kind: "nested class",
        fields: {
            _Value: null
        },
        ctors: {
            init: function () {
                this._Value = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.MyValueType();
            },
            ctor: function (v) {
                this.$initialize();
                this._Value = v.$clone();
            }
        },
        methods: {
            GetField: function () {
                return this._Value.$clone();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.MyValueType", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.MyValueType(); }
            }
        },
        fields: {
            Value: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3055640370, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.MyValueType)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3027.MyValueType();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3028", {
        statics: {
            methods: {
                ToEnum: function (T, name) {
                    var value = System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Enum.parse(T, name, true), T), T));

                    return value;
                },
                TestEnumParseCast: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(System.DayOfWeek.Monday, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3028.ToEnum(System.DayOfWeek, "Monday"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.IBridge304", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3046", {
        statics: {
            methods: {
                TestAsyncUsing: function () {
                    var $step = 0,
                        $jumpFromFinally, 
                        done, 
                        test, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3046.Test();
                                        try {
                                            Bridge.Test.NUnit.Assert.NotNull(test);
                                        }
                                        finally {
                                            if (Bridge.hasValue(test)) {
                                                test.System$IDisposable$Dispose();
                                            }
                                        }

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3046.Test", {
        inherits: [System.IDisposable],
        $kind: "nested class",
        alias: ["Dispose", "System$IDisposable$Dispose"],
        methods: {
            Dispose: function () { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge305", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.String)],
        props: {
            Items: null
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$String$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            ctor: function (items) {
                this.$initialize();
                this.Items = new (System.Collections.Generic.List$1(System.String)).$ctor1(items);
            }
        },
        methods: {
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            },
            GetEnumerator: function () {
                return this.Items.GetEnumerator().$clone();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3064", {
        statics: {
            methods: {
                TestObjectInitializationMode: function () {
                    var obj = { Number: 0 };
                    Bridge.Test.NUnit.Assert.AreStrictEqual(0, obj.Number);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge306Component$1", function (TProps) { return {
        statics: {
            methods: {
                New: function (TComponent, props) {
                    return System.String.concat(Bridge.Reflection.getTypeFullName(Bridge.getType(props, TProps)) + ":", props);
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3076", {
        statics: {
            methods: {
                TestGuidStringify: function () {
                    var guid = System.Guid.NewGuid();
                    Bridge.Test.NUnit.Assert.AreEqual("\"" + (guid.toString() || "") + "\"", JSON.stringify(guid));

                    var obj = { guid: guid };
                    Bridge.Test.NUnit.Assert.AreEqual(System.String.format("{{\"guid\":\"{0}\"}}", [guid.toString()]), JSON.stringify(obj));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3081", {
        statics: {
            methods: {
                TestNonStandardName: function () {
                    var $t;
                    var usualClass = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3081.UsualClass(), $t["UsualClass Field"] = 3, $t["UsualClass Prop"] = 4, $t);
                    Bridge.Test.NUnit.Assert.AreEqual(3, usualClass["UsualClass Field"]);
                    Bridge.Test.NUnit.Assert.AreEqual(4, usualClass["UsualClass Prop"]);

                    usualClass["UsualClass Field"] = 1;
                    usualClass["UsualClass Prop"] = 2;
                    Bridge.Test.NUnit.Assert.AreEqual(1, usualClass["UsualClass Field"]);
                    Bridge.Test.NUnit.Assert.AreEqual(2, usualClass["UsualClass Prop"]);

                    var objectLiteral = { "ObjectLiteralClass Field": 3, "ObjectLiteralClass Prop": 4 };
                    Bridge.Test.NUnit.Assert.AreEqual(3, objectLiteral["ObjectLiteralClass Field"]);
                    Bridge.Test.NUnit.Assert.AreEqual(4, objectLiteral["ObjectLiteralClass Prop"]);

                    objectLiteral["ObjectLiteralClass Field"] = 1;
                    objectLiteral["ObjectLiteralClass Prop"] = 2;
                    Bridge.Test.NUnit.Assert.AreEqual(1, objectLiteral["ObjectLiteralClass Field"]);
                    Bridge.Test.NUnit.Assert.AreEqual(2, objectLiteral["ObjectLiteralClass Prop"]);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3081.UsualClass", {
        $kind: "nested class",
        fields: {
            "UsualClass Field": 0
        },
        props: {
            "UsualClass Prop": 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086", {
        statics: {
            fields: {
                sb: null
            },
            methods: {
                Test: function (target) {
                    target.Property = "SomeString";

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.sb.append("Value=" + (target.Property || ""));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.sb.append("Length=" + target.Property.length);
                },
                TestAccessorsOverride: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.sb = new System.Text.StringBuilder();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.Test(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.A());
                    Bridge.Test.NUnit.Assert.AreEqual("A Set! SomeStringValue=A Get!Length=6", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.sb.toString());

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.sb = new System.Text.StringBuilder();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.Test(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.B());
                    Bridge.Test.NUnit.Assert.AreEqual("B Set! SomeStringValue=A Get!Length=6", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.sb.toString());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.A", {
        $kind: "nested class",
        props: {
            Property: {
                get: function () {
                    return "A Get!";
                },
                set: function (value) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.sb.append("A Set! " + (value || ""));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3088", {
        statics: {
            methods: {
                TestBaseProperty: function () {
                    for (var i = 0; i < 2; i = (i + 1) | 0) {
                        var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3088.A();
                        Bridge.Test.NUnit.Assert.AreEqual(2, a.x);
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3088.Base", {
        $kind: "nested class",
        props: {
            x: {
                get: function () {
                    return 1;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3089", {
        statics: {
            methods: {
                method: function () {
                    return "test";
                },
                TestOperatorTemplate: function () {
                    var c = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3089.method());
                    Bridge.Test.NUnit.Assert.AreEqual("test", c);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3089.C", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101", {
        statics: {
            fields: {
                counter: 0
            },
            methods: {
                ckEditor_OnChange: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.counter = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.counter + 1) | 0;
                },
                TestEventTemplate: function () {
                    var editor = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.CKEditor();

                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.counter);
                    Bridge.Test.NUnit.Assert.False(editor.isSet);
                    Bridge.Test.NUnit.Assert.Null(editor.name);
                    Bridge.Test.NUnit.Assert.Null(editor.handler);

                    editor.on('change', Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.ckEditor_OnChange);

                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.counter);
                    Bridge.Test.NUnit.Assert.True(editor.isSet);
                    Bridge.Test.NUnit.Assert.AreEqual("change", editor.name);
                    Bridge.Test.NUnit.Assert.AreStrictEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.ckEditor_OnChange, editor.handler);

                    editor.handler();
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.counter);

                    editor.handler();
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.counter);

                    editor.off('change', Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.ckEditor_OnChange);
                    Bridge.Test.NUnit.Assert.False(editor.isSet);
                    Bridge.Test.NUnit.Assert.Null(editor.name);
                    Bridge.Test.NUnit.Assert.Null(editor.handler);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.counter);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3101.CKEditor", {
        $kind: "nested class",
        fields: {
            name: null,
            handler: null,
            isSet: false
        },
        methods: {
            addOnChange: function (value) { },
            removeOnChange: function (value) { },
            on: function (eventName, handler) {
                this.isSet = true;
                this.name = eventName;
                this.handler = handler;
            },
            off: function (eventName, handler) {
                this.isSet = false;
                this.name = null;
                this.handler = null;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103", {
        statics: {
            methods: {
                CheckTypeDefault: function (T) {
                    return Bridge.getDefaultValue(T);
                },
                TestLiteralStaticMember: function () {
                    var a1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.c1.m1;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.c1.Prop1 = "test";
                    Bridge.Test.NUnit.Assert.AreEqual("test", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.c1.Prop1);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.c1.m1("1");
                    Bridge.Test.NUnit.Assert.AreEqual("1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.c1.Prop1);

                    a1("3");
                    Bridge.Test.NUnit.Assert.AreEqual("3", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.c1.Prop1);
                },
                TestLiteralDefaultValue: function () {
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.CheckTypeDefault(System.Object));
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.CheckTypeDefault(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.Person));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.c1", {
        $kind: "nested class",
        $literal: true,
        statics: {
            props: {
                Prop1: null
            },
            methods: {
                m1: function (p1) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.c1.Prop1 = p1;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.Person", {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function () {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3103.Person; };
                (function (){
                    this.Name = null;
                }).call($this);
                return $this;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107", {
        statics: {
            fields: {
                buffer: null
            },
            events: {
                OnSomething: null
            },
            methods: {
                DoSomething1: function (sender, args) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.removeOnSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.DoSomething1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer || "") + "1";
                },
                DoSomething2: function (sender, args) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.removeOnSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.DoSomething2);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.removeOnSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.DoSomething3);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer || "") + "2";
                },
                DoSomething3: function (sender, args) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer || "") + "3";
                },
                TestEventHandlersInvocation: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.OnSomething = null;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.addOnSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.DoSomething1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.addOnSomething($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.f1);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.OnSomething(null, null);
                    Bridge.Test.NUnit.Assert.AreEqual("12", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer);
                },
                TestEventHandlersInvocation2: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.OnSomething = null;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.addOnSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.DoSomething2);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.addOnSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.DoSomething3);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.OnSomething(null, null);
                    Bridge.Test.NUnit.Assert.AreEqual("23", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer);
                },
                TestEventHandlersInvocation3: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer = "";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.OnSomething = null;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.addOnSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.DoSomething2);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.addOnSomething(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.DoSomething3);

                    Bridge.Test.NUnit.Assert.Throws$2(System.NullReferenceException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.f2);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107, {
        f1: function (a, b) {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.buffer || "") + "2";
        },
        f2: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.OnSomething(null, null);
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3107.OnSomething(null, null);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3111", {
        statics: {
            methods: {
                TestNullableFloatMul: function () {
                    var a = 0.9;
                    var b = 1.0;
                    var c = System.Nullable.mul(a, b);
                    Bridge.Test.NUnit.Assert.AreEqual(0.9, c);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3112", {
        statics: {
            methods: {
                TestUsingScopeWitinLoopInLambda: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3112.A();
                    a.DoSomething();

                    Bridge.Test.NUnit.Assert.AreEqual(7, a.Number);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3112.A", {
        $kind: "nested class",
        fields: {
            Number: 0
        },
        methods: {
            DoSomething: function () {
                for (var i = 0; i < 1; i = (i + 1) | 0) {
                    var d = { v : new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3112.SomeDisposable() };
                    try {
                        d.v.Data = 7;

                        var action = (function ($me, d) {
                            return Bridge.fn.bind($me, function (n) {
                                this.Number = n;
                                var d1 = d.v;
                            });
                        })(this, d);

                        action(d.v.Data);
                    }
                    finally {
                        if (Bridge.hasValue(d.v)) {
                            d.v.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3112.SomeDisposable", {
        inherits: [System.IDisposable],
        $kind: "nested class",
        fields: {
            Data: 0
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        methods: {
            Dispose: function () { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131", {
        statics: {
            fields: {
                data: null,
                actions: null
            },
            ctors: {
                init: function () {
                    this.data = System.Array.init([1, 2, 3], System.Int32);
                    this.actions = new (System.Collections.Generic.List$1(Function)).ctor();
                }
            },
            methods: {
                TestCloseCaptureFoldedCycle: function () {
                    var $t, $t1, $t2;
                    var s = "";
                    $t = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131.data);
                    try {
                        while ($t.moveNext()) {
                            var i2 = { v : $t.Current };
                            $t1 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131.data);
                            try {
                                while ($t1.moveNext()) {
                                    var i = { v : $t1.Current };
                                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131.actions.add((function ($me, i2, i) {
                                        return function () {
                                            s = (s || "") + i2.v + i.v;
                                        };
                                    })(this, i2, i));
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    $t2 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131.actions);
                    try {
                        while ($t2.moveNext()) {
                            var action = $t2.Current;
                            action();
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("111213212223313233", s);
                },
                TestCloseCaptureFoldedCycle2: function () {
                    var $t, $t1, $t2;
                    var s = "";
                    for (var idx = 0; idx < 2; idx = (idx + 1) | 0) {
                        $t = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131.data);
                        try {
                            while ($t.moveNext()) {
                                var i2 = { v : $t.Current };
                                $t1 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131.data);
                                try {
                                    while ($t1.moveNext()) {
                                        var i = { v : $t1.Current };
                                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131.actions.add((function ($me, i2, i) {
                                            return function () {
                                                s = (s || "") + idx + i2.v + i.v;
                                            };
                                        })(this, i2, i));
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$Dispose();
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }

                    $t2 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3131.actions);
                    try {
                        while ($t2.moveNext()) {
                            var action = $t2.Current;
                            action();
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("211212213221222223231232233211212213221222223231232233", s);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3134", {
        statics: {
            methods: {
                TestInterfaceOptionalParams: function () {
                    var work = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3134.SomeWork();

                    var result = work.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3134$ISomeWork$Exec(System.Boolean, void 0);

                    Bridge.Test.NUnit.Assert.AreEqual("empty", result);

                    var af = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3134.f1;
                    var result1 = work.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3134$ISomeWork$Exec(System.Boolean, af);

                    Bridge.Test.NUnit.Assert.AreEqual("not empty", result1);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3134", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3134, {
        f1: function (f) { }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3134.ISomeWork", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3142", {
        statics: {
            methods: {
                TestTemplateInMetadata: function () {
                    var pi = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3142.Class1, 16, 284, "Prop");
                    Bridge.Test.NUnit.Assert.AreEqual("test", Bridge.unbox(Bridge.Reflection.midel(pi.g, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3142.Class1())()));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3142.Class1", {
        $kind: "nested class",
        methods: {
            getProp: function () {
                return "test";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145", {
        statics: {
            methods: {
                TestCloseCaptureFoldedCycle2: function () {
                    var value = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_OptionalResultOrErrorExtensions.Match(System.String, System.Object, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_ResultOrError$1(System.String)).Missing, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145.f1, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145.f2, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145.f3);

                    Bridge.Test.NUnit.Assert.Null(value);
                }
            }
        }
    });

    Bridge.define("$AnonymousType$18", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (result) {
                this.Result = result;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$18)) {
                    return false;
                }
                return Bridge.equals(this.Result, o.Result);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550210522, this.Result]);
                return h;
            },
            toJSON: function () {
                return {
                    Result : this.Result
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Result","t":16,"rt":System.String,"g":{"a":2,"n":"get_Result","t":8,"rt":System.String,"fg":"Result"},"fn":"Result"}]}; }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145, {
        f1: function () {
            return null;
        },
        f2: function (items) {
            return new $asm.$AnonymousType$18("abc");
        },
        f3: function (error) {
            return null;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1", function (T) { return {
        $kind: "struct",
        statics: {
            fields: {
                _missing: null
            },
            props: {
                Missing: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(T)._missing;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._missing = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(T))();
                    this._missing = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(T)).$ctor2(Bridge.getDefaultValue(T), false);
                }
            },
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(T))(); }
            }
        },
        props: {
            IsDefined: false,
            Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            $ctor1: function (value) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(T).$ctor2.call(this, value, value != null);
            },
            $ctor2: function (value, isDefined) {
                this.$initialize();
                this.IsDefined = isDefined && (value != null);
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5718008507, this.IsDefined, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(T))) {
                    return false;
                }
                return Bridge.equals(this.IsDefined, o.IsDefined) && Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) { return this; }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_OptionalResultOrErrorExtensions", {
        statics: {
            methods: {
                Match: function (T, TResult, source, handleNoValue, handleResult, handleError) {
                    if (!source.IsDefined) {
                        return handleNoValue();
                    }

                    return source.Value.Match(TResult, handleResult, handleError);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_ResultOrError$1", function (T) { return {
        fields: {
            _result: null,
            _errorMessage: null
        },
        ctors: {
            init: function () {
                this._result = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(T))();
                this._errorMessage = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3145_Optional$1(System.String))();
            },
            ctor: function (result, errorMessage) {
                this.$initialize();
                this._result = result;
                this._errorMessage = errorMessage;
            }
        },
        methods: {
            Match: function (TResult, handleResult, handleError) {
                return this._result.IsDefined ? handleResult(this._result.Value) : handleError(this._errorMessage.Value);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3147", {
        statics: {
            methods: {
                TestUriJSON: function () {
                    var uri = new System.Uri("http://myurl.com");
                    Bridge.Test.NUnit.Assert.AreEqual("\"http://myurl.com\"", JSON.stringify(uri));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3151", {
        statics: {
            methods: {
                TestLeftAssigmentForDelegates: function () {
                    var msg = null;
                    var ht = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3151.SomeClass();

                    ht.setItem("", Bridge.fn.combine(ht.getItem(""), function () {
                        msg = "test";
                    }));
                    ht.getItem("")();

                    Bridge.Test.NUnit.Assert.AreEqual("test", msg);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3151.SomeClass", {
        $kind: "nested class",
        fields: {
            action: null
        },
        methods: {
            getItem: function (key) {
                return this.action;
            },
            setItem: function (key, value) {
                this.action = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3158", {
        methods: {
            TestParenthesizedBlock: function () {
                var CurrentLeft = 40;

                var x = System.String.alignString(Bridge.toString((CurrentLeft % 60)), 2, 48);

                Bridge.Test.NUnit.Assert.AreEqual("40", x);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3165", {
        methods: {
            TestSetValueWithIndex: function () {
                var $t;
                var ns1 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3165.NinjaScript(), $t.Name = "Test", $t);

                var pi = Bridge.Reflection.getMembers(Bridge.getType(ns1), 16, 284, "Name");
                var val = Bridge.cast(Bridge.Reflection.midel(pi.g, ns1).apply(null, null), System.String);
                Bridge.Reflection.midel(pi.s, ns1).apply(null, (null || []).concat((val || "") + "1"));

                Bridge.Test.NUnit.Assert.AreEqual("Test1", ns1.Name);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3165.NinjaScript", {
        $kind: "nested class",
        props: {
            Name: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3168", {
        methods: {
            TestToLocalTime: function () {
                var now1 = System.DateTime.create(2017, 6, 8, 12, 59, 0);
                now1 = System.DateTime.addMinutes(now1, -1);
                now1 = System.DateTime.toLocalTime(now1);

                Bridge.Test.NUnit.Assert.AreEqual(2017, System.DateTime.getYear(now1));
                Bridge.Test.NUnit.Assert.AreEqual(6, System.DateTime.getMonth(now1));
                Bridge.Test.NUnit.Assert.AreEqual(8, System.DateTime.getDay(now1));

                var now2 = System.DateTime.create(2017, 6, 8, 12, 59, 0);
                now2 = System.DateTime.toLocalTime(now2);
                now2 = System.DateTime.addMinutes(now2, -1);

                Bridge.Test.NUnit.Assert.AreEqual(2017, System.DateTime.getYear(now2));
                Bridge.Test.NUnit.Assert.AreEqual(6, System.DateTime.getMonth(now2));
                Bridge.Test.NUnit.Assert.AreEqual(8, System.DateTime.getDay(now2));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3170", {
        methods: {
            TestDateTimeParseExactZ: function () {
                var dateString = "2017-08-31T22:00:00Z";
                var dateTime = System.DateTime.parseExact(dateString, "yyyy-MM-ddTHH:mm:ssZ", System.Globalization.CultureInfo.invariantCulture);
                var utc_date = System.DateTime.toUniversalTime(dateTime);

                Bridge.Test.NUnit.Assert.AreEqual(2017, System.DateTime.getYear(utc_date));
                Bridge.Test.NUnit.Assert.AreEqual(8, System.DateTime.getMonth(utc_date));
                Bridge.Test.NUnit.Assert.AreEqual(31, System.DateTime.getDay(utc_date));
                Bridge.Test.NUnit.Assert.AreEqual(22, System.DateTime.getHour(utc_date));
                Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getMinute(utc_date));
                Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getSecond(utc_date));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3173", {
        methods: {
            TestSyncReadToEnd: function () {
                var str = null;
                var sr = new System.IO.StreamReader.$ctor7("/resources/test.js");
                try {
                    str = sr.ReadToEnd();
                }
                finally {
                    if (Bridge.hasValue(sr)) {
                        sr.System$IDisposable$Dispose();
                    }
                }

                Bridge.Test.NUnit.Assert.AreEqual("TEST", str);
            },
            TestAsyncReadToEnd: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $returnValue, 
                    done, 
                    str, 
                    sr, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        str = null;
                                        sr = new System.IO.StreamReader.$ctor7("/resources/test.js");
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = sr.ReadToEndAsync();
                                        $step = 2;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        str = $taskResult1;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if (Bridge.hasValue(sr)) sr.System$IDisposable$Dispose();

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        Bridge.Test.NUnit.Assert.AreEqual("TEST", str);
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 2) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            throw $async_e;
                        }
                    }, arguments);

                $asyncBody();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3178", {
        methods: {
            TestObjectLiteralIs: function () {
                var myAction = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3178.MyAction.ctor("test");
                Bridge.Test.NUnit.Assert.True(Bridge.hasValue(myAction));
                Bridge.Test.NUnit.Assert.NotNull(myAction);
                Bridge.Test.NUnit.Assert.True(Bridge.is(myAction, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3178.IDispatcherAction));
                Bridge.Test.NUnit.Assert.NotNull(myAction);
            },
            TestObjectLiteralCastAttr: function () {
                var o = "string";
                Bridge.Test.NUnit.Assert.False(Bridge.is(o, Bridge.hasValue(o) && (o.Foo != null)));

                o = { };
                Bridge.Test.NUnit.Assert.False(Bridge.is(o, Bridge.hasValue(o) && (o.Foo != null)));

                o = { };
                Bridge.Test.NUnit.Assert.False(Bridge.is(o, Bridge.hasValue(o) && (o.Foo != null))); // no Foo

                o = { Foo: 1 };
                Bridge.Test.NUnit.Assert.True(Bridge.is(o, Bridge.hasValue(o) && (o.Foo != null)));

                o = { Foo: 2 };
                Bridge.Test.NUnit.Assert.True(Bridge.is(o, Bridge.hasValue(o) && (o.Foo != null)));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3178.IDispatcherAction", {
        $kind: "nested interface",
        $literal: true
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3192", {
        methods: {
            TestStringFormat: function () {
                var i = System.Array.init([1], System.Int32);
                var j = System.Array.init([2], System.Int32);

                Bridge.Test.NUnit.Assert.AreEqual("1", System.String.format("{0}", i, j));

                var cpy = i;
                Bridge.Test.NUnit.Assert.AreEqual("1", System.String.format("{0}", [cpy]));

                Bridge.Test.NUnit.Assert.AreEqual("12test", System.String.format("{0}{1}{2}", i, j, "test"));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3195", {
        methods: {
            TestGuidTryParse: function () {
                var t = { v : new System.Guid() };
                var result = System.Guid.TryParse(null, t);
                Bridge.Test.NUnit.Assert.False(result);
            }
        }
    });

    /**
     * This tests consists in ensuring static references from 'using static'
     are handled correctly by Bridge to nested references.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3197
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3197", {
        methods: {
            /**
             * Will check whether an instance of an external, nested, class,
             and also static properties' access works.
             *
             * @instance
             * @public
             * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3197
             * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3197
             * @return  {void}
             */
            TestUsingStatic: function () {
                var bunny = IssueBridge3197.pixi_js.PIXI.Sprite.fromImage("bunny.png");
                Bridge.Test.NUnit.Assert.NotNull(bunny, "Returned instance from external and nested class is not null.");
                Bridge.Test.NUnit.Assert.AreEqual(1, IssueBridge3197_1.phaser.Phaser.Physics.ARCADE, "Using static reference to static double is valid.");
            }
        }
    });

    /**
     * This issue involves getting whether the intersection results in an
     object with Type1 and Type2 properties, so we just check if the
     resulting intersection is that.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3200
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3200", {
        statics: {
            methods: {
                /**
                 * The test itself.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3200
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3200
                 * @return  {void}
                 */
                TestEventTemplate: function () {
                    var person = { };

                    person.EmployeeId = 5;
                    person.CustomerId = 3;

                    Bridge.Test.NUnit.Assert.AreEqual(person.EmployeeId, 5);
                    Bridge.Test.NUnit.Assert.AreEqual(person.CustomerId, 3);
                }
            }
        }
    });

    /**
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3200.Customer
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3200.Customer", {
        $kind: "nested class",
        props: {
            CustomerId: 0,
            Name: null
        }
    });

    /**
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3200.Employee
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3200.Employee", {
        $kind: "nested class",
        props: {
            EmployeeId: 0,
            Name: null
        }
    });

    /**
     * This test consists in checking whether binding a dynamic array to
     a class and casting it to its interface taints the resulting array.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222", {
        statics: {
            methods: {
                /**
                 * Check whether the array is maintained when assigned to the
                 interface-cast property.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222
                 * @return  {void}
                 */
                TestArrayUnbox: function () {
                    var array = System.Array.init(["abc", "def"], System.String);
                    var p1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.Property$1(System.Array.type(System.String)))();
                    p1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3222$IProperty$Value = array;

                    Bridge.Test.NUnit.Assert.True(Bridge.equals(array, p1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3222$IProperty$Value), "Array not tainted when assigned to interface's property");
                }
            }
        }
    });

    /**
     * An initial property with just the individual entry.
     *
     * @abstract
     * @private
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.IProperty
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.IProperty", {
        $kind: "nested interface"
    });

    /**
     * This test consists in checking whether a interface cast of a class
     instance allows accessing the class' properties.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224", {
        statics: {
            methods: {
                /**
                 * Create an instance of the class, casting it back to its interface,
                 and then from that, access the value.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224
                 * @return  {void}
                 */
                TestAutoPlainInterfaceProperty: function () {
                    var foo = Bridge.cast(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224.Foo(), Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224.IFoo);
                    Bridge.Test.NUnit.Assert.AreEqual(5, foo.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3224$IFoo$Value, "Can access properties from instances cast into their interfaces");
                }
            }
        }
    });

    /**
     * Interface with the property we want to access after the cast.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224.IFoo
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224.IFoo", {
        $kind: "nested interface"
    });

    /**
     * This test consists in checking whether the append operator works with
     multi dimensional arrays in Bridge the same way it does in .NET.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3226
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3226", {
        statics: {
            methods: {
                /**
                 * Build a simple, static integer two-dimensional array and iterate
                 throught it incrementing a cell with a previous one's value.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3226
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3226
                 * @return  {void}
                 */
                TestAssignAddMultiDimArray: function () {
                    var $t, $t1, $t2;
                    var a = System.Array.create(0, null, System.Int32, 3, 3);

                    a.set([0, 0], 1);

                    for (var y = 0; y < (((System.Array.getLength(a, 1) - 1) | 0)); y = (y + 1) | 0) {
                        for (var x = 0; x < (((System.Array.getLength(a, 0) - 1) | 0)); x = (x + 1) | 0) {
                            a.set([($t = ((x + 1) | 0)), ($t1 = ((y + 1) | 0))], (a.get([$t, $t1]) + a.get([x, y])) | 0);
                        }
                    }

                    var list = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var s = "";

                    $t2 = Bridge.getEnumerator(a);
                    try {
                        while ($t2.moveNext()) {
                            var i = $t2.Current;
                            s = (s || "") + i;
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    // By the time it was broken, (bridgedotnet/Bridge#3226) the result
                    // was wrong: 100010011
                    Bridge.Test.NUnit.Assert.AreEqual("100010001", s, "Result matches '100010001'");
                }
            }
        }
    });

    /**
     * This test involves checking whether an object literal correctly emits its
     $getType function.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231", {
        statics: {
            methods: {
                /**
                 * Asserts Wrapper&lt;Person&gt; output format in client-side.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231
                 * @return  {void}
                 */
                TestGenericObjectLiteral: function () {
                    var x = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Wrapper$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Person)).ctor(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Person.ctor("test"));

                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231+Wrapper`1[[Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231+Person, Bridge.ClientTest.Batch3]]", Bridge.Reflection.getTypeFullName(Bridge.getType(x)));
                }
            }
        }
    });

    /**
     * The Person object literal class for the wrapper class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Person
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Person", {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function (name) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Person; };
                (function (){
                    this.Name = null;
                    this.Name = name;
                }).call($this);
                return $this;
            }
        }
    });

    /**
     * Wrapper class which should get checked against its output.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Wrapper$1
     * @param   {Function}    [name]
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Wrapper$1", function (T) { return {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function (value) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3231.Wrapper$1(T); };
                (function (){
                    this.Value = Bridge.getDefaultValue(T);
                    this.Value = value;
                }).call($this);
                return $this;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3235", {
        statics: {
            methods: {
                TestObjectLiteralBaseCtor: function () {
                    var x = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3235.Employee("Test", "R123");

                    Bridge.Test.NUnit.Assert.AreEqual("Test", x.Name);
                    Bridge.Test.NUnit.Assert.AreEqual("R123", x.Role);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3235.Person", {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function (name) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3235.Person; };
                (function (){
                    this.Name = null;
                    this.Name = name;
                }).call($this);
                return $this;
            }
        }
    });

    /**
     * This tests whether the constructor is correctly invoked
     when an ObjectLiteral is instantiated by reflection.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240", {
        statics: {
            methods: {
                /**
                 * This checks if a directly instantiated DateTime matches the passed
                 (same) DateTime to the class constructor by reflection.
                 The Instantiated class's date in Value should be equal to the
                 passed one.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240
                 * @return  {void}
                 */
                TestObjectLiteralReflectionCtor: function () {
                    var date = System.DateTime.getNow();
                    var p = Bridge.Reflection.invokeCI(System.Linq.Enumerable.from(Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240.Person, 1, 28), System.Reflection.ConstructorInfo).first(), [date]);

                    Bridge.Test.NUnit.Assert.AreEqual(date, p.Value);
                }
            }
        }
    });

    /**
     * ObjectLiteral test class with a constructor
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240.Person
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240.Person", {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function (value) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240.Person; };
                (function (){
                    this.Value = null;
                    this.Value = value;
                }).call($this);
                return $this;
            }
        }
    });

    /**
     * This tests whether the conversion of the ObjectLiteral type into
     a string works when there's an implicit operator for comparing
     the class instance with a string.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242", {
        statics: {
            methods: {
                /**
                 * The test will then just check whether
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242
                 * @return  {void}
                 */
                TestObjectLiteralOperator: function () {
                    // Base variable values to check against:
                    var str = "Hello, World!";
                    var str2 = "Different hello, world!";
                    var int_base = 5;
                    var float_base = 5.2;
                    var dbl_base = 5.2;

                    // String test
                    // Binding the class instance to a specified type variable is
                    // important to trigger the actual implicit operator.
                    var msg = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyString.op_Implicit(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyString.ctor(str));
                    Bridge.Test.NUnit.Assert.AreEqual(str, msg, "String");

                    // Integer
                    var int_instance = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyInt.op_Implicit(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyInt.ctor(int_base));
                    Bridge.Test.NUnit.Assert.AreEqual(int_base, int_instance, "Integer");

                    // Double
                    var dbl_instance = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyDbl.op_Implicit(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyDbl.ctor(dbl_base));
                    Bridge.Test.NUnit.Assert.AreEqual(dbl_base, dbl_instance, "Double");

                    // Generic as String
                    var msg2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.String).op_Implicit((Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.String)).ctor(str));
                    Bridge.Test.NUnit.Assert.AreEqual(str, msg2, "Generic as String");

                    // Generic as String, replacing the 'msg' variable from assertion 1 above
                    msg = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.String).op_Implicit((Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.String)).ctor(str2));
                    Bridge.Test.NUnit.Assert.AreEqual(str2, msg, "Generic as String, replacing the 'msg' variable from assertion 1 above");

                    // Generic as Int
                    var int_instance2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.Int32).op_Implicit((Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.Int32)).ctor(int_base));
                    Bridge.Test.NUnit.Assert.AreEqual(int_base, int_instance2, "Generic as Int");

                    // Generic as Float
                    var float_gval = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.Single).op_Implicit((Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.Single)).ctor(float_base));
                    Bridge.Test.NUnit.Assert.AreEqual(float_base, float_gval, "Generic as Float");

                    // Generic as Double
                    var dbl_gval = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.Double).op_Implicit((Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(System.Double)).ctor(dbl_base));
                    Bridge.Test.NUnit.Assert.AreEqual(dbl_base, dbl_gval, "Generic as Double");
                }
            }
        }
    });

    /**
     * Test class, that implements the implicit double operator.
     It also is an ObjectLiteral class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyDbl
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyDbl", {
        $kind: "nested class",
        $literal: true,
        statics: {
            methods: {
                op_Implicit: function (value) {
                    return (value == null) ? Number.NaN : value.Value;
                }
            }
        },
        ctors: {
            ctor: function (value) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyDbl; };
                (function (){
                    this.Value = 0;
                    this.Value = value;
                }).call($this);
                return $this;
            }
        }
    });

    /**
     * Test class, that implements a generic type operator.
     It also is an ObjectLiteral class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1", function (T) { return {
        $kind: "nested class",
        $literal: true,
        statics: {
            methods: {
                op_Implicit: function (value) {
                    if (value == null) {
                        throw new System.NullReferenceException.ctor();
                    }
                    return value.Value;
                }
            }
        },
        ctors: {
            ctor: function (value) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyGeneric$1(T); };
                (function (){
                    this.Value = Bridge.getDefaultValue(T);
                    this.Value = value;
                }).call($this);
                return $this;
            }
        }
    }; });

    /**
     * Test class, that implements the implicit int operator.
     It also is an ObjectLiteral class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyInt
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyInt", {
        $kind: "nested class",
        $literal: true,
        statics: {
            methods: {
                op_Implicit: function (value) {
                    return (value == null) ? -2147483648 : value.Value;
                }
            }
        },
        ctors: {
            ctor: function (value) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyInt; };
                (function (){
                    this.Value = 0;
                    this.Value = value;
                }).call($this);
                return $this;
            }
        }
    });

    /**
     * Test class, that implements the implicit string operator.
     It also is an ObjectLiteral class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyString
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyString", {
        $kind: "nested class",
        $literal: true,
        statics: {
            methods: {
                op_Implicit: function (value) {
                    return (value == null) ? null : value.Value;
                }
            }
        },
        ctors: {
            ctor: function (value) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3242.MyString; };
                (function (){
                    this.Value = null;
                    this.Value = value;
                }).call($this);
                return $this;
            }
        }
    });

    /**
     * This will check whether List instances are also instances of
     IEnumerable and its inherited generics' types.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244", {
        statics: {
            methods: {
                /**
                 * The test consists in instantiating a List&lt;B&gt; and checking if
                 it is an instance of the respective IENumerable&lt;B&gt; and also,
                 IENumerable&lt;A&gt;, by inheritance.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244
                 * @return  {void}
                 */
                TestIEnumerbaleTVariance: function () {
                    // Make a list of B with two B instances
                    var listB = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.f1(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.B)).ctor());

                    // List<B> is an IEnumerable<B> (of itself)
                    Bridge.Test.NUnit.Assert.True(Bridge.is(listB, System.Collections.Generic.IEnumerable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.B)), "List<B> is an IEnumerable<B> (of itself)");

                    // List<B> is an IEnumerable<object> (B inherits from object)
                    Bridge.Test.NUnit.Assert.True(Bridge.is(listB, System.Collections.Generic.IEnumerable$1(System.Object)), "List<B> is an IEnumerable<object> (B inherits from object)");

                    // List<B> is an IEnumerable<A> (B inherits from A)
                    Bridge.Test.NUnit.Assert.True(Bridge.is(listB, System.Collections.Generic.IEnumerable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.A)), "List<B> is an IEnumerable<A> (B inherits from A)");

                    // This was a slightly different test case reported on issue
                    // bridgedotnet /Bridge#3245
                    // Check if, once binding with a valid cast, the list remains.
                    var bAsEnumerableA = Bridge.cast(listB, System.Collections.Generic.IEnumerable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.A));
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Linq.Enumerable.from(bAsEnumerableA, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.A).count(), "List supports casting to parent types (#3245)");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244, {
        f1: function (_o1) {
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.B());
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.B());
            return _o1;
        }
    });

    /**
     * Simple class to act as a base type.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.A
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.A", {
        $kind: "nested class"
    });

    /**
     * This test consists in checking whether TimeSpan() supports checking if
     it equals to different types of input.
     True, false, null, and objects used to make this fail.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3249
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3249", {
        statics: {
            methods: {
                /**
                 * Checks a TimeSpan instance's Equal() method against different
                 types of values.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3249
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3249
                 * @return  {void}
                 */
                TestTimeSpanEquals: function () {
                    // Calling 'new TimeSpan()' directly in the call or setting a
                    // single common instance does not affect the issue at all.
                    var ts = new System.TimeSpan();
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(ts, Bridge.box(true, System.Boolean, System.Boolean.toString)), "TimeSpan not equal to 'true' constant");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(ts, Bridge.box(false, System.Boolean, System.Boolean.toString)), "TimeSpan not equal to 'false' constant");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(ts, null), "TimeSpan not equal to null");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(ts, Bridge.box(3.2, System.Double, System.Double.format, System.Double.getHashCode)), "TimeSpan not equal to double constant");

                    // Non-anonymous objects should follow the rule here and no
                    // additional checks will be made.
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(ts, new $asm.$AnonymousType$19(0)), "TimeSpan not equal to anonymous object");

                    // Try with explicitly typed nullable variables
                    var nint = 0;
                    var nint2 = null;
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(ts, Bridge.box(nint, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)), "TimeSpan not equal to nullable int with value");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(ts, Bridge.box(nint2, System.Int32, System.Nullable.toString, System.Nullable.getHashCode)), "TimeSpan not equal to nullable int without value (null)");
                }
            }
        }
    });

    Bridge.define("$AnonymousType$19", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (value) {
                this.Value = value;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$19)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550210778, this.Value]);
                return h;
            },
            toJSON: function () {
                return {
                    Value : this.Value
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Value","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_Value","t":8,"rt":System.Int32,"fg":"Value","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Value"}]}; }
            }
        }
    });

    /**
     * This tests consists in just creating an instance of an object with
     the ObjectLiteral's CreateMode.Constructor setting and ensure it
     outputs functional JavaScript.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251", {
        statics: {
            methods: {
                /**
                 * Create an instance of the subject struct and ensure it exists and
                 is not null.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251
                 * @return  {void}
                 */
                TestStructObjectLiteral: function () {
                    var key = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251.PlaceKey.$ctor1(0);
                    Bridge.Test.NUnit.Assert.NotNull(key, "Instance of CreateMode.Constructor ObjectLiteral class generated and not null.");
                }
            }
        }
    });

    /**
     * Subject struct using Constructor create mode of ObjectLiteral
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251.PlaceKey
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251.PlaceKey", {
        $kind: "nested struct",
        $literal: true,
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251.PlaceKey(); }
            }
        },
        ctors: {
            $ctor1: function (i) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251.PlaceKey; };
                (function (){
                }).call($this);
                return $this;
            },
            ctor: function () {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3251.PlaceKey; };
                (function (){
                }).call($this);
                return $this;
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    /**
     * This test consists in checking whether class properties' CanWrite
     method returns a value congruent to C# and the class definition.
     In addition, checks also for the CanRead state.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253", {
        statics: {
            methods: {
                /**
                 * Check each class' property whether they have the expected
                 CanWrite and CanRead states
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253
                 * @return  {void}
                 */
                TestCanSetForReadonlyProperty: function () {
                    var p1 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253.Person, 16, 284, "RyWn");
                    var p2 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253.Person, 16, 284, "RyWy");
                    var p3 = Bridge.Reflection.getMembers(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253.Person, 16, 284, "RnWy");

                    Bridge.Test.NUnit.Assert.False((!!p1.s), "Readonly RyWn property has CanWrite() == false");
                    Bridge.Test.NUnit.Assert.True((!!p1.g), "Readonly RyWn property has CanRead() == true");

                    Bridge.Test.NUnit.Assert.True((!!p2.s), "Read-write RyWy property has CanWrite() == true");
                    Bridge.Test.NUnit.Assert.True((!!p2.g), "Read-write RyWy property has CanRead() == true");

                    Bridge.Test.NUnit.Assert.True((!!p3.s), "Write-only RnWy property has CanWrite() == true");
                    Bridge.Test.NUnit.Assert.False((!!p3.g), "Write-only RnWy property has CanRead() == false");
                }
            }
        }
    });

    /**
     * A subject class with a read-only and read-write properties
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253.Person
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253.Person", {
        $kind: "nested class",
        props: {
            RyWn: 0,
            RyWy: 0,
            RnWy: {
                set: function (value) { }
            }
        }
    });

    /**
     * The test here checks whether a '-(i)' expression is correctly output
     to JavaScript.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3258
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3258", {
        statics: {
            methods: {
                /**
                 * Tests different alternations of -i, whether they produce a negative
                 i value on client-side.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3258
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3258
                 * @return  {void}
                 */
                TestUnaryImplicitOperator: function () {
                    var i = 1;
                    var a = -i;
                    var b = -(i);
                    var c = (-(i));

                    Bridge.Test.NUnit.Assert.AreEqual(-1, a, "C# double '-i' evals on JS as '-i'");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, b, "C# double '-(i)' evals on JS as '-i'");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, c, "C# double '(-(i))' evals on JS as '-i'");

                    var j = 1;
                    var x = (-j) | 0;
                    var y = (-(j)) | 0;
                    var z = (((-(j)) | 0));

                    Bridge.Test.NUnit.Assert.AreEqual(-1, x, "C# integer '-j' evals on JS as '-j'");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, y, "C# integer '-(j)' evals on JS as '-j'");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, z, "C# integer '(-(j))' evals on JS as '-j'");
                }
            }
        }
    });

    /**
     * Simple class implementing the implicit operator
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3258.O
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3258.O", {
        $kind: "nested class"
    });

    /**
     * This test consists in checking whether Bridge can handle type aliases
     for types implementing generic template support (C# generics).
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3264
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3264", {
        statics: {
            methods: {
                /**
                 * Just check whether bridge could output the type instantiation.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3264
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3264
                 * @return  {void}
                 */
                TestGenericAlias: function () {
                    var test = new (Bridge3264_Ext.Root.MyTest$1(System.String))();
                    Bridge.Test.NUnit.Assert.NotNull(test, "Instantiate type aliased to a generic type.");
                }
            }
        }
    });

    /**
     * The test here consists in cheching whether member templates for generic
     types are considered during Bridge translation.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3265
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3265", {
        statics: {
            methods: {
                /**
                 * Creates an instance of the aliased class and checks if the value
                 set can be fetched afterwards from client-side.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3265
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3265
                 * @return  {void}
                 */
                TestGenericAlias: function () {
                    var test = {};
                    test.val = "Hello world!";
                    var val = test.val;
                    Bridge.Test.NUnit.Assert.AreEqual("Hello world!", val, "Generics by alias, member value set, is correctly fetched.");
                }
            }
        }
    });

    /**
     * The test here consists on checking whether type inference for generic
     classes works when feeding dynamic parameters to the class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269", {
        statics: {
            methods: {
                /**
                 * For the elaborate test, this will follow several levels and
                 concepts of inheritance.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269
                 * @param   {Function}                                                       T           
                 * @param   {Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.IFactory$1}    factory     
                 * @param   {object}                                                         registry
                 * @return  {string}
                 */
                RegisterFactory: function (T, factory, registry) {
                    return Bridge.Reflection.getTypeFullName(T);
                },
                /**
                 * Minimal test case required to reproduce the issue (this is a test
                 isolated from the rest)
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269
                 * @param   {Function}    T         
                 * @param   {T}           simple
                 * @return  {boolean}
                 */
                Simplistic: function (T, simple) {
                    return true;
                },
                /**
                 * Checks whether both the simplistic and elaborate implementations works.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269
                 * @return  {void}
                 */
                TestTypeParameterInference: function () {
                    var registry = {};
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Cavy), Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.RegisterFactory(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Cavy, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory(), registry), "Elaborate dynamic-typed static generic emits correctly.");

                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Simplistic(System.Object, (1)), "Simple dynamic-typed static generic emits correctly.");

                }
            }
        }
    });

    /**
     * A base class from which the parameter will be based.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Animal
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Animal", {
        $kind: "nested class"
    });

    /**
     * The test here consists in loading current domain's assemblies and
     traversing them searching for a specific custom attribute.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273", {
        statics: {
            methods: {
                /**
                 * Test whether we can query for the attribute if cycling thru all assemblies.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273
                 * @return  {void}
                 */
                TestAssemblyGetCustomAttributes: function () {
                    var $t;
                    var assemblies = System.AppDomain.getAssemblies();
                    var atLeastOnce = false;
                    $t = Bridge.getEnumerator(assemblies);
                    try {
                        while ($t.moveNext()) {
                            var assembly = $t.Current;
                            var myAssemblyAttr = assembly.getCustomAttributes(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273.MyAssemblyAttribute, false);

                            if (myAssemblyAttr.length === 0) {
                                Bridge.Test.NUnit.Assert.True(true, "Assembly attribute sought but not found in '" + (assembly.name || "") + "'.");
                            } else if (myAssemblyAttr.length === 1) {
                                Bridge.Test.NUnit.Assert.True(true, "Assembly attribute sought and found in '" + (assembly.name || "") + "'.");
                                atLeastOnce = true;
                            } else {
                                Bridge.Test.NUnit.Assert.True(false, "Assembly attribute sought in '" + (assembly.name || "") + "' but returned an unexpected amount of matches. Match count: " + myAssemblyAttr.length + ".");
                            }

                            var myUnusedAssemblyAttr = assembly.getCustomAttributes(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273.MyUnusedAssemblyAttribute, false);
                            Bridge.Test.NUnit.Assert.AreEqual(0, myUnusedAssemblyAttr.length, "Unused assembly attribute sought and not found in '" + (assembly.name || "") + "'.");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.True(atLeastOnce, "Assembly attribute has been found at least once among the assemblies searched.");
                }
            }
        }
    });

    /**
     * An example of assembly attribute that should be used at least once
     (in this project).
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273.MyAssemblyAttribute
     * @augments System.Attribute
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273.MyAssemblyAttribute", {
        inherits: [System.Attribute],
        $kind: "nested class"
    });

    /**
     * This should not be used anywhere (thus return zero matches)
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273.MyUnusedAssemblyAttribute
     * @augments System.Attribute
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273.MyUnusedAssemblyAttribute", {
        inherits: [System.Attribute],
        $kind: "nested class"
    });

    /**
     * The test here consists in checking whether System.DateTime tests works
     with current date and max/min values.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3290
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3290", {
        statics: {
            methods: {
                /**
                 * Tests the comparison variations between datetime values.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3290
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3290
                 * @return  {void}
                 */
                CheckCultureInfoGetFormatIsVirtual: function () {
                    var culture = new Bridge.ClientTest.Batch3.BridgeIssues.MyCultureInfoAdapter("en-US");

                    var format = culture.getFormat(System.Globalization.NumberFormatInfo);

                    Bridge.Test.NUnit.Assert.AreEqual(culture.numberFormat, Bridge.unbox(format), "GetFormat can be overridden");
                }
            }
        }
    });

    /**
     * The test here consists in instantiating a class using an interface
     reference and ensure it is, client-side, reaching the type it
     refers to.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292", {
        statics: {
            methods: {
                /**
                 * Tests whether instantiating the driver classes sets their
                 'consistent' state to true.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292
                 * @return  {void}
                 */
                TestImplicitOpCallForInterfaces: function () {
                    Bridge.Test.NUnit.Assert.True(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassDriver(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassProbe).op_Implicit(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassProbe())).Consistent, "Implicit generics operator works with class referencing.");
                    Bridge.Test.NUnit.Assert.True(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.InterfaceDriver(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.IInterfaceProbe).op_Implicit(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassProbe())).Consistent, "Implicit generics operator works with interface referencing.");
                }
            }
        }
    });

    /**
     * Driver class that works by referencing the actual class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassDriver
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassDriver", {
        $kind: "nested class",
        props: {
            Consistent: false
        },
        ctors: {
            ctor: function (errorIfFailed) {
                this.$initialize();
                var probe = errorIfFailed;

                // We check here whether the object initializing it is of
                // ClassProbe. We don't check against IInterfaceProbe here
                // even though it inherits due to covariance-related
                // limitations
                this.Consistent = Bridge.is(probe, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassProbe));
            }
        }
    });

    /**
     * Basic interface used as base of all.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.IInterfaceProbe
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.IInterfaceProbe", {
        $kind: "nested interface"
    });

    /**
     * A class implementing generics that will use the class samples
     above in order to trigger the issue.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1
     * @param   {Function}    [name]
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1", function (T) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                op_Implicit: function (source) {
                    return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1(T)).$ctor1(source);
                },
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1(T))(); }
            }
        },
        props: {
            Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5573393263, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1(T))) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) { return this; }
        }
    }; });

    /**
     * Driver class that breaks by referencing the interface.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.InterfaceDriver
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.InterfaceDriver", {
        $kind: "nested class",
        props: {
            Consistent: false
        },
        ctors: {
            ctor: function (errorIfFailed) {
                this.$initialize();
                var probe = errorIfFailed;

                // We check here whether the object initializing it is of
                // ClassProbe. We don't check against ClassProbe here
                // even though it inherits due to covariance-related
                // limitations
                this.Consistent = Bridge.is(probe, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.GenericsClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.IInterfaceProbe));
            }
        }
    });

    /**
     * The test here consists in checking whether System.DateTime tests works
     with current date and max/min values.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3293
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3293", {
        statics: {
            methods: {
                /**
                 * Tests the comparison variations between datetime values.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3293
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3293
                 * @return  {void}
                 */
                TestDateTimeComparisons: function () {
                    var minTim = System.DateTime.getMinValue();
                    var now = System.DateTime.getNow();
                    var maxTim = System.DateTime.getMaxValue();

                    Bridge.Test.NUnit.Assert.True(System.DateTime.gt(now, minTim), "Now is greater than minTime.");
                    Bridge.Test.NUnit.Assert.False(System.DateTime.lt(now, minTim), "Now is not greater than minimum time.");

                    Bridge.Test.NUnit.Assert.True(System.DateTime.lt(now, maxTim), "Now is smaller than maxTime.");
                    Bridge.Test.NUnit.Assert.False(System.DateTime.gt(now, maxTim), "Now is not smaller than maxTime.");

                    Bridge.Test.NUnit.Assert.True(System.DateTime.gte(now, minTim), "Now is greater than or equal minTime.");
                    Bridge.Test.NUnit.Assert.False(System.DateTime.lte(now, minTim), "Now is not greater than or equal minimum time.");

                    Bridge.Test.NUnit.Assert.True(System.DateTime.lte(now, maxTim), "Now is smaller than or equal maxTime.");
                    Bridge.Test.NUnit.Assert.False(System.DateTime.gte(now, maxTim), "Now is not smaller than or equal maxTime.");

                    Bridge.Test.NUnit.Assert.True(!Bridge.equals(now, minTim), "Now is different than minimum time.");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(now, minTim), "Now is not equal to minimum time.");
                    Bridge.Test.NUnit.Assert.True(!Bridge.equals(now, maxTim), "Now is different than maximum time.");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(now, maxTim), "Now is not equal to maximum time.");
                }
            }
        }
    });

    /**
     * This tests consists in just checking whether URI's .ToString() does
     not return "[Object object]" but the actual instantiated URL.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3301
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3301", {
        statics: {
            methods: {
                /**
                 * Just checks whether an URI's ToString() matches its provided URL
                 string.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3301
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3301
                 * @return  {void}
                 */
                TestUriToString: function () {
                    var uriStr = "https://deck.net/";
                    var uri = new System.Uri(uriStr);
                    Bridge.Test.NUnit.Assert.AreEqual(uriStr, Bridge.toString(uri), "URI ToString() returns the same string used to initialize it.");
                }
            }
        }
    });

    /**
     * The test here consists in ensuring that a new datetime instance,
     provided an UtcNow datetime + 1 minute, is exactly equal to the
     original datetime+1 minute.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3306
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3306", {
        statics: {
            methods: {
                /**
                 * Checks whether the datetime values between addMinutes result
                 and the new instance with its ticks and kind are equal.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3306
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3306
                 * @return  {void}
                 */
                TestDateTimeConsistency: function () {
                    var dt = System.DateTime.getUtcNow();
                    var dt2 = System.DateTime.addMinutes(dt, 1);
                    var dt3 = System.DateTime.create$2(System.DateTime.getTicks(dt2), System.DateTime.getKind(dt2));

                    Bridge.Test.NUnit.Assert.AreEqual(dt2, dt3, "New instance of a same UtcNow date is equal to its base.");
                }
            }
        }
    });

    /**
     * The test here consists in ensuring that a list with DateTime entries
     is orderable by System.Linq.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3307
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3307", {
        statics: {
            methods: {
                /**
                 * Checks whether a rewound date, after added to a list of dates, can
                 correctly be ordered using .OrderBy().
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3307
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3307
                 * @return  {void}
                 */
                TestOrderedDateTimeList: function () {
                    var times = new (System.Collections.Generic.List$1(System.DateTime)).ctor();

                    var dt1 = System.DateTime.getUtcNow();
                    times.add(dt1);
                    var dt2 = System.DateTime.addMinutes(dt1, -10);
                    times.add(dt2);

                    times = System.Linq.Enumerable.from(times, System.DateTime).orderBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3307.f1).toList(System.DateTime);

                    Bridge.Test.NUnit.Assert.True(System.DateTime.gt(dt1, dt2), "The initial date is effectively after the rewound date.");
                    Bridge.Test.NUnit.Assert.True(System.DateTime.lt(times.getItem(0), times.getItem(1)), "Result is ordered correctly.");
                    Bridge.Test.NUnit.Assert.AreEqual(dt1, times.getItem(1), "The initial date is after the rewound one within the ordered list.");
                    Bridge.Test.NUnit.Assert.AreEqual(dt2, times.getItem(0), "The rewound date is before the initial date within the ordered list.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3307", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3307, {
        f1: function (dt) {
            return dt;
        }
    });

    /**
     * The test here consists in ensuring that overriding the Equals
     method for classes does not result in infinite recursion in
     generated JavaScript code.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308", {
        statics: {
            methods: {
                /**
                 * The test just checks results in situations where the recursion loop
                 would otherwise happen.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308
                 * @return  {void}
                 */
                TestEqualsOverride: function () {
                    var a1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308.A(10);
                    var a2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308.A(10);
                    var a3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308.A(-10);

                    Bridge.Test.NUnit.Assert.False(Bridge.referenceEquals(a1, a2), "Could compare (==) two variables that are different instances of the same class with same value.");
                    Bridge.Test.NUnit.Assert.True(a1.equals(a2), "Different instances of same class with same value .Equals() to true.");
                    Bridge.Test.NUnit.Assert.False(a1.equals(a3), "Different instances of same class with different value .Equals() to false.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308.A", {
        $kind: "nested class",
        fields: {
            val: 0
        },
        props: {
            Val: {
                get: function () {
                    return this.val;
                }
            }
        },
        ctors: {
            ctor: function (v) {
                this.$initialize();
                this.val = v;
            }
        },
        methods: {
            equals: function (o) {
                var a = Bridge.cast(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3308.A);
                if (a.Val < 0) {
                    return Bridge.equals(this, o);
                } else {
                    return this.Val === a.Val;
                }
            },
            getHashCode: function () {
                return Bridge.getHashCode(this);
            }
        }
    });

    /**
     * The test here consists in checking whether an array's type name has the
     expected brackets when fetched using reflection.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3318
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3318", {
        statics: {
            methods: {
                /**
                 * Just check whether the array's type name has the expected value.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3318
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3318
                 * @return  {void}
                 */
                TestArrayName: function () {
                    var array = System.Array.init(10, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3318.Foo);
                    Bridge.Test.NUnit.Assert.AreEqual("Foo[]", Bridge.Reflection.getTypeName(Bridge.getType(array)), "Array's GetType().Name is 'Foo[]'.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3318.Foo", {
        $kind: "nested class"
    });

    /**
     * The test here consists in checking whether the back-casting of an
     array results in the same type.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3321
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3321", {
        statics: {
            methods: {
                /**
                 * Test casting and then verifying if the returned type is the expected.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3321
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3321
                 * @return  {void}
                 */
                Test2DArrayClone: function () {
                    var a = Bridge.cast(System.Array.clone(System.Array.init(0, 0, System.Int32)), System.Array.type(System.Int32));

                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Array.getRank(a), "One dimensional array casted back to an one-dimensional array.");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int32, (Bridge.getType(a).$elementType || null), "Array element's type is the expected one.");

                    var n = Bridge.cast(System.Array.clone(System.Array.create(0, null, System.Int32, 0, 0)), System.Array.type(System.Int32, 2));

                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Array.getRank(n), "Two dimensional array casted back to a two-dimensional array.");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int32, (Bridge.getType(n).$elementType || null), "2d Array element's type is the expected one.");

                    var x = Bridge.cast(System.Array.clone(System.Array.create(0, null, System.Int32, 0, 0, 0)), System.Array.type(System.Int32, 3));

                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Array.getRank(x), "Three dimensional array casted back to a three-dimensional array.");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Int32, (Bridge.getType(x).$elementType || null), "3d Array element's type is the expected one.");

                    var f = Bridge.cast(System.Array.clone(System.Array.create(0, null, System.Single, 0, 0, 0)), System.Array.type(System.Single, 3));

                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Array.getRank(f), "Three dimensional float array casted back to a three-dimensional array.");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Single, (Bridge.getType(f).$elementType || null), "3d float Array element's type is the expected one.");
                }
            }
        }
    });

    /**
     * The tests here consists in checking whether nullable variables do
     support the "is" check and results the same as .NET does.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3323
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3323", {
        statics: {
            methods: {
                /**
                 * Do the tests against a int nullable variable.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3323
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3323
                 * @return  {void}
                 */
                TestIsForNullable: function () {
                    var val = null;
                    Bridge.Test.NUnit.Assert.False(Bridge.is(val, System.Int32), "Null nullable int is not int.");
                    Bridge.Test.NUnit.Assert.False(Bridge.hasValue(val), "Null nullable int is not 'int?'.");

                    val = 1;
                    Bridge.Test.NUnit.Assert.True(Bridge.is(val, System.Int32), "Nullable int with value is int.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(val), "Nullable int with value is 'int?'.");
                }
            }
        }
    });

    /**
     * The test here consists in forcing a situation where GetType() should
     throw a null reference exception and ensure the exception is
     effectively thrown.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3324
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3324", {
        statics: {
            methods: {
                /**
                 * Calls GetType() from a null-valued nullable variable.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3324
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3324
                 * @return  {void}
                 */
                TestGetTypeForNull: function () {
                    var v = null;
                    Bridge.Test.NUnit.Assert.Throws$2(System.NullReferenceException, function () {
                        var name = Bridge.Reflection.getTypeFullName(Bridge.getType(v, System.Single));
                    }, "Exception thrown for null-valued variable's GetType() call.");
                }
            }
        }
    });

    /**
     * The test here consists in checking whether the IsValueType boolean
     has the expected result for different types' querying.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329", {
        statics: {
            methods: {
                /**
                 * Test several variations of types whether they support the IsValueType property.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329
                 * @return  {void}
                 */
                TestIsValueType: function () {
                    // All these are supposed to be value types
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329.MyEnum), "MyEnum.One is value type.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Byte), "'byte' ('" + (Bridge.Reflection.getTypeFullName(System.Byte) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Boolean), "'bool' ('" + (Bridge.Reflection.getTypeFullName(System.Boolean) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Int16), "'short' ('" + (Bridge.Reflection.getTypeFullName(System.Int16) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Int32), "'int' ('" + (Bridge.Reflection.getTypeFullName(System.Int32) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Int64), "'long' ('" + (Bridge.Reflection.getTypeFullName(System.Int64) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Single), "'float' ('" + (Bridge.Reflection.getTypeFullName(System.Single) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Double), "'double' ('" + (Bridge.Reflection.getTypeFullName(System.Double) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Nullable$1(System.Byte)), "'byte?' ('" + (Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Byte)) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Nullable$1(System.Boolean)), "'bool?' ('" + (Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Boolean)) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Nullable$1(System.Int16)), "'short?' ('" + (Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Int16)) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Nullable$1(System.Int32)), "'int?' ('" + (Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Int32)) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Nullable$1(System.Int64)), "'long?' ('" + (Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Int64)) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Nullable$1(System.Single)), "'float?' ('" + (Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Single)) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Nullable$1(System.Double)), "'double?' ('" + (Bridge.Reflection.getTypeFullName(System.Nullable$1(System.Double)) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329.MyStruct), "'MyStruct' ('" + (Bridge.Reflection.getTypeFullName(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329.MyStruct) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Byte), "'System.Byte' ('" + (Bridge.Reflection.getTypeFullName(System.Byte) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.SByte), "'System.SByte' ('" + (Bridge.Reflection.getTypeFullName(System.SByte) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Int16), "'System.Int16' ('" + (Bridge.Reflection.getTypeFullName(System.Int16) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.UInt16), "'System.UInt16' ('" + (Bridge.Reflection.getTypeFullName(System.UInt16) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Int32), "'System.Int32' ('" + (Bridge.Reflection.getTypeFullName(System.Int32) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.UInt32), "'System.UInt32' ('" + (Bridge.Reflection.getTypeFullName(System.UInt32) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Int64), "'System.Int64' ('" + (Bridge.Reflection.getTypeFullName(System.Int64) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.UInt64), "'System.UInt64' ('" + (Bridge.Reflection.getTypeFullName(System.UInt64) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Decimal), "'System.Decimal' ('" + (Bridge.Reflection.getTypeFullName(System.Decimal) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Single), "'System.Single' ('" + (Bridge.Reflection.getTypeFullName(System.Single) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Double), "'System.Double' ('" + (Bridge.Reflection.getTypeFullName(System.Double) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.Boolean), "'System.Boolean' ('" + (Bridge.Reflection.getTypeFullName(System.Boolean) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isValueType(System.DateTime), "'System.DateTime' ('" + (Bridge.Reflection.getTypeFullName(System.DateTime) || "") + "') is value type");

                    // These are not supposed to be value types.
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isValueType(System.String), "'string' ('" + (Bridge.Reflection.getTypeFullName(System.String) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isValueType(System.String), "'System.String' ('" + (Bridge.Reflection.getTypeFullName(System.String) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isValueType(System.Enum), "'System.Enum' ('" + (Bridge.Reflection.getTypeFullName(System.Enum) || "") + "') is value type");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isValueType(System.Object), "'System.Object' ('" + (Bridge.Reflection.getTypeFullName(System.Object) || "") + "') is value type");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329.MyEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                One: 0,
                Two: 1
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329.MyStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3329.MyStruct(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    /**
     * The tests here should be verified in Microsoft Edge 41.16299.15.0 (Microsoft EdgeHTML 16.16299).
     Ensures that HTML attributes are being processed correctly
     even if incorrect names of properties are being requested.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331", {
        statics: {
            fields: {
                NameAttr: null,
                ValueAttr: null
            },
            ctors: {
                init: function () {
                    this.NameAttr = "name";
                    this.ValueAttr = "value";
                }
            },
            methods: {
                /**
                 * Should be verified in Microsoft Edge 41.16299.15.0 (Microsoft EdgeHTML 16.16299).
                 Checks that "Bridge.getEnumerator()" is able to processs HTML attribute collection represented by {@link }.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331
                 * @return  {void}
                 */
                TestHtmlAttributesIteration: function () {
                    var $t;
                    var el = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.InitElementWithAttributes();

                    var index = 0;

                    $t = Bridge.getEnumerator(el.attributes, "getEnumerator");
                    try {
                        while ($t.moveNext()) {
                            var attr = $t.Current;
                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.VerifyAttributeNode(Bridge.identity(index, ((index = (index + 1) | 0))), attr);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                /**
                 * Should be verified in Microsoft Edge 41.16299.15.0 (Microsoft EdgeHTML 16.16299).
                 Checks that "Bridge.equals()" is able to process HTML attributes.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331
                 * @return  {void}
                 */
                TestHtmlAttributesEquality: function () {
                    var el = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.InitElementWithAttributes();

                    var attr0 = el.attributes[0];
                    var attr1 = el.attributes[1];

                    Bridge.Test.NUnit.Assert.True(Bridge.equals(attr0, attr0), "Attribute #1 equals to itself.");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(attr0, attr1), "Attribute #1 does not equal to Attribute #2.");
                },
                /**
                 * Should be verified in Microsoft Edge 41.16299.15.0 (Microsoft EdgeHTML 16.16299).
                 Checks that "Bridge.equals()" is able to process HTML attributes.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331
                 * @return  {void}
                 */
                TestHtmlAttributeCollectionsEquality: function () {
                    var el1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.InitElementWithAttributes();
                    var el2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.InitElementWithAttributes();

                    Bridge.Test.NUnit.Assert.True(Bridge.equals(el1, el1), "Attributes Collection #1 equals to itself.");
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(el1, el2), "Attributes Collection #1 does not equal to Attribute Collection #2.");
                },
                InitElementWithAttributes: function () {
                    var el = document.createElement("input");

                    el.setAttribute(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.NameAttr, "test name");
                    el.setAttribute(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.ValueAttr, "test val");

                    return el;
                },
                VerifyAttributeNode: function (index, node) {
                    var attrName = node.nodeName;

                    if (index === 0) {
                        Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.NameAttr, attrName, "Attribute 'name' could be processed.");
                    } else if (index === 1) {
                        Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3331.ValueAttr, attrName, "Attribute 'value' could be processed.");
                    } else {
                        throw new System.IndexOutOfRangeException.$ctor1("Unexpected attribute index.");
                    }
                }
            }
        }
    });

    /**
     * The test here consists in checking whether Bridge's TryParse
     implementation does not touch the output variable if the parsing fails.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346", {
        statics: {
            methods: {
                /**
                 * Check if whenever parsing fails, the target variable won't be
                 changed.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346
                 * @return  {void}
                 */
                TestEnumTryParseFail: function () {
                    var i = { v : new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346.TestEnum() };
                    var result = System.Enum.tryParse(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346.TestEnum, "FF", i);

                    Bridge.Test.NUnit.Assert.False(result, "TryParse() 'FF' into an enum returned 'false'.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346.TestEnum.One, i.v, "Failed TryParse() call initialized value with enum's 0 (\"One\").");

                    var j = { v : new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346.TestOtherEnum() };
                    var result_j = System.Enum.tryParse(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346.TestOtherEnum, "FF", j);

                    Bridge.Test.NUnit.Assert.False(result_j, "TryParse() 'FF' into another enum returned 'false'.");
                    Bridge.Test.NUnit.Assert.AreEqual(0, j.v, "Failed TryParse() call initialized value with enum's 0 (no match in enum).");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346.TestEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                One: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3346.TestOtherEnum", {
        $kind: "nested enum",
        statics: {
            fields: {
                Two: 2,
                One: 1
            }
        }
    });

    /**
     * The test here consists in checking whether TimeSpan can be checked
     against null when it actually is null.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3352
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3352", {
        statics: {
            methods: {
                /**
                 * Check both whether when result is null, conditions can be evaluated
                 for both equals and different than null.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3352
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3352
                 * @return  {void}
                 */
                TestTimeSpanEqualsNull: function () {
                    var result = null;

                    Bridge.Test.NUnit.Assert.True(System.TimeSpan.eq(result, null), "Null TimeSpan? can be evaluated about being null and results in true.");
                    Bridge.Test.NUnit.Assert.False(System.TimeSpan.neq(result, null), "Null TimeSpan? can be evaluated about not being null and results in false.");
                }
            }
        }
    });

    /**
     * This consists in checking whether reflecion unboxing works with
     DateTime and integer.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3356
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3356", {
        statics: {
            methods: {
                TestReflectionUnbox: function () {
                    var box = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3356.Box();
                    box.PerformTest();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3356.Box", {
        $kind: "nested class",
        methods: {
            PerformTest: function () {
                var time = System.DateTime.getMinValue();
                var type = Bridge.getType(this);
                var method = Bridge.Reflection.getMembers(type, 8, 284, "CheckDateTime");

                Bridge.Reflection.midel(method, this).apply(null, Bridge.unbox(System.Array.init([Bridge.box(time, System.DateTime, System.DateTime.format)], System.Object)));

                method = Bridge.Reflection.getMembers(type, 8, 284, "CheckInt");

                Bridge.Reflection.midel(method, this).apply(null, Bridge.unbox(System.Array.init([Bridge.box(5, System.Int32)], System.Object)));
            },
            CheckDateTime: function (time) {
                if (System.DateTime.gt(System.DateTime.getMaxValue(), time)) {
                    Bridge.Test.NUnit.Assert.True(Bridge.equals(time, System.DateTime.getMinValue()), "Provided DateTime value is DateTime.MinValue.");
                } else {
                    Bridge.Test.NUnit.Assert.Fail("Provided DateTime value is greater than DateTime.MaxValue (should be equal to DateTime.MinValue).");
                }
            },
            CheckInt: function (i) {
                if (Bridge.is(i, System.Int32)) {
                    Bridge.Test.NUnit.Assert.AreEqual(5, System.Nullable.getValue(Bridge.cast(Bridge.unbox(i, System.Int32), System.Int32)), "Provided object value is Integer and its value is 5.");
                } else {
                    Bridge.Test.NUnit.Assert.Fail("Provided object is not an Integer.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3357", {
        statics: {
            methods: {
                TestUriEquals: function () {
                    var uriStr = "https://deck.net/";
                    Bridge.Test.NUnit.Assert.True(System.Uri.equals(new System.Uri(uriStr), new System.Uri(uriStr)), "Two URIs initialized with same string are equal.");

                    Bridge.Test.NUnit.Assert.True(System.Uri.equals(new System.Uri("https://deck.net"), new System.Uri("https://deck.net")), "Two identical URIs by static string are equal.");
                    Bridge.Test.NUnit.Assert.False(System.Uri.equals(new System.Uri("https://deck.net/TEST"), new System.Uri("https://deck.net/test")), "Non-domain part of url is case-sensitive.");
                    Bridge.Test.NUnit.Assert.True(System.Uri.equals(new System.Uri("https://deck.net/"), new System.Uri("https://deck.net/")), "URLs ending with slash are equal.");
                    Bridge.Test.NUnit.Assert.True(System.Uri.equals(new System.Uri("https://deck.net:880"), new System.Uri("https://deck.net:880")), "Port number allows matching.");
                    Bridge.Test.NUnit.Assert.False(System.Uri.equals(new System.Uri("https://deck.net"), new System.Uri("http://deck.net")), "URI's protocol (http/https) matters.");
                    Bridge.Test.NUnit.Assert.False(System.Uri.equals(new System.Uri("https://deck.net:80/test"), new System.Uri("https://deck.net/test")), "Port numbers in URLs matters.");
                }
            }
        }
    });

    /**
     * This test consists in ensuring double.TryParse's result
     matches the .NET implementation.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3360
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3360", {
        statics: {
            methods: {
                /**
                 * Call TryParse() over '2/1' string, which can result in a different
                 interpretation if resolving is greedy (thus actually dividing 2
                 by 1 instead of analyzing the actual string, that is not parseable
                 to double.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3360
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3360
                 * @return  {void}
                 */
                TestDoubleParse: function () {
                    var test = { };
                    var result = System.Double.tryParse("2/1", null, test);

                    Bridge.Test.NUnit.Assert.False(result, "The '2/1' string does not parse into double.");
                }
            }
        }
    });

    /**
     * This test consists in ensuring types that can't be represented in
     JavaScript are converted to string when their .ToJson() method is
     called.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3361
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3361", {
        statics: {
            methods: {
                Test64bitSerialize: function () {
                    var small = System.Int64([-1,2097151]);
                    var big = System.Int64([0,2097152]);
                    var negSmall = System.Int64([1,-2097152]);
                    var negBig = System.Int64([0,-2097152]);

                    var usmall = System.UInt64(System.Int64([-1,2097151]));
                    var ubig = System.UInt64(System.Int64([0,2097152]));

                    var smallStr = JSON.stringify(small);
                    var bigStr = JSON.stringify(big);
                    var smallNegStr = JSON.stringify(negSmall);
                    var bigNegStr = JSON.stringify(negBig);

                    var usmallStr = JSON.stringify(usmall);
                    var ubigStr = JSON.stringify(ubig);

                    Bridge.Test.NUnit.Assert.AreEqual(smallStr, "9007199254740991", "Smaller long number is serialized as a JavaScript number/integer.");
                    Bridge.Test.NUnit.Assert.AreEqual(bigStr, "\"9007199254740992\"", "Big long number is serialized as a JavaScript string.");

                    Bridge.Test.NUnit.Assert.AreEqual(smallNegStr, "-9007199254740991", "Smaller negative long number is serialized as a JavaScript number/integer.");
                    Bridge.Test.NUnit.Assert.AreEqual(bigNegStr, "\"-9007199254740992\"", "Big negative long number is serialized as a JavaScript string.");

                    Bridge.Test.NUnit.Assert.AreEqual(usmallStr, "9007199254740991", "Smaller unsigned long number is serialized as a JavaScript number/integer.");
                    Bridge.Test.NUnit.Assert.AreEqual(ubigStr, "\"9007199254740992\"", "Big unsigned long number is serialized as a JavaScript string.");
                }
            }
        }
    });

    /**
     * The test here consists in checking whether dictionary keys are
     correctly handled when they are unsigned long.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3363
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3363", {
        statics: {
            methods: {
                /**
                 * The test plays around with max and min dictionary keys after
                 feeding it with some out-of-order values.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3363
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3363
                 * @return  {void}
                 */
                Test64bitKey: function () {
                    var dic = new (System.Collections.Generic.Dictionary$2(System.UInt64,System.String)).ctor();

                    dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$add(System.UInt64(20), "Twenty");
                    dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$add(System.UInt64(10), "Ten");
                    dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$add(System.UInt64(40), "Forty");
                    dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$add(System.UInt64(30), "Thirty");

                    Bridge.Test.NUnit.Assert.True(System.UInt64(10).equals(System.Linq.Enumerable.from(dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$Keys, System.UInt64).min()), "Min key is 10.");
                    Bridge.Test.NUnit.Assert.AreEqual("Ten", dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$getItem(System.UInt64(10)), "Key index 10 has the expected value, 'Ten'.");
                    Bridge.Test.NUnit.Assert.AreEqual("Ten", dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$getItem(System.Linq.Enumerable.from(dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$Keys, System.UInt64).min()), "Value from min key matches the expected 'Ten'.");

                    Bridge.Test.NUnit.Assert.True(System.UInt64(40).equals(System.Linq.Enumerable.from(dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$Keys, System.UInt64).max()), "Max key is 40.");
                    Bridge.Test.NUnit.Assert.AreEqual("Forty", dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$getItem(System.UInt64(40)), "Key index 40 has the expected value, 'Forty'.");
                    Bridge.Test.NUnit.Assert.AreEqual("Forty", dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$getItem(System.Linq.Enumerable.from(dic.System$Collections$Generic$IDictionary$2$System$UInt64$System$String$Keys, System.UInt64).max()), "Value from max key matches the expected 'Forty'.");
                }
            }
        }
    });

    /**
     * The test here consists in ensuring the GtetNestedTypes() and
     GetNetstedType() methods work as expected.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373", {
        statics: {
            methods: {
                /**
                 * Checks whether GetNestedTypes() produces the expected result.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373
                 * @return  {void}
                 */
                TestGetNestedTypes: function () {
                    var myType = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass);
                    var myTypeArray = Bridge.Reflection.getNestedTypes(myType, 16);
                    Bridge.Test.NUnit.Assert.AreEqual(2, myTypeArray.length, "The array of types with public bindings has the expected length.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass1, myTypeArray[System.Array.index(0, myTypeArray)], "The first entry in the array reflects the expected type.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass2, myTypeArray[System.Array.index(1, myTypeArray)], "The second entry in the array reflects the expected type.");

                    var myTypeArray1 = Bridge.Reflection.getNestedTypes(myType, 36);
                    Bridge.Test.NUnit.Assert.AreEqual(2, myTypeArray1.length, "The array of types with instance and non-public bindings has the expected length.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373+MyTypeClass+MyClass3", Bridge.Reflection.getTypeFullName(myTypeArray1[System.Array.index(0, myTypeArray1)]), "The first element reflects to the expected type name.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373+MyTypeClass+MyClass4", Bridge.Reflection.getTypeFullName(myTypeArray1[System.Array.index(1, myTypeArray1)]), "The second element reflects to the expected type name.");
                },
                /**
                 * Checks whether GetNestedType() produces the expected result.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373
                 * @return  {void}
                 */
                TestGetNestedType: function () {
                    var myType = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass);
                    var type = Bridge.Reflection.getNestedType(myType, "MyClass1");
                    Bridge.Test.NUnit.Assert.NotNull(type, "It was possible to get the nested type from the class reference.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass1, type, "The returned type matches the expected result.");

                    type = Bridge.Reflection.getNestedType(myType, "MyClass3", 32);
                    Bridge.Test.NUnit.Assert.NotNull(type, "It was possible to get the nested type from the class reference.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373+MyTypeClass+MyClass3", Bridge.Reflection.getTypeFullName(type), "The returned type name matches the expected result.");
                }
            }
        }
    });

    /**
     * A set of reflectable classes with subclasses also reflectable.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass1", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass2", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass3", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass4", {
        $kind: "nested class"
    });

    /**
     * The test here consists in checking whether the right constructor is
     called when instantiating a class which base's constructor may receive
     an arbitrary mount of parameters or a List. The result didn't match
     what happens in .NET.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382", {
        statics: {
            fields: {
                tag: 0
            },
            methods: {
                /**
                 * In the test, we'll just instantiate the two classes and check
                 whether they filled the static 'tag' variable with the value from
                 the expected constructor.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382
                 * @return  {void}
                 */
                TestBaseCtor: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.tag = 0;
                    new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.SubClassBrokenConstructorCall();
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.tag, "The right constructor was called for the class that used to call wrong constructor.");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.tag = 0;
                    new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.SubClassWorkAroundConstructorCall();
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.tag, "The right constructor was called for the class with workaround.");
                }
            }
        }
    });

    /**
     * Base class implementing the two constructors.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.BaseClass
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.BaseClass", {
        $kind: "nested class",
        fields: {
            Items: null
        },
        ctors: {
            $ctor1: function (items) {
                if (items === void 0) { items = []; }

                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.tag = 1;
                this.Items = items;
            },
            ctor: function (items) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.tag = 2;
                this.Items = items;
            }
        }
    });

    /**
     * The test here consists in checking whether the parsed type of
     Bridge.Html5.ProgressEvent's Loaded and Total variables are
     ulong, that would allow testing the numbers bound to them above
     the integer limit -- albeit JavaScript's limit is both beyond
     System.Int32 and way behind System.UInt64.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3384
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3384", {
        statics: {
            methods: {
                /**
                 * Makes an assynchronous call and fetch its event argument (cast into
                 ProgressEvent), checking whether the type resolves to UInt64/ulong.
                 Although this will not make much difference in client-side, this
                 will ensure comparisons with big numbers won't assume the
                 limitations of System.Int32.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3384
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3384
                 * @return  {void}
                 */
                TestProgressEventType: function () {
                    var xhr = new XMLHttpRequest();
                    var done = Bridge.Test.NUnit.Assert.Async();

                    xhr.onloadend = function (ev) {
                        Bridge.Test.NUnit.Assert.AreEqual(System.UInt64, System.UInt64, "ProgressEvent.Loaded is ulong.");
                        Bridge.Test.NUnit.Assert.AreEqual(System.UInt64, System.UInt64, "ProgressEvent.Total is ulong.");
                        done();
                    };
                    xhr.open("GET", "/");
                    xhr.send();
                }
            }
        }
    });

    /**
     * The test here consists in checking whether a char converted into an
     object can be cast back into char.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3385
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3385", {
        statics: {
            methods: {
                /**
                 * Just instantiate an object with a 'char' constant then check
                 whether it can convert back instead of throwing an exception.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3385
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3385
                 * @return  {void}
                 */
                TestObjectToChar: function () {
                    var a = Bridge.box(97, System.Char, String.fromCharCode, System.Char.getHashCode);
                    Bridge.Test.NUnit.Assert.AreEqual(97, System.Convert.toChar(a, null, 1), "Char encapsulated in an object can be cast back to a char.");
                }
            }
        }
    });

    /**
     * The test here consists in checking whether the Single (float) and
     Double (double) types' NaN and Infinity constants can be used as
     function parameters' default values.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386", {
        statics: {
            methods: {
                floatNaN: function (f) {
                    if (f === void 0) { f = NaN; }
                    return f;
                },
                floatPInf: function (f) {
                    if (f === void 0) { f = Infinity; }
                    return f;
                },
                floatNInf: function (f) {
                    if (f === void 0) { f = -Infinity; }
                    return f;
                },
                doubleNaN: function (d) {
                    if (d === void 0) { d = NaN; }
                    return d;
                },
                doublePInf: function (d) {
                    if (d === void 0) { d = Infinity; }
                    return d;

                },
                doubleNInf: function (d) {
                    if (d === void 0) { d = -Infinity; }
                    return d;
                },
                /**
                 * This test checks methods with float/double NaN and Infinity default
                 values, whether they get the passed or the default ones.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386
                 * @return  {void}
                 */
                Test64bitKey: function () {
                    var probe = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386();
                    var floatVal = 2.0;
                    var doubleVal = 2.0;

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.floatNaN(), Number.NaN, "floatNaN() with no parameter is float.NaN.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.floatNaN(floatVal), floatVal, "floatNaN() with parameter kept the parameter value.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.floatPInf(), Number.POSITIVE_INFINITY, "floatPInf() with no parameter is float.PositiveInfinity.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.floatPInf(floatVal), floatVal, "floatPInf() with parameter kept the parameter value.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.floatNInf(), Number.NEGATIVE_INFINITY, "floatNInf() with no parameter is float.NegativeInfinity.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.floatNInf(floatVal), floatVal, "floatNInf() with parameter kept the parameter value.");

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.doubleNaN(), Number.NaN, "doubleNaN() with no parameter is double.NaN.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.doubleNaN(doubleVal), doubleVal, "doubleNaN() with parameter kept the parameter value.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.doublePInf(), Number.POSITIVE_INFINITY, "doublePInf() with no parameter is double.PositiveInfinity.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.doublePInf(doubleVal), doubleVal, "doublePInf() with parameter kept the parameter value.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.doubleNInf(), Number.NEGATIVE_INFINITY, "doubleNInf() with no parameter is double.NegativeInfinity.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3386.doubleNInf(doubleVal), doubleVal, "doubleNInf() with parameter kept the parameter value.");

                }
            }
        }
    });

    /**
     * This tests consists in making two distinct methods, differing only by
     the generics argument passed and ensuring the two methods can be
     selectively triggered.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388", {
        statics: {
            methods: {
                /**
                 * Instantiate the class, then cast it calling the method, expecting
                 the corresponding one to be called.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388
                 * @return  {void}
                 */
                TestTwoInterfaceImplementation: function () {
                    var c = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.MyClass$1(System.Int32))();
                    Bridge.Test.NUnit.Assert.AreEqual("single", Bridge.cast(c, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.IFace$1(System.Int32)).Bridge$ClientTest$Batch3$BridgeIssues$Bridge3388$IFace$1$System$Int32$Method(), "The expected generic method was called.");
                    Bridge.Test.NUnit.Assert.AreEqual("list", Bridge.cast(c, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.IFace$1(System.Collections.Generic.List$1(System.Int32))).Bridge$ClientTest$Batch3$BridgeIssues$Bridge3388$IFace$1$System$Collections$Generic$List$1$System$Int32$Method(), "The expected generic method variation was called.");
                }
            }
        }
    });

    /**
     * An interface demanding the method with common name.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.IFace$1
     * @param   {Function}    [name]
     */
    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.IFace$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3390", {
        statics: {
            methods: {
                TestTernaryAssigmnment: function () {
                    var msg;
                    msg = (true) ? (msg = "left") : (msg = "right");
                    Bridge.Test.NUnit.Assert.AreEqual("left", msg, "true condition of inline if binds as expected.");

                    var msg2;
                    msg2 = (false) ? (msg2 = "left") : (msg2 = "right");
                    Bridge.Test.NUnit.Assert.AreEqual("right", msg2, "false condition of inline if binds as expected.");

                    var msg3;
                    msg3 = (false) ? (msg3 = "left") : ((false) ? (msg3 = "middle") : (msg3 = "right"));
                    Bridge.Test.NUnit.Assert.AreEqual("right", msg3, "false condition on chained inline if binds as expected.");

                    var msg4;
                    msg4 = (false) ? (msg4 = "left") : ((true) ? (msg4 = "middle") : (msg4 = "right"));
                    Bridge.Test.NUnit.Assert.AreEqual("middle", msg4, "true condition of chained inline if binds as expected.");
                }
            }
        }
    });

    /**
     * The test here consists in checking whether the equals (==) operator's
     result matches the Equals() method result with boxed enums.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3391
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3391", {
        statics: {
            methods: {
                /**
                 * Box the enum then check equality.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3391
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3391
                 * @return  {void}
                 */
                TestBoxedEnumEquals: function () {
                    var a = Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3391.BindingConst.Nulloid, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3391.BindingConst, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3391.BindingConst));
                    var b = a;

                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(a, b), "== operator works.");
                    Bridge.Test.NUnit.Assert.True(Bridge.equals(a, b), "Equals() method works.");
                    Bridge.Test.NUnit.Assert.True((Bridge.referenceEquals(a, b)) === Bridge.equals(a, b), "Nesting == and Equals() is the same.");
                    Bridge.Test.NUnit.Assert.True((Bridge.referenceEquals(a, b)) === Bridge.equals(b, a), "Nesting == and inverted order of Equals() is the same.");
                    Bridge.Test.NUnit.Assert.True((Bridge.referenceEquals(b, a)) === Bridge.equals(a, b), "Nesting inverted == and Equals() is the same.");
                    Bridge.Test.NUnit.Assert.True((!Bridge.referenceEquals(a, b)) === (!Bridge.equals(a, b)), "Nesting != and !Equals() is the same.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3391.BindingConst", {
        $kind: "nested enum",
        statics: {
            fields: {
                Nulloid: 1
            }
        }
    });

    /**
     * The test here consists in checking whether a custom comparer can be
     applied to an array of values.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394", {
        statics: {
            methods: {
                /**
                 * Create a List of integers and apply the custom comparer.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394
                 * @return  {void}
                 */
                TestCustomComparer: function () {
                    var arr = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());

                    arr.Sort$1(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394.CustomComparer());

                    Bridge.Test.NUnit.Assert.AreEqual(arr.getItem(0), 25, "First List entry is 25 (last, before sorting).");
                    Bridge.Test.NUnit.Assert.AreEqual(arr.getItem(1), 20, "Second List entry is 20 (fourth, before sorting).");
                    Bridge.Test.NUnit.Assert.AreEqual(arr.getItem(2), 15, "Third List entry is 15 (third, before sorting).");
                    Bridge.Test.NUnit.Assert.AreEqual(arr.getItem(3), 10, "Fourth List entry is 10 (second, before sorting).");
                    Bridge.Test.NUnit.Assert.AreEqual(arr.getItem(4), 5, "Last List entry is 20 (first, before sorting).");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394, {
        f1: function (_o1) {
            _o1.add(5);
            _o1.add(10);
            _o1.add(15);
            _o1.add(20);
            _o1.add(25);
            return _o1;
        }
    });

    /**
     * The custom comparer implementation.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394.CustomComparer
     * @implements  System.Collections.Generic.IComparer$1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3394.CustomComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Int32)],
        $kind: "nested class",
        alias: ["System$Collections$Generic$IComparer$1$System$Int32$compare", "System$Collections$Generic$IComparer$1$compare"],
        methods: {
            System$Collections$Generic$IComparer$1$System$Int32$compare: function (a, b) {
                return ((-Bridge.compare(a, b)) | 0);
            }
        }
    });

    /**
     * The test here consists in checking whether replacing a value in a given
     position in a two-dimensional array does not touch the remaining of the
     array.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396", {
        statics: {
            methods: {
                /**
                 * Build a two-dimensional array (5x5), replace one value and check
                 whether another element in the array was not changed.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396
                 * @return  {void}
                 */
                TestMultiDimArrayDefValue: function () {
                    var map2d = System.Array.create(function (){
                        return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396.TestStructure();
                    }, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396.TestStructure, 5, 5);
                    map2d.get([1, 1]).Foo = true;
                    Bridge.Test.NUnit.Assert.True(map2d.get([1, 1]).Foo, "Changed array element has the expected value.");
                    Bridge.Test.NUnit.Assert.False(map2d.get([2, 2]).Foo, "Other array element is untouched.");

                    var truecount = 0;
                    for (var i = 0; i < 5; i = (i + 1) | 0) {
                        for (var j = 0; j < 5; j = (j + 1) | 0) {
                            if (map2d.get([i, j]).Foo) {
                                truecount = (truecount + 1) | 0;
                            }
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(1, truecount, "One and only one element in the whole matrix is set to true.");
                },
                /**
                 * Repeat the test above for the ObjectLiteral class.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396
                 * @return  {void}
                 */
                TestMultiDimArrayObjectLiteralDefValue: function () {
                    var map2d = System.Array.create(function (){
                        return {};
                    }, null, System.Object, 5, 5);
                    map2d.get([1, 1]).Foo = true;
                    Bridge.Test.NUnit.Assert.True(map2d.get([1, 1]).Foo, "Changed array element has been changed.");
                    Bridge.Test.NUnit.Assert.Null(map2d.get([2, 2]).Foo, "Other array element is untouched.");

                    var truecount = 0;
                    for (var i = 0; i < 5; i = (i + 1) | 0) {
                        for (var j = 0; j < 5; j = (j + 1) | 0) {
                            if (map2d.get([i, j]).Foo) {
                                truecount = (truecount + 1) | 0;
                            }
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(1, truecount, "One and only one element in the whole matrix is set to true.");
                }
            }
        }
    });

    /**
     * The array requires to be an array of a custom structure.
     *
     * @private
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396.TestStructure
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396.TestStructure", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396.TestStructure(); }
            }
        },
        props: {
            Foo: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5844455023, this.Foo]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396.TestStructure)) {
                    return false;
                }
                return Bridge.equals(this.Foo, o.Foo);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3396.TestStructure();
                s.Foo = this.Foo;
                return s;
            }
        }
    });

    /**
     * The test here consists in checking whether referencing Bridge.Html5's
     typed array classes constants won't result in invalid javascript code.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3401
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3401", {
        statics: {
            methods: {
                /**
                 * Make simple references to the constants.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3401
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3401
                 * @return  {void}
                 */
                TestCustomComparer: function () { /// The given expression is always of the provided ('short') type
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Float32Array.BYTES_PER_ELEMENT), "Could reference Float32Array's bytes per element constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Float64Array.BYTES_PER_ELEMENT), "Could reference Float64Array's bytes per element constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Int16Array.BYTES_PER_ELEMENT), "Could reference Int16Array's bytes per element constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Int32Array.BYTES_PER_ELEMENT), "Could reference Int32Array's bytes per element constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Int8Array.BYTES_PER_ELEMENT), "Could reference Int8Array's bytes per element constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Uint16Array.BYTES_PER_ELEMENT), "Could reference Uint16Array's bytes per element constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Uint32Array.BYTES_PER_ELEMENT), "Could reference Uint32Array's bytes per element constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Uint8Array.BYTES_PER_ELEMENT), "Could reference Uint8Array's bytes per element constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(Uint8ClampedArray.BYTES_PER_ELEMENT), "Could reference Uint8ClampedArray's bytes per element constant."); /// The given expression is always of the provided ('short') type
                }
            }
        }
    });

    /**
     * The test here consists in ensuring extension methods parameters are
     correctly evaluated regarding their type and position. E.g. do not
     try to instantiate a decimal (1st parameter, but absent in the call)
     whenever a string is passed (2nd parameter, but first one in the actual
     call).
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3404
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3404", {
        statics: {
            methods: {
                /**
                 * To test, we call the extension method passing a string. It should
                 not try to convert the string to a decimal.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3404
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3404
                 * @return  {void}
                 */
                TestExtensionMethodDecimal: function () {
                    var a = System.Decimal(0);
                    Bridge.Test.NUnit.Assert.AreEqual("text", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3404Ex.M(a, "text"), "Calling the extension method works the way it is expected to.");
                }
            }
        }
    });

    /**
     * A dummy extension method for decimal, takin a string parameter.
     *
     * @static
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3404Ex
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3404Ex", {
        statics: {
            methods: {
                M: function (a, b) {
                    return b;
                }
            }
        }
    });

    /**
     * The test here consists in checking whether copyTo works for dictionary
     when its keys are instances of a class or complex structure.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408", {
        statics: {
            methods: {
                /**
                 * The tests just creates an instance of a dictionary with an
                 empty-bodied class as its keys, adds entries then copies to a
                 simple array, then checks whether the value in the array is the
                 expected one.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408
                 * @return  {void}
                 */
                TestCpxDicCopyTo: function () {
                    var cpx = new (System.Collections.Generic.Dictionary$2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408.C,System.Int32)).ctor();

                    cpx.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408.C(), 5);
                    cpx.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408.C(), 7);
                    cpx.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408.C(), 3);

                    var cpa = System.Array.init(3, 0, System.Int32);
                    cpx.Values.copyTo(cpa, 0);

                    Bridge.Test.NUnit.Assert.AreEqual(5, cpa[System.Array.index(0, cpa)], "First element extracted matches.");
                    Bridge.Test.NUnit.Assert.AreEqual(7, cpa[System.Array.index(1, cpa)], "Second element extracted matches.");
                    Bridge.Test.NUnit.Assert.AreEqual(3, cpa[System.Array.index(2, cpa)], "Third element extracted matches.");

                    var cpk = System.Array.init(3, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408.C);
                    cpx.Keys.copyTo(cpk, 0);

                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(cpk[System.Array.index(0, cpk)]), "First key extracted matches.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(cpk[System.Array.index(1, cpk)]), "Second key extracted matches.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(cpk[System.Array.index(2, cpk)]), "Third key extracted matches.");
                }
            }
        }
    });

    /**
     * A dummy class to serve as a "complex" key for the test dictionary.
     *
     * @private
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408.C
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3408.C", {
        $kind: "nested class"
    });

    /**
     * The test here consists in checking whether Convert.ToString(x) acts
     identically to x.ToString(), considering overrridden ToString() method
     when it applies.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415", {
        statics: {
            methods: {
                /**
                 * Test overridden and not overridden class instances against the expected results.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415
                 * @return  {void}
                 */
                TestToStringOverriding: function () {
                    var baseValue = "this is a value";

                    var ovr = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415.Overriding();
                    ovr.Value = baseValue;

                    var novr = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415.NotOverriding();
                    novr.Value = baseValue;

                    Bridge.Test.NUnit.Assert.AreEqual((baseValue || "") + " constant value.", System.Convert.toString(ovr), "Convert.ToString() considers class' override.");

                    Bridge.Test.NUnit.Assert.AreEqual(ovr.toString(), System.Convert.toString(ovr), "Convert.ToString(var) produces same result as var.ToString() when ToString() is overridden.");

                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415+NotOverriding", System.Convert.toString(novr), "Convert.ToString() considers class' override.");

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.toString(novr), System.Convert.toString(novr), "Convert.ToString(var) produces same result as var.ToString() when ToString() is not overridden.");
                }
            }
        }
    });

    /**
     * A class that does not implement an override to the .ToString method.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415.NotOverriding
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415.NotOverriding", {
        $kind: "nested class",
        props: {
            Value: null
        }
    });

    /**
     * A class implementing an override to the .ToString method.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415.Overriding
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3415.Overriding", {
        $kind: "nested class",
        props: {
            Value: null
        },
        methods: {
            toString: function () {
                return (this.Value || "") + " constant value.";
            }
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Action
     * @return  {void}
     */

    /**
     * The test here consists in checking whether templates on events would
     replace the {value} placeholder even if the {this} placeholder is not
     specified.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418", {
        statics: {
            methods: {
                Handler: function () { },
                /**
                 * Instantiate the class and check whether the template code produces
                 the expected side effects in the environment.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418
                 * @return  {void}
                 */
                TestEventTemplate: function () {
                    var expected = "Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418.Handler";

                    var program = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418();
                    program.status = "none";
                    Bridge.Test.NUnit.Assert.AreEqual("none", program.status, "Status variable reads 'none'.");

                    program.status = 'Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418.Handler+';;
                    Bridge.Test.NUnit.Assert.AreEqual((expected || "") + "+", program.status, "Template applied correctly for event.add().");

                    program.status = 'Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418.Handler-';
                    Bridge.Test.NUnit.Assert.AreEqual((expected || "") + "-", program.status, "Template applied correctly for event.remove().");
                }
            }
        },
        props: {
            status: null
        },
        methods: {
            /**
             * @instance
             * @public
             * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418
             * @event Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418#OnDragEnd
             * @return  {System.Action}
             */
            addOnDragEnd: function (value) { },
            /**
             * @instance
             * @public
             * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418
             * @event Bridge.ClientTest.Batch3.BridgeIssues.Bridge3418#OnDragEnd
             * @return  {System.Action}
             */
            removeOnDragEnd: function (value) { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge341A", {
        props: {
            Str: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge341B", {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge341B)]; },
        props: {
            Str: null
        },
        alias: ["equalsT", "System$IEquatable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge341B$equalsT"],
        methods: {
            equalsT: function (other) {
                if (other == null) {
                    return false;
                }
                return Bridge.referenceEquals(this.Str, other.Str);
            },
            getHashCode: function () {
                return Bridge.getHashCode(this.Str);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge342", {
        inherits: [System.Collections.Generic.IDictionary$2(System.Int32,System.String)],
        fields: {
            _backingDictionary: null
        },
        props: {
            Keys: {
                get: function () {
                    return this._backingDictionary.Keys;
                }
            },
            Values: {
                get: function () {
                    return this._backingDictionary.Values;
                }
            },
            Count: {
                get: function () {
                    return this._backingDictionary.Count;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
            "getItem", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem",
            "setItem", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$setItem",
            "Keys", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$Keys",
            "Values", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$Values",
            "Count", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$IsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$add",
            "copyTo", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$copyTo",
            "add$1", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$add",
            "remove$1", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$remove",
            "containsKey", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$containsKey",
            "tryGetValue", "System$Collections$Generic$IDictionary$2$System$Int32$System$String$tryGetValue",
            "clear", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$clear",
            "contains", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$contains",
            "remove", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$System$Int32$System$String$remove"
        ],
        ctors: {
            ctor: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge342.$ctor1.call(this, new (System.Collections.Generic.Dictionary$2(System.Int32,System.String)).ctor());
            },
            $ctor1: function (initialValues) {
                this.$initialize();
                this._backingDictionary = initialValues;
            }
        },
        methods: {
            getItem: function (key) {
                return this._backingDictionary.getItem(key);
            },
            setItem: function (key, value) {
                this._backingDictionary.setItem(key, value);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            },
            GetEnumerator: function () {
                return this._backingDictionary.GetEnumerator().$clone();
            },
            add: function (item) {
                System.Array.add(Bridge.cast(this._backingDictionary, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), item, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
            },
            add$1: function (key, value) {
                this._backingDictionary.add(key, value);
            },
            copyTo: function (array, arrayIndex) {
                System.Array.copyTo(Bridge.cast(this._backingDictionary, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), array, arrayIndex, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
            },
            remove$1: function (key) {
                return this._backingDictionary.remove(key);
            },
            remove: function (item) {
                return System.Array.remove(Bridge.cast(this._backingDictionary, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), item, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
            },
            containsKey: function (key) {
                return this._backingDictionary.containsKey(key);
            },
            tryGetValue: function (key, value) {
                return this._backingDictionary.tryGetValue(key, value);
            },
            clear: function () {
                this._backingDictionary.clear();
            },
            contains: function (item) {
                return System.Array.contains(Bridge.cast(this._backingDictionary, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.String))), item, System.Collections.Generic.KeyValuePair$2(System.Int32,System.String));
            }
        }
    });

    /**
     * The test here consists in checking whether Task.FromResult() returns
     a generics instance of System.Threading.Tasks, so that it can be
     cast into non-generics then back to the generics version.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3420
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3420", {
        statics: {
            methods: {
                /**
                 * Call Task.FromResult() casting to non-generics Task and try to cast
                 it back to the generics, thus being able to fetch the result value
                 fed to FromResult().
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3420
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3420
                 * @return  {void}
                 */
                TestTaskFromResult: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        t, 
                        t2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        t = System.Threading.Tasks.Task.fromResult(3, System.Int32);
                                        t2 = Bridge.cast(t, System.Threading.Tasks.Task$1(System.Int32));
                                        $task1 = t2;
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.AreEqual(3, $taskResult1, "The task result matches the expected value.");
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    /**
     * The test here consists in ensuring Bridge works with 'using static'
     when it is excluded/included at compile-time by a macro.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421", {
        statics: {
            methods: {
                /**
                 * To test just go ahead and call the statically used methods and
                 check the result.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421
                 * @return  {void}
                 */
                TestUsingStaticWithDirective: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(7, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421.Logger.Log("Success"), "The Log function is enabled via a compile-time constant.");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421.NoLoggerElse.NoLog(), "The expected using static was triggered for unset compile-time constat.");
                }
            }
        }
    });

    /**
     * This class will be statically used if RELEASE compile-time constant
     is set.
     *
     * @static
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421.Logger
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421.Logger", {
        $kind: "nested class",
        statics: {
            methods: {
                Log: function (msg) {
                    return msg.length;
                }
            }
        }
    });

    /**
     * This class will be statically used if Bridge incorrectly triggers
     code for undefined compile-time constants.
     *
     * @static
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421.NoLogger
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421.NoLogger", {
        $kind: "nested class",
        statics: {
            methods: {
                NoLog: function () {
                    return false;
                }
            }
        }
    });

    /**
     * This class will be statically used if Bridge averted code enclosed
     by an undefined/false compile-time constant.
     *
     * @static
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421.NoLoggerElse
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3421.NoLoggerElse", {
        $kind: "nested class",
        statics: {
            methods: {
                NoLog: function () {
                    return true;
                }
            }
        }
    });

    /**
     * The test here consists in ensuring Bridge gets the concrete class name
     when queried from a method implemented within an abstract class from
     which the class instance inherits from.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426
     * @see {@link https://dotnetfiddle.net/cug8fj}
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426", {
        statics: {
            methods: {
                /**
                 * Instantiate the class inheriting from abstract and check the
                 results of the class type name queries.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426
                 * @return  {void}
                 */
                TestGetTypeInAbstract: function () {
                    var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.ConcreteClass();
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+ConcreteClass", test.TypeProp, "Property query for instance:abstract class returns the expected class name.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+ConcreteClass", test.TypeMethod(), "Method query returns the expected class name.");
                },
                /**
                 * Instantiate the super and sub classes and check the results of the
                 class type name queries in different set ups.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426
                 * @return  {void}
                 */
                TestGetTypeInSuperClass: function () {
                    var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.ConcreteClass();
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+ConcreteClass", test.TypeProp, "Property query for instance:abstract class returns the expected class name.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+ConcreteClass", test.TypeMethod(), "Method query returns the expected class name.");

                    var sup = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.SuperClass();
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+SuperClass", sup.TypeProp, "Property query for direct instance of super class returns the expected name.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+SuperClass", sup.TypeMethod(), "Method query for direct instance of super class returns the expected name.");

                    var sub = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.SubClass();
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+SubClass", sub.TypeProp, "Property query for instance of sub class returns the expected name.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+SubClass", sub.TypeMethod(), "Method query for instance of sub class returns the expected name.");

                    var subCast = Bridge.cast(sub, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.SuperClass);
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+SubClass", subCast.TypeProp, "Property query for cast instance of super class returns the expected name.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426+SubClass", subCast.TypeMethod(), "Method query for cast instance of super class returns the expected name.");
                }
            }
        }
    });

    /**
     * This abstract class will implement the Type querying means from
     which a class inheriting from it will call. It should return the
     actual class' name instead of 'AbstractClass'.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.AbstractClass
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.AbstractClass", {
        $kind: "nested class",
        props: {
            TypeProp: {
                get: function () {
                    return Bridge.Reflection.getTypeFullName(Bridge.getType(this));
                }
            }
        },
        methods: {
            TypeMethod: function () {
                return Bridge.Reflection.getTypeFullName(Bridge.getType(this));
            }
        }
    });

    /**
     * This time, two ordinary classes will be involved. A super class
     implementing the means to query the name, and a sub class
     inheriting and calling them.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.SuperClass
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.SuperClass", {
        $kind: "nested class",
        props: {
            TypeProp: {
                get: function () {
                    return Bridge.Reflection.getTypeFullName(Bridge.getType(this));
                }
            }
        },
        methods: {
            TypeMethod: function () {
                return Bridge.Reflection.getTypeFullName(Bridge.getType(this));
            }
        }
    });

    /**
     * The test here consists in checking whether a two-level interface
     inheritance cast works as expected when a member is overridden thru
     the inheritance path.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432", {
        statics: {
            methods: {
                /**
                 * The test here consists in just instantiating the class and querying
                 the value returned from the cast reference.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432
                 * @return  {void}
                 */
                TestDerivation: function () {
                    var $t;
                    var probe1 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.Some2(), $t.TestValue = "test text", $t);
                    var probe2 = Bridge.cast(probe1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome1);
                    var probe3 = Bridge.cast(probe1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.Some1);

                    Bridge.Test.NUnit.Assert.AreEqual("test text", probe1.TestValue, "Got string return when class not cast at all.");
                    Bridge.Test.NUnit.Assert.AreEqual(25, probe2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3432$ISome1$TestValue, "Got integer return when class cast into its main interface.");
                    Bridge.Test.NUnit.Assert.AreEqual("test text", probe3.TestValue, "Got string return when class cast into the class that just implements the method.");
                }
            }
        }
    });

    /**
     * This interface contains the target query we will be doing in the
     test code.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome1", {
        $kind: "nested interface"
    });

    /**
     * The test here consists in checking whether DateTime arithmetic
     correctly accounts time zone shifting.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3437
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3437", {
        statics: {
            methods: {
                /**
                 * Test if time zone is considered by checking whether
                 now - UTC now == -TZ
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3437
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3437
                 * @return  {void}
                 */
                TestDateTimeMathTZ: function () {
                    // to ensure there will not be a minute/hour/day shift between the
                    // two queries, we'll first get now and utc now from the same
                    // variable
                    var now = System.DateTime.getNow();
                    var utcNow = System.DateTime.toUniversalTime(now);
                    var dtDiff = System.DateTime.subdd(System.DateTime.getNow(), System.DateTime.getUtcNow());

                    // If now and utcNow are equal, then we are at UTC == GMT, so
                    // there's no sense in having this test run at all.
                    if (System.DateTime.getDay(now) === System.DateTime.getDay(utcNow) && System.DateTime.getHour(now) === System.DateTime.getHour(utcNow) && System.DateTime.getMinute(now) === System.DateTime.getMinute(utcNow)) {
                        Bridge.Test.NUnit.Assert.True(true, "Host's time zone is in UTC, so there's no way on testing this.");
                    } else {
                        Bridge.Test.NUnit.Assert.AreNotEqual("00:00:00", Bridge.toString(dtDiff), "DateTime difference between now and UTC now is non-zero.");
                    }
                }
            }
        }
    });

    /**
     * The test here consists in checking DateTime.Add() returns the expected
     values when negative.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3441
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3441", {
        statics: {
            methods: {
                /**
                 * Test subtracting from today time and "today plus a shift", adding
                 seconds, minutes and hours, and checking whether the output is the
                 expected.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3441
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3441
                 * @return  {void}
                 */
                TestNegativeTimeSpanValueToString: function () {
                    var val1 = Bridge.toString((System.DateTime.subdd(System.DateTime.getToday(), System.DateTime.addSeconds(System.DateTime.getToday(), 7))));
                    var val2 = Bridge.toString((System.DateTime.subdd(System.DateTime.getToday(), System.DateTime.addSeconds(System.DateTime.getToday(), 70))));
                    var val3 = Bridge.toString((System.DateTime.subdd(System.DateTime.getToday(), System.DateTime.addMinutes(System.DateTime.getToday(), 7))));
                    var val4 = Bridge.toString((System.DateTime.subdd(System.DateTime.getToday(), System.DateTime.addMinutes(System.DateTime.getToday(), 70))));
                    var val5 = Bridge.toString((System.DateTime.subdd(System.DateTime.getToday(), System.DateTime.addHours(System.DateTime.getToday(), 7))));
                    var val6 = Bridge.toString((System.DateTime.subdd(System.DateTime.getToday(), System.DateTime.addHours(System.DateTime.getToday(), 70))));
                    var val7 = Bridge.toString((System.DateTime.subdd(System.DateTime.getToday(), System.DateTime.addHours(System.DateTime.getToday(), 700))));
                    var val8 = Bridge.toString((System.DateTime.subdd(System.DateTime.getToday(), System.DateTime.addHours(System.DateTime.getToday(), 7000))));

                    Bridge.Test.NUnit.Assert.AreEqual("-00:00:07", val1, "-7 seconds results in '-00:00:07'.");
                    Bridge.Test.NUnit.Assert.AreEqual("-00:01:10", val2, "-70 seconds results in '-00:01:10'.");
                    Bridge.Test.NUnit.Assert.AreEqual("-00:07:00", val3, "-7 minutes results in '-00:07:00'.");
                    Bridge.Test.NUnit.Assert.AreEqual("-01:10:00", val4, "-70 minutes results in '-01:10:00'.");
                    Bridge.Test.NUnit.Assert.AreEqual("-07:00:00", val5, "-7 hours results in '-07:00:00'.");
                    Bridge.Test.NUnit.Assert.AreEqual("-2.22:00:00", val6, "-70 hours results in '-2.22:00:00'.");
                    Bridge.Test.NUnit.Assert.AreEqual("-29.04:00:00", val7, "-700 hours results in '-29.04:00:00'.");
                    Bridge.Test.NUnit.Assert.AreEqual("-291.16:00:00", val8, "-7000 hours results in '-291.16:00:00'.");
                }
            }
        }
    });

    /**
     * Testing to ensure that DateTime DayOfYear property is returning the correct values at various times throughout a normal year and leapyear.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3450
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3450", {
        statics: {
            methods: {
                TestIsDateTimeDayOfYearWorking: function () {
                    var val1 = System.DateTime.getDayOfYear(System.DateTime.create(2018, 3, 6, 1, 1, 1));
                    var val2 = System.DateTime.getDayOfYear(System.DateTime.create(2018, 2, 20, 1, 1, 1));
                    var val3 = System.DateTime.getDayOfYear(System.DateTime.create(2019, 3, 6, 1, 1, 1));
                    var val4 = System.DateTime.getDayOfYear(System.DateTime.create(2019, 2, 20, 1, 1, 1));
                    var val5 = System.DateTime.getDayOfYear(System.DateTime.create(2020, 3, 6, 1, 1, 1));
                    var val6 = System.DateTime.getDayOfYear(System.DateTime.create(2020, 2, 20, 1, 1, 1));
                    var val7 = System.DateTime.getDayOfYear(System.DateTime.create(2021, 3, 6, 1, 1, 1));
                    var val8 = System.DateTime.getDayOfYear(System.DateTime.create(2021, 2, 20, 1, 1, 1));

                    var val9 = System.DateTime.getDayOfYear(System.DateTime.create(2018, 3, 6));
                    var val10 = System.DateTime.getDayOfYear(System.DateTime.create(2018, 2, 20));
                    var val11 = System.DateTime.getDayOfYear(System.DateTime.create(2019, 3, 6));
                    var val12 = System.DateTime.getDayOfYear(System.DateTime.create(2019, 2, 20));
                    var val13 = System.DateTime.getDayOfYear(System.DateTime.create(2020, 3, 6));
                    var val14 = System.DateTime.getDayOfYear(System.DateTime.create(2020, 2, 20));
                    var val15 = System.DateTime.getDayOfYear(System.DateTime.create(2021, 3, 6));
                    var val16 = System.DateTime.getDayOfYear(System.DateTime.create(2021, 2, 20));

                    var val17 = System.DateTime.getDayOfYear(System.DateTime.create(2018, 1, 1));
                    var val18 = System.DateTime.getDayOfYear(System.DateTime.create(2018, 12, 31));
                    var val19 = System.DateTime.getDayOfYear(System.DateTime.create(2019, 1, 1));
                    var val20 = System.DateTime.getDayOfYear(System.DateTime.create(2019, 12, 31));
                    var val21 = System.DateTime.getDayOfYear(System.DateTime.create(2020, 1, 1));
                    var val22 = System.DateTime.getDayOfYear(System.DateTime.create(2020, 12, 31));
                    var val23 = System.DateTime.getDayOfYear(System.DateTime.create(2021, 1, 1));
                    var val24 = System.DateTime.getDayOfYear(System.DateTime.create(2021, 12, 31));

                    var val25 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2018, 3, 6, 1, 1, 1)));
                    var val26 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2018, 2, 20, 1, 1, 1)));
                    var val27 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2019, 3, 6, 1, 1, 1)));
                    var val28 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2019, 2, 20, 1, 1, 1)));
                    var val29 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2020, 3, 6, 1, 1, 1)));
                    var val30 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2020, 2, 20, 1, 1, 1)));
                    var val31 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2021, 3, 6, 1, 1, 1)));
                    var val32 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2021, 2, 20, 1, 1, 1)));

                    var val33 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2018, 1, 1, 1, 1, 1)));
                    var val34 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2018, 12, 31, 1, 1, 1)));
                    var val35 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2019, 1, 1, 1, 1, 1)));
                    var val36 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2019, 12, 31, 1, 1, 1)));
                    var val37 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2020, 1, 1, 1, 1, 1)));
                    var val38 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2020, 12, 31, 1, 1, 1)));
                    var val39 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2021, 1, 1, 1, 1, 1)));
                    var val40 = System.DateTime.getDayOfYear(System.DateTime.getDate(System.DateTime.create(2021, 12, 31, 1, 1, 1)));

                    Bridge.Test.NUnit.Assert.AreEqual(65, val1);
                    Bridge.Test.NUnit.Assert.AreEqual(51, val2);
                    Bridge.Test.NUnit.Assert.AreEqual(65, val3);
                    Bridge.Test.NUnit.Assert.AreEqual(51, val4);
                    Bridge.Test.NUnit.Assert.AreEqual(66, val5);
                    Bridge.Test.NUnit.Assert.AreEqual(51, val6);
                    Bridge.Test.NUnit.Assert.AreEqual(65, val7);
                    Bridge.Test.NUnit.Assert.AreEqual(51, val8);

                    Bridge.Test.NUnit.Assert.AreEqual(65, val9);
                    Bridge.Test.NUnit.Assert.AreEqual(51, val10);
                    Bridge.Test.NUnit.Assert.AreEqual(65, val11);
                    Bridge.Test.NUnit.Assert.AreEqual(51, val12);
                    Bridge.Test.NUnit.Assert.AreEqual(66, val13);
                    Bridge.Test.NUnit.Assert.AreEqual(51, val14);
                    Bridge.Test.NUnit.Assert.AreEqual(65, val15);
                    Bridge.Test.NUnit.Assert.AreEqual(51, val16);

                    Bridge.Test.NUnit.Assert.AreEqual(1, val17);
                    Bridge.Test.NUnit.Assert.AreEqual(365, val18);
                    Bridge.Test.NUnit.Assert.AreEqual(1, val19);
                    Bridge.Test.NUnit.Assert.AreEqual(365, val20);
                    Bridge.Test.NUnit.Assert.AreEqual(1, val21);
                    Bridge.Test.NUnit.Assert.AreEqual(366, val22);
                    Bridge.Test.NUnit.Assert.AreEqual(1, val23);
                    Bridge.Test.NUnit.Assert.AreEqual(365, val24);

                    Bridge.Test.NUnit.Assert.AreEqual(val1, val25);
                    Bridge.Test.NUnit.Assert.AreEqual(val2, val26);
                    Bridge.Test.NUnit.Assert.AreEqual(val3, val27);
                    Bridge.Test.NUnit.Assert.AreEqual(val4, val28);
                    Bridge.Test.NUnit.Assert.AreEqual(val5, val29);
                    Bridge.Test.NUnit.Assert.AreEqual(val6, val30);
                    Bridge.Test.NUnit.Assert.AreEqual(val7, val31);
                    Bridge.Test.NUnit.Assert.AreEqual(val8, val32);

                    Bridge.Test.NUnit.Assert.AreEqual(val17, val33);
                    Bridge.Test.NUnit.Assert.AreEqual(val18, val34);
                    Bridge.Test.NUnit.Assert.AreEqual(val19, val35);
                    Bridge.Test.NUnit.Assert.AreEqual(val20, val36);
                    Bridge.Test.NUnit.Assert.AreEqual(val21, val37);
                    Bridge.Test.NUnit.Assert.AreEqual(val22, val38);
                    Bridge.Test.NUnit.Assert.AreEqual(val23, val39);
                    Bridge.Test.NUnit.Assert.AreEqual(val24, val40);
                }
            }
        }
    });

    /**
     * The test here consists in ensuring Bridge emits correct code
     representing a derived class implementing a generic interface.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453", {
        statics: {
            methods: {
                /**
                 * To explore the issue, we create an instance of the interface
                 implementing class, then call its cross-implemented method
                 specifying the simple, unrelated, class.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453
                 * @return  {void}
                 */
                TestDerivedGenericInterface: function () {
                    var $t;
                    var o1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c2();
                    var c = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c0(), $t.I = 16, $t);
                    var x = o1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3453$i1$m1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c0, c).getResult();

                    Bridge.Test.NUnit.Assert.AreEqual(c, x, "The value from the derived class matches the value passed.");
                }
            }
        }
    });

    /**
     * A simple class, to be the specialization parameter to the class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c0
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c0", {
        $kind: "nested class",
        props: {
            I: 0
        }
    });

    /**
     * A class implementing the contract from the interface, but not
     contract-bound to the interface.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c1", {
        $kind: "nested class",
        methods: {
            m1: function (TResult, result) {
                return System.Threading.Tasks.Task.fromResult(result, TResult);
            }
        }
    });

    /**
     * Interface with a generics-enabled contract method.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.i1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.i1", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467", {
        statics: {
            methods: {
                /**
                 * Just check if a new instance of the class is not null. Actually
                 what counts here is just if the code will result in runnable js.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467
                 * @return  {void}
                 */
                TestGenericUsingStatic: function () {
                    Bridge.Test.NUnit.Assert.NotNull(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467_Test1(), "Instantiating nested, sealed classes works.");
                }
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467_ITest$1", function (T) { return {
        $kind: "interface"
    }; });

    /**
     * The test here consists in ensuring async tasks can't have the
     flow broken, which results in race conditions and data corruption.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476", {
        statics: {
            methods: {
                /**
                 * Run the tasks expecting that Case0.Method4 call would assert as true
                 testData value in both events.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476
                 * @return  {void}
                 */
                TestTaskCase0: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        done, 
                        case0, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        case0 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case0(done);

                                        case0.SomeEvent1();

                                        $task1 = System.Threading.Tasks.Task.delay(1000);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        case0.SomeEvent2();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                /**
                 * Run the tasks expecting that Temp.Method4 call would assert as true
                 testData value in both calls.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476
                 * @return  {void}
                 */
                TestTaskCase1: function () {
                    var done = Bridge.Test.NUnit.Assert.Async();
                    var case1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case1(done);

                    case1.SomeEvent1();
                    case1.SomeEvent1();
                    case1.SomeEvent2();
                    case1.SomeEvent1();
                }
            }
        }
    });

    /**
     * A class to implement the async tasks that can be called.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case0
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case0", {
        $kind: "nested class",
        fields: {
            testData: false,
            done: null,
            source: null
        },
        ctors: {
            ctor: function (done) {
                this.$initialize();
                this.testData = true;
                this.done = done;
                this.source = new System.Threading.Tasks.TaskCompletionSource();
            }
        },
        methods: {
            SomeEvent1: function () {
                this.Method1().continueWith($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case0.f1);
            },
            SomeEvent2: function () {
                this.Method2().continueWith($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case0.f1);
            },
            Method1: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    oResult, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        // wait for second click
                                        $task1 = this.source.task;
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        oResult = $taskResult1;

                                        // do some finishing
                                        $task2 = this.Method4();
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult($taskResult2);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Method2: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        //wake up second activity
                                        this.source.setResult(null);

                                        //do some finishing
                                        $task1 = this.Method3();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Method3: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        // call whatever
                                        $task1 = this.Method5();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.testData = false;

                                        $tcs.setResult("");
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Method4: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        // Expected: True
                                        Bridge.Test.NUnit.Assert.True(this.testData, "Data not corrupt as the first task runs.");

                                        $task1 = this.Method5();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        // Expected: True
                                        Bridge.Test.NUnit.Assert.True(this.testData, "Data does not get corrupt as the second task runs.");
                                        this.done();
                                        $tcs.setResult("");
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Method5: function () {
                return System.Threading.Tasks.Task.fromResult("", System.String);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case0", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case0, {
        f1: function (r_) { }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case1", {
        $kind: "nested class",
        fields: {
            iTestData: 0,
            source: null,
            done: null,
            chkCount: 0
        },
        ctors: {
            init: function () {
                this.chkCount = 1;
            },
            ctor: function (done) {
                this.$initialize();
                this.iTestData = 0;
                this.done = done;
                this.source = new System.Threading.Tasks.TaskCompletionSource();
            }
        },
        methods: {
            SomeEvent1: function () {
                this.Method1().continueWith($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case1.f1);
            },
            SomeEvent2: function () {
                this.Method2().continueWith($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case1.f1);
            },
            Method1: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    oResult, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        // wait for second click
                                        $task1 = this.source.task;
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        oResult = $taskResult1;

                                        // do some finishing
                                        $task2 = this.Method4();
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult($taskResult2);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Method2: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        //wake up second activity
                                        this.source.setResult(null);

                                        //do some finishing
                                        $task1 = this.Method3();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Method3: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        // call whatever
                                        $task1 = this.Method5();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult("");
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Method4: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    iStoreValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.iTestData = (this.iTestData + 1) | 0;
                                        iStoreValue = this.iTestData;
                                        $task1 = this.Method5();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        // Expected: iStoreValue == iTestData
                                        Bridge.Test.NUnit.Assert.AreEqual(iStoreValue, this.iTestData, "Data did not get corrupt with the async-await calls (." + this.chkCount + "/3).");

                                        if (Bridge.identity(this.chkCount, ((this.chkCount = (this.chkCount + 1) | 0))) >= 3) {
                                            this.done();
                                        }

                                        $tcs.setResult("");
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Method5: function () {
                return System.Threading.Tasks.Task.fromResult("", System.String);
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case1", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3476.Case1, {
        f1: function (r_) { }
    });

    /**
     * Ensures linq's OrderBy and ThenBy default sort behavior matches native
     .NET logic.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477", {
        statics: {
            methods: {
                /**
                 * Tests by just joining an array after ordering and checking whether
                 it mathces the expected string.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477
                 * @return  {void}
                 */
                TestOrderByComparer: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("a - A - b - B", Bridge.toArray(System.Linq.Enumerable.from(System.Array.init(["A", "a", "b", "B"], System.String), System.String).orderBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477.f1)).join(" - "), "OrderBy 'A-a-b-B' results in 'a-A-b-B'.");
                    Bridge.Test.NUnit.Assert.AreEqual("a - A - b - B", Bridge.toArray(System.Linq.Enumerable.from(System.Array.init(["A", "a", "b", "B"], System.String), System.String).orderBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477.f2).thenBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477.f1)).join(" - "), "OrderBy.ThenBy 'A-a-b-B' results in 'a-A-b-B'.");
                    Bridge.Test.NUnit.Assert.AreEqual("B - b - A - a", Bridge.toArray(System.Linq.Enumerable.from(System.Array.init(["A", "a", "b", "B"], System.String), System.String).orderByDescending($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477.f1)).join(" - "), "OrderByDescending 'A-a-b-B' results in 'B-b-A-a'.");
                    Bridge.Test.NUnit.Assert.AreEqual("B - b - A - a", Bridge.toArray(System.Linq.Enumerable.from(System.Array.init(["A", "a", "b", "B"], System.String), System.String).orderBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477.f2).thenByDescending($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477.f1)).join(" - "), "OrderBy.ThenByDescending 'A-a-b-B' results in 'B-b-A-a'.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3477, {
        f1: function (x) {
            return x;
        },
        f2: function (x) {
            return true;
        }
    });

    /**
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478", {
        statics: {
            fields: {
                /**
                 * All time zones available (according to https://en.wikipedia.org/wiki/List_of_UTC_time_offsets)
                 *
                 * @static
                 * @public
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478
                 * @type System.Collections.Generic.List$1
                 */
                WorldTZList: null
            },
            ctors: {
                init: function () {
                    this.WorldTZList = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.f1(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset)).ctor());
                }
            },
            methods: {
                /**
                 * This is an implementation of math to compare whether the builtin
                 timespan result of the subtraction of two dates will equal to
                 the "hardcoded" or "custom" calculation, which is validated against
                 a native .NET/C# application.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478
                 * @param   {System.DateTime}    date0    
                 * @param   {System.DateTime}    date1
                 * @return  {boolean}
                 */
                CompareDateMath: function (date0, date1) {
                    var utcOffset = System.DateTime.subdd(date0, date1);

                    // Manually calculate the time difference to ensure it is working
                    // and matches the result.
                    var deltaHr = 0;
                    var deltaMn = 0;
                    if (System.DateTime.getDay(date1) !== System.DateTime.getDay(date0)) {
                        if (((System.DateTime.getDay(date1) + 1) | 0) === System.DateTime.getDay(date0) || ((System.DateTime.getMonth(date1) + 1) | 0) === System.DateTime.getMonth(date0) || ((System.DateTime.getYear(date1) + 1) | 0) === System.DateTime.getYear(date0)) {
                            deltaHr = ((((24 + System.DateTime.getHour(date0)) | 0)) - System.DateTime.getHour(date1)) | 0;
                        } else if (((System.DateTime.getDay(date1) - 1) | 0) === System.DateTime.getDay(date0) || ((System.DateTime.getMonth(date1) - 1) | 0) === System.DateTime.getMonth(date0) || ((System.DateTime.getYear(date1) - 1) | 0) === System.DateTime.getYear(date0)) {
                            deltaHr = (System.DateTime.getHour(date0) - (((24 + System.DateTime.getHour(date1)) | 0))) | 0;
                        }
                    } else {
                        deltaHr = (System.DateTime.getHour(date0) - System.DateTime.getHour(date1)) | 0;
                    }

                    if (deltaHr !== 0) {
                        if (deltaHr > 0) {
                            if (System.DateTime.getMinute(date1) > System.DateTime.getMinute(date0)) {
                                deltaHr = (deltaHr - 1) | 0;
                                deltaMn = (System.DateTime.getMinute(date1) - System.DateTime.getMinute(date0)) | 0;
                            } else if (System.DateTime.getMinute(date1) < System.DateTime.getMinute(date0)) {
                                deltaMn = (System.DateTime.getMinute(date1) + (((60 - System.DateTime.getMinute(date0)) | 0))) | 0;
                            }
                        } else {
                            if (System.DateTime.getMinute(date1) > System.DateTime.getMinute(date0)) {
                                deltaMn = (System.DateTime.getMinute(date0) - System.DateTime.getMinute(date1)) | 0;
                            } else if (System.DateTime.getMinute(date1) < System.DateTime.getMinute(date0)) {
                                deltaHr = (deltaHr + 1) | 0;
                                deltaMn = (System.DateTime.getMinute(date0) - (((60 + System.DateTime.getMinute(date1)) | 0))) | 0;
                            }
                        }
                    } else {
                        // A -00:30 or +00:30 time zone
                        if (System.DateTime.getMinute(date1) !== System.DateTime.getMinute(date0)) {
                            // If negative, then it is a -0:30 time zone.
                            deltaMn = (System.DateTime.getMinute(date0) - System.DateTime.getMinute(date1)) | 0;
                        }
                    }

                    // The effective test. Only makes sense if our current time zone is not GMT.
                    return utcOffset.getMinutes() === deltaMn && utcOffset.getHours() === deltaHr;
                },
                /**
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478
                 * @return  {void}
                 */
                TestDateTimeTzMath: function () {
                    var $t, $t1, $t2;
                    var now = System.DateTime.getNow();
                    var unow = System.DateTime.getUtcNow();
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.CompareDateMath(now, unow), "Date time's Now and UtcNow-based math is correct.");

                    now = System.DateTime.addMinutes(System.DateTime.getToday(), 30);
                    unow = System.DateTime.addMinutes(now, -120);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.CompareDateMath(now, unow), "Arbitrary date (based on today and yesterday) math is correct.");

                    now = System.DateTime.addMinutes(System.DateTime.getToday(), (1320));
                    unow = System.DateTime.addMinutes(now, 120);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.CompareDateMath(now, unow), "Arbitrary date (based on today and tomorrow) math is correct.");

                    now = System.DateTime.addMinutes(System.DateTime.getToday(), (-60));
                    unow = System.DateTime.addMinutes(now, 120);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.CompareDateMath(now, unow), "Arbitrary date (based on yesterday and today) math is correct.");

                    now = System.DateTime.addMinutes(System.DateTime.getToday(), 30);
                    unow = System.DateTime.addMinutes(now, -150);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.CompareDateMath(now, unow), "Arbitrary date +half hour (based on today and yesterday) math is correct.");

                    now = System.DateTime.addMinutes(System.DateTime.getToday(), (1320));
                    unow = System.DateTime.addMinutes(now, 150);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.CompareDateMath(now, unow), "Arbitrary date +half hour (based on today and tomorrow) math is correct.");

                    now = System.DateTime.addMinutes(System.DateTime.getToday(), (-60));
                    unow = System.DateTime.addMinutes(now, 150);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.CompareDateMath(now, unow), "Arbitrary date +half hour (based on yesterday and today) math is correct.");

                    var dateTimeSamples = new (System.Collections.Generic.List$1(System.DateTime)).ctor();
                    var days = System.Array.init([1, 15, 31], System.Int32);

                    // For every month, add dates for first day, 15th and last day of month, for
                    // midnight, 1:30am, 1:15pm and 11:45pm.
                    for (var month = 1; month <= 12; month = (month + 1) | 0) {
                        $t = Bridge.getEnumerator(days);
                        try {
                            while ($t.moveNext()) {
                                var day = $t.Current;

                                if (day === 31) {
                                    if (month === 12) {
                                        now = System.DateTime.addDays(System.DateTime.create(((System.DateTime.getYear(System.DateTime.getNow()) + 1) | 0), 1, 1), -1);
                                    } else {
                                        now = System.DateTime.addDays(System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), ((month + 1) | 0), 1), -1);
                                    }
                                } else {
                                    now = System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), month, day);
                                }

                                dateTimeSamples.add(System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), month, System.DateTime.getDay(now)));
                                dateTimeSamples.add(System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), month, System.DateTime.getDay(now), 1, 30, 0));
                                dateTimeSamples.add(System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), month, System.DateTime.getDay(now), 13, 15, 0));
                                dateTimeSamples.add(System.DateTime.create(System.DateTime.getYear(System.DateTime.getNow()), month, System.DateTime.getDay(now), 23, 45, 0));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }

                    // For every available world time zone, check if a given date - its time zone offset results in the time zone offset itself.
                    $t1 = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.WorldTZList);
                    try {
                        while ($t1.moveNext()) {
                            var tz = $t1.Current;
                            $t2 = Bridge.getEnumerator(dateTimeSamples);
                            try {
                                while ($t2.moveNext()) {
                                    var refDate = $t2.Current;
                                    now = refDate;
                                    unow = System.DateTime.addMinutes(refDate, tz.ToMinutes());

                                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.CompareDateMath(now, unow), (tz.NiceTS(now) || "") + " hardcoded math matches DateTime math result.");
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478, {
        f1: function (_o1) {
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-12));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-11));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-10));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-9, -30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-9));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-8));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-7));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-6));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-5));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-4));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-3, -30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-3));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-2));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(-1));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(1));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(2));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(3));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(3, 30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(4));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(4, 30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(5));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(5, 30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(5, 45));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(6));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(6, 30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(7));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(8));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(8, 30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(8, 45));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(9));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(9, 30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(10));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(10, 30));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(11));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(12));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(12, 45));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(13));
            _o1.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset(14));
            return _o1;
        }
    });

    /**
     * A simple class to encapsulate a time zone offset.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3478.TZ_Offset", {
        $kind: "nested class",
        fields: {
            Hr: 0,
            Mn: 0
        },
        ctors: {
            ctor: function (h, m) {
                if (m === void 0) { m = 0; }

                this.$initialize();
                this.Hr = h;
                this.Mn = m;
            }
        },
        methods: {
            ToMinutes: function () {
                return (((Bridge.Int.mul(60, this.Hr)) + this.Mn) | 0);
            },
            NiceTS: function (refDate) {
                return System.DateTime.getYear(refDate) + "-" + System.DateTime.getMonth(refDate) + "-" + System.DateTime.getDay(refDate) + " " + System.DateTime.getHour(refDate) + ":" + System.DateTime.getMinute(refDate) + " @TZ: " + this.Hr + ":" + (System.Int32.format(Math.abs(this.Mn), "D2") || "") + "h";
            }
        }
    });

    /**
     * The test here consists in checking whether a KeyValuePair object can be
     used as a dictionary key.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3483
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3483", {
        statics: {
            methods: {
                /**
                 * Test it by creating a dictionary with KeyValuePair&lt;Guid, Guid&gt;
                 as its key and a string as its value.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3483
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3483
                 * @return  {void}
                 */
                KeyValuePairAsDictionaryKeyWorks: function () {
                    // * Including elements of original test case
                    var guid = new System.Guid.$ctor4("9B9AAC17-22BB-425C-AA93-9C02C5146965");
                    var key_org = new (System.Collections.Generic.KeyValuePair$2(System.Guid,System.Guid)).$ctor1(guid, System.Guid.Empty);
                    var dict = new (System.Collections.Generic.Dictionary$2(System.Collections.Generic.KeyValuePair$2(System.Guid,System.Guid),System.String)).ctor();
                    dict.setItem(key_org, "MyValue");

                    // another instance of the same valued pair as key_org
                    var new_key = new (System.Collections.Generic.KeyValuePair$2(System.Guid,System.Guid)).$ctor1(guid, System.Guid.Empty);

                    Bridge.Test.NUnit.Assert.AreEqual("MyValue", dict.getItem(new_key), "Originally reported test case works.");

                    // *** Simplified tests

                    // * Inline instance key vs variable-bound instance key
                    var test1 = new (System.Collections.Generic.Dictionary$2(System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32),System.Int32)).ctor();
                    test1.add(new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1), 1);

                    // this should match the key added above
                    var test1_probe = new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1);

                    Bridge.Test.NUnit.Assert.AreEqual(1, test1.getItem(test1_probe), "Fetching from different instance works.");

                    // * Inline instance key vs another inline instance key
                    var test2 = new (System.Collections.Generic.Dictionary$2(System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32),System.Int32)).ctor();
                    test2.add(new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1), 1);

                    // the key here should match the key added above
                    Bridge.Test.NUnit.Assert.AreEqual(1, test2.getItem(new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1)), "Fetching from inline instance works.");

                    // * Both variable-bound key instances (different instances)
                    // Keys must be the same
                    var test3_probeA = new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1);
                    var test3_probeB = new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1);

                    var test3 = new (System.Collections.Generic.Dictionary$2(System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32),System.Int32)).ctor();
                    test3.add(test3_probeA, 1);

                    Bridge.Test.NUnit.Assert.AreEqual(1, test3.getItem(test3_probeA), "Fetching from same instance works.");
                    Bridge.Test.NUnit.Assert.AreEqual(1, test3.getItem(test3_probeB), "Fetching from different instance with same value works");

                    // * Indexer operator value binding
                    var test4 = new (System.Collections.Generic.Dictionary$2(System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32),System.Int32)).ctor();
                    test4.setItem(new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1), 1);

                    // the key here should match the key added above
                    Bridge.Test.NUnit.Assert.AreEqual(1, test4.getItem(new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1)), "Fetching after assigning with array indexer operator works.");

                    // * Get method value fetching
                    var test5 = new (System.Collections.Generic.Dictionary$2(System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32),System.Int32)).ctor();
                    test5.add(new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1), 1);

                    // the key here should match the key added above
                    Bridge.Test.NUnit.Assert.AreEqual(1, test5.getItem(new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).$ctor1(1, 1)), "Fetching via the Get() method works.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3485", {
        statics: {
            methods: {
                /**
                 * The tests consists in just instantiating a class, which inherits
                 from an external-marked class, and references a property that's
                 declared in the base class after the 'virtual' keyword, thus that
                 should have been inherited by the class instance.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3485
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3485
                 * @return  {void}
                 */
                TestExternalVirtualProperty: function () {
                    var v1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3485.B().GetV1();
                    var v2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3485.B().GetV2();

                    Bridge.Test.NUnit.Assert.AreEqual("value1", v1, "Non-virtual inherited property reference works.");
                    Bridge.Test.NUnit.Assert.AreEqual("value2", v2, "Virtual inherited property reference works.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3485.B", {
        inherits: [Bridge3485_A],
        $kind: "nested class",
        methods: {
            GetV1: function () {
                return this.V1;
            },
            GetV2: function () {
                return Bridge.ensureBaseProperty(this, "V2", "Bridge3485_A").$Bridge3485_A$V2;
            }
        }
    });

    /**
     * Test whether constructor calls are correctly issued when instantiating
     classes that inherit from external classes.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3494
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3494", {
        statics: {
            methods: {
                /**
                 * Instantiate classes several times and checks the return types and
                 values.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3494
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3494
                 * @return  {void}
                 */
                TestExtrenalClasCtor: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge3494_A.InstancesCount, "Amount of instances of a class are initially zero.");

                    var a = new Bridge3494_A();
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge3494_A.InstancesCount, "Amount if instances of a class are 1 after one instance of it is created.");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(a, Bridge3494_A), "Casting to object once allows 'is' to infer it is relative to the class.");

                    for (var i = 0; i < 10; i = (i + 1) | 0) {
                        var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3494.B();
                        Bridge.Test.NUnit.Assert.True(Bridge.is(b, Bridge3494_A), "Casting to object " + (((i + 1) | 0)) + " time" + ((i > 0 ? "s" : "") || "") + " allows inferring its base class instance.");
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(11, Bridge3494_A.InstancesCount, "Instantiating a class that inherits from the other counts as instance count of the base class.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3494.B", {
        inherits: [Bridge3494_A],
        $kind: "nested class"
    });

    /**
     * The test verifies that binary data is not changed by the browser
     after it was downloaded from a remote location.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3497
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3497", {
        statics: {
            methods: {
                /**
                 * Downloads a binary file containing bytes from the range [0, 255],
                 and verifies the received data matches the expected result.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3497
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3497
                 * @return  {void}
                 */
                TestDownloadingOfBinaryFile: function () {
                    // The test file by the link below contains 256 bytes, counting from 0 to 255.
                    var testFilePath = "resources/testdata.bin";

                    var bytes = System.IO.File.ReadAllBytes(testFilePath);
                    Bridge.Test.NUnit.Assert.AreEqual(256, bytes.length, "File length is correct.");

                    for (var i = 0; i < 256; i = (i + 1) | 0) {
                        Bridge.Test.NUnit.Assert.AreEqual(i, bytes[System.Array.index(i, bytes)], System.String.format("Byte #{0} has the expected value.", [Bridge.box(i, System.Int32)]));
                    }
                }
            }
        }
    });

    /**
     * Tests dictionary keys as System.Guids against issues fetching the values.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3499
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3499", {
        statics: {
            methods: {
                /**
                 * Original test case provided by the reporter. The second Guid key
                 does not trigger the problem whereas the third does.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3499
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3499
                 * @return  {void}
                 */
                TestKeysWithSimilarHashCode: function () {
                    var superDict = new (System.Collections.Generic.Dictionary$2(System.Guid,System.String)).ctor();


                    var x1 = "str1";
                    var guid1 = new System.Guid.$ctor4("00000003-0000-0000-0001-00001c000000");
                    var x2 = "str2";
                    var guid2 = new System.Guid.$ctor4("00000001-0000-0000-0001-000004000000");
                    var x3 = "str3";
                    var guid3 = new System.Guid.$ctor4("00000003-0000-0000-0001-000022000000");

                    superDict.add(guid1, x1);
                    superDict.add(guid2, x2);
                    superDict.add(guid3, x3);

                    var keys = superDict.Keys;
                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Linq.Enumerable.from(keys, System.Guid).count(), "Can fetch key count from dictionary.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(keys, System.Guid).contains(guid1), "Can fetch key matching first Guid value.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(keys, System.Guid).contains(guid2), "Can fetch key matching second Guid value.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(keys, System.Guid).contains(guid3), "Can fetch key matching third Guid value.");

                    var values = superDict.Values;
                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Linq.Enumerable.from(values, System.String).count(), "Can fetch value count from dictionary.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(values, System.String).contains(x1), "Can fetch value matching first string value.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(values, System.String).contains(x2), "Can fetch value matching second string value.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(values, System.String).contains(x3), "Can fetch value matching third string value.");
                },
                /**
                 * This expands and generalizes the test by making dictionaries with
                 increasing levels of similarity and fetching the values.
                 Originally this broke at position 19 (or 20, as position 19 is a
                 hyphen).
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3499
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3499
                 * @return  {void}
                 */
                TestKeysWithIncreasingSimilarity: function () {
                    var guidstr = "00000000-0000-0000-0000-000000000000";
                    var guid1 = new System.Guid.$ctor4(guidstr);

                    for (var i = 0; i < guidstr.length; i = (i + 1) | 0) {
                        if (guidstr.charCodeAt(i) === 45) {
                            continue;
                        }

                        var guidstr2 = (guidstr.substr(0, i) || "") + "1" + (guidstr.substr(((i + 1) | 0)) || "");
                        var guid2 = new System.Guid.$ctor4(guidstr2);

                        var dict = new (System.Collections.Generic.Dictionary$2(System.Guid,System.Int32)).ctor();
                        dict.add(guid1, ((0 + i) | 0));
                        dict.add(guid2, ((1 + i) | 0));

                        Bridge.Test.NUnit.Assert.AreEqual(2, dict.Values.Count, "'Values' works when difference is at position #" + (((i + 1) | 0)));
                    }
                }
            }
        }
    });

    /**
     * The test here consists in checking whether a casting/inheritance
     scenario involving variance triggers a runtime error in built
     Bridge code.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502", {
        statics: {
            methods: {
                GetList: function () {
                    return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.TestList$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.SubClass))(System.Linq.Enumerable.range(1, 10).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.f1));
                },
                /**
                 * Test by instantiating the class as one of the interfaces that it
                 implements. Then, cast that instance to the other interface also
                 implemented by the actual class.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502
                 * @return  {void}
                 */
                TestInvariance: function () {
                    var $t;
                    var list = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.GetList();

                    var readable = Bridge.cast(list, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.ITestReadValue$1(System.Collections.Generic.IReadOnlyList$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.BaseClass)));

                    var i = 0;
                    $t = Bridge.getEnumerator(readable[Bridge.geti(readable, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3502$ITestReadValue$1$System$Collections$Generic$IReadOnlyList$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge3502$BaseClass$Value", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3502$ITestReadValue$1$Value")], Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.BaseClass);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            Bridge.Test.NUnit.Assert.AreEqual(((i = (i + 1) | 0)), item.Value, "Variance cast works for value at position #" + i + ".");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502, {
        f1: function (i) {
            return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.SubClass(i);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.BaseClass", {
        $kind: "nested class",
        props: {
            Value: 0
        },
        ctors: {
            ctor: function (i) {
                this.$initialize();
                this.Value = i;
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.ITestInterface$1", function (T) { return {
        $kind: "nested interface"
    }; });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.ITestReadValue$1", function (T) { return {
        $kind: "nested interface",
        $variance: [1]
    }; });

    /**
     * The test here consists in ensuring conversion from an extension method
     to Action works in Bridge.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513", {
        statics: {
            methods: {
                Run: function (a) {
                    a();
                },
                /**
                 * Tests passing the string's extension method as a parameter to the
                 'Action'-parametered function and checking whether the result is
                 the expected one.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513
                 * @return  {void}
                 */
                TestExtensionMethodAsAction: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513StringExtension.StaticMessage = "Inline extension conversion works.";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513.Run(function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513StringExtension.Print("Hello, World!"); });

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513StringExtension.StaticMessage = "Variable-bound extension conversion works.";
                    var str = "Hello, World!";
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513.Run(function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513StringExtension.Print(str); });
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513StringExtension", {
        statics: {
            fields: {
                StaticMessage: null
            },
            ctors: {
                init: function () {
                    this.StaticMessage = "passed";
                }
            },
            methods: {
                Print: function (message) {
                    Bridge.Test.NUnit.Assert.AreEqual("Hello, World!", message, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3513StringExtension.StaticMessage);
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring the ExternalCastRule emits code
     accordingly to its setting.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516", {
        statics: {
            methods: {
                /**
                 * The test here sets it so no cast is made for classes marked with
                 the 'external' attributes. So an invalid cast won't really be
                 thrown when the code is run.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516
                 * @return  {void}
                 */
                TestPlainExternalCastRule: function () {
                    var obj = "test";

                    // This won't throw an exception because the cast is not passed in.
                    var el = obj;

                    Bridge.Test.NUnit.Assert.AreEqual("test", el, "Cast was suppressed for ExternalCastRule.Plain.");

                    obj = new (System.Collections.Generic.List$1(System.String)).ctor();
                    Bridge.Test.NUnit.Assert.Throws$2(System.InvalidCastException, function () {
                        // This should throw an exception as it is not marked as external at all.
                        obj = Bridge.cast(obj, System.Collections.Generic.IEqualityComparer$1(System.String));
                    }, "Cast emitted for non-external class even if ExternalCastRule is Plain.");
                },
                /**
                 * And here, we force-set it as managed, so that the cast, passed
                 down to the client-side application, will be done, thus an
                 exception thrown.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516
                 * @return  {void}
                 */
                TestManagedExternalCastRule: function () {
                    Bridge.Test.NUnit.Assert.Throws$2(System.SystemException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516.f1, "Cast is emitted if ExternalCastRule is Managed.");
                },
                /**
                 * And here we ensure the default is Managed, so that the exception
                 will effectively be thrown in an external class' invalid cast.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516
                 * @return  {void}
                 */
                TestDefaultExternalCastRule: function () {
                    Bridge.Test.NUnit.Assert.Throws$2(System.SystemException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516.f1, "Cast is emitted if ExternalCastRule is not specified, meaning it is 'Managed'.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3516, {
        f1: function () {
            var obj = "test";
            var el = Bridge.cast(obj, ExternalNS3516.ExternalClass3516);
        }
    });

    /**
     * The tests here consists in ensuring some types of provided Script.Write
     input won't break Bridge output code.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519", {
        statics: {
            fields: {
                Keys: null,
                SMap: null,
                vMap: null
            },
            ctors: {
                init: function () {
                    this.Keys = System.Array.init(["a", "b"], System.String);
                    this.SMap = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
                    this.vMap = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
                }
            },
            methods: {
                RegExpEscape: function (s) {
                    // because of this string magic happens :)
                    return s.replace(/[-\/\^$*+?.()|[\]{}]/g, '\\$&');

                },
                /**
                 * This should break the very code execution if wrong
                 *
                 * @static
                 * @private
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519
                 * @return  {string}
                 */
                SpaceWritten: function () { /// Variable is assigned but its value is never used
                    var i = 0; /// Variable is assigned but its value is never used
                    return 
                },
                NothingWritten: function () { /// Variable is assigned but its value is never used
                    var i = 0; /// Variable is assigned but its value is never used
                    return 
                },
                /**
                 * Tests by issuing the Script-Write-driven methods and checking
                 whether they provide valid JavaScript output code..
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519
                 * @return  {void}
                 */
                TestInjectScript: function () {
                    var $t;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519.SMap.setItem("a", "b");
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519.SMap.setItem("c", "d");

                    $t = Bridge.getEnumerator(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519.Keys);
                    try {
                        while ($t.moveNext()) {
                            var vote = $t.Current;
                            // colon and \n missing
                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519.vMap.setItem(vote, vote);
                            var a = 1;
                            Bridge.Test.NUnit.Assert.AreEqual(1, a, "Code can run and key '" + (vote || "") + "' value is correct");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("b", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519.SMap.getItem("a"), "'a' still maps to 'b'");
                    Bridge.Test.NUnit.Assert.AreEqual("d", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519.SMap.getItem("c"), "'c' still maps to 'd'");

                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519.SpaceWritten(), "Blank Script.Write works");
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3519.NothingWritten(), "Empty Script.Write works");
                }
            }
        }
    });

    /**
     * Ensures GetIndexerVal implementation on classes carry on to indexer
     methods in inherited, mapped and external classes.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3528
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3528", {
        statics: {
            methods: {
                TestExternalBaseIndexer: function () {
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3528.B();
                    Bridge.Test.NUnit.Assert.AreEqual("one", b[1], "Value by bracket indexer can be fetched.");
                    Bridge.Test.NUnit.Assert.AreEqual("one", b.GetIndexerVal(1), "Value by indexer method can be fetched.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3528.B", {
        inherits: [Bridge3528_A],
        $kind: "nested class",
        methods: {
            GetIndexerVal: function (n) {
                return this[n];
            }
        }
    });

    /**
     * Ensures an external, template-driven constructor works on Bridge.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540", {
        statics: {
            methods: {
                /**
                 * A generics parameter-driven method, necessary to reproduce the issue.
                 *
                 * @static
                 * @private
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540
                 * @param   {Function}    T
                 * @return  {T}
                 */
                TemplateMethod: function (T) {
                    return Bridge.createInstance(T);
                },
                /**
                 * To test, we'd just call the template method specifying the Test
                 class as its generics' specialized type, and expect the custom
                 constructor to be executed.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540
                 * @return  {void}
                 */
                TestTemplateCtor: function () {
                    var test = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540.TemplateMethod(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540.Test);

                    Bridge.Test.NUnit.Assert.AreEqual(1, test.a, "Custom, template-driven constructor is correctly called.");
                }
            }
        }
    });

    /**
     * This class should be marked as reflectable, so that the custom
     constructor's template can be handled by Bridge.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540.Test
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540.Test", {
        $kind: "nested class",
        statics: {
            methods: {
                getDefaultValue: function () {
                    return {a: 1};
                }
            }
        },
        fields: {
            a: 0
        }
    });

    /**
     * The test here consists in ensuring the changing a boxed object's
     properties can be changed thru reflection, and that the resulting
     value can be fetched when it is cast back.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545", {
        statics: {
            methods: {
                /**
                 * Test by instantiating the object, binding it to a general-purpose
                 object, then setting the property value thru reflection. Then
                 casting it back to the original type and checking the value carried
                 out.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545
                 * @return  {void}
                 */
                TestSetValueByReflection: function () {
                    var $t;
                    // Init value typed data-structure
                    var Test = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size(), $t.Width = 10, $t.Height = 20, $t);

                    // Box the value-type and change it through Reflection
                    var Boxed = Test.$clone();
                    Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.getType(Boxed), 16, 284, "Height").s, Boxed)(1234);

                    // Unbox it back
                    Test = System.Nullable.getValue(Bridge.cast(Bridge.unbox(Boxed, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size), Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size));

                    // Should output: Width=10, Height=1234
                    // (correct output observed on C# Windows Console Application)
                    Bridge.Test.NUnit.Assert.AreEqual(10, Test.Width, "Value changed by reflection works for object's first property.");
                    Bridge.Test.NUnit.Assert.AreEqual(1234, Test.Height, "Value changed by reflection works for object's second property.");
                }
            }
        }
    });

    /**
     * Object to use as a probe.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size(); }
            }
        },
        props: {
            Width: 0,
            Height: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1702521171, this.Width, this.Height]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size)) {
                    return false;
                }
                return Bridge.equals(this.Width, o.Width) && Bridge.equals(this.Height, o.Height);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size();
                s.Width = this.Width;
                s.Height = this.Height;
                return s;
            }
        }
    });

    /**
     * The tests here consists in ensuring line breaks in script.write string
     parameters do not result in broken javascript.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3546
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3546", {
        statics: {
            methods: {
                /**
                 * Makes a Script.Call with line breaks within the code and checks if
                 the resulting code is runnable.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3546
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3546
                 * @return  {void}
                 */
                TestScriptNewLines: function () {
                    var a = "foo";

                    var b = (
                    function(p){ return p + 'bar';}
                    )(a);

                    Bridge.Test.NUnit.Assert.AreEqual("foobar", b, "Script.Call with line breaks results in runnable code.");
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring broken use cases identified and
     reported in issue #3550 are usable in Bridge.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550", {
        statics: {
            methods: {
                /**
                 * The chained switch case involfing 'when' expression.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550
                 * @return  {void}
                 */
                TestSwitchCaseWhen: function () {
                    var probe0 = 744;
                    var probe1 = 1;
                    do {
                        if (probe0 === 744 || probe0 === 745) {
                            if ((probe1 === 1) || (probe1 === 2)) {
                                Bridge.Test.NUnit.Assert.True(true, "Switch-case-when chained statement works.");
                                break;
                            }
                        }
                    } while (false);
                },
                /**
                 * The typed-default switch case.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550
                 * @return  {void}
                 */
                TestSwitchCaseTypedDefault: function () {
                    var obj = Bridge.box(false, System.Boolean, System.Boolean.toString);
                    do {
                        if (Bridge.is(obj, System.Boolean) && Bridge.equals(obj, Bridge.getDefaultValue(System.Boolean))) {
                            Bridge.Test.NUnit.Assert.True(true, "Typed default switch-case alternative works.");
                            break;
                        }
                    } while (false);
                    do {
                        if (Bridge.is(obj, System.Int32) && Bridge.equals(obj, Bridge.getDefaultValue(System.Int32))) {
                            Bridge.Test.NUnit.Assert.Fail("Bool object fell in switch-case 'int' fallover.");
                            break;
                        }

                        if (Bridge.is(obj, System.String) && Bridge.equals(obj, null)) {
                            Bridge.Test.NUnit.Assert.Fail("Bool object fell in switch-case 'string' fallover.");
                            break;
                        }

                        if (Bridge.is(obj, System.Boolean) && Bridge.equals(obj, Bridge.getDefaultValue(System.Boolean))) {
                            Bridge.Test.NUnit.Assert.True(true, "Typed default switch-case alternative matches the type when choosing its fallover 'default'.");
                            break;
                        }
                    } while (false);
                    var probe = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.ProbeImplementation();
                    do {
                        if (Bridge.hasValue(probe) && Bridge.equals(probe, null)) {
                            Bridge.Test.NUnit.Assert.Fail("Class instance object fell in switch-case 'object' cast fallover.");
                            break;
                        }
                    } while (false);
                    do {
                        if (Bridge.is(probe, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.ProbeImplementation) && Bridge.equals(probe, null)) {
                            Bridge.Test.NUnit.Assert.Fail("Class instance object fell in switch-case own cast fallover.");
                            break;
                        }
                    } while (false);
                    do {
                        if (Bridge.is(probe, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.IProbe) && Bridge.equals(probe, null)) {
                            Bridge.Test.NUnit.Assert.Fail("Class instance object fell in switch-case interface cast fallover.");
                            break;
                        }
                    } while (false);
                    var probe1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.ProbeImplementation();
                    do {
                        if (Bridge.hasValue(probe1) && Bridge.equals(probe1, null)) {
                            Bridge.Test.NUnit.Assert.Fail("Class instance fell in switch-case own cast fallover.");
                            break;
                        }
                    } while (false);
                    var probe2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.ProbeImplementation();
                    do {
                        if (Bridge.is(probe2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.ProbeImplementation) && Bridge.equals(probe2, null)) {
                            Bridge.Test.NUnit.Assert.Fail("Class instance cast into its interface fell in switch-case instance cast fallover.");
                            break;
                        }
                    } while (false);
                    do {
                        if (Bridge.hasValue(probe2) && Bridge.equals(probe2, null)) {
                            Bridge.Test.NUnit.Assert.Fail("Class instance cast into its interface fell in switch-case own cast fallover.");
                            break;
                        }
                    } while (false);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.IProbe", {
        $kind: "nested interface"
    });

    /**
     * The test here consists in ensuring code built with local function
     definitions that are not actually referenced can be built with Bridge.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3558
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3558", {
        statics: {
            methods: {
                /**
                 * Test by defining a local function and never actually referencing it.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3558
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3558
                 * @return  {void}
                 */
                TestUnusedLocalFn: function () {
                    var test = null;
                    var a = 15;
                    test = function () {
                        return a > 10;
                    }; /// Local function is declared but never used /// Local function is declared but never used

                    Bridge.Test.NUnit.Assert.AreEqual(15, a, "Unused local function does not result in broken Bridge code.");
                }
            }
        }
    });

    /**
     * The tests here ensures that local functions' recursion works with
     Bridge translated code.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3560
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3560", {
        statics: {
            methods: {
                /**
                 * Tests local function recursion.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3560
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3560
                 * @return  {void}
                 */
                TestLocalFunctionRecursion: function () {
                    var F = null;
                    var i = 0;
                    F = function (x) {
                        i = (i + 1) | 0;
                        if (x > 0) {
                            F(((x - 1) | 0));
                        }
                    };
                    F(10);



                    Bridge.Test.NUnit.Assert.AreEqual(11, i, "Recursive local function call result in the expected value.");
                },
                /**
                 * Tests local function referencing.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3560
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3560
                 * @return  {void}
                 */
                TestLocalFunctionsReferences: function () {
                    var G = null;
                    var F = null;
                    var buffer = "";
                    F = function () {
                        buffer = (buffer || "") + "F";
                        G();
                    };
                    G = function () {
                        buffer = (buffer || "") + "G";
                    };
                    F();





                    Bridge.Test.NUnit.Assert.AreEqual("FG", buffer, "Local function referencing results in the expected side effect.");
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring given switch-case and local
     function C#7 statement syntaxes are supported by Bridge.
     The tests here have been based in a test project (pkHex-Bridge2) which
     explored the issues.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567", {
        statics: {
            methods: {
                /**
                 * Tests with switch-case-when.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567
                 * @return  {void}
                 */
                TestSwitchCase: function () {
                    var int0 = 6;
                    var int1 = 25;
                    do {
                        if (int1 === 25) {
                            if (int0 === 6) {
                                Bridge.Test.NUnit.Assert.True(true, "Switch-case with when is accepted and it matches.");
                                break;
                            }
                        }
                    } while (false);
                    do {
                        if (int0 === 6) {
                            if (int1 === 254) {
                                Bridge.Test.NUnit.Assert.Fail("Should not have matched this switch-case statement.");
                                break;
                            }
                        }

                        if (int0 === 6) {
                            if (int1 === 25) {
                                Bridge.Test.NUnit.Assert.True(true, "Hex to int and zero-padded integer constant supported in switch-case + when.");
                                break;
                            }
                        }
                    } while (false);
                    do {
                        if (int1 === 26) {
                            if (int0 >= 6) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }

                        if (int1 === 25) {
                            if (int0 >= 7) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }

                        if (int1 === 25) {
                            if (int0 >= 6) {
                                Bridge.Test.NUnit.Assert.True(true, "Switch-case with 'when' is accepted and it matches.");
                                break;
                            }
                        }
                    } while (false);
                    do {
                        if (int1 === 26) {
                            if (int0 >= 6) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }

                        if (int1 === 25) {
                            if (int0 >= 7) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }

                        if (int1 === 28) {
                            if (int0 >= 6) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }

                        {
                            Bridge.Test.NUnit.Assert.True(true, "Switch-case with 'when' works with the 'default' case when nothing matches.");
                            break;
                        }
                    } while (false);
                    do {
                        if (int1 === 26) {
                            if (int0 >= 6) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }

                        if (int1 === 25) {
                            if (int0 >= 7) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }

                        if (int1 === 28) {
                            if (int0 >= 6) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }
                    } while (false);
                    Bridge.Test.NUnit.Assert.True(true, "Switch-case matches nothing and moves ahead when nothing matches.");
                    do {
                        if (int1 === 25) {
                            if (int0 === 6 && (((int1 + int0) | 0)) < 10) {
                                Bridge.Test.NUnit.Assert.Fail("Switch-case matches when it shouldn't.");
                                break;
                            }
                        }

                        if (int1 === 25) {
                            if (int0 === 6 && (((int1 + int0) | 0)) > 10) {
                                Bridge.Test.NUnit.Assert.True(true, "Switch-case with when is accepted when involving nested when-expression.");
                                break;
                            }
                        }
                    } while (false);
                },
                /**
                 * Tests with Local Functions.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567
                 * @return  {void}
                 */
                TestLocalFunction: function () {
                    var testProbe = null;
                    var list = System.Array.init([1, 2, 3], System.Int32);
                    var strings = System.Array.init(["one", "two", "three"], System.String);


                    testProbe = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.f1;

                    var matches = System.Linq.Enumerable.from(list, System.Int32).select(testProbe).ToArray(System.Int32);

                    Bridge.Test.NUnit.Assert.True(matches.length === 3 && matches[System.Array.index(0, matches)] === 2 && matches[System.Array.index(1, matches)] === 3 && matches[System.Array.index(2, matches)] === 4, "Linq-select-triggered local function works.");

                    var stringPool = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.f2(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum)).ctor());

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.TestLocalFnSort(stringPool, strings);
                },
                TestLocalFnSort: function (stringPool, strings) {
                    var strProbe = null;
                    var list = System.Array.init([1, 2, 3], System.Int32);
                    var max = (strings.length - 1) | 0;


                    strProbe = function (s) {
                        return s > max ? "" : strings[System.Array.index(s, strings)];
                    };

                    var ordered = System.Linq.Enumerable.from(stringPool, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum).orderBy(function (p) {
                            return p.Value > max;
                        }).thenBy(function (p) {
                        return strProbe(p.Value);
                    });

                    Bridge.Test.NUnit.Assert.AreEqual("one,oneself,three,two,twofold,not_one", Bridge.toArray(ordered.select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.f3)).join(","), "Local function called from ordered lambda expression works.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567, {
        f1: function (t) {
            return ((t + 1) | 0);
        },
        f2: function (_o1) {
            var $t;
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum(), $t.Text = "two", $t.Value = 1, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum(), $t.Text = "three", $t.Value = 2, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum(), $t.Text = "one", $t.Value = 0, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum(), $t.Text = "not_one", $t.Value = 5, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum(), $t.Text = "oneself", $t.Value = 0, $t));
            _o1.add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum(), $t.Text = "twofold", $t.Value = 1, $t));
            return _o1;
        },
        f3: function (o) {
            return o.Text;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3567.StringNum", {
        $kind: "nested class",
        props: {
            Text: null,
            Value: 0
        }
    });

    /**
     * The tests here consists in ensuring tasks' related Dispose() calls
     works.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3570
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3570", {
        statics: {
            methods: {
                /**
                 * Just simply instantiate a task and related class then call its
                 Dispose() method. Following, just check whether the instance is not
                 null, meaning the code could be run down to that point.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3570
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3570
                 * @return  {void}
                 */
                TestIDisposable: function () {
                    var tsk = System.Threading.Tasks.Task.fromResult(true, System.Boolean);
                    tsk.dispose();
                    Bridge.Test.NUnit.Assert.NotNull(tsk, "Task.Dispose() call works.");

                    var cts = new System.Threading.CancellationTokenSource();
                    cts.dispose();

                    Bridge.Test.NUnit.Assert.NotNull(cts, "CancellationTokenSource.Dispose() call works.");

                    var ctr = new System.Threading.CancellationTokenRegistration();
                    ctr.dispose();

                    Bridge.Test.NUnit.Assert.NotNull(ctr, "CancellationTokenRegistration.Dispose() call works.");
                }
            }
        }
    });

    /**
     * The tests here consists in verifying the Script.Return method works
     in a generic situation.
     Notice despite the tests here just check whether it takes over return
     values from methods, its intended use is for javascript events which
     can be represented in regular C# blocks, which can't handle a 'return'
     statement.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580", {
        statics: {
            methods: {
                /**
                 * Test returning a string constant.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580
                 * @return  {string}        A string 'correct' instead of the native 'wrong'.
                 */
                Probe0: function () {
                    return "correct";

                    return "wrong";
                },
                /**
                 * Test returning a boolean constant.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580
                 * @return  {boolean}        A boolean 'true' instead of a native 'false'.
                 */
                Probe1: function () {
                    return true;

                    return false;
                },
                /**
                 * Checks whether the functions return values are taken over by the
                 Script.Return() call.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580
                 * @return  {void}
                 */
                TestScriptReturn: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("correct", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580.Probe0(), "Script.Return() takes over the return value of a string returning method.");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3580.Probe1(), "Script.Return() takes over the return value of a boolean returning method.");
                }
            }
        }
    });

    /**
     * The test here consists in ensuring the array's IsFixedSize test works.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3583
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3583", {
        statics: {
            methods: {
                /**
                 * Make a fixed-size array, and also cast it into an IList and check
                 whether its fixed size state is retained.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3583
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3583
                 * @return  {void}
                 */
                TestIsFixedSize: function () {
                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    Bridge.Test.NUnit.Assert.True(System.Array.isFixedSize(arr), "Fixed-size array's IsFixedSize is true.");

                    var ilist = Bridge.cast(arr, System.Collections.IList);
                    Bridge.Test.NUnit.Assert.True(System.Array.isFixedSize(ilist), "Fixed-size array cast into IList has its IsFixedSize retained as true.");
                }
            }
        }
    });

    /**
     * The tests here ensures that the Insert, Add, Remove and RemoveAt
     array methods throw the NotSupported exception when performing the
     operation in either a readonly list or fixed-size array.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584", {
        statics: {
            methods: {
                /**
                 * Tests IList.Insert() over fixed-length array and readonly List cast
                 into IList.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @return  {void}
                 */
                TestInsert: function () {
                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    var ilist = Bridge.cast(arr, System.Collections.IList);
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.insert(ilist, 0, Bridge.box(0, System.Int32), Object);
                    }, "Array cast into an IList denies Insert() operation.");

                    var rolist = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor()).AsReadOnly();
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.insert(rolist, 0, Bridge.box(0, System.Int32), Object);
                    }, "Read-only List cast into IList denies Insert() operation.");
                },
                /**
                 * Tests IList.Add() over fixed-length array and readonly List cast
                 into IList.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @return  {void}
                 */
                TestAdd: function () {
                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    var ilist = Bridge.cast(arr, System.Collections.IList);
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.add(ilist, Bridge.box(0, System.Int32), Object);
                    }, "Array cast into an IList denies Add() operation.");

                    var rolist = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor()).AsReadOnly();
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.add(rolist, Bridge.box(0, System.Int32), Object);
                    }, "Read-only List cast into IList denies Add() operation.");
                },
                /**
                 * Tests IList.remove() over fixed-length array and readonly List cast
                 into IList.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @return  {void}
                 */
                TestRemove: function () {
                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    var ilist = Bridge.cast(arr, System.Collections.IList);
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.remove(ilist, Bridge.box(0, System.Int32), Object);
                    }, "Array cast into an IList denies Remove() operation.");

                    var rolist = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor()).AsReadOnly();
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.remove(rolist, Bridge.box(0, System.Int32), Object);
                    }, "Read-only List cast into IList denies Remove() operation.");
                },
                /**
                 * Tests IList.RemoveAt() over fixed-length array and readonly List
                 cast into IList.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @return  {void}
                 */
                TestRemoveAt: function () {
                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    var ilist = Bridge.cast(arr, System.Collections.IList);
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.removeAt(ilist, 0, Object);
                    }, "Array cast into an IList denies RemoveAt() operation.");

                    var rolist = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor()).AsReadOnly();
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.removeAt(rolist, 0, Object);
                    }, "Read-only List cast into IList denies RemoveAt() operation.");
                },
                /**
                 * Tests IList.Clear() over fixed-length array and readonly List cast
                 into IList.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584
                 * @return  {void}
                 */
                TestClear: function () {
                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    var ilist = Bridge.cast(arr, System.Collections.IList);
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.clear(ilist, Object);
                    }, "Array cast into an IList denies Clear() operation.");

                    var rolist = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor()).AsReadOnly();
                    Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException, function () {
                        System.Array.clear(rolist, Object);
                    }, "Read-only List cast into IList denies Clear() operation.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3584, {
        f1: function (_o1) {
            _o1.add(1);
            _o1.add(2);
            _o1.add(3);
            return _o1;
        }
    });

    /**
     * The tests here consists in checking exception message thrown when tryig
     to insert/append elements to readonly and fixed-size arrays.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3585
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3585", {
        statics: {
            methods: {
                /**
                 * Make a fixed-length array and a readonly list then try to add
                 elements to them, checking for not only the expected exception
                 type, but also the exception very message.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3585
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3585
                 * @return  {void}
                 */
                TestInsert: function () {
                    var arr = System.Array.init([1, 2, 3], System.Int32);
                    var ilist = Bridge.cast(arr, System.Collections.IList);

                    // Here we don't just use 'Assert.Throws' because we care not only
                    // for the type of the thrown exception, but also its descriptive
                    // message.
                    try {
                        System.Array.insert(ilist, 0, Bridge.box(0, System.Int32), Object);
                        Bridge.Test.NUnit.Assert.Fail("No Exception thrown while trying to add element to fixed-size array.");
                    } catch (ex) {
                        ex = System.Exception.create(ex);
                        Bridge.Test.NUnit.Assert.AreEqual(System.NotSupportedException, Bridge.getType(ex), "Type of exception is \"NotSupported\"");
                        Bridge.Test.NUnit.Assert.AreEqual("Collection was of a fixed size.", ex.Message, "Expected exception message is thrown.");
                    }

                    var list = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3585.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    var roList = list.AsReadOnly();
                    var ilist2 = Bridge.cast(roList, System.Collections.IList);

                    try {
                        System.Array.insert(ilist2, 0, Bridge.box(0, System.Int32), Object);
                        Bridge.Test.NUnit.Assert.Fail("No Exception thrown while trying to add element to read-only collection.");
                    } catch (ex1) {
                        ex1 = System.Exception.create(ex1);
                        Bridge.Test.NUnit.Assert.AreEqual(System.NotSupportedException, Bridge.getType(ex1), "Type of exception is \"NotSupported\"");
                        Bridge.Test.NUnit.Assert.AreEqual("Collection is read-only.", ex1.Message, "Expected exception message is thrown.");
                    }
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3585", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3585, {
        f1: function (_o1) {
            _o1.add(1);
            _o1.add(2);
            _o1.add(3);
            return _o1;
        }
    });

    /**
     * The tests here consists in ensuring the template substitution accepts
     the {0} placeholder in some situations elucidated by the issue's
     report.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3588
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3588", {
        statics: {
            methods: {
                TestOperatorTemplate: function () {
                    var $t;
                    // This is how the code should be output to Bridge in JavaScript.
                    var Bridge3588 = {
                        Vec2: function (x, y) {
                            this.x = x;
                            this.y = y;
                        },

                        Vec3: function (x, y, z) {
                            this.x = x;
                            this.y = y;
                            this.z = z;
                        }
                    };

                    var u = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3588.Utility();
                    var v0 = new Bridge3588.Vec2(1, 1);
                    var v1 = ($t = u.F(new Bridge3588.Vec3(v0.x, v0.y, 0)), new Bridge3588.Vec2($t.x, $t.y));

                    Bridge.Test.NUnit.Assert.True(Bridge.is(v1, Bridge3588.Vec2), "Object cast does not lose ancestor type information.");
                    Bridge.Test.NUnit.Assert.AreEqual(2, v1.x, "Template parameter substitution works as expected for a two-parameter expression.");
                    Bridge.Test.NUnit.Assert.AreEqual(3, v1.y, "Template parameter substitution works as expected for a three-parameter expression.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3588.Utility", {
        $kind: "nested class",
        methods: {
            F: function (v) {
                // This is how the code should be output to Bridge in JavaScript.
                var Bridge3588 = {
                    Vec3: function (x, y, z) {
                        this.x = x;
                        this.y = y;
                        this.z = z;
                    }
                };

                return new Bridge3588.Vec3(v.x + 1, v.y + 2, v.z + 3);
            }
        }
    });

    /**
     * This test consists in ensuring a 'using static' to a local class
     won't result in invalid emitted Bridge code.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589", {
        statics: {
            methods: {
                /**
                 * Just ensure whether the static-used class can be referenced.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589
                 * @return  {void}
                 */
                TestUsingStaticOnGeneric: function () {
                    var s = "Hello, World!";
                    Bridge.Test.NUnit.Assert.AreEqual(s, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589.Root.Logger$1(System.String).Log(s), "Method from a 'using static' class can be called.");
                }
            }
        }
    });

    /**
     * A local class to be 'statically used'.
     *
     * @static
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589.Root
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589.Root", {
        $kind: "nested class"
    });

    /**
     * The definition here should be valid once output to JavaScript.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589.Root.Logger$1
     * @param   {Function}    [name]
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3589.Root.Logger$1", function (T) { return {
        $kind: "nested class",
        statics: {
            methods: {
                Log: function (data) {
                    return data;
                }
            }
        }
    }; });

    /**
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3590
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3590", {
        statics: {
            methods: {
                /**
                 * Test by just making an instance of the Test class and populating it
                 with values.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3590
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3590
                 * @return  {void}
                 */
                TestExternalExpandParams: function () {
                    // There will be a client-side "side effect" to change the value of
                    // this variable.
                    var count = -1;

                    // The block below will output the client-side implementation of the
                    // "external" Test class.
                    var Test = function () {
                        count = arguments.length;
                        this.Foo = function () {
                            count = arguments.length;
                        };
                    };

                    var arr = System.Array.init([1, 2, 3], System.Int32);

                    var test = Bridge.Reflection.applyConstructor(Test, arr);
                    Bridge.Test.NUnit.Assert.AreEqual(3, count, "External implementation of class can be run.");

                    arr = System.Array.init([1, 2, 3, 4, 5], System.Int32);
                    test.Foo.apply(test, arr);
                    Bridge.Test.NUnit.Assert.AreEqual(5, count, "External implementation of class' side effect works.");
                }
            }
        }
    });

    /**
     * The tests here consists in verifying the Script.Return method works
     in a generic situation.
     Notice despite the tests here just check whether it takes over return
     values from methods, its intended use is for javascript events which
     can be represented in regular C# blocks, which can't handle a 'return'
     statement.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3593
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3593", {
        statics: {
            methods: {
                CheckStringStartsWithString: function () {
                    var val1 = "Value";

                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "V"));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Va"));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Val"));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Valu"));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Value"));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "v"));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "X"));

                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "V", 0));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Va", 0));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Val", 0));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Valu", 0));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Value", 0));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "v", 0));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "X", 0));

                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "v", 1));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vA", 1));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vAL", 1));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vALU", 1));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vALUE", 1));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "vALUEX", 1));

                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "V", 2));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Va", 2));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Val", 2));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Valu", 2));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Value", 2));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "v", 2));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "X", 2));

                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "v", 3));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vA", 3));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vAL", 3));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vALU", 3));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vALUE", 3));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "vALUEX", 3));

                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "V", 4));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Va", 4));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Val", 4));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Valu", 4));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "Value", 4));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "v", 4));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "X", 4));

                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "v", 5));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vA", 5));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vAL", 5));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vALU", 5));
                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "vALUE", 5));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "vALUEX", 5));

                    Bridge.Test.NUnit.Assert.True(System.String.startsWith(val1, "V"));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "v"));
                    Bridge.Test.NUnit.Assert.False(System.String.startsWith(val1, "X"));
                },
                CheckStringEndsWithString: function () {
                    var val1 = "Value";

                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "e"));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "ue"));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "lue"));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "alue"));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "Value"));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "v"));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "X"));

                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "e", 0));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "ue", 0));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "lue", 0));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "alue", 0));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "Value", 0));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "v", 0));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "X", 0));

                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "E", 1));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "UE", 1));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "LUE", 1));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "ALUE", 1));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "vALUE", 1));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "vALUEX", 1));

                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "e", 2));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "ue", 2));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "lue", 2));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "alue", 2));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "Value", 2));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "v", 2));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "X", 2));

                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "E", 3));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "UE", 3));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "LUE", 3));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "ALUE", 3));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "vALUE", 3));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "vALUEX", 3));

                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "e", 4));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "ue", 4));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "lue", 4));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "alue", 4));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "Value", 4));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "v", 4));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "X", 4));

                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "E", 5));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "UE", 5));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "LUE", 5));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "ALUE", 5));
                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "vALUE", 5));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "vALUEX", 5));

                    Bridge.Test.NUnit.Assert.True(System.String.endsWith(val1, "e"));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "v"));
                    Bridge.Test.NUnit.Assert.False(System.String.endsWith(val1, "X"));
                },
                /**
                 * The tests here were failing because of the initial implementation of
                 the fix for this issue. Several other tests were failing because of
                 the broken string comparison, when startsWith/endsWith() were used.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3593
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3593
                 * @return  {void}
                 */
                CheckAdditionalBrokenCases: function () {
                    var fullString = "System.Collections.Generic.ICollection$1$System.Int32";

                    var startChunk = fullString.substr(0, ((fullString.length - 1) | 0));
                    var endChunk = fullString.substr(1);

                    var firstChar = 32;
                    var lastChar = 32;

                    // Just iterate thru the original string taking one character a
                    // time and check if it is equal. Remove the last character, and
                    // append a different character and ensure it is different.
                    while (startChunk.length > 0) {
                        Bridge.Test.NUnit.Assert.True(System.String.startsWith(fullString, startChunk), "String '" + (fullString || "") + "' starts with '" + (startChunk || "") + "'.");

                        lastChar = startChunk.charCodeAt(((startChunk.length - 1) | 0));

                        // ensure the character we append is different than the one we just removed.
                        lastChar = lastChar === 120 ? 121 : 120;

                        startChunk = startChunk.substr(0, ((startChunk.length - 1) | 0));

                        Bridge.Test.NUnit.Assert.False(System.String.startsWith(fullString, (startChunk || "") + String.fromCharCode(lastChar)), "String '" + (fullString || "") + "' does not start with '" + (startChunk || "") + String.fromCharCode(lastChar) + "'.");
                    }

                    while (endChunk.length > 0) {
                        Bridge.Test.NUnit.Assert.True(System.String.endsWith(fullString, endChunk), "String '" + (fullString || "") + "' ends with '" + (endChunk || "") + "'.");

                        firstChar = endChunk.charCodeAt(0);

                        // ensure the character we append is different than the one we just removed.
                        firstChar = firstChar === 120 ? 121 : 120;

                        endChunk = endChunk.substr(1);

                        Bridge.Test.NUnit.Assert.False(System.String.endsWith(fullString, String.fromCharCode(firstChar) + (endChunk || "")), "String '" + (fullString || "") + "' does not end with '" + String.fromCharCode(firstChar) + (endChunk || "") + "'.");

                    }
                }
            }
        }
    });

    /**
     * This is an extraction of Dotnet sources for Sorted List, which
     was failing with Bridge. As this was the test case to reproduce the
     issue, it was left here as the unit test. It was not provided the
     exact address where the code was extracted from.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599", {
        statics: {
            methods: {
                /**
                 * Just ensure whether the static-used class can be referenced.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599
                 * @return  {void}
                 */
                TestCustomListImplementation: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Linq.Enumerable.from(new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2(System.Int32,System.Int32)).ctor(), System.Collections.Generic.KeyValuePair$2(System.Int32,System.Int32)).count(), "Sorted list implementation works.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2", function (TK, TV) { return {
        inherits: [System.Collections.Generic.IDictionary$2(TK,TV)],
        $kind: "nested class",
        statics: {
            fields: {
                DefaultCapacity: 0,
                MaxArrayLength: 0
            },
            ctors: {
                init: function () {
                    this.DefaultCapacity = 4;
                    this.MaxArrayLength = 2146435071;
                }
            },
            methods: {
                IsCompatibleKey: function (key) {
                    if (key == null) {
                        throw new System.ArgumentNullException.$ctor1("key");
                    }

                    return (Bridge.is(key, TK));
                }
            }
        },
        fields: {
            keys: null,
            values: null,
            _size: 0,
            version: 0,
            comparer: null,
            keyList: null,
            valueList: null,
            _syncRoot: null
        },
        props: {
            Capacity: {
                get: function () {
                    return this.keys.length;
                },
                set: function (value) {
                    if (value !== this.keys.length) {
                        if (value < this._size) {
                            throw new System.ArgumentOutOfRangeException.$ctor3("value", Bridge.box(value, System.Int32), "SR.ArgumentOutOfRange_SmallCapacity");
                        }

                        if (value > 0) {
                            var newKeys = System.Array.init(value, function (){
                                return Bridge.getDefaultValue(TK);
                            }, TK);
                            var newValues = System.Array.init(value, function (){
                                return Bridge.getDefaultValue(TV);
                            }, TV);
                            if (this._size > 0) {
                                System.Array.copy(this.keys, 0, newKeys, 0, this._size);
                                System.Array.copy(this.values, 0, newValues, 0, this._size);
                            }
                            this.keys = newKeys;
                            this.values = newValues;
                        } else {
                            this.keys = System.Array.init([], TK);
                            this.values = System.Array.init([], TV);
                        }
                    }
                }
            },
            Comparer: {
                get: function () {
                    return this.comparer;
                }
            },
            Count: {
                get: function () {
                    return this._size;
                }
            },
            Keys: {
                get: function () {
                    return this.GetKeyListHelper();
                }
            },
            System$Collections$Generic$IDictionary$2$Keys: {
                get: function () {
                    return this.GetKeyListHelper();
                }
            },
            Values: {
                get: function () {
                    return this.GetValueListHelper();
                }
            },
            System$Collections$Generic$IDictionary$2$Values: {
                get: function () {
                    return this.GetValueListHelper();
                }
            },
            System$Collections$Generic$ICollection$1$IsReadOnly: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "add", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$add",
            "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$add", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$add",
            "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$contains", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$contains",
            "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$remove", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$remove",
            "Count", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$Count",
            "System$Collections$Generic$IDictionary$2$Keys", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$Keys",
            "System$Collections$Generic$IDictionary$2$Values", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$Values",
            "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$IsReadOnly", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$IsReadOnly",
            "clear", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$clear",
            "containsKey", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$containsKey",
            "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$copyTo", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$copyTo",
            "System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$GetEnumerator", "System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$GetEnumerator",
            "getItem", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$getItem",
            "setItem", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$setItem",
            "tryGetValue", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$tryGetValue",
            "remove", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$remove"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.keys = System.Array.init([], TK);
                this.values = System.Array.init([], TV);
                this._size = 0;
                this.comparer = new (System.Collections.Generic.Comparer$1(TK))(System.Collections.Generic.Comparer$1.$default.fn);
            },
            $ctor4: function (capacity) {
                this.$initialize();
                if (capacity < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor3("capacity", Bridge.box(capacity, System.Int32), "SR.ArgumentOutOfRange_NeedNonNegNum");
                }
                this.keys = System.Array.init(capacity, function (){
                    return Bridge.getDefaultValue(TK);
                }, TK);
                this.values = System.Array.init(capacity, function (){
                    return Bridge.getDefaultValue(TV);
                }, TV);
                this.comparer = new (System.Collections.Generic.Comparer$1(TK))(System.Collections.Generic.Comparer$1.$default.fn);
            },
            $ctor1: function (comparer) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2(TK,TV).ctor.call(this);
                if (comparer != null) {
                    this.comparer = comparer;
                }
            },
            $ctor5: function (capacity, comparer) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2(TK,TV).$ctor1.call(this, comparer);
                this.Capacity = capacity;
            },
            $ctor2: function (dictionary) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2(TK,TV).$ctor3.call(this, dictionary, null);
            },
            $ctor3: function (dictionary, comparer) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2(TK,TV).$ctor5.call(this, (dictionary != null ? System.Array.getCount(dictionary, System.Collections.Generic.KeyValuePair$2(TK,TV)) : 0), comparer);
                if (dictionary == null) {
                    throw new System.ArgumentNullException.$ctor1("dictionary");
                }

                var count = System.Array.getCount(dictionary, System.Collections.Generic.KeyValuePair$2(TK,TV));
                if (count !== 0) {
                    var keys = this.keys;
                    System.Array.copyTo(dictionary["System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$Keys"], keys, 0, TK);
                    System.Array.copyTo(dictionary["System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$Values"], this.values, 0, TV);
                    if (count > 1) {
                        comparer = this.Comparer; // obtain default if this is null.

                        keys = System.Linq.Enumerable.from(dictionary, System.Collections.Generic.KeyValuePair$2(TK,TV)).orderBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.f1, comparer).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.f1).ToArray(TK);

                        for (var i = 1; i !== keys.length; i = (i + 1) | 0) {
                            if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(TK) + "$compare", "System$Collections$Generic$IComparer$1$compare")](keys[System.Array.index(((i - 1) | 0), keys)], keys[System.Array.index(i, keys)]) === 0) {
                                throw new System.ArgumentException.$ctor1("SR.Format(SR.Argument_AddingDuplicate, keys[i])");
                            }
                        }
                    }
                }

                this._size = count;
            }
        },
        methods: {
            getItem: function (key) {
                var i = this.IndexOfKey(key);
                if (i >= 0) {
                    return this.values[System.Array.index(i, this.values)];
                }

                throw new System.Collections.Generic.KeyNotFoundException.$ctor1("SR.Format(SR.Arg_KeyNotFoundWithKey, key.ToString())");
            },
            setItem: function (key, value) {
                if (key == null) {
                    throw new System.ArgumentNullException.$ctor1("key");
                }
                var i = System.Array.binarySearch(this.keys, 0, this._size, key, this.comparer);
                if (i >= 0) {
                    this.values[System.Array.index(i, this.values)] = value;
                    this.version = (this.version + 1) | 0;
                    return;
                }
                this.Insert(~i, key, value);
            },
            add: function (key, value) {
                if (key == null) {
                    throw new System.ArgumentNullException.$ctor1("key");
                }
                var i = System.Array.binarySearch(this.keys, 0, this._size, key, this.comparer);
                if (i >= 0) {
                    throw new System.ArgumentException.$ctor1("SR.Format(SR.Argument_AddingDuplicate, key), nameof(key)");
                }
                this.Insert(~i, key, value);
            },
            System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$add: function (keyValuePair) {
                this.add(keyValuePair.key, keyValuePair.value);
            },
            System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$contains: function (keyValuePair) {
                var index = this.IndexOfKey(keyValuePair.key);
                if (index >= 0 && System.Collections.Generic.EqualityComparer$1(TV).def.equals2(this.values[System.Array.index(index, this.values)], keyValuePair.value)) {
                    return true;
                }
                return false;
            },
            System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$remove: function (keyValuePair) {
                var index = this.IndexOfKey(keyValuePair.key);
                if (index >= 0 && System.Collections.Generic.EqualityComparer$1(TV).def.equals2(this.values[System.Array.index(index, this.values)], keyValuePair.value)) {
                    this.RemoveAt(index);
                    return true;
                }
                return false;
            },
            remove: function (key) {
                var i = this.IndexOfKey(key);
                if (i >= 0) {
                    this.RemoveAt(i);
                }
                return i >= 0;
            },
            GetKeyListHelper: function () {
                if (this.keyList == null) {
                    this.keyList = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.KeyList(TK,TV))(this);
                }
                return this.keyList;
            },
            GetValueListHelper: function () {
                if (this.valueList == null) {
                    this.valueList = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.ValueList(TK,TV))(this);
                }
                return this.valueList;
            },
            clear: function () {
                // clear does not change the capacity
                this.version = (this.version + 1) | 0;

                // TODO:
                // Don't need to doc this but we clear the elements so that the gc can reclaim the references.
                //if (RuntimeHelpers.IsReferenceOrContainsReferences<TKey>())
                //{
                //    Array.Clear(keys, 0, _size);
                //}
                //if (RuntimeHelpers.IsReferenceOrContainsReferences<TValue>())
                //{
                //    Array.Clear(values, 0, _size);
                //}
                this._size = 0;
            },
            containsKey: function (key) {
                return this.IndexOfKey(key) >= 0;
            },
            ContainsValue: function (value) {
                return this.IndexOfValue(value) >= 0;
            },
            System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$copyTo: function (array, arrayIndex) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }

                if (arrayIndex < 0 || arrayIndex > array.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor3("arrayIndex", Bridge.box(arrayIndex, System.Int32), "SR.ArgumentOutOfRange_Index");
                }

                if (((array.length - arrayIndex) | 0) < this.Count) {
                    throw new System.ArgumentException.$ctor1("SR.Arg_ArrayPlusOffTooSmall");
                }

                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    var entry = new (System.Collections.Generic.KeyValuePair$2(TK,TV)).$ctor1(this.keys[System.Array.index(i, this.keys)], this.values[System.Array.index(i, this.values)]);
                    array[System.Array.index(((arrayIndex + i) | 0), array)] = entry;
                }
            },
            EnsureCapacity: function (min) {
                var newCapacity = this.keys.length === 0 ? Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2(TK,TV).DefaultCapacity : Bridge.Int.mul(this.keys.length, 2);
                // Allow the list to grow to maximum possible capacity (~2G elements) before encountering overflow.
                // Note that this check works even when _items.Length overflowed thanks to the (uint) cast
                if ((newCapacity >>> 0) > Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2(TK,TV).MaxArrayLength) {
                    newCapacity = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2(TK,TV).MaxArrayLength;
                }
                if (newCapacity < min) {
                    newCapacity = min;
                }
                this.Capacity = newCapacity;
            },
            GetByIndex: function (index) {
                if (index < 0 || index >= this._size) {
                    throw new System.ArgumentOutOfRangeException.$ctor3("index", Bridge.box(index, System.Int32), "SR.ArgumentOutOfRange_Index");
                }
                return this.values[System.Array.index(index, this.values)];
            },
            GetEnumerator: function () {
                return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV)).$ctor1(this, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV).KeyValuePair).$clone();
            },
            System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$GetEnumerator: function () {
                return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV)).$ctor1(this, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV).KeyValuePair).$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV)).$ctor1(this, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV).KeyValuePair).$clone();
            },
            GetKey: function (index) {
                if (index < 0 || index >= this._size) {
                    throw new System.ArgumentOutOfRangeException.$ctor3("index", Bridge.box(index, System.Int32), "SR.ArgumentOutOfRange_Index");
                }
                return this.keys[System.Array.index(index, this.keys)];
            },
            IndexOfKey: function (key) {
                if (key == null) {
                    throw new System.ArgumentNullException.$ctor1("key");
                }
                var ret = System.Array.binarySearch(this.keys, 0, this._size, key, this.comparer);
                return ret >= 0 ? ret : -1;
            },
            IndexOfValue: function (value) {
                return System.Array.indexOfT(this.values, value, 0, this._size);
            },
            Insert: function (index, key, value) {
                if (this._size === this.keys.length) {
                    this.EnsureCapacity(((this._size + 1) | 0));
                }
                if (index < this._size) {
                    System.Array.copy(this.keys, index, this.keys, ((index + 1) | 0), ((this._size - index) | 0));
                    System.Array.copy(this.values, index, this.values, ((index + 1) | 0), ((this._size - index) | 0));
                }
                this.keys[System.Array.index(index, this.keys)] = key;
                this.values[System.Array.index(index, this.values)] = value;
                this._size = (this._size + 1) | 0;
                this.version = (this.version + 1) | 0;
            },
            tryGetValue: function (key, value) {
                var i = this.IndexOfKey(key);
                if (i >= 0) {
                    value.v = this.values[System.Array.index(i, this.values)];
                    return true;
                }

                value.v = Bridge.getDefaultValue(TV);
                return false;
            },
            RemoveAt: function (index) {
                if (index < 0 || index >= this._size) {
                    throw new System.ArgumentOutOfRangeException.$ctor3("index", Bridge.box(index, System.Int32), "SR.ArgumentOutOfRange_Index");
                }
                this._size = (this._size - 1) | 0;
                if (index < this._size) {
                    System.Array.copy(this.keys, ((index + 1) | 0), this.keys, index, ((this._size - index) | 0));
                    System.Array.copy(this.values, ((index + 1) | 0), this.values, index, ((this._size - index) | 0));
                }
                // TODO :
                //if (RuntimeHelpers.IsReferenceOrContainsReferences<TKey>())
                //{
                //    keys[_size] = default(TKey);
                //}
                //if (RuntimeHelpers.IsReferenceOrContainsReferences<TValue>())
                //{
                //    values[_size] = default(TValue);
                //}
                this.version = (this.version + 1) | 0;
            },
            TrimExcess: function () {
                var threshold = Bridge.Int.clip32(this.keys.length * 0.9);
                if (this._size < threshold) {
                    this.Capacity = this._size;
                }
            }
        }
    }; });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2, {
        f1: function (x) {
            return x.key;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator", function (TK, TV) { return {
        inherits: [System.Collections.Generic.IEnumerator$1(System.Collections.Generic.KeyValuePair$2(TK,TV)),System.Collections.IDictionaryEnumerator],
        $kind: "nested struct",
        statics: {
            fields: {
                KeyValuePair: 0,
                DictEntry: 0
            },
            ctors: {
                init: function () {
                    this.KeyValuePair = 1;
                    this.DictEntry = 2;
                }
            },
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV))(); }
            }
        },
        fields: {
            _sortedList: null,
            _key: Bridge.getDefaultValue(TK),
            _value: Bridge.getDefaultValue(TV),
            _index: 0,
            _version: 0,
            _getEnumeratorRetType: 0
        },
        props: {
            System$Collections$IDictionaryEnumerator$Key: {
                get: function () {
                    if (this._index === 0 || (this._index === ((this._sortedList.Count + 1) | 0))) {
                        throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumOpCantHappen");
                    }

                    return this._key;
                }
            },
            System$Collections$IDictionaryEnumerator$Entry: {
                get: function () {
                    if (this._index === 0 || (this._index === ((this._sortedList.Count + 1) | 0))) {
                        throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumOpCantHappen");
                    }

                    return new System.Collections.DictionaryEntry.$ctor1(this._key, this._value);
                }
            },
            Current: {
                get: function () {
                    return new (System.Collections.Generic.KeyValuePair$2(TK,TV)).$ctor1(this._key, this._value);
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    if (this._index === 0 || (this._index === ((this._sortedList.Count + 1) | 0))) {
                        throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumOpCantHappen");
                    }

                    if (this._getEnumeratorRetType === Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV).DictEntry) {
                        return new System.Collections.DictionaryEntry.$ctor1(this._key, this._value).$clone();
                    } else {
                        return new (System.Collections.Generic.KeyValuePair$2(TK,TV)).$ctor1(this._key, this._value);
                    }
                }
            },
            System$Collections$IDictionaryEnumerator$Value: {
                get: function () {
                    if (this._index === 0 || (this._index === ((this._sortedList.Count + 1) | 0))) {
                        throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumOpCantHappen");
                    }

                    return this._value;
                }
            }
        },
        alias: [
            "Dispose", "System$IDisposable$Dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Current", ["System$Collections$Generic$IEnumerator$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TK) + "$" + Bridge.getTypeAlias(TV) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"]
        ],
        ctors: {
            $ctor1: function (sortedList, getEnumeratorRetType) {
                this.$initialize();
                this._sortedList = sortedList;
                this._index = 0;
                this._version = this._sortedList.version;
                this._getEnumeratorRetType = getEnumeratorRetType;
                this._key = Bridge.getDefaultValue(TK);
                this._value = Bridge.getDefaultValue(TV);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Dispose: function () {
                this._index = 0;
                this._key = Bridge.getDefaultValue(TK);
                this._value = Bridge.getDefaultValue(TV);
            },
            moveNext: function () {
                var $t, $t1;
                if (this._version !== this._sortedList.version) {
                    throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumFailedVersion");
                }

                if ((this._index >>> 0) < ((this._sortedList.Count) >>> 0)) {
                    this._key = ($t = this._sortedList.keys)[System.Array.index(this._index, $t)];
                    this._value = ($t1 = this._sortedList.values)[System.Array.index(this._index, $t1)];
                    this._index = (this._index + 1) | 0;
                    return true;
                }

                this._index = (this._sortedList.Count + 1) | 0;
                this._key = Bridge.getDefaultValue(TK);
                this._value = Bridge.getDefaultValue(TV);
                return false;
            },
            System$Collections$IEnumerator$reset: function () {
                if (this._version !== this._sortedList.version) {
                    throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumFailedVersion");
                }

                this._index = 0;
                this._key = Bridge.getDefaultValue(TK);
                this._value = Bridge.getDefaultValue(TV);
            },
            getHashCode: function () {
                var h = Bridge.addHash([3788985113, this._sortedList, this._key, this._value, this._index, this._version, this._getEnumeratorRetType]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV))) {
                    return false;
                }
                return Bridge.equals(this._sortedList, o._sortedList) && Bridge.equals(this._key, o._key) && Bridge.equals(this._value, o._value) && Bridge.equals(this._index, o._index) && Bridge.equals(this._version, o._version) && Bridge.equals(this._getEnumeratorRetType, o._getEnumeratorRetType);
            },
            $clone: function (to) {
                var s = to || new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.Enumerator(TK,TV))();
                s._sortedList = this._sortedList;
                s._key = this._key;
                s._value = this._value;
                s._index = this._index;
                s._version = this._version;
                s._getEnumeratorRetType = this._getEnumeratorRetType;
                return s;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.KeyList", function (TK, TV) { return {
        inherits: [System.Collections.Generic.IList$1(TK),System.Collections.ICollection],
        $kind: "nested class",
        fields: {
            _dict: null
        },
        props: {
            Count: {
                get: function () {
                    return this._dict._size;
                }
            },
            IsReadOnly: {
                get: function () {
                    return true;
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    return Bridge.cast(this._dict, System.Collections.ICollection).System$Collections$ICollection$SyncRoot;
                }
            }
        },
        alias: [
            "Count", "System$Collections$ICollection$Count",
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TK) + "$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TK) + "$IsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TK) + "$add",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TK) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TK) + "$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TK) + "$copyTo",
            "insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TK) + "$insert",
            "getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TK) + "$getItem",
            "setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TK) + "$setItem",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(TK) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
            "indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TK) + "$indexOf",
            "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TK) + "$remove",
            "removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TK) + "$removeAt"
        ],
        ctors: {
            ctor: function (dictionary) {
                this.$initialize();
                this._dict = dictionary;
            }
        },
        methods: {
            getItem: function (index) {
                return this._dict.GetKey(index);
            },
            setItem: function (index, value) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_KeyCollectionSet");
            },
            add: function (key) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            },
            clear: function () {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            },
            contains: function (key) {
                return this._dict.containsKey(key);
            },
            copyTo: function (array, arrayIndex) {
                // defer error checking to Array.Copy
                System.Array.copy(this._dict.keys, 0, array, arrayIndex, this._dict.Count);
            },
            System$Collections$ICollection$copyTo: function (array, arrayIndex) {
                if (array != null && System.Array.getRank(array) !== 1) {
                    throw new System.ArgumentException.$ctor1("SR.Arg_RankMultiDimNotSupported, nameof(array)");
                }

                try {
                    // defer error checking to Array.Copy
                    System.Array.copy(this._dict.keys, 0, array, arrayIndex, this._dict.Count);
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.ArrayTypeMismatchException)) {
                        throw new System.ArgumentException.$ctor1("SR.Argument_InvalidArrayType, nameof(array)");
                    } else {
                        throw $e1;
                    }
                }
            },
            insert: function (index, value) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            },
            GetEnumerator: function () {
                return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.SortedListKeyEnumerator(TK,TV))(this._dict);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.SortedListKeyEnumerator(TK,TV))(this._dict);
            },
            indexOf: function (key) {
                if (key == null) {
                    throw new System.ArgumentNullException.$ctor1("key");
                }

                var i = System.Array.binarySearch(this._dict.keys, 0, this._dict.Count, key, this._dict.comparer);
                if (i >= 0) {
                    return i;
                }
                return -1;
            },
            remove: function (key) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
                // return false;
            },
            removeAt: function (index) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.SortedListKeyEnumerator", function (TK, TV) { return {
        inherits: [System.Collections.Generic.IEnumerator$1(TK),System.Collections.IEnumerator],
        $kind: "nested class",
        fields: {
            _sortedList: null,
            _index: 0,
            _version: 0,
            _currentKey: Bridge.getDefaultValue(TK)
        },
        props: {
            Current: {
                get: function () {
                    return this._currentKey;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    if (this._index === 0 || (this._index === ((this._sortedList.Count + 1) | 0))) {
                        throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumOpCantHappen");
                    }

                    return this._currentKey;
                }
            }
        },
        alias: [
            "Dispose", "System$IDisposable$Dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Current", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(TK) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"]
        ],
        ctors: {
            ctor: function (sortedList) {
                this.$initialize();
                this._sortedList = sortedList;
                this._version = sortedList.version;
            }
        },
        methods: {
            Dispose: function () {
                this._index = 0;
                this._currentKey = Bridge.getDefaultValue(TK);
            },
            moveNext: function () {
                var $t;
                if (this._version !== this._sortedList.version) {
                    throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumFailedVersion");
                }

                if ((this._index >>> 0) < ((this._sortedList.Count) >>> 0)) {
                    this._currentKey = ($t = this._sortedList.keys)[System.Array.index(this._index, $t)];
                    this._index = (this._index + 1) | 0;
                    return true;
                }

                this._index = (this._sortedList.Count + 1) | 0;
                this._currentKey = Bridge.getDefaultValue(TK);
                return false;
            },
            System$Collections$IEnumerator$reset: function () {
                if (this._version !== this._sortedList.version) {
                    throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumFailedVersion");
                }
                this._index = 0;
                this._currentKey = Bridge.getDefaultValue(TK);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.SortedListValueEnumerator", function (TK, TV) { return {
        inherits: [System.Collections.Generic.IEnumerator$1(TV),System.Collections.IEnumerator],
        $kind: "nested class",
        fields: {
            _sortedList: null,
            _index: 0,
            _version: 0,
            _currentValue: Bridge.getDefaultValue(TV)
        },
        props: {
            Current: {
                get: function () {
                    return this._currentValue;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    if (this._index === 0 || (this._index === ((this._sortedList.Count + 1) | 0))) {
                        throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumOpCantHappen");
                    }

                    return this._currentValue;
                }
            }
        },
        alias: [
            "Dispose", "System$IDisposable$Dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Current", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(TV) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"]
        ],
        ctors: {
            ctor: function (sortedList) {
                this.$initialize();
                this._sortedList = sortedList;
                this._version = sortedList.version;
            }
        },
        methods: {
            Dispose: function () {
                this._index = 0;
                this._currentValue = Bridge.getDefaultValue(TV);
            },
            moveNext: function () {
                var $t;
                if (this._version !== this._sortedList.version) {
                    throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumFailedVersion");
                }

                if ((this._index >>> 0) < ((this._sortedList.Count) >>> 0)) {
                    this._currentValue = ($t = this._sortedList.values)[System.Array.index(this._index, $t)];
                    this._index = (this._index + 1) | 0;
                    return true;
                }

                this._index = (this._sortedList.Count + 1) | 0;
                this._currentValue = Bridge.getDefaultValue(TV);
                return false;
            },
            System$Collections$IEnumerator$reset: function () {
                if (this._version !== this._sortedList.version) {
                    throw new System.InvalidOperationException.$ctor1("SR.InvalidOperation_EnumFailedVersion");
                }
                this._index = 0;
                this._currentValue = Bridge.getDefaultValue(TV);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.ValueList", function (TK, TV) { return {
        inherits: [System.Collections.Generic.IList$1(TV),System.Collections.ICollection],
        $kind: "nested class",
        fields: {
            _dict: null
        },
        props: {
            Count: {
                get: function () {
                    return this._dict._size;
                }
            },
            IsReadOnly: {
                get: function () {
                    return true;
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    return Bridge.cast(this._dict, System.Collections.ICollection).System$Collections$ICollection$SyncRoot;
                }
            }
        },
        alias: [
            "Count", "System$Collections$ICollection$Count",
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TV) + "$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TV) + "$IsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TV) + "$add",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TV) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TV) + "$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TV) + "$copyTo",
            "insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TV) + "$insert",
            "getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TV) + "$getItem",
            "setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TV) + "$setItem",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(TV) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
            "indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TV) + "$indexOf",
            "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(TV) + "$remove",
            "removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(TV) + "$removeAt"
        ],
        ctors: {
            ctor: function (dictionary) {
                this.$initialize();
                this._dict = dictionary;
            }
        },
        methods: {
            getItem: function (index) {
                return this._dict.GetByIndex(index);
            },
            setItem: function (index, value) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            },
            add: function (key) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            },
            clear: function () {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            },
            contains: function (value) {
                return this._dict.ContainsValue(value);
            },
            copyTo: function (array, arrayIndex) {
                // defer error checking to Array.Copy
                System.Array.copy(this._dict.values, 0, array, arrayIndex, this._dict.Count);
            },
            System$Collections$ICollection$copyTo: function (array, index) {
                if (array != null && System.Array.getRank(array) !== 1) {
                    throw new System.ArgumentException.$ctor1("SR.Arg_RankMultiDimNotSupported, nameof(array)");
                }

                try {
                    // defer error checking to Array.Copy
                    System.Array.copy(this._dict.values, 0, array, index, this._dict.Count);
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.ArrayTypeMismatchException)) {
                        throw new System.ArgumentException.$ctor1("SR.Argument_InvalidArrayType, nameof(array)");
                    } else {
                        throw $e1;
                    }
                }
            },
            insert: function (index, value) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            },
            GetEnumerator: function () {
                return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.SortedListValueEnumerator(TK,TV))(this._dict);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.SortedListValueEnumerator(TK,TV))(this._dict);
            },
            indexOf: function (value) {
                return System.Array.indexOfT(this._dict.values, value, 0, this._dict.Count);
            },
            remove: function (value) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
                // return false;
            },
            removeAt: function (index) {
                throw new System.NotSupportedException.$ctor1("SR.NotSupported_SortedListNestedWrite");
            }
        }
    }; });

    /**
     * The tests here consists in ensuring that trailing semicolons are
     removed from template strings and also conditional inlining
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3607
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3607", {
        statics: {
            methods: {
                /**
                 * Tests whether
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3607
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3607
                 * @return  {void}
                 */
                TestNullConditional: function () {
                    var test = null;
                    var x = !Bridge.equals(test, null) ? System.DateTime.format(System.Nullable.getValue(test)) : null;

                    Bridge.Test.NUnit.Assert.Null(x, "Null inline conditional's ToString() resolves to empty string.");
                },
                /**
                 * Tests whether semicolon is stripped from templates.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3607
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3607
                 * @return  {void}
                 */
                TestSemicolonStripping: function () {
                    var feature = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3607.SomeFeature();
                    feature != null ? feature.dowork({ type: "test" }) : null;

                    Bridge.Test.NUnit.Assert.AreEqual("test", feature.type, "Template ending with semicolon has its semicolon stripped at build time.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3607.SomeFeature", {
        $kind: "nested class",
        fields: {
            type: null
        },
        methods: {
            dowork: function (obj) {
                this.type = Bridge.toString(obj.type);
            }
        }
    });

    /**
     * The tests here ensures the {value} template placeholder works
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3609
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3609", {
        statics: {
            methods: {
                TestIndexerTemplate: function () {
                    var a = { };
                    a["a"] = new $asm.$AnonymousType$20(1, 2);
                    var b = a["a"];

                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(b.a), "Placeholder substitution works.");
                }
            }
        }
    });

    Bridge.define("$AnonymousType$20", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (a, b) {
                this.a = a;
                this.b = b;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$20)) {
                    return false;
                }
                return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550208475, this.a, this.b]);
                return h;
            },
            toJSON: function () {
                return {
                    a : this.a,
                    b : this.b
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"a","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_a","t":8,"rt":System.Int32,"fg":"a","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"a"},{"a":2,"n":"b","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_b","t":8,"rt":System.Int32,"fg":"b","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"b"}]}; }
            }
        }
    });

    /**
     * The test here consists in ensuring 'Managed' boxing rule works on
     nullable enums.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612", {
        statics: {
            methods: {
                SetModeStronglyTyped: function (mode) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612.SetMode(Bridge.box(mode, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612.Mode, System.Nullable.toStringFn(System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612.Mode)), System.Nullable.getHashCode));
                },
                SetMode: function (mode) {
                    var $t;
                    Bridge.Test.NUnit.Assert.AreEqual("Null", Bridge.unbox(($t = mode, $t != null ? $t : "Null")));
                },
                /**
                 * Ensures a null "nullable enum" is emitted as "Null" instead of
                 throwing an exception.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612
                 * @return  {void}
                 */
                TestEnumNullable: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612.SetModeStronglyTyped(null);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3612.Mode", {
        $kind: "nested enum",
        statics: {
            fields: {
                Slow: 0,
                Medium: 1,
                Fast: 2
            }
        }
    });

    /**
     * The test here ensures that invalid cast exception is thrown when a type
     is boxed then cast back, when the type can't be actually cast over,
     following native .NET implementation.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3613
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3613", {
        statics: {
            methods: {
                /**
                 * Makes the test boxing a byte variable then trying to cast it back
                 as an integer.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3613
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3613
                 * @return  {void}
                 */
                TestUnboxCast: function () {
                    Bridge.Test.NUnit.Assert.Throws$2(System.InvalidCastException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3613.f1, "Boxing byte and trying to cast back to int throws InvalidCastException.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3613", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3613, {
        f1: function () {
            var byteVal = 255;
            var boxed = Bridge.box(byteVal, System.Byte);
            var unboxed = System.Nullable.getValue(Bridge.cast(Bridge.unbox(boxed, System.Int32), System.Int32));
        }
    });

    /**
     * Ensures DateTime.AddSeconds() wont change the current day as long as
     the time addition does not switch to a different day.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3621
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3621", {
        statics: {
            methods: {
                /**
                 * Creates a DateTime object, then incrementing one of the time units
                 to it; By the provided time, it shouldn't switch to the next day
                 thus the 'Date' component of the object should be equal across the
                 two copies.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3621
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3621
                 * @return  {void}
                 */
                TestDateFromDateTime: function () {
                    var first = System.DateTime.create(2018, 5, 5, 1, 1, 1, 1, 1);

                    var second = System.DateTime.addSeconds(first, 1);
                    Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getDate(first), System.DateTime.getDate(second), "DateTime's 'Date' is not affected by adding seconds, as long as the change do not switch the current day/month/year.");

                    second = System.DateTime.addMinutes(first, 1);
                    Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getDate(first), System.DateTime.getDate(second), "DateTime's 'Date' is not affected by adding minutes.");

                    second = System.DateTime.addHours(first, 1);
                    Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getDate(first), System.DateTime.getDate(second), "DateTime's 'Date' is not affected by adding hours.");

                    second = System.DateTime.addMilliseconds(first, 100);
                    Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getDate(first), System.DateTime.getDate(second), "DateTime's 'Date' is not affected by adding milisseconds.");

                    second = System.DateTime.addTicks(first, System.Int64(250));
                    Bridge.Test.NUnit.Assert.AreEqual(System.DateTime.getDate(first), System.DateTime.getDate(second), "DateTime's 'Date' is not affected by adding to the tick count.");
                }
            }
        }
    });

    /**
     * Ensuring base class calling works even when inheriting from an
     external class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3622
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3622", {
        statics: {
            methods: {
                /**
                 * Tests by instantiating the child class and checking whether the
                 arbitrarily-crafted external class constructor was called.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3622
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3622
                 * @return  {void}
                 */
                TestExternalBaseDefaultCtor: function () {
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3622.B();
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.unbox(b.A_initialized), "External, inherited, and mapped class' constructor called.");
                }
            }
        }
    });

    /**
     * A class inheriting from the mapped C# class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3622.B
     * @augments Bridge3622_A
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3622.B", {
        inherits: [Bridge.virtualc("Bridge3622_A")],
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.virtualc("Bridge3622_A").call(this);
            }
        }
    });

    /**
     * The tests here consists in ensuring emission order of local functions
     obey the order they are actually entered in code.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3625
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3625", {
        statics: {
            methods: {
                /**
                 * Tests the order by declaring two local funcions, in such a way
                 that the second calls the first. If the local function is not
                 emitted in the correct order, the return value would not match
                 the expected one.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3625
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3625
                 * @return  {void}
                 */
                TestLocalFns: function () {
                    var Two = null;
                    var One = null;



                    One = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3625.f1;

                    Bridge.Test.NUnit.Assert.AreEqual("One", One("One"), "First local function call matches expected result.");
                    Two = function (msg) {
                        return "Two:" + (One(msg) || "");
                    };
                    Bridge.Test.NUnit.Assert.AreEqual("Two:One", Two("One"), "Second local function call matches expected result.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3625", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3625, {
        f1: function (msg) {
            return msg;
        }
    });

    /**
     * Ensures the .NET's composite format string feature works.
     Bug report by Christian "ChrML" Lundheim
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3626
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3626", {
        statics: {
            methods: {
                /**
                 * Checks the value of a string variable filled using the composite
                 format string syntax.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3626
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3626
                 * @return  {void}
                 */
                TestStringFormat: function () {
                    var TestVariable = "Hey";
                    var Result = System.String.format("{{TEST:{0}HelloWorld}}", [TestVariable]);
                    Bridge.Test.NUnit.Assert.AreEqual("{TEST:HeyHelloWorld}", Result, "Composite format string feature evaluates to the expected result.");
                },
                TestMultiBracketStringFormat: function () {
                    var l1 = "l1s";
                    var l2 = "l2s";
                    var result = System.String.format("{{TEST{{:{0}Hello}}World}}", [l1]);
                    Bridge.Test.NUnit.Assert.AreEqual("{TEST{:l1sHello}World}", result, "Two-bracket-enclosed composite format works.");

                    result = System.String.format("{{TEST{{:{{{0}}}Hello}}World}}", [l1]);
                    Bridge.Test.NUnit.Assert.AreEqual("{TEST{:{l1s}Hello}World}", result, "Three-bracket-enclosed composite format works.");

                    result = System.String.format("{{T{{E{{S{{T{{:{{{0}}}H}}e{1}l}}lo}}Wor}}ld}}", l1, l2);
                    Bridge.Test.NUnit.Assert.AreEqual("{T{E{S{T{:{l1s}H}el2sl}lo}Wor}ld}", result, "Six-bracket-enclosed composite format works.");
                }
            }
        }
    });

    /**
     * Ensures External class with ExpandParams attribute references won't
     incur into double 'apply()' calls.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3627
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3627", {
        statics: {
            methods: {
                /**
                 * Instantiates and reference the external class, expecting it should
                 return a composed string according to its external implementation.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3627
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3627
                 * @return  {void}
                 */
                TestExpandParams: function () {
                    var arr = System.Array.init(["one", "two", "three"], System.String);

                    var logger = new Bridge3627_Logger();
                    Bridge.Test.NUnit.Assert.AreEqual("Info: one, two, three", logger.Log.apply(logger, ["Info"].concat(arr)), "External+ExpandParams method call returns the expected result.");
                }
            }
        }
    });

    /**
     * Ensures implicit operator is emitted when the variable declaration
     defines its type and there is an implicit operator available.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628", {
        statics: {
            methods: {
                /**
                 * Tests by instantiating the classes with an explicit cast and
                 omitted cast, expecting both to result in the same structure.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628
                 * @return  {void}
                 */
                TestConversion: function () {
                    var good = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.A.op_Implicit(System.Array.init([Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32)], System.Object));
                    var bad = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.A.op_Implicit(System.Array.init([Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32)], System.Object));
                    Bridge.Test.NUnit.Assert.True(0 === System.Linq.Enumerable.from(good, System.Object).count() && System.Linq.Enumerable.from(good, System.Object).count() === System.Linq.Enumerable.from(bad, System.Object).count(), "Implicit casting works (original test case, array elements dropped).");

                    var good_b = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.B.op_Implicit(System.Array.init([Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32)], System.Object));
                    var bad_b = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.B.op_Implicit(System.Array.init([Bridge.box(1, System.Int32), Bridge.box(2, System.Int32), Bridge.box(3, System.Int32), Bridge.box(4, System.Int32), Bridge.box(5, System.Int32)], System.Object));
                    Bridge.Test.NUnit.Assert.True(5 === good_b.f.length && good_b.f.length === bad_b.f.length, "Implicit casting works (modified test, keeping array elements).");
                }
            }
        }
    });

    /**
     * Ensures referencing tuples' values from C# maps into valid and
     congruent JavaScript code in different scenarios.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645", {
        statics: {
            methods: {
                /**
                 * The value returned from funcions may be just 'false'.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645
                 * @return  {System.ValueTuple$2}
                 */
                Test: function () {
                    return new (System.ValueTuple$2(System.String,System.String)).$ctor1("testsf0", "testsf1");
                },
                /**
                 * Checks each case of tuples against the expected returned value.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645
                 * @return  {void}
                 */
                TestTupleUseCases: function () {
                    var val3 = null;
                    var val1 = new (System.ValueTuple$2(System.String,System.String)).$ctor1("test1", "test2");
                    var test1 = val1.Item1;
                    var test11 = val1.Item2;
                    Bridge.Test.NUnit.Assert.AreEqual("test1", test1, "Non nullable tuple 1st value can be retrieved.");
                    Bridge.Test.NUnit.Assert.AreEqual("test2", test11, "Non nullable tuple 2nd value can be retrieved.");

                    var val2 = new (System.ValueTuple$2(System.String,System.String)).$ctor1("testn1", "testn2");
                    var test2 = System.Nullable.getValue(val2).Item1;
                    var test21 = System.Nullable.getValue(val2).Item2;
                    Bridge.Test.NUnit.Assert.AreEqual("testn1", test2, "Nullable tuple 1st value can be retrieved.");
                    Bridge.Test.NUnit.Assert.AreEqual("testn2", test21, "Nullable tuple 2nd value can be retrieved.");

                    // The test here must inline the function in order to reproduce the scenario
                    Bridge.Test.NUnit.Assert.AreEqual("testsf0", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645.Test().Item1, "Inlined static function tuple 1st value can be retrieved.");
                    Bridge.Test.NUnit.Assert.AreEqual("testsf1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645.Test().Item2, "Inlined static function tuple 2nd value can be retrieved.");

                    ;
                    val3 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645.f1;
                    Bridge.Test.NUnit.Assert.AreEqual("testlf0", val3().Item1, "Inlined local function tuple 1st value can be retrieved.");
                    Bridge.Test.NUnit.Assert.AreEqual("testlf1", val3().Item2, "Inlined local function tuple 2nd value can be retrieved.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3645, {
        f1: function () {
            return new (System.ValueTuple$2(System.String,System.String)).$ctor1("testlf0", "testlf1");
        }
    });

    /**
     * Ensures discarders are correctly positioned in tuple definitions.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3647
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3647", {
        statics: {
            methods: {
                /**
                 * A tuple-returning function to be subject to discarders applying.
                 *
                 * @static
                 * @private
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3647
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3647
                 * @return  {System.ValueTuple$2}
                 */
                Test: function () {
                    return new (System.ValueTuple$2(System.String,System.String)).$ctor1("test1", "test2");
                },
                /**
                 * Tests the discarders with KeyValuePair object and tuple functions.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3647
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3647
                 * @return  {void}
                 */
                TestDiscard: function () {
                    var _discard1 = { };
                    var value = { };
                    new (System.Collections.Generic.KeyValuePair$2(System.String,System.String)).$ctor1("key", "value").Deconstruct(_discard1, value);
                    Bridge.Test.NUnit.Assert.AreEqual("value", value.v, "Value portion of KeyValuePair can be selected with discarder.");
                    var key = { };
                    var _discard2 = { };
                    new (System.Collections.Generic.KeyValuePair$2(System.String,System.String)).$ctor1("key", "value").Deconstruct(key, _discard2);
                    Bridge.Test.NUnit.Assert.AreEqual("key", key.v, "Key portion of KeyValuePair can be selected with discarder.");
                    var a = { };
                    var _discard3 = { };
                    Bridge.Deconstruct(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3647.Test().$clone(), a, _discard3);
                    Bridge.Test.NUnit.Assert.AreEqual("test1", a.v, "First position of Tuple can be selected with discarder.");
                    var _discard4 = { };
                    var b = { };
                    Bridge.Deconstruct(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3647.Test().$clone(), _discard4, b);
                    Bridge.Test.NUnit.Assert.AreEqual("test2", b.v, "Second position of Tuple can be selected with discarder.");
                }
            }
        }
    });

    /**
     * Ensures that a 3-uple's default values works.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3649
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3649", {
        statics: {
            methods: {
                /**
                 * Tests by issuing n-uples with different values and ensuring the
                 defaults are correctly selected.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3649
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3649
                 * @return  {void}
                 */
                TestValueTuple: function () {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6;
                    var a = { };
                    var b = { };
                    var c = { };
                    Bridge.Deconstruct(Bridge.getDefaultValue(System.ValueTuple$3(System.String,System.Int32,System.Boolean)), a, b, c);

                    Bridge.Test.NUnit.Assert.Null(a.v, "Default value for string in 3-uple is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual(0, b.v, "Default value for integer in 3-uple is correct.");
                    Bridge.Test.NUnit.Assert.False(c.v, "Default value for bool in 3-uple is correct.");
                    var d = { };
                    var e = { };
                    var f = { };
                    var g = { };
                    var h = { };
                    var i = { };
                    var j = { };
                    Bridge.Deconstruct(Bridge.getDefaultValue(System.ValueTuple$7(System.String,System.String,System.String,System.String,System.String,System.String,System.String)), d, e, f, g, h, i, j);

                    Bridge.Test.NUnit.Assert.Null(d.v, "Default value for 1st string in 7-uple is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("null", ($t = d.v, $t != null ? $t : "null"), "Default value for 1st string in 7-uple works with ?? operator.");
                    Bridge.Test.NUnit.Assert.Null(e.v, "Default value for 2nd string in 7-uple is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("null", ($t1 = e.v, $t1 != null ? $t1 : "null"), "Default value for 2nd string in 7-uple works with ?? operator.");
                    Bridge.Test.NUnit.Assert.Null(f.v, "Default value for 3rd string in 7-uple is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("null", ($t2 = f.v, $t2 != null ? $t2 : "null"), "Default value for 3rd string in 7-uple works with ?? operator.");
                    Bridge.Test.NUnit.Assert.Null(g.v, "Default value for 4th string in 7-uple is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("null", ($t3 = g.v, $t3 != null ? $t3 : "null"), "Default value for 4th string in 7-uple works with ?? operator.");
                    Bridge.Test.NUnit.Assert.Null(h.v, "Default value for 5th string in 7-uple is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("null", ($t4 = h.v, $t4 != null ? $t4 : "null"), "Default value for 5th string in 7-uple works with ?? operator.");
                    Bridge.Test.NUnit.Assert.Null(i.v, "Default value for 6th string in 7-uple is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("null", ($t5 = i.v, $t5 != null ? $t5 : "null"), "Default value for 6th string in 7-uple works with ?? operator.");
                    Bridge.Test.NUnit.Assert.Null(j.v, "Default value for last string in 7-uple is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("null", ($t6 = j.v, $t6 != null ? $t6 : "null"), "Default value for last string in 7-uple works with ?? operator.");

                    var val2 = Bridge.getDefaultValue(System.ValueTuple$3(System.String,System.String,System.String));
                    var val1 = val2.$clone();
                    val2.Item1 = "xcv";

                    Bridge.Test.NUnit.Assert.Null(val1.Item1, "Change in tuple variable bound to another does not propagate.");
                    Bridge.Test.NUnit.Assert.AreEqual("xcv", val2.Item1, "Change in tuple variable affect the direct reference.");
                    Bridge.Test.NUnit.Assert.Null(val1.Item2, "Change in tuple variable bound to another does not affect original's 2nd variable.");
                    Bridge.Test.NUnit.Assert.Null(val1.Item3, "Change in tuple variable bound to another does not affect original's 3rd variable.");
                    Bridge.Test.NUnit.Assert.Null(val2.Item2, "Change in tuple variable bound to another does not affect its 2nd variable.");
                    Bridge.Test.NUnit.Assert.Null(val2.Item3, "Change in tuple variable bound to another does not affect its 3rd variable.");
                }
            }
        }
    });

    /**
     * Ensures nullable versions of structs' .Value member is copied rather
     than referenced when bound to a non-nullable version of the struct.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658", {
        statics: {
            methods: {
                /**
                 * Instantiate a nullable version of the struct above, then bind its
                 '.Value' member to a non-nullable instance. Change the value of the
                 copy and checks it did not affect the value of the original copy.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658
                 * @return  {void}
                 */
                TestNullableClone: function () {
                    var $t;
                    // Initialize a nullable struct variable
                    var A = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658.Point(), $t.X = 10, $t.Y = 20, $t);
                    Bridge.Test.NUnit.Assert.AreEqual(10, System.Nullable.getValue(A).X, "Initialized nullable struct value works.");
                    Bridge.Test.NUnit.Assert.AreEqual(20, System.Nullable.getValue(A).Y, "Another initialized value also works.");

                    // Copy the struct and modify the copy. Observe that the original struct variable is also modified.
                    var B = System.Nullable.getValue(A).$clone();
                    B.X = 100;
                    B.Y = 200;

                    Bridge.Test.NUnit.Assert.AreEqual(10, System.Nullable.getValue(A).X, "Original struct value untouched when changing struct copy's value.");
                    Bridge.Test.NUnit.Assert.AreEqual(20, System.Nullable.getValue(A).Y, "Another struct member also not changed due to changes in the copy.");

                    Bridge.Test.NUnit.Assert.AreEqual(100, B.X, "Value change in copied struct is reflected therein.");
                    Bridge.Test.NUnit.Assert.AreEqual(200, B.Y, "Another value change is also effective.");
                }
            }
        }
    });

    /**
     * An ordinary struct. It will be used as nullable and .Value bound to
     another insance to check whether they are copied or just
     referenced.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658.Point
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658.Point", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658.Point(); }
            }
        },
        props: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1852403652, this.X, this.Y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658.Point)) {
                    return false;
                }
                return Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3658.Point();
                s.X = this.X;
                s.Y = this.Y;
                return s;
            }
        }
    });

    /**
     * Ensures fetching nullable variable value with the null conditional operator works.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3667
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3667", {
        statics: {
            methods: {
                TestNullableTuple: function () {
                    var val = new (System.ValueTuple$2(System.String,System.String)).$ctor1("test1", "test2");

                    Bridge.Test.NUnit.Assert.AreEqual("test1", System.Nullable.getValue(val).Item1, "Fetching value via the nullable's .Value property works.");
                    Bridge.Test.NUnit.Assert.AreEqual("test1", val != null ? System.Nullable.getValue(val).Item1 : null, "Fetching value using the the null conditional operator works.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3672", {
        statics: {
            methods: {
                TestStringComparer: function () {
                    var str1 = "ab";
                    var str2 = "Cd";
                    var strC = new (System.Collections.Generic.Comparer$1(System.String))(System.Collections.Generic.Comparer$1.$default.fn);
                    Bridge.Test.NUnit.Assert.AreEqual(-1, strC.compare(str1, str2), "string.Compare(a, b) works.");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, System.String.compare(str1, str2), "string.CompareTo(a) works.");
                }
            }
        }
    });

    /**
     * Ensures nested using works in a yield resumable method.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678", {
        statics: {
            methods: {
                TestNestedUsing: function () {
                    var $t;
                    var a = System.Array.init(["1", "2", "3"], System.String);
                    var b = System.Array.init(["4", "5", "6"], System.String);
                    var fn = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678.f1;
                    var result = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678Extensions.Zipper(System.String, System.String, System.String, a, b, fn);
                    Bridge.Test.NUnit.Assert.AreEqual("14.25.36", ($t = System.String, System.Linq.Enumerable.from(result, $t).ToArray($t)).join("."), "Nested usings in a yield resumable method produces valid javascript code.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678, {
        f1: function (s1, s2) {
            return (s1 || "") + (s2 || "");
        }
    });

    /**
     * @memberof System
     * @callback System.Func
     * @param   {A}    arg1    
     * @param   {B}    arg2
     * @return  {T}
     */

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678Extensions", {
        statics: {
            methods: {
                /**
                 * Implements the scenario required to reproduce a potential malformed
                 javascript output by exploring nested using statements within a
                 yield resumable method.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678Extensions
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3678Extensions
                 * @param   {Function}                                    A       
                 * @param   {Function}                                    B       
                 * @param   {Function}                                    T       
                 * @param   {System.Collections.Generic.IEnumerable$1}    seqA    
                 * @param   {System.Collections.Generic.IEnumerable$1}    seqB    
                 * @param   {System.Func}                                 func
                 * @return  {System.Collections.Generic.IEnumerable$1}
                 */
                Zipper: function (A, B, T, seqA, seqB, func) {
                    return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function (A, B, T, seqA, seqB, func) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            iteratorA,
                            iteratorB,
                            isDoneA,
                            isDoneB,
                            $async_e,
                            $async_e1,
                            $async_e2;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            iteratorA = Bridge.getEnumerator(seqA, A);
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            iteratorB = Bridge.getEnumerator(seqB, B);
                                            $step = 2;
                                            continue;
                                        }
                                        case 2: {
                                            if ( true ) {
                                                    $step = 3;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 3: {
                                            isDoneA = !iteratorA.System$Collections$IEnumerator$moveNext();
                                                isDoneB = !iteratorB.System$Collections$IEnumerator$moveNext();



                                                if (isDoneA || isDoneB) {
                                                    $step = 5;
                                                    continue;
                                                }

                                                $enumerator.current = func(iteratorA[Bridge.geti(iteratorA, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(A) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], iteratorB[Bridge.geti(iteratorB, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(B) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);
                                                $step = 4;
                                                return true;
                                        }
                                        case 4: {
                                            
                                                $step = 2;
                                                continue;
                                        }
                                        case 5: {
                                            $step = 6;
                                            continue;
                                        }
                                        case 6: {
                                            if (Bridge.hasValue(iteratorB)) iteratorB.System$IDisposable$Dispose();

                                                if ($jumpFromFinally > -1) {
                                                    $step = 8;
                                                    continue;
                                                } else if ($async_e) {
                                                    throw $async_e;
                                                    return;
                                                } else if (Bridge.isDefined($returnValue)) {
                                                    $step = 8;
                                                    continue;
                                                }
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            if (Bridge.hasValue(iteratorA)) iteratorA.System$IDisposable$Dispose();

                                                if ($jumpFromFinally > -1) {
                                                    $step = $jumpFromFinally;
                                                    $jumpFromFinally = null;
                                                } else if ($async_e) {
                                                    throw $async_e;
                                                    return;
                                                } else if (Bridge.isDefined($returnValue)) {
                                                    $tcs.setResult($returnValue);
                                                    return;
                                                }
                                            $step = 9;
                                            continue;
                                        }
                                        case 9: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ($step >= 2 && $step <= 5){

                                    $step = 6;
                                    $enumerator.moveNext();
                                    return;
                                }
                                if ($step >= 1 && $step <= 7){

                                    $step = 8;
                                    $enumerator.moveNext();
                                    return;
                                }
                                throw $async_e;
                            }
                        }), function () {
                            if ($step >= 2 && $step <= 5){

                                $step = 6;
                                $enumerator.moveNext();
                                return;
                            }
                            if ($step >= 1 && $step <= 7){

                                $step = 8;
                                $enumerator.moveNext();
                                return;
                            }

                        });
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    /**
     * This consists of checking whether InvariantCultureIgnoreCase IndexOf()
     works on strings.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3679
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3679", {
        statics: {
            methods: {
                /**
                 * Simply part from a simple 'hello world' example to see whether
                 we can use the method from String class:
                 String.IndexOf(StringComparison.InvariantCultureIgnoreCase)
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3679
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3679
                 * @return  {void}
                 */
                TestStringIndexOf: function () {
                    var msg = "Hello, World!";

                    var i = System.String.indexOf(msg, "world", 3, null, 3);

                    Bridge.Test.NUnit.Assert.AreEqual(7, i, "IndexOf, InvariantCulture, IgnoringCase: works.");
                }
            }
        }
    });

    /**
     * This tests whether CreateInstance throws the expected method, yet does
     not lose its functionality to normal cases.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680", {
        statics: {
            methods: {
                /**
                 * Explores the potential issues for class, interface, and also checks
                 some situations where it should work.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680
                 * @return  {void}
                 */
                TestActivator: function () {
                    Bridge.Test.NUnit.Assert.Throws$2(System.MissingMethodException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.f1, "Expected exception thrown for class.");
                    Bridge.Test.NUnit.Assert.Throws$2(System.MissingMethodException, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.f2, "Expected exception thrown for interface.");

                    var test = Bridge.createInstance(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.Test, true);

                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(test), "CreateIntance() results in a non-null result.");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(test, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.Test), "CreateInstance() results in an instance of the expected class.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680, {
        f1: function () {
            Bridge.createInstance(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.Test);
        },
        f2: function () {
            Bridge.createInstance(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.ITest);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.ITest", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.Test", {
        $kind: "nested class",
        props: {
            A: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3682", {
        statics: {
            methods: {
                TestIntParse: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Int32.parse(" 1"), "The ' 1' string is parsed into 1.");
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Int32.parse("2 "), "The '2 ' string is parsed into 2.");
                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Int32.parse(" 3 "), "The ' 3 ' string is parsed into 3.");

                    Bridge.Test.NUnit.Assert.AreEqual(4, System.Int32.parse("\t4"), "The '\\t4' string is parsed into 4.");
                    Bridge.Test.NUnit.Assert.AreEqual(5, System.Int32.parse("5\t"), "The '5\\t' string is parsed into 5.");
                    Bridge.Test.NUnit.Assert.AreEqual(6, System.Int32.parse("\t6\t"), "The '\\t6\\t' string is parsed into 6.");

                    Bridge.Test.NUnit.Assert.AreEqual(7, System.Int32.parse("\r\n7"), "The '\\r\\n7' string is parsed into 7.");
                    Bridge.Test.NUnit.Assert.AreEqual(8, System.Int32.parse("8\n"), "The '8\\n' string is parsed into 8.");
                    Bridge.Test.NUnit.Assert.AreEqual(9, System.Int32.parse("\r\n9\n"), "The '\\r\\n9\\n' string is parsed into 9.");
                },
                TestIntTryParse: function () {
                    var res = { };
                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse(" 1", res), "The ' 1' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(1, res.v, "The parsed string resulted in 1.");
                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse("2 ", res), "The '2 ' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(2, res.v, "The parsed string resulted in 2.");
                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse(" 3 ", res), "The ' 3 ' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(3, res.v, "The parsed string resulted in 3.");

                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse("\t4", res), "The '\\t4' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(4, res.v, "The parsed string resulted in 4.");
                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse("5\t", res), "The '5\\t' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(5, res.v, "The parsed string resulted in 5.");
                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse("\t6\t", res), "The '\\t6\\t' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(6, res.v, "The parsed string resulted in 6.");

                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse("\r\n7", res), "The '\\r\\n7' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(7, res.v, "The parsed string resulted in 7.");
                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse("8\n", res), "The '8\\n' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(8, res.v, "The parsed string resulted in 8.");
                    Bridge.Test.NUnit.Assert.True(System.Int32.tryParse("\r\n9\n", res), "The '\\r\n9\\n' string can be parsed.");
                    Bridge.Test.NUnit.Assert.AreEqual(9, res.v, "The parsed string resulted in 9.");

                    // Force passing an int as parameter from client side, what can
                    // happen from some implementations, like Bridge.Newtonsoft.Json
                    var success = false;
                    success = System.Int32.tryParse(10, res);
                    Bridge.Test.NUnit.Assert.True(success, "Client-side crafted call with integer as parameter works.");
                    Bridge.Test.NUnit.Assert.AreEqual(10, res.v, "The crafted int '10' is parsed as 10.");

                    Bridge.Test.NUnit.Assert.False(System.Int32.tryParse("11 n", res), "The '11 n' string can't be parsed.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3683", {
        statics: {
            methods: {
                TestIsAbstract: function () {
                    var abstractType = System.Type;
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isAbstract(abstractType), "Abstract type's 'IsAbstract' is true.");

                    var concreteType = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3683;
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isAbstract(concreteType), "Concrete type's 'IsAbstract' is false.");
                }
            }
        }
    });

    /**
     * This test ensures Type.IsInterface works as it does in native C#.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3684
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3684", {
        statics: {
            methods: {
                /**
                 * Check IsInterface result off various types.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3684
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3684
                 * @return  {void}
                 */
                TestIsInterface: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isInterface(System.Collections.Generic.IDictionary$2), "IDictionary<,> is an interface.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isInterface(System.Collections.Generic.IDictionary$2(System.String,System.String)), "IDictionary<string,string> is not an interface.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isInterface(System.IDisposable), "IDisposable is an interface.");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isInterface(System.Int32), "int base type is not an interface.");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isInterface(System.String), "string base type is not an interface.");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isInterface(System.Int32), "Int32 struct is not an interface.");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isInterface(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3684), "Bridge3684 class is not an interface.");
                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isInterface(System.Collections.Generic.Dictionary$2(System.String,System.String)), "Dictionary<string, string> is not an interface.");
                }
            }
        }
    });

    /**
     * THis tests whether the System.IList.IsFixed system property returns the
     correct result depending on the list being fixed-size or not.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3685
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3685", {
        statics: {
            methods: {
                /**
                 * Simply tests a fixed array and a List against its fixed size
                 property result.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3685
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3685
                 * @return  {void}
                 */
                TestIsFixedSize: function () {
                    var arr = System.Array.init(10, 0, System.Int32);
                    var list = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var ltdList = new (System.Collections.Generic.List$1(System.Int32)).$ctor2(10);

                    Bridge.Test.NUnit.Assert.True(System.Array.isFixedSize(arr), "IList.IsFixedSize is true for a fixed-length array.");
                    Bridge.Test.NUnit.Assert.False(System.Array.isFixedSize(list), "IList.IsFixedSize is false for an instance of System.Collections.Generic.List.");

                    // Right or wrong, this matches native .NET results.
                    Bridge.Test.NUnit.Assert.False(System.Array.isFixedSize(ltdList), "IList.IsFixedSize is false for an instance of System.Collections.Generic.List with specified capacity.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3706", {
        statics: {
            methods: {
                FooWorking: function (actions) {
                    actions[System.Array.index(0, actions)].value("KeyValuePair[]");
                },
                FooFails: function (actions) {
                    System.Array.getItem(actions, 0, System.Collections.Generic.KeyValuePair$2(System.String,Function)).value("IList-KeyValuePair");
                },
                Test: function (what) {
                    Bridge.Test.NUnit.Assert.True(true, (what || "") + " action is invoked");
                },
                TestIListIndexer: function () {
                    var l = System.Array.init([new (System.Collections.Generic.KeyValuePair$2(System.String,Function)).$ctor1("Bar", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3706.Test)], System.Collections.Generic.KeyValuePair$2(System.String,Function));
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3706.FooWorking(l);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3706.FooFails(l);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3713", {
        statics: {
            methods: {
                TestValueType: function () {
                    var test = 123;
                    var o = Bridge.box(test, System.Int32);
                    var vt = Bridge.cast(Bridge.box(test, System.Int32), System.ValueType);

                    Bridge.Test.NUnit.Assert.AreEqual(123, System.Nullable.getValue(Bridge.cast(Bridge.unbox(vt, System.Int32), System.Int32)), "A ValueType instance can be cast to int.");
                    Bridge.Test.NUnit.Assert.AreEqual("123", Bridge.toString(vt), "A ValueType instance's ToString() method works.");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(o, System.ValueType), "An object containing a ValueType-capable value can be probed as a ValueType.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3714", {
        statics: {
            methods: {
                TestBaseCtorArgumentConversion: function () {
                    var test = new Bridge.ClientTest.Batch3.BridgeIssues.SubClass();
                    var v = test.Value.add(test.Value);

                    Bridge.Test.NUnit.Assert.True(v.equalsT(System.Decimal(2.0)), "Implicit conversion on base constructor call works when passing 1 to decimal.");

                    var test0 = new Bridge.ClientTest.Batch3.BridgeIssues.SubClass0();
                    var v0 = test0.Value.add(test0.Value);

                    Bridge.Test.NUnit.Assert.True(v0.equalsT(System.Decimal(0)), "Implicit conversion on base constructor call works when passing 0 to decimal.");

                    var test0m = new Bridge.ClientTest.Batch3.BridgeIssues.SubClass0m();
                    var v0m = test0.Value.add(test0.Value);

                    Bridge.Test.NUnit.Assert.True(v0m.equalsT(System.Decimal(0)), "Base constructor call works when passing 0m to decimal (explicit conversion).");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720", {
        statics: {
            methods: {
                /**
                 * Checks whether enum's ToObject() produces consistent results.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720
                 * @return  {void}
                 */
                TestEnumToObject: function () {
                    var v = System.UInt64(3);

                    var test = System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Enum.toObject(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test, v), Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test), System.Int32));

                    Bridge.Test.NUnit.Assert.True(System.Enum.hasFlag(test, Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test.A, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test))), "enum's ToObject works and retains enum data.");
                    Bridge.Test.NUnit.Assert.True(System.Enum.hasFlag(test, Bridge.box(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test.B, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test))), "enum's ToObject works and retains all enum data.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3720.Test", {
        $kind: "nested enum",
        statics: {
            fields: {
                A: 1,
                B: 2
            }
        },
        $flags: true
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3728", {
        statics: {
            methods: {
                TestGnericParameterValueTuple: function () {
                    var list = new (System.Collections.Generic.List$1(System.ValueTuple$2(System.Guid,System.Int32))).ctor();
                    list.add(new (System.ValueTuple$2(System.Guid,System.Int32)).$ctor1(System.Guid.NewGuid(), 123));

                    Bridge.Test.NUnit.Assert.AreEqual(123, System.Linq.Enumerable.from(list, System.ValueTuple$2(System.Guid,System.Int32)).first().Item2, "Generics with ValueTuple Enumerables works.");
                }
            }
        }
    });

    /**
     * Tests whether a scenario on multiple inheritance and generics works.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729", {
        statics: {
            methods: {
                /**
                 * Instantiate the classes, and also cast them into their interfaces
                 and check whether the 'AutoProperty.Plain' property works.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729
                 * @return  {void}
                 */
                TestAliases: function () {
                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Class2();
                    var c1 = c2;
                    var i2 = c2;
                    var i3 = c2;
                    var i1 = c2;

                    c1.Name = "test";

                    Bridge.Test.NUnit.Assert.AreEqual("test", c2.Name, "Generic class, multiple-inheritance works.");
                    Bridge.Test.NUnit.Assert.AreEqual("test", i1.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3729$Interface1$Name, "Base-level interface works.");
                    Bridge.Test.NUnit.Assert.AreEqual("test", i2.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3729$Interface1$Name, "Inherit-driven interface 1 works.");
                    Bridge.Test.NUnit.Assert.AreEqual("test", i3.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3729$Interface1$Name, "Inherit-driven interface 2 works.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface1", {
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3733", {
        statics: {
            fields: {
                A: 0,
                B: 0,
                C: 0,
                Test: null
            },
            ctors: {
                init: function () {
                    this.A = 10;
                    this.B = 20;
                    this.C = 20;
                    this.Test = System.Array.init(200, 0, System.Int32);
                }
            },
            methods: {
                TestConstants: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(10, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3733.A, "A is 10");
                    Bridge.Test.NUnit.Assert.AreEqual(20, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3733.B, "B is 20");
                    Bridge.Test.NUnit.Assert.False(false, "A is not greater than B");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3733.B, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3733.C, "C received value from A");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383", {
        statics: {
            methods: {
                TestConditionalAccess: function () {
                    var $t, $t1, $t2;
                    // Create a new instance of class A
                    var instanceA = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestA();

                    // ** Work-around example **
                    var innerClassWorkaround = Bridge.cast((($t = instanceA.InstanceB) != null ? $t.InstanceC : null), Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestC);
                    Bridge.Test.NUnit.Assert.AreEqual("String Value", innerClassWorkaround.Value, "Parens grouping association workaround works.");

                    // Maybe "nicer" workaround?
                    var innerClass2 = Bridge.as((($t1 = instanceA.InstanceB) != null ? $t1.InstanceC : null), Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestC);
                    Bridge.Test.NUnit.Assert.AreEqual("String Value", innerClass2.Value, "'as' casting works.");

                    // ** Bug example **
                    // Bridge.NET: Exception thrown: Unable to cast TestB to TestC.
                    var innerClass = Bridge.cast((($t2 = instanceA.InstanceB) != null ? $t2.InstanceC : null), Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestC);
                    Bridge.Test.NUnit.Assert.AreEqual("String Value", innerClass.Value, "No grouping association works.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestA", {
        $kind: "nested class",
        props: {
            InstanceB: null
        },
        ctors: {
            init: function () {
                this.InstanceB = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestB();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestB", {
        $kind: "nested class",
        props: {
            InstanceC: null
        },
        ctors: {
            init: function () {
                this.InstanceC = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestC();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge37383.TestC", {
        $kind: "nested class",
        props: {
            Value: null
        },
        ctors: {
            init: function () {
                this.Value = "String Value";
            }
        }
    });

    /**
     * Ensures no invalid token "?" is generated out of code in this scenario.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742", {
        statics: {
            methods: {
                /**
                 * Just checks whether the result is not null. If the issue is
                 present, the code won't run at all.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742
                 * @return  {void}
                 */
                TestGenericUsingStatic: function () {
                    var objects = System.Array.init(3, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742.MyClass$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742Static.dom.HTMLSpanElement1));

                    var result = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742.ClassName.Fetch(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742Static.dom.HTMLSpanElement1, objects);
                    Bridge.Test.NUnit.Assert.NotNull(result, "Valid code is generated in this scenario.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742.ClassName", {
        $kind: "nested class",
        statics: {
            methods: {
                Fetch: function (T, objects) {
                    //code here
                    return System.Array.init(10, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742.MyClass$1(T));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742.MyClass$1", function (T) { return {
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();

            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742Static");

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742Static.dom", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3742Static.dom.HTMLSpanElement1", {
        $kind: "nested class"
    });

    /**
     * Ensures /for loop/ variables within async methods are handled right.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3743
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3743", {
        statics: {
            methods: {
                TestAsync: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        i, 
                        r, 
                        c, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            i = 0;
                                            r = 0;
                                            c = 0;
                                            for (var a = (r - i) | 0, b = (c - i) | 0; b <= ((c + i) | 0); b = (b + 1) | 0) {
                                            }

                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                /**
                 * Just call the async function and check whether it returns from the
                 call, meaning the generated code didn't break on translation.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3743
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3743
                 * @return  {void}
                 */
                TestForLoopAsync: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        r, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3743.TestAsync();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        r = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual(1, r, "Async with 'for' with variables initialization works.");

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    /**
     * Ensures array versions of class instances returns the correct
     assembly's FullName value.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3746
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3746", {
        statics: {
            methods: {
                /**
                 * Checks type of Object, local class and an array of that local
                 class, for the expected assembly name.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3746
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3746
                 * @return  {void}
                 */
                TestAssemblyName: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("mscorlib", Bridge.Reflection.getTypeAssembly(System.Object).name, "Object reads 'mscorlib'.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3", Bridge.Reflection.getTypeAssembly(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3746.MyClass).name, "Local class reads after the current assembly name.");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3", Bridge.Reflection.getTypeAssembly(System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3746.MyClass)).name, "Array of the local class above reas as the current assembly name.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3746.MyClass", {
        $kind: "nested class"
    });

    /**
     * This extends the tests for issue 3728, ensuring the same scenario works
     with other linq extensions as well.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754", {
        statics: {
            methods: {
                /**
                 * Tests with an assortment of linq queries to ensure this scenario
                 works for the extensions, in general.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754
                 * @return  {void}
                 */
                TestGnericParameterValueTuple: function () {
                    var $t, $t1;
                    var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.Test();

                    Bridge.Test.NUnit.Assert.AreEqual("a1", System.Linq.Enumerable.from(test, System.ValueTuple$2(System.String,System.String)).first().Item1, "Linq.First() wokrs.");
                    Bridge.Test.NUnit.Assert.NotNull(System.Linq.Enumerable.from(test, System.ValueTuple$2(System.String,System.String)).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.f1), "Linq.Select() works.");
                    Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(System.Linq.Enumerable.from(test, System.ValueTuple$2(System.String,System.String)).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.f1).first()), "Linq.Select().First() works.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(test, System.ValueTuple$2(System.String,System.String)).any($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.f2), "Linq.Any(key) works.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(test, System.ValueTuple$2(System.String,System.String)).any($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.f3), "Linq.Any(value) works.");
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(test, System.ValueTuple$2(System.String,System.String)).all($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.f4), "Linq.All() works.");
                    Bridge.Test.NUnit.Assert.AreEqual("a2", System.Linq.Enumerable.from(test, System.ValueTuple$2(System.String,System.String)).skip(1).first().Item1, "Linq.Skip() works.");
                    Bridge.Test.NUnit.Assert.AreEqual("a1", ($t = ($t1 = System.ValueTuple$2(System.String,System.String), System.Linq.Enumerable.from(test, $t1).ToArray($t1)))[System.Array.index(0, $t)].Item1, "Linq.ToArray() works.");
                    Bridge.Test.NUnit.Assert.AreEqual("a2", System.Linq.Enumerable.from(test, System.ValueTuple$2(System.String,System.String)).where($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.f5).first().Item1, "Linq.Where() works.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754, {
        f1: function (item) {
            return item.Item2;
        },
        f2: function (item) {
            return Bridge.referenceEquals(item.Item1, "a2");
        },
        f3: function (item) {
            return Bridge.referenceEquals(item.Item2, "b1");
        },
        f4: function (item) {
            return item.Item1.length === 2;
        },
        f5: function (item) {
            return !Bridge.referenceEquals(item.Item1, "a1");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.Test", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.ValueTuple$2(System.String,System.String))],
        $kind: "nested class",
        fields: {
            data: null
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$ValueTuple$2$System$String$System$String$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            init: function () {
                this.data = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.Test.f1(new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor());
            }
        },
        methods: {
            GetEnumerator: function () {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $t,
                    pair,
                    $async_e;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(System.ValueTuple$2(System.String,System.String)))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $t = Bridge.getEnumerator(this.data);
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ($t.moveNext()) {
                                            pair = $t.Current;
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 4;
                                    continue;
                                }
                                case 2: {
                                    $enumerator.current = new (System.ValueTuple$2(System.String,System.String)).$ctor1(pair.key, pair.value);
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    $step = 1;
                                    continue;
                                }
                                case 4: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.Test", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3754.Test, {
        f1: function (_o1) {
            _o1.add("a1", "b1");
            _o1.add("a2", "b2");
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3757", {
        statics: {
            methods: {
                TestDateTimeDateComponent: function () {
                    var a = System.DateTime.getDate(System.DateTime.create(2001, 2, 3, 4, 5, 6));
                    var b = System.DateTime.create(2001, 2, 3, 4, 5, 7);
                    var c = System.DateTime.getDate(System.DateTime.create(2001, 2, 3, 4, 5, 8));

                    //gist of issue: throws exception due to wrong DateTime.js $clearTime
                    Bridge.Test.NUnit.Assert.True(!Bridge.equalsT(b, a), "DateTime(2001, 2, 3, 4, 5, 7).Equals(DateTime(2001, 2, 3, 4, 5, 6).Date) returns false.");
                    Bridge.Test.NUnit.Assert.AreNotEqual(b, a, "DateTime(2001, 2, 3, 4, 5, 7) and DateTime(2001, 2, 3, 4, 5, 6).Date are different.");

                    //next two are safety guards that fix doesn't introduce new bugs
                    Bridge.Test.NUnit.Assert.True(!Bridge.equalsT(a, b), "DateTime(2001, 2, 3, 4, 5, 6).Date.Equals(DateTime(2001, 2, 3, 4, 5, 7)) returns false.");
                    Bridge.Test.NUnit.Assert.AreNotEqual(a, b, "DateTime(2001, 2, 3, 4, 5, 6).Date and DateTime(2001, 2, 3, 4, 5, 7) are different.");

                    Bridge.Test.NUnit.Assert.True(Bridge.equalsT(a, c), "DateTime(2001, 2, 3, 4, 5, 6).Date.Equals(DateTime(2001, 2, 3, 4, 5, 8).Date) return true.");
                    Bridge.Test.NUnit.Assert.AreEqual(a, c, "DateTime(2001, 2, 3, 4, 5, 6).Date DateTime(2001, 2, 3, 4, 5, 8).Date are equal.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759", {
        statics: {
            methods: {
                ExtArrWithBoxingEnabled: function (i) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759_Exts.Arr("{0:0000}", [Bridge.box(System.DateTime.getMonth(i), System.Int32)]);
                },
                ExtInstWithBoxingEnabled: function (i) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759_Exts.Inst("{0:0000}", System.DateTime.getMonth(i));
                },
                ExtObjWithBoxingEnabled: function (i) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759_Exts.Obj("{0:0000}", Bridge.box(System.DateTime.getMonth(i), System.Int32));
                },
                RegularCallWithBoxingEnabled: function (i) {
                    return System.String.format("{0:0000}", [Bridge.box(System.DateTime.getMonth(i), System.Int32)]);
                },
                TestBoxing: function () {
                    var bug = 0;

                    var x = System.DateTime.create(2001, 2, 3);
                    try {
                        if (!Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759.ExtArrWithBoxingEnabled(x), "0002")) {
                            bug = (bug + 1) | 0;
                            Bridge.Test.NUnit.Assert.Fail("[1] didn't get expected value");
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        bug = (bug + 1) | 0;
                        Bridge.Test.NUnit.Assert.Fail("[2] call failed");
                    }

                    try {
                        if (!Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759.ExtInstWithBoxingEnabled(x), "0002")) {
                            bug = (bug + 1) | 0;
                            Bridge.Test.NUnit.Assert.Fail("[3] didn't get expected value");
                        }
                    } catch ($e2) {
                        $e2 = System.Exception.create($e2);
                        bug = (bug + 1) | 0;
                        Bridge.Test.NUnit.Assert.Fail("[4] call failed");
                    }

                    try {
                        if (!Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759.ExtObjWithBoxingEnabled(x), "0002")) {
                            bug = (bug + 1) | 0;
                            Bridge.Test.NUnit.Assert.Fail("[5] didn't get expected value");
                        }
                    } catch ($e3) {
                        $e3 = System.Exception.create($e3);
                        bug = (bug + 1) | 0;
                        Bridge.Test.NUnit.Assert.Fail("[6] call failed");
                    }

                    try {
                        if (!Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759.RegularCallWithBoxingEnabled(x), "0002")) {
                            bug = (bug + 1) | 0;
                            Bridge.Test.NUnit.Assert.Fail("[7] didn't get expected value");
                        }
                    } catch ($e4) {
                        $e4 = System.Exception.create($e4);
                        bug = (bug + 1) | 0;
                        Bridge.Test.NUnit.Assert.Fail("[8] call failed");
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(0, bug, "All boxed methods could be called and returned the expected value.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3759_Exts", {
        statics: {
            methods: {
                Arr: function (self, args) {
                    if (args === void 0) { args = []; }
                    return System.String.format.apply(System.String, [self].concat(args));
                },
                Inst: function (self, arg) {
                    return System.String.format(self, [Bridge.box(arg, System.Int32)]);
                },
                Obj: function (self, arg) {
                    return System.String.format(self, [arg]);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762", {
        statics: {
            methods: {
                TestModelResolving: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge.DoTest();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge", {
        $kind: "nested class",
        statics: {
            methods: {
                DoTest: function () {
                    var $t;
                    // used to fail in 17.4.0.
                    Bridge.Test.NUnit.Assert.AreEqual("123456", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_B.Fail(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A(), $t.P = "123", $t), $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge.f1), "Works: B.Fail(new A {P = \"123\"}, x => x.P+\"456\")");
                    Bridge.Test.NUnit.Assert.AreEqual("678", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_B.Fail2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge.f2), "Works: B.Fail2((A x) => x+\"678\")");

                    // workaround for 17.4.0.
                    Bridge.Test.NUnit.Assert.AreEqual("123456", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_B.Fail(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A(), $t.P = "123", $t), $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge.f1), "Workaround works: B.Fail<A>(new A {P = \"123\"}, x => x.P+\"456\")");
                    Bridge.Test.NUnit.Assert.AreEqual("678", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_B.Fail2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge.f2), "Workaround works: B.Fail2<A>((A x) => x+\"678\")");

                    Bridge.Test.NUnit.Assert.AreEqual("13", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_B.Fine(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A(), $t.P = "13", $t)), "Works: B.Fine(new A {P = \"13\"})");

                    // Again, used to fail in 17.4.0.
                    var lst = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge.f3(new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A)).ctor());
                    var lstFail = System.Linq.Enumerable.from(lst, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge.f4).toList(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A);

                    Bridge.Test.NUnit.Assert.AreEqual(1, lstFail.Count, "Non-empty list: (new List<A> {new A {P = \"22\"} }).Select(z => {return B.Helper(z);}).ToList()");
                    Bridge.Test.NUnit.Assert.AreEqual("22", lstFail.getItem(0).P, "Produces expected value: (new List<A> {new A {P = \"22\"} }).Select(z => {return B.Helper(z);}).ToList()");

                    // And workaround with the same functionality
                    var lstWorkaround = System.Linq.Enumerable.from(lst, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge.f4).toList(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A);

                    Bridge.Test.NUnit.Assert.AreEqual(1, lstWorkaround.Count, "Workaround non-empty list: lst.Select<A,A>(z => {return B.Helper(z);}).ToList()");
                    Bridge.Test.NUnit.Assert.AreEqual("22", lstFail.getItem(0).P, "Workaround produces expected value: lst.Select<A,A>(z => {return B.Helper(z);}).ToList()");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762.Bridge, {
        f1: function (x) {
            return (x.P || "") + "456";
        },
        f2: function (x) {
            return System.String.concat(x, "678");
        },
        f3: function (_o1) {
            var $t1;
            _o1.add(($t1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A(), $t1.P = "22", $t1));
            return _o1;
        },
        f4: function (z) {
            return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_B.Helper(z);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_A", {
        props: {
            P: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.P = ""; //dotnetfiddle doesn't support property initializer
            }
        },
        methods: {
            toString: function () {
                return this.P;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3762_B", {
        statics: {
            methods: {
                Fail: function (T, v, transform) {
                    return transform(v);
                },
                Fail2: function (T, transform) {
                    return transform(Bridge.getDefaultValue(T));
                },
                Fine: function (T, v) {
                    return Bridge.toString(v);
                },
                Helper: function (aaa) {
                    return aaa;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3775", {
        statics: {
            methods: {
                TestComparerScope: function () {
                    var comparer = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3775.ReverseComparer$1(System.Int32))(new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn));
                    var list = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3775.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    try {
                        Bridge.Test.NUnit.Assert.AreEqual(1, list.BinarySearch$1(1, comparer), "1 found in list at index 1.");
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        Bridge.Test.NUnit.Assert.Fail("Exception thrown in BinarySearch");
                    }
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3775", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3775, {
        f1: function (_o1) {
            _o1.add(0);
            _o1.add(1);
            _o1.add(2);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3775.ReverseComparer$1", function (T) { return {
        inherits: [System.Collections.Generic.IComparer$1(T)],
        $kind: "nested class",
        fields: {
            _comparer: null
        },
        alias: ["compare", ["System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare"]],
        ctors: {
            ctor: function (comparer) {
                this.$initialize();
                this._comparer = comparer;
            }
        },
        methods: {
            compare: function (x, y) {
                return this._comparer[Bridge.geti(this._comparer, "System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare", "System$Collections$Generic$IComparer$1$compare")](y, x);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785", {
        statics: {
            methods: {
                TestNullableExtension: function () {
                    var y = 0;
                    var y1 = null;
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785.Ext.Boo(System.Nullable$1(System.Int32), y), "Ext.Boo(y), where y == 0, results in 0.");
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785.Ext.Boo(System.Nullable$1(System.Int32), y1), "Ext.Boo(y1), where y1 == null, results in null.");

                    var a = new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785.Model)).ctor();
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Linq.Enumerable.from(a, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785.Model).orderByDescending($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785.f1).count(), "Linq Order() works in empty list.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785, {
        f1: function (i) {
            return i.CreatedDate;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785.Ext", {
        $kind: "nested class",
        statics: {
            methods: {
                Boo: function (T, x) {
                    return x;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3785.Model", {
        $kind: "nested class",
        props: {
            CreatedDate: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3786", {
        statics: {
            methods: {
                Test: function (tuple) {
                    tuple.v = new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(1, 2);
                },
                Case1: function () {
                    var tuple = { v : new (System.ValueTuple$2(System.Int32,System.Int32))() };
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3786.Test(tuple);
                    Bridge.Test.NUnit.Assert.AreEqual(1, tuple.v.Item1, "Tuple's Item1 value is valid.");
                    Bridge.Test.NUnit.Assert.AreEqual(2, tuple.v.Item2, "Tuple's Item2 value is valid.");
                },
                Case2: function () {
                    var tuple = { v : new (System.ValueTuple$2(System.Int32,System.Int32))() };
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3786.Test(tuple);
                    Bridge.Test.NUnit.Assert.AreEqual(1, tuple.v.Item1, "Tuple's Item1 value is valid.");
                    Bridge.Test.NUnit.Assert.AreEqual(2, tuple.v.Item2, "Tuple's Item2 value is valid.");
                },
                TestInlineTupleOut: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3786.Case1();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3786.Case2();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788", {
        statics: {
            methods: {
                DoInt5: function (val) {
                    Bridge.Test.NUnit.Assert.AreEqual(0, val.Item1, "Int tuple's Item1 value in DoInt5() is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual(0, val.Item2, "Int tuple's Item2 value in DoInt5() is correct.");
                },
                DoInt: function (x) {
                    Bridge.Test.NUnit.Assert.AreEqual(0, x, "Int value ind DoInt() is correct.");
                },
                DoInt2: function (T, x) {
                    Bridge.Test.NUnit.Assert.AreEqual(0, x, "Int value in DoInt2<T>() is correct.");
                },
                TestGenericTypeResolver: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.Test$1(System.Int32).DoFunc2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.DoInt);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.Test$1(System.Int32).DoFunc(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.DoInt);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.Test$1(System.ValueTuple$2(System.Int32,System.Int32)).DoFunc(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.DoInt5);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.Test$1(System.Int32).DoFunc3(function (x) { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.DoInt2(System.Int32, x); });
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.Test$1(System.ValueTuple$2(System.Int32,System.Int32)).DoFunc4(function (x) { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.DoInt2(System.ValueTuple$2(System.Int32,System.Int32), x); });
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3788.Test$1", function (T) { return {
        $kind: "nested class",
        statics: {
            methods: {
                DoFunc: function (doIt) {
                    doIt(Bridge.getDefaultValue(T));
                },
                DoFunc2: function (doIt) {
                    doIt(Bridge.getDefaultValue(T));
                },
                DoFunc3: function (doIt) {
                    doIt(Bridge.getDefaultValue(T));
                },
                DoFunc4: function (doIt) {
                    doIt(0);
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3789", {
        statics: {
            methods: {
                TestLINQ: function () {
                    var col = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3789.c1$1(System.Int32))().f1(System.Array.init([""], System.String));

                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Linq.Enumerable.from(col, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3789.c1$1.c2(System.Int32)).count(), "Instantiating c1 works.");
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(System.Linq.Enumerable.from(col, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3789.c1$1.c2(System.Int32)).first()), "Elements of c1 are of c2's specified type.");
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Linq.Enumerable.from(col, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3789.c1$1.c2(System.Int32)).first().m1, "Value of c1 instance's element from subclass is correct.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3789.c1$1", function (T2) { return {
        $kind: "nested class",
        methods: {
            f1: function (coll1) {
                var coll2 = System.Linq.Enumerable.from(coll1, System.String).select(function (item_) {
                        var $t;
                        return ($t = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3789.c1$1.c2(T2))(), $t.m1 = 1, $t);
                    });

                return coll2;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3789.c1$1.c2", function (T2) { return {
        $kind: "nested class",
        props: {
            m1: 0
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3790", {
        statics: {
            methods: {
                TestArgumentDelegate: function () {
                    var mc = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3790.MyClass();

                    Bridge.Test.NUnit.Assert.NotNull(mc, "Instantiation of class involving nullable generics specification works.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3790.MyClass", {
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Test(null);
            }
        },
        methods: {
            Test: function (callback) { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3791", {
        statics: {
            methods: {
                TestEnumBitwise: function () {
                    var mask1 = System.Int64(0);
                    var mask2 = System.Int64(0);

                    mask1 = mask1.or(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3791.Mask.L02); // I am OK!
                    mask2 = mask2.or(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3791.Mask.L02); // But I am not!

                    var test1 = mask1.ne(0);
                    var test2 = mask2.ne(0);

                    Bridge.Test.NUnit.Assert.True(test1, "x = x | y syntax works.");
                    Bridge.Test.NUnit.Assert.True(test2, "x |= y syntax works.");

                    mask1 = mask1.and(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3791.Mask.L02); // I am OK!
                    mask2 = mask2.and(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3791.Mask.L02); // But I am not!

                    test1 = mask1.ne(0);
                    test2 = mask2.ne(0);

                    Bridge.Test.NUnit.Assert.True(test1, "x = x & y syntax works.");
                    Bridge.Test.NUnit.Assert.True(test2, "x &= y syntax works.");

                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3791.Mask", {
        $kind: "nested enum",
        statics: {
            fields: {
                L00: System.Int64(1),
                L01: System.Int64(2),
                L02: System.Int64(4),
                L03: System.Int64(8),
                L04: System.Int64(16),
                L05: System.Int64(32),
                L06: System.Int64(64),
                L07: System.Int64(128),
                L08: System.Int64(256),
                L63: System.Int64([0,-2147483648])
            }
        },
        $flags: true,
        $utype: System.Int64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3794", {
        statics: {
            methods: {
                TestCreateInstance: function () {
                    var test = Bridge.createInstance(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3794.Test);
                    Bridge.Test.NUnit.Assert.NotNull(test, "Creating instance of class containing static constructor works.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3794.Test", {
        $kind: "nested class",
        statics: {
            ctors: {
                ctor: function () {
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795", {
        statics: {
            methods: {
                TestReflection: function () {
                    var type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem;
                    var property = Bridge.Reflection.getMembers(type, 16, 284, "ReadOnly");
                    Bridge.Test.NUnit.Assert.AreEqual("ReadOnly", property.n, "Retrieved property name is 'ReadOnly'.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem, property.td, "Retrieved property's declaring type is PropertyViewItem.");

                    var attr = System.Linq.Enumerable.from(System.Attribute.getCustomAttributes(property, false)).ofType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicPropertyAttribute).firstOrDefault(null, null);
                    Bridge.Test.NUnit.Assert.NotNull(attr, "Retrieved property has a custom attribute.");

                    type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem;
                    var properties = Bridge.Reflection.getMembers(type, 16, 28);
                    Bridge.Test.NUnit.Assert.AreEqual(1, properties.length, "PropertyViewItem has exactly one property.");
                    Bridge.Test.NUnit.Assert.AreEqual("ReadOnly", properties[System.Array.index(0, properties)].n, "Only property in PropertyViewItem is 'ReadOnly'.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem, properties[System.Array.index(0, properties)].td, "Property's declaring type is PropertyViewItem.");

                    attr = System.Linq.Enumerable.from(System.Attribute.getCustomAttributes(properties[System.Array.index(0, properties)], false)).ofType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicPropertyAttribute).firstOrDefault(null, null);
                    Bridge.Test.NUnit.Assert.NotNull(attr, "Property has one 'DynamicProperty' custom attribute.");

                    type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem2;
                    properties = Bridge.Reflection.getMembers(type, 16, 28);
                    Bridge.Test.NUnit.Assert.AreEqual(1, properties.length, "PropertyViewItem2 has exactly one property.");
                    Bridge.Test.NUnit.Assert.AreEqual("ReadOnly", properties[System.Array.index(0, properties)].n, "Only property in PropertyViewItem2 is 'ReadOnly'.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem2, properties[System.Array.index(0, properties)].td, "Property's declaring type is PropertyViewItem2.");

                    var attrs = System.Linq.Enumerable.from(System.Attribute.getCustomAttributes(properties[System.Array.index(0, properties)], false)).ofType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicProperty2Attribute);
                    Bridge.Test.NUnit.Assert.AreEqual(2, attrs.count(), "Property has two 'DynamicProperty2' custom attributes.");

                    type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem3;
                    properties = Bridge.Reflection.getMembers(type, 16, 28);
                    Bridge.Test.NUnit.Assert.AreEqual(1, properties.length, "PropertyViewItem3 has exactly one property.");
                    Bridge.Test.NUnit.Assert.AreEqual("ReadOnly", properties[System.Array.index(0, properties)].n, "Only property in PropertyViewItem3 is 'ReadOnly'.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem3, properties[System.Array.index(0, properties)].td, "Property's declaring type is PropertyViewItem3.");

                    attr = System.Linq.Enumerable.from(System.Attribute.getCustomAttributes(properties[System.Array.index(0, properties)], false)).ofType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicPropertyAttribute).firstOrDefault(null, null);
                    Bridge.Test.NUnit.Assert.Null(attr, "Property has no 'DynamicProperty' custom attribute.");
                    attrs = System.Linq.Enumerable.from(System.Attribute.getCustomAttributes(properties[System.Array.index(0, properties)], false)).ofType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicProperty2Attribute);
                    Bridge.Test.NUnit.Assert.AreEqual(0, attrs.count(), "Property has no 'DynamicProperty2' custom attribute.");

                    type = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem4;
                    properties = Bridge.Reflection.getMembers(type, 16, 28);
                    Bridge.Test.NUnit.Assert.AreEqual(1, properties.length, "PropertyViewItem4 has exactly one property.");
                    Bridge.Test.NUnit.Assert.AreEqual("ReadOnly", properties[System.Array.index(0, properties)].n, "Only property in PropertyViewItem4 is 'ReadOnly'.");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem4, properties[System.Array.index(0, properties)].td, "Property's declaring type is PropertyViewItem4.");

                    attr = System.Linq.Enumerable.from(System.Attribute.getCustomAttributes(properties[System.Array.index(0, properties)], false)).ofType(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicPropertyAttribute).firstOrDefault(null, null);
                    Bridge.Test.NUnit.Assert.NotNull(attr, "Property has one 'DynamicProperty' custom attribute.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicProperty2Attribute", {
        inherits: [System.Attribute],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicPropertyAttribute", {
        inherits: [System.Attribute],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem", {
        $kind: "nested class",
        props: {
            ReadOnly: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem2", {
        $kind: "nested class",
        props: {
            ReadOnly: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem3", {
        $kind: "nested class",
        props: {
            ReadOnly: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem4", {
        $kind: "nested class",
        props: {
            ReadOnly: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3796", {
        statics: {
            methods: {
                TestInt64Cast: function () {
                    var double1 = System.Int64.toNumber(System.Int64(0));
                    var result = double1 / double1;
                    Bridge.Test.NUnit.Assert.True(isNaN(result), "x/x result in double operation is NaN.");

                    // We cannot guarantee a NaN cast to a type is exactly a given number,
                    // so we just check whether it is a number within the range the type comports.
                    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
                    // Look for "conversion from float or double to an integral type", "unchecked context".
                    Bridge.Test.NUnit.Assert.True(Bridge.Int.clip8((result)) >= -128 && Bridge.Int.clip8((result)) <= 127, "NaN cast into sbyte value is within sbyte range.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Int.clipu8((result)) >= 0 && Bridge.Int.clipu8((result)) <= 255, "NaN cast into byte value is within short byte.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Int.clip16((result)) >= -32768 && Bridge.Int.clip16((result)) <= 32767, "NaN cast into short value is within short range.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Int.clipu16((result)) >= 0 && Bridge.Int.clipu16((result)) <= 65535, "NaN cast into ushort value is within ushort range.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Int.clip32((result)) >= -2147483648 && Bridge.Int.clip32((result)) <= 2147483647, "NaN cast into int value is within int range.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Int.clipu32((result)) >= 0 && Bridge.Int.clipu32((result)) <= 4294967295, "NaN cast into uint value is within uint range.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Int.clip64((result)).gte(System.Int64.MinValue) && Bridge.Int.clip64((result)).lte(System.Int64.MaxValue), "NaN cast into long value is within long range.");
                    Bridge.Test.NUnit.Assert.True(Bridge.Int.clipu64((result)).gte(System.UInt64.MinValue) && Bridge.Int.clipu64((result)).lte(System.UInt64.MaxValue), "NaN cast into ulong value is within ulong range.");
                }
            }
        }
    });

    /**
     * Ensures that external referenced and related types' result from
     Type.IsAssignableFrom() works.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3809
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3809", {
        statics: {
            methods: {
                TestIsAssignableFrom: function () {
                    // The checked types must come from a different assembly!
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isAssignableFrom(HTMLElement, HTMLDivElement), "Type.IsAssignableFrom works with types from a different assembly.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge381", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var s1 = System.Array.init(["a", "b"], System.String).join(",");
                    Bridge.Test.NUnit.Assert.AreEqual("a,b", s1, "Join1");

                    var animals = new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge381.Animal)).ctor();
                    animals.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge381.Animal("Squirrel", "Rodent"));
                    animals.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge381.Animal("Gray Wolf", "Carnivora"));
                    animals.add(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge381.Animal("Capybara", "Rodent"));

                    var s2 = Bridge.toArray(animals).join(" ");
                    Bridge.Test.NUnit.Assert.AreEqual("Squirrel Gray Wolf Capybara", s2, "Join2");

                    var values = System.Array.init([
                        null, 
                        "Cobb", 
                        Bridge.box(4189, System.Int32), 
                        Bridge.box(11434, System.Int32), 
                        Bridge.box(0.366, System.Double, System.Double.format, System.Double.getHashCode)
                    ], System.Object);
                    var s31 = values.join("|");
                    Bridge.Test.NUnit.Assert.AreEqual("|Cobb|4189|11434|0.366", s31, "Join31");

                    values[System.Array.index(0, values)] = "";
                    var s32 = values.join("|");
                    Bridge.Test.NUnit.Assert.AreEqual("|Cobb|4189|11434|0.366", s32, "Join32");

                    var sArr = System.Array.init(10, null, System.String);
                    for (var i = 0; i < 10; i = (i + 1) | 0) {
                        sArr[System.Array.index(i, sArr)] = System.String.format("{0,-3}", [Bridge.box(Bridge.Int.mul(i, 5), System.Int32)]);
                    }

                    var s4 = sArr.join(":");
                    Bridge.Test.NUnit.Assert.AreEqual("0  :5  :10 :15 :20 :25 :30 :35 :40 :45 ", s4, "Join4");

                    var val = System.Array.init(["apple", "orange", "grape", "pear"], System.String);
                    var s5 = val.slice(1, 1 + 2).join(", ");
                    Bridge.Test.NUnit.Assert.AreEqual("orange, grape", s5, "Join5");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge381.Animal", {
        $kind: "nested class",
        fields: {
            Kind: null,
            Order: null
        },
        ctors: {
            ctor: function (kind, order) {
                this.$initialize();
                this.Kind = kind;
                this.Order = order;
            }
        },
        methods: {
            toString: function () {
                return this.Kind;
            }
        }
    });

    /**
     * Ensures long.MinValue and long.MaxValue matches native .NET values and
     whether the value matches and is preserved when specified as a
     constant build-time value.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811", {
        statics: {
            methods: {
                /**
                 * Checks whether the
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811
                 * @return  {void}
                 */
                TestLongMinValue: function () {
                    var min = System.Int64([0,-2147483648]);
                    var max = System.Int64([-1,2147483647]);
                    Bridge.Test.NUnit.Assert.AreEqual(min, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811.Settings.DefaultMinValue1, "'min' matches long.MinValue when defined as a const variable.");
                    Bridge.Test.NUnit.Assert.AreEqual(min, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811.Settings.DefaultMinValue2, "'min' matches constant value defined as a const variable.");

                    Bridge.Test.NUnit.Assert.AreEqual(max, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811.Settings.DefaultMaxValue1, "'max' matches long.MaxValue when defined as a const variable.");
                    Bridge.Test.NUnit.Assert.AreEqual(max, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811.Settings.DefaultMaxValue2, "'max' matches constant value defined as a const variable.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3811.Settings", {
        $kind: "nested class",
        statics: {
            fields: {
                DefaultMinValue1: System.Int64(0),
                DefaultMinValue2: System.Int64(0),
                DefaultMaxValue1: System.Int64(0),
                DefaultMaxValue2: System.Int64(0)
            },
            ctors: {
                init: function () {
                    this.DefaultMinValue1 = System.Int64.MinValue;
                    this.DefaultMinValue2 = System.Int64.MinValue;
                    this.DefaultMaxValue1 = System.Int64([-1,2147483647]);
                    this.DefaultMaxValue2 = System.Int64([-1,2147483647]);
                }
            }
        }
    });

    /**
     * Ensures 'ref returns' C#7.2 syntax works in some additional scenarios.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820", {
        statics: {
            fields: {
                a: null
            },
            ctors: {
                init: function () {
                    this.a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.c1();
                }
            },
            methods: {
                Set: function (m) {
                    m.v = 11;
                },
                Set1: function (m) {
                    m = 11;
                },
                /**
                 * Explores the scenarios prepared by the code above.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820
                 * @return  {void}
                 */
                TestRefReturn: function () {
                    var $t, $t1;
                    var refa = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.f3;
                    ($t = refa().Value.a)[System.Array.index(0, $t)] = "c";

                    Bridge.Test.NUnit.Assert.AreEqual("c", ($t1 = refa().Value.a)[System.Array.index(0, $t1)], "Changing array elements' values works.");

                    var score = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Score();
                    score.Get().Value = 10;
                    Bridge.Test.NUnit.Assert.AreEqual(10, score.Get().Value, "Changing value of reference to variable returned by ref method works.");

                    var s = { v : score.Get().Value };

                    var i = { v : 1 };
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Set(i);
                    Bridge.Test.NUnit.Assert.AreEqual(11, i.v, "Ref method can change the value of the target pointed by a reference passed in.");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Set(s);
                    Bridge.Test.NUnit.Assert.AreEqual(11, s.v, "Ref method can change the value of an indirect target reference passed in.");
                    Bridge.Test.NUnit.Assert.AreEqual(10, score.Get().Value, "Changing the value of a variable which reference has been replaced does not affect the value of the former reference.");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Set(score.Get());
                    Bridge.Test.NUnit.Assert.AreEqual(11, score.Get().Value, "Passing a reference to a ref return method to another ref return method works as expected.");

                    score.Get().Value = 10;
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Set1(score.Get().Value);
                    Bridge.Test.NUnit.Assert.AreEqual(10, score.Get().Value, "Non-ref method will not change the passed value outside its scope.");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820, {
        f1: function () {
            return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.a;
        },
        f2: function (_v_) {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.a = _v_;
        },
        f3: function () {
            return new (Bridge.Ref$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.c1))($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.f1, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.f2);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.c1", {
        $kind: "nested class",
        fields: {
            a: null
        },
        ctors: {
            init: function () {
                this.a = System.Array.init(["a", "b"], System.String);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Score", {
        $kind: "nested class",
        fields: {
            value: 0
        },
        ctors: {
            init: function () {
                this.value = 5;
            }
        },
        methods: {
            Get: function () {
                return new (Bridge.Ref$1(System.Int32))(Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Score.f1), Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Score.f2));
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Score", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3820.Score, {
        f1: function () {
            return this.value;
        },
        f2: function (_v_) {
            this.value = _v_;
        }
    });

    /**
     * The tests here consists in ensuring thrown exceptions by
     ClientWebSocket's ConnectAsync() when something goes wrong.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3821
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3821", {
        statics: {
            methods: {
                TestWebSocketError: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        sc, 
                        ex, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            sc = new System.Net.WebSockets.ClientWebSocket();
                                            $task1 = sc.connectAsync(new System.Uri("wss://NotExistServer/NotExist"), System.Threading.CancellationToken.none);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            Bridge.Test.NUnit.Assert.Fail("ConnectAsync() to an invalid address didn't throw an exception.");
                                            done();
                                            $step = 4;
                                            continue;
                                        }
                                        case 3: {
                                            Bridge.Test.NUnit.Assert.NotNull(ex, "ConnectAsync() thrown an exception when trying to connect to an invalid address.");
                                            done();
                                            $async_e = null;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    ex = $async_e;
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3823", {
        statics: {
            methods: {
                TestIsPattern: function () {
                    var s = "";
                    var o = s;
                    var d;
                    if (System.Nullable.liftne("ne", ((d = Bridge.is(o, System.Decimal) ? System.Nullable.getValue(Bridge.cast(Bridge.unbox(o, System.Decimal), System.Decimal)) : null)), System.Decimal.lift(null))) {
                        Bridge.Test.NUnit.Assert.Fail("Non-decimal type resolves as decimal at run-time.");
                    } else {
                        Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(o), "Non-decimal type does not resolve as decimal at run-time.");
                    }
                }
            }
        }
    });

    /**
     * The test here consists in ensuring SortedList usage is compatible
     with Microsoft documentation on the class, and that the getter
     method work. It was resulting in recursive stack loop in modern
     browsers when used, and due to 'strict mode', Internet Explorer
     11 refused to load the bridge.js file, as its client-side getter
     method was defined in duplicity.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3828
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3828", {
        statics: {
            methods: {
                /**
                 * Tests basic usage of the Sorted list and ensures it complies with
                 the official documentation at
                 https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2?view=netframework-4.7.2
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3828
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3828
                 * @return  {void}
                 */
                TestSortedList: function () {
                    var list = new (System.Collections.Generic.SortedList$2(System.Int32,System.String)).ctor();
                    list.setItem(1, "value1");
                    list.add(2, "value2");

                    Bridge.Test.NUnit.Assert.AreEqual(2, list.Count, "SortedList has two elements.");
                    Bridge.Test.NUnit.Assert.AreEqual(list.getItem(1), "value1", "SortedList's get method works for first element.");
                    Bridge.Test.NUnit.Assert.AreEqual(list.getItem(2), "value2", "SortedList's get method works for second element.");
                    Bridge.Test.NUnit.Assert.Throws$2(System.Collections.Generic.KeyNotFoundException, function () {
                        var z = list.getItem(4);
                    }, "Fetching non-existing SortedList element throws System.KeyNotFoundException.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge383", {
        statics: {
            methods: {
                DoSomething: function (person) {
                    return person.Name;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3830", {
        statics: {
            methods: {
                TestArrayResize: function () {
                    var myArr = { v : System.Array.init([
                        "The", 
                        "quick", 
                        "brown", 
                        "fox", 
                        "jumps", 
                        "over", 
                        "the", 
                        "lazy", 
                        "dog"
                    ], System.String) };
                    Bridge.Test.NUnit.Assert.AreEqual(8, (System.Array.getLength(myArr.v, 0) - 1), "Array initial upper boundary index is 8.");

                    System.Array.resize(myArr, ((myArr.v.length + 5) | 0), null, System.String);
                    Bridge.Test.NUnit.Assert.AreEqual(13, (System.Array.getLength(myArr.v, 0) - 1), "Array upper boundary index becomes 13 after change.");
                    Bridge.Test.NUnit.Assert.AreEqual("The", myArr.v[System.Array.index(0, myArr.v)], "Array element 0 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("quick", myArr.v[System.Array.index(1, myArr.v)], "Array element index 1 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("brown", myArr.v[System.Array.index(2, myArr.v)], "Array element index 2 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("fox", myArr.v[System.Array.index(3, myArr.v)], "Array element index 3 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("jumps", myArr.v[System.Array.index(4, myArr.v)], "Array element index 4 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("over", myArr.v[System.Array.index(5, myArr.v)], "Array element index 5 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("the", myArr.v[System.Array.index(6, myArr.v)], "Array element index 6 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("lazy", myArr.v[System.Array.index(7, myArr.v)], "Array element index 7 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("dog", myArr.v[System.Array.index(8, myArr.v)], "Array element index 8 is correct.");

                    Bridge.Test.NUnit.Assert.Null(myArr.v[System.Array.index(9, myArr.v)], "Array element index 9 is null.");
                    Bridge.Test.NUnit.Assert.Null(myArr.v[System.Array.index(10, myArr.v)], "Array element index 10 is null.");
                    Bridge.Test.NUnit.Assert.Null(myArr.v[System.Array.index(11, myArr.v)], "Array element index 11 is null.");
                    Bridge.Test.NUnit.Assert.Null(myArr.v[System.Array.index(12, myArr.v)], "Array element index 12 is null.");
                    Bridge.Test.NUnit.Assert.Null(myArr.v[System.Array.index(13, myArr.v)], "Array element index 13 is null.");

                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var tmp = myArr.v[System.Array.index(14, myArr.v)];
                    }, "Array element index 14 is out of the array's range.");

                    System.Array.resize(myArr, 4, null, System.String);
                    Bridge.Test.NUnit.Assert.AreEqual(3, (System.Array.getLength(myArr.v, 0) - 1), "Array's upper bound is 3 after resized again.");
                    Bridge.Test.NUnit.Assert.AreEqual("The", myArr.v[System.Array.index(0, myArr.v)], "Array element index 0 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("quick", myArr.v[System.Array.index(1, myArr.v)], "Array element index 1 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("brown", myArr.v[System.Array.index(2, myArr.v)], "Array element index 2 is correct.");
                    Bridge.Test.NUnit.Assert.AreEqual("fox", myArr.v[System.Array.index(3, myArr.v)], "Array element index 3 is correct.");
                    Bridge.Test.NUnit.Assert.Throws$2(System.IndexOutOfRangeException, function () {
                        var tmp = myArr.v[System.Array.index(4, myArr.v)];
                    }, "Array element index 4 became out of array range.");
                },
                TestArrayCreateInstanceResize: function () {
                    var $t;
                    var Strings = { };

                    Strings.v = Bridge.cast(($t = System.String, System.Array.create(Bridge.getDefaultValue($t), null, $t, System.Array.init([0], System.Int32))), System.Array.type(System.String));

                    System.Array.resize(Strings, ((Strings.v.length + 1) | 0), null, System.String);
                    Bridge.Test.NUnit.Assert.AreEqual(1, Strings.v.length, "Resized array has 1 element.");
                    Bridge.Test.NUnit.Assert.AreEqual(0, (System.Array.getLength(Strings.v, 0) - 1), "Resized array's upper bound index is 0.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3833", {
        statics: {
            methods: {
                TestTupleEquals: function () {
                    Bridge.Test.NUnit.Assert.False(Bridge.equals(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3833.A(), new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3833.A()), "Class.Equals works between two different instances of a class.");
                    Bridge.Test.NUnit.Assert.False(Bridge.objectEquals({ Item1: new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3833.A() }, { Item1: new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3833.A() }, true), "Tuple<class> works between two different instances of Tuple<class>.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3833.A", {
        $kind: "nested class",
        props: {
            Prop: {
                get: function () {
                    throw new System.NotImplementedException.ctor();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836", {
        statics: {
            fields: {
                ready: false
            },
            ctors: {
                init: function () {
                    this.ready = false;
                }
            },
            methods: {
                TestAsync: function (deleg) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = deleg();
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                Test: function () {
                    var $step = 0,
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0], $step);
                                    switch ($step) {
                                        case 0: {
                                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.ready = true;
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestAsyncLambda: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $jumpFromFinally, 
                        done, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.ready = false;
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.TestAsync(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.Test);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.ready, "Async delegate method works.");

                                        // Only this part was breaking in Bridge 17.6.0.
                                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.ready = false;
                                        $task2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.TestAsync($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.f1);
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.ready, "Async inline delegate method works.");

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836, {
        f1: function () {
        var $step = 0,
            $task1, 
            $jumpFromFinally, 
            $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
            $returnValue, 
            $async_e, 
            $asyncBody = Bridge.fn.bind(this, function () {
                try {
                    for (;;) {
                        $step = System.Array.min([0,1], $step);
                        switch ($step) {
                            case 0: {
                                $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3836.Test();
                                $step = 1;
                                if ($task1.isCompleted()) continue;
                                $task1.continue($asyncBody);
                                return;
                            }
                            case 1: {
                                $task1.getAwaitedResult();
                                $tcs.setResult(null);
                                return;
                            }
                            default: {
                                $tcs.setResult(null);
                                return;
                            }
                        }
                    }
                } catch($async_e1) {
                    $async_e = System.Exception.create($async_e1);
                    $tcs.setException($async_e);
                }
            }, arguments);

        $asyncBody();
        return $tcs.task;
    }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3855", {
        statics: {
            methods: {
                TestTypeName: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("System.Type", Bridge.Reflection.getTypeFullName(System.Type), "typeof(Type).FullName is 'System.Type'.");
                    Bridge.Test.NUnit.Assert.AreEqual("Type", Bridge.Reflection.getTypeName(System.Type), "typeof(Type).Name is 'Type'");

                    Bridge.Test.NUnit.Assert.AreEqual("System.Boolean", Bridge.Reflection.getTypeFullName(System.Boolean), "typeof(Boolean).FullName is 'System.Boolean'");
                    Bridge.Test.NUnit.Assert.AreEqual("Boolean", Bridge.Reflection.getTypeName(System.Boolean), "typeof(Boolean).Name is 'Boolean'");

                    Bridge.Test.NUnit.Assert.AreEqual("System.String", Bridge.Reflection.getTypeFullName(System.String), "typeof(String).FullName is 'System.String'");
                    Bridge.Test.NUnit.Assert.AreEqual("String", Bridge.Reflection.getTypeName(System.String), "typeof(String).Name is 'String'");

                    Bridge.Test.NUnit.Assert.AreEqual("System.DateTime", Bridge.Reflection.getTypeFullName(System.DateTime), "typeof(DateTime).FullName is 'System.DateTime'");
                    Bridge.Test.NUnit.Assert.AreEqual("DateTime", Bridge.Reflection.getTypeName(System.DateTime), "typeof(DateTime).Name is 'DateTime'");
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring reflection works over an array of
     arrays.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3865
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3865", {
        statics: {
            methods: {
                TestArrayAssembly: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.Reflection.getTypeAssembly(System.String).name, Bridge.Reflection.getTypeAssembly(System.Array.type(System.Array.type(System.String))).name, "The type associated to an array of arrays has the Assembly property.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3867", {
        statics: {
            methods: {
                TestBackingField: function () {
                    var $t;
                    var c = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3867.MyModel(), $t.Prop = 1, $t);
                    var t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3867.MyModel;
                    var fields = Bridge.Reflection.getMembers(t, 4, 52);
                    Bridge.Test.NUnit.Assert.AreEqual(1, fields.length, "fields length is right: 1");

                    var field = fields[System.Array.index(0, fields)];
                    Bridge.Test.NUnit.Assert.AreEqual("<Prop>k__BackingField", field.n, "field.Name is '<Prop>k__BackingField'");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(Bridge.Reflection.fieldAccess(field, c)), "field.GetValue() fetches the correct value: 1");

                    Bridge.Reflection.fieldAccess(field, c, 2);
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.unbox(Bridge.Reflection.fieldAccess(field, c)), "Afted field.SetValue(2), field.GetValue() returns the expected value: 2");
                    Bridge.Test.NUnit.Assert.AreEqual(2, c.Prop, "After field.SetValue(2), the target variable's respective property is changed accordingly");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3867.MyModel", {
        $kind: "nested class",
        props: {
            Prop: 0
        }
    });

    /**
     * The test here consists in ensuring local async functions are run
     obeying assynchronous execution and order.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3871
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3871", {
        statics: {
            methods: {
                something: function () {
                    return System.Threading.Tasks.Task.fromResult(true, System.Boolean);
                },
                TestAsyncLocalFunction: function () {
                    var fct = null;
                    var done = Bridge.Test.NUnit.Assert.Async();

                    fct = function () {
                        var $step = 0,
                            $task1, 
                            $taskResult1, 
                            $jumpFromFinally, 
                            r, 
                            $asyncBody = Bridge.fn.bind(this, function () {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3871.something();
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            r = $taskResult1;
                                            Bridge.Test.NUnit.Assert.True(r, "Local async function is awaited before next instruction is run.");
                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            }, arguments);

                        $asyncBody();
                    };
                    fct();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3875", {
        statics: {
            methods: {
                TestToArray: function () {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
                    var bytes = System.Array.init([1, 2, 3, 4], System.Byte);
                    Bridge.Test.NUnit.Assert.AreEqual("Byte[]", Bridge.Reflection.getTypeName(Bridge.getType(($t1 = System.Byte, System.Linq.Enumerable.from(bytes, $t1).ToArray($t1)))), "Byte array type from linq's ToArray() is 'Byte[]'.");
                    Bridge.Test.NUnit.Assert.AreEqual("Byte[]", Bridge.Reflection.getTypeName(Bridge.getType(bytes)), "Byte array's type is 'Byte[]'.");

                    var ints = System.Array.init([1, 2, 3, 4], System.Int32);
                    Bridge.Test.NUnit.Assert.AreEqual("Int32[]", Bridge.Reflection.getTypeName(Bridge.getType(($t3 = System.Int32, System.Linq.Enumerable.from(ints, $t3).ToArray($t3)))), "Int array type from linq's ToArray() is 'Int32[]'.");
                    Bridge.Test.NUnit.Assert.AreEqual("Int32[]", Bridge.Reflection.getTypeName(Bridge.getType(ints)), "Int array's type is 'Int32[]'.");

                    var strings = System.Array.init(["1", "2", "3", "4"], System.String);
                    Bridge.Test.NUnit.Assert.AreEqual("String[]", Bridge.Reflection.getTypeName(Bridge.getType(($t5 = System.String, System.Linq.Enumerable.from(strings, $t5).ToArray($t5)))), "String array type from linq's ToArray() is 'String[]'.");
                    Bridge.Test.NUnit.Assert.AreEqual("String[]", Bridge.Reflection.getTypeName(Bridge.getType(strings)), "String array's type is 'String[]'.");

                    var floats = System.Array.init([1, 2, 3, 4], System.Single);
                    Bridge.Test.NUnit.Assert.AreEqual("Single[]", Bridge.Reflection.getTypeName(Bridge.getType(($t7 = System.Single, System.Linq.Enumerable.from(floats, $t7).ToArray($t7)))), "Float array type from linq's ToArray() is 'Single[]'.");
                    Bridge.Test.NUnit.Assert.AreEqual("Single[]", Bridge.Reflection.getTypeName(Bridge.getType(floats)), "Single array's type is 'Single[]'.");

                    var doubles = System.Array.init([1.8, 2.2, 3.6, 4.1], System.Double);
                    Bridge.Test.NUnit.Assert.AreEqual("Double[]", Bridge.Reflection.getTypeName(Bridge.getType(($t9 = System.Double, System.Linq.Enumerable.from(doubles, $t9).ToArray($t9)))), "Double array type from linq's ToArray() is 'Double[]'.");
                    Bridge.Test.NUnit.Assert.AreEqual("Double[]", Bridge.Reflection.getTypeName(Bridge.getType(doubles)), "Double array's type is 'Double[]'.");
                }
            }
        }
    });

    /**
     * The test here consists of ensuring the call count for the Create()
     method from the Fac class is one and only one if the return type
     is generic type 'out'.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876", {
        statics: {
            methods: {
                TestOutGenerics: function () {
                    var $t;
                    var fac = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.Fac();
                    var a = ($t = fac.Create())[Bridge.geti($t, "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3876$IAbstr$1$System$String$SomeProperty", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3876$IAbstr$1$SomeProperty")];
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.Fac.CreateCalledCount, "Call count for initialization is 1.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.Fac", {
        $kind: "nested class",
        statics: {
            fields: {
                CreateCalledCount: 0
            },
            ctors: {
                init: function () {
                    this.CreateCalledCount = 0;
                }
            }
        },
        methods: {
            Create: function () {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.Fac.CreateCalledCount = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.Fac.CreateCalledCount + 1) | 0;
                return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.Impl();
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.IAbstr$1", function (T) { return {
        $kind: "nested interface",
        $variance: [1]
    }; });

    /**
     * The test here ensures a javascript-created number will have its
     bridge-interfaced helpers when cast.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3883
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3883", {
        statics: {
            methods: {
                /**
                 * Creates a int64 fitting (yet, too big for int32) constant from
                 javascript side and cast it into long and checks whether it gets
                 the required Bridge extensions working.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3883
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3883
                 * @return  {void}
                 */
                TestPlain64: function () {
                    var ul = 9223372036854775808;
                    var l = System.Int64.clip64(ul);

                    Bridge.Test.NUnit.Assert.True(l.equals(System.Int64.MinValue), "Native cast into long works.");
                }
            }
        }
    });

    /**
     * The tests here ensures linq implementation of IEnumerable resolves to
     the right call given its underlying involved type.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885", {
        statics: {
            methods: {
                /**
                 * Tests the string variation by checking whether the resolved type
                 is the correct one (string!).
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885
                 * @return  {void}
                 */
                TestLinqEnumerationOnString: function () {
                    var $t, $t1, $t2, $t3, $t4;
                    {
                        var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest(1);

                        $t = Bridge.getEnumerator(test);
                        try {
                            while ($t.moveNext()) {
                                var i = $t.Current;
                                Bridge.Test.NUnit.Assert.True(Bridge.is(Bridge.box(i, System.Int32), System.Int32), "The resolved type is int.");
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }

                        $t1 = Bridge.getEnumerator(Bridge.cast(test, System.Collections.Generic.IEnumerable$1(System.String)), System.String);
                        try {
                            while ($t1.moveNext()) {
                                var i1 = $t1.Current;
                                Bridge.Test.NUnit.Assert.True(Bridge.is(i1, System.String), "The resolved type is string.");
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }

                        $t2 = Bridge.getEnumerator(System.Linq.Enumerable.from(Bridge.cast(test, System.Collections.Generic.IEnumerable$1(System.String)), System.String).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.f1));
                        try {
                            while ($t2.moveNext()) {
                                var i2 = $t2.Current;
                                Bridge.Test.NUnit.Assert.True(Bridge.is(i2, System.String), "The resolved type is string.");
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                    }

                    {
                        var test1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest(1);
                        $t3 = Bridge.getEnumerator(test1, System.String);
                        try {
                            while ($t3.moveNext()) {
                                var i3 = $t3.Current;
                                Bridge.Test.NUnit.Assert.True(Bridge.is(i3, System.String), "The resolved type is string.");
                            }
                        } finally {
                            if (Bridge.is($t3, System.IDisposable)) {
                                $t3.System$IDisposable$Dispose();
                            }
                        }
                        $t4 = Bridge.getEnumerator(System.Linq.Enumerable.from(test1, System.String).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.f1));
                        try {
                            while ($t4.moveNext()) {
                                var i4 = $t4.Current;
                                Bridge.Test.NUnit.Assert.True(Bridge.is(i4, System.String), "The resolved type is string.");
                            }
                        } finally {
                            if (Bridge.is($t4, System.IDisposable)) {
                                $t4.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /**
                 * The original format of the test, counting whether the iteration
                 amount is congruent with the step.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885
                 * @return  {void}
                 */
                TestLinqEnumerationOnDouble: function () {
                    var $t, $t1, $t2, $t3, $t4;
                    {
                        var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest(1);

                        var count = 0;
                        $t = Bridge.getEnumerator(test);
                        try {
                            while ($t.moveNext()) {
                                var i = $t.Current;
                                count = (count + 1) | 0;
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }

                        Bridge.Test.NUnit.Assert.AreEqual(2, count, "0 - 1 in steps of 1 results in two iterations.");

                        count = 0;
                        $t1 = Bridge.getEnumerator(Bridge.cast(test, System.Collections.Generic.IEnumerable$1(System.Double)), System.Double);
                        try {
                            while ($t1.moveNext()) {
                                var i1 = $t1.Current;
                                count = (count + 1) | 0;
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                        Bridge.Test.NUnit.Assert.AreEqual(11, count, "0 - 1 in steps of 0.1 results in eleven iterations.");

                        count = 0;
                        $t2 = Bridge.getEnumerator(System.Linq.Enumerable.from(Bridge.cast(test, System.Collections.Generic.IEnumerable$1(System.Double)), System.Double).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.f1));
                        try {
                            while ($t2.moveNext()) {
                                var i2 = $t2.Current;
                                count = (count + 1) | 0;
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                        Bridge.Test.NUnit.Assert.AreEqual(11, count, "0 - 1 in steps of 0.1 results in eleven iterations.");
                    }

                    {
                        var test1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest(1);
                        var count1 = 0;

                        $t3 = Bridge.getEnumerator(test1, System.Double);
                        try {
                            while ($t3.moveNext()) {
                                var i3 = $t3.Current;
                                count1 = (count1 + 1) | 0;
                            }
                        } finally {
                            if (Bridge.is($t3, System.IDisposable)) {
                                $t3.System$IDisposable$Dispose();
                            }
                        }
                        Bridge.Test.NUnit.Assert.AreEqual(11, count1, "0 - 1 in steps of 0.1 results in eleven iterations.");

                        count1 = 0;
                        $t4 = Bridge.getEnumerator(System.Linq.Enumerable.from(test1, System.Double).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.f1));
                        try {
                            while ($t4.moveNext()) {
                                var i4 = $t4.Current;
                                count1 = (count1 + 1) | 0;
                            }
                        } finally {
                            if (Bridge.is($t4, System.IDisposable)) {
                                $t4.System$IDisposable$Dispose();
                            }
                        }
                        Bridge.Test.NUnit.Assert.AreEqual(11, count1, "0 - 1 in steps of 0.1 results in eleven iterations.");

                    }
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885, {
        f1: function (d) {
            return d;
        }
    });

    /**
     * This is the exact same scenario as reported in the issue.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest
     * @implements  System.Collections.Generic.IEnumerable$1
     * @implements  System.Collections.Generic.IEnumerable$1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Int32),System.Collections.Generic.IEnumerable$1(System.Double)],
        $kind: "nested class",
        props: {
            Max: 0
        },
        alias: [
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Int32$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
            "System$Collections$Generic$IEnumerable$1$System$Double$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"
        ],
        ctors: {
            ctor: function (max) {
                this.$initialize();
                this.Max = max;
            }
        },
        methods: {
            GetEnumerator: function () {
                return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest.IntEnumerator(this);
            },
            System$Collections$Generic$IEnumerable$1$System$Double$GetEnumerator: function () {
                return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest.DoubleEnumerator(this);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest.IntEnumerator(this);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest.DoubleEnumerator", {
        inherits: [System.Collections.Generic.IEnumerator$1(System.Double)],
        $kind: "nested class",
        fields: {
            _max: 0
        },
        props: {
            Current: 0,
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return Bridge.box(this.Current, System.Double, System.Double.format, System.Double.getHashCode);
                }
            }
        },
        alias: [
            "Current", ["System$Collections$Generic$IEnumerator$1$System$Double$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
            "Dispose", "System$IDisposable$Dispose",
            "reset", "System$Collections$IEnumerator$reset",
            "moveNext", "System$Collections$IEnumerator$moveNext"
        ],
        ctors: {
            ctor: function (test) {
                this.$initialize();
                this._max = test.Max;
                this.Current = -0.1;
            }
        },
        methods: {
            Dispose: function () { },
            reset: function () {
                this.Current = -0.1;
            },
            moveNext: function () {
                var $t;
                return (($t = this.Current + 0.1, this.Current = $t, $t)) <= this._max;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.DoubleTest.IntEnumerator", {
        inherits: [System.Collections.Generic.IEnumerator$1(System.Int32)],
        $kind: "nested class",
        fields: {
            _max: 0
        },
        props: {
            Current: 0,
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return Bridge.box(this.Current, System.Int32);
                }
            }
        },
        alias: [
            "Current", ["System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
            "Dispose", "System$IDisposable$Dispose",
            "reset", "System$Collections$IEnumerator$reset",
            "moveNext", "System$Collections$IEnumerator$moveNext"
        ],
        ctors: {
            ctor: function (test) {
                this.$initialize();
                this._max = test.Max;
                this.Current = -1;
            }
        },
        methods: {
            Dispose: function () { },
            reset: function () {
                this.Current = -1;
            },
            moveNext: function () {
                var $t;
                return (($t = (this.Current + 1) | 0, this.Current = $t, $t)) <= this._max;
            }
        }
    });

    /**
     * Slightly changed scenario involving string instead.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest
     * @implements  System.Collections.Generic.IEnumerable$1
     * @implements  System.Collections.Generic.IEnumerable$1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Int32),System.Collections.Generic.IEnumerable$1(System.String)],
        $kind: "nested class",
        props: {
            Max: 0
        },
        alias: [
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Int32$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
            "System$Collections$Generic$IEnumerable$1$System$String$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"
        ],
        ctors: {
            ctor: function (max) {
                this.$initialize();
                this.Max = max;
            }
        },
        methods: {
            GetEnumerator: function () {
                return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest.IntEnumerator(this);
            },
            System$Collections$Generic$IEnumerable$1$System$String$GetEnumerator: function () {
                return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest.StringEnumerator(this);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest.IntEnumerator(this);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest.IntEnumerator", {
        inherits: [System.Collections.Generic.IEnumerator$1(System.Int32)],
        $kind: "nested class",
        fields: {
            _max: 0
        },
        props: {
            Current: 0,
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return Bridge.box(this.Current, System.Int32);
                }
            }
        },
        alias: [
            "Current", ["System$Collections$Generic$IEnumerator$1$System$Int32$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
            "Dispose", "System$IDisposable$Dispose",
            "reset", "System$Collections$IEnumerator$reset",
            "moveNext", "System$Collections$IEnumerator$moveNext"
        ],
        ctors: {
            ctor: function (test) {
                this.$initialize();
                this._max = test.Max;
                this.Current = -1;
            }
        },
        methods: {
            Dispose: function () { },
            reset: function () {
                this.Current = -1;
            },
            moveNext: function () {
                var $t;
                return (($t = (this.Current + 1) | 0, this.Current = $t, $t)) <= this._max;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3885.StringTest.StringEnumerator", {
        inherits: [System.Collections.Generic.IEnumerator$1(System.String)],
        $kind: "nested class",
        fields: {
            _max: 0,
            _index: 0
        },
        props: {
            Current: null,
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return this.Current;
                }
            }
        },
        alias: [
            "Current", ["System$Collections$Generic$IEnumerator$1$System$String$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
            "Dispose", "System$IDisposable$Dispose",
            "reset", "System$Collections$IEnumerator$reset",
            "moveNext", "System$Collections$IEnumerator$moveNext"
        ],
        ctors: {
            ctor: function (test) {
                this.$initialize();
                this._max = test.Max;
                this._index = -1;
                this.Current = "";
            }
        },
        methods: {
            Dispose: function () { },
            reset: function () {
                this.Current = "";
                this._index = -1;
            },
            moveNext: function () {
                this.Current = "s" + ((this._index = (this._index + 1) | 0));
                return this._index < this._max;
            }
        }
    });

    /**
     * The tests here consists in ensuring that templates combined with object
     initializer syntax works right in different (but identical,
     technically) scenarios.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886", {
        statics: {
            methods: {
                /**
                 * Tests the different scenarios in order of complexity.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886
                 * @return  {void}
                 */
                TestTemplateObjectInitializer: function () {
                    var $t;
                    var bare = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.TestBare(), $t.A = 5, $t.B = "test", $t);

                    Bridge.Test.NUnit.Assert.AreEqual(5, bare.A, "Object initializer syntax works with template/bare 1/2.");
                    Bridge.Test.NUnit.Assert.AreEqual("test", bare.B, "Object initializer syntax works with template/bare 2/2.");

                    var simpler = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.TestSimpler(), $t.One = Bridge.toString(System.TimeSpan.fromDays(1)), $t.Two = Bridge.toString(System.TimeSpan.fromDays(2)), $t.Three = Bridge.toString(System.TimeSpan.fromDays(3)), $t);

                    Bridge.Test.NUnit.Assert.AreEqual("1.00:00:00", simpler.One, "Object initializer syntax works with template/simple 1/3.");
                    Bridge.Test.NUnit.Assert.AreEqual("2.00:00:00", simpler.Two, "Object initializer syntax works with template/simple 2/3.");
                    Bridge.Test.NUnit.Assert.AreEqual("3.00:00:00", simpler.Three, "Object initializer syntax works with template/simple 3/3.");

                    var original = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.Test(), $t.One = Bridge.toString(System.TimeSpan.fromDays(1)), $t.Two = Bridge.toString(System.TimeSpan.fromDays(2)), $t.Three = Bridge.toString(System.TimeSpan.fromDays(3)), $t);

                    Bridge.Test.NUnit.Assert.True(System.TimeSpan.eq(System.TimeSpan.fromDays(1), System.TimeSpan.parse(original.One)), "Object initializer syntax works with template/elaborate 1/3.");
                    Bridge.Test.NUnit.Assert.True(System.TimeSpan.eq(System.TimeSpan.fromDays(2), System.TimeSpan.parse(original.Two)), "Object initializer syntax works with template/elaborate 2/3.");
                    Bridge.Test.NUnit.Assert.True(System.TimeSpan.eq(System.TimeSpan.fromDays(3), System.TimeSpan.parse(original.Three)), "Object initializer syntax works with template/elaborate 3/3.");
                }
            }
        }
    });

    /**
     * Originally provided scenario to reproduce the issue.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.Test
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.Test", {
        $kind: "nested class"
    });

    /**
     * Bare minimum set up to reproduce the issue.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.TestBare
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.TestBare", {
        $kind: "nested class",
        props: {
            A: 0,
            B: null
        }
    });

    /**
     * Simpler approach than the reported one, still enough to reproduce
     the issue.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.TestSimpler
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3886.TestSimpler", {
        $kind: "nested class",
        props: {
            One: null,
            Two: null,
            Three: null
        },
        ctors: {
            init: function () {
                this.One = new System.TimeSpan();
                this.Two = new System.TimeSpan();
                this.Three = new System.TimeSpan();
            }
        }
    });

    /**
     * The tests here consists in ensuring string values from the Decimal type
     are correct between conversions.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3887
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3887", {
        statics: {
            methods: {
                /**
                 * Tests various scenarios defining decimal constant numbers.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3887
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3887
                 * @return  {void}
                 */
                TestDecimalToString: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("0", System.Decimal(0.0).toString(), "0m.ToString() is \"0\".");
                    Bridge.Test.NUnit.Assert.AreEqual("0.0", System.Decimal(0.0, 1).toString(), "0.0m.ToString() is \"0.0\".");
                    Bridge.Test.NUnit.Assert.AreEqual("0.00", System.Decimal(0.00, 2).toString(), "0.00m.ToString() is \"0.00\".");

                    var d1 = System.Decimal(0.314, 3);
                    var d2 = System.Decimal(0.0140, 4);
                    Bridge.Test.NUnit.Assert.AreEqual("0.3000", (d1.sub(d2)).toString(), "Subraction of 3 and 4 digits long decimal results in a 4-digit value.");

                    d1 = System.Decimal(0.314, 3);
                    d2 = System.Decimal(0.014, 3);
                    Bridge.Test.NUnit.Assert.AreEqual("0.300", (d1.sub(d2)).toString(), "Subtraction of two 3-digit-long decimal results in a 3-digit value.");

                    d1 = System.Decimal(0.300, 3);
                    d2 = System.Decimal(0.01, 2);
                    Bridge.Test.NUnit.Assert.AreEqual("0.310", (d1.add(d2)).toString(), "Sum of 2 and 3 digits long decimal numbers results in a 3-digit value.");

                    d1 = System.Decimal(0.06, 2);
                    d2 = d1.div(System.Decimal(4)); // we don't care about the result here, we're checking if trailing zeroes are being cropped off the number.
                    Bridge.Test.NUnit.Assert.AreEqual("0.060", (d2.mul(System.Decimal(4))).toString(), "Multiplication of a 3-digitlong decimal numbers result in a 3-digit value.");
                }
            }
        }
    });

    /**
     * The test here consists on ensuring the [Name] attribute can be used
     also in class constructor methods.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3893
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3893", {
        statics: {
            methods: {
                /**
                 * Draft the external implementation of the class and make a reference
                 to it, ensuring the expected code is generated.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3893
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3893
                 * @return  {void}
                 */
                TestCtorName: function () {
                    var Bridge3893_TestClass = function () {
                            this.prop = 1;
                    };
                    Bridge3893_TestClass.ctor_1 = function () {
                            this.prop = 2;
                    };

                    var c1 = new Bridge3893_TestClass();
                    Bridge.Test.NUnit.Assert.AreEqual(1, c1.prop, "Bridge-named external class' constructor works.");

                    var c2 = new Bridge3893_TestClass.ctor_1("");
                    Bridge.Test.NUnit.Assert.AreEqual(2, c2.prop, "User-named external class' constructor works.");
                }
            }
        }
    });

    /**
     * The test here ensures a '-0.0' literal is treated as negative.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3898
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3898", {
        statics: {
            methods: {
                /**
                 * Ensures the zero literal is negative by the math 1/0 being negative
                 infinity.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3898
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3898
                 * @return  {void}
                 */
                TestNegativeZero: function () {
                    var negativezero = -0.0;
                    Bridge.Test.NUnit.Assert.True((1 / negativezero === Number.NEGATIVE_INFINITY), "1/(-0) is -\u221e.");
                }
            }
        }
    });

    /**
     * The tests here ensures several Math.IEEERemainder() results are
     correct.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3899
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3899", {
        statics: {
            methods: {
                /**
                 * Tests in two batches, one using Math.Round to approximate the
                 output, and another using NumberHelper like the original
                 IEEERemainder tests in Batch1 project.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3899
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3899
                 * @return  {void}
                 */
                TestIEEERemainder: function () {
                    // Originally as drawn by Vladimir, descriptions added by Fabricio
                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.Math.round(Bridge.Math.IEEERemainder(3, 2), 1, 6), "Math.IEEERemainder(3, 2) == -1");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.Math.round(Bridge.Math.IEEERemainder(4, 2), 1, 6), "Math.IEEERemainder(4, 2) == 0");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.Math.round(Bridge.Math.IEEERemainder(10, 3), 1, 6), "Math.IEEERemainder(10, 3) == 1");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.Math.round(Bridge.Math.IEEERemainder(11, 3), 1, 6), "Math.IEEERemainder(11, 3) == -1");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.Math.round(Bridge.Math.IEEERemainder(27, 4), 1, 6), "Math.IEEERemainder(27, 4) == -1");
                    Bridge.Test.NUnit.Assert.AreEqual(-2, Bridge.Math.round(Bridge.Math.IEEERemainder(28, 5), 1, 6), "Math.IEEERemainder(28, 5) == -2");
                    Bridge.Test.NUnit.Assert.AreEqual(1.8, Bridge.Math.round(Bridge.Math.IEEERemainder(17.8, 4), 1, 6), "Math.IEEERemainder(17.8, 4) == 1.8");
                    Bridge.Test.NUnit.Assert.AreEqual(1.4, Bridge.Math.round(Bridge.Math.IEEERemainder(17.8, 4.1), 1, 6), "Math.IEEERemainder(17.8, 4.1) == 1.4");
                    Bridge.Test.NUnit.Assert.AreEqual(0.1, Bridge.Math.round(Bridge.Math.IEEERemainder(-16.3, 4.1), 1, 6), "Math.IEEERemainder(-16.3, 4.1) == 0.1");
                    Bridge.Test.NUnit.Assert.AreEqual(1.4, Bridge.Math.round(Bridge.Math.IEEERemainder(17.8, -4.1), 1, 6), "Math.IEEERemainder(17.8, -4.1) == 1.4");
                    Bridge.Test.NUnit.Assert.AreEqual(-1.4, Bridge.Math.round(Bridge.Math.IEEERemainder(-17.8, -4.1), 1, 6), "Math.IEEERemainder(-17.8, -4.1) == -1.4");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.Math.round(Bridge.Math.IEEERemainder(-3, 2), 1, 6), "Math.IEEERemainder(-3, 2) == 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.Math.round(Bridge.Math.IEEERemainder(5, 2), 1, 6), "Math.IEEERemainder(5, 2) == 1");
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.Math.round(Bridge.Math.IEEERemainder(2, Number.NEGATIVE_INFINITY), 1, 6), "Math.IEEERemainder(2, Double.NegativeInfinity) == 2");
                    Bridge.Test.NUnit.Assert.AreEqual(-4.3, Bridge.Math.round(Bridge.Math.IEEERemainder(-4.3, Number.NEGATIVE_INFINITY), 1, 6), "Math.IEEERemainder(-4.3, Double.NegativeInfinity) == -4.3");

                    // Tests in Batch1.Math.IEEERemainderWorks()
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(-1, Bridge.Math.round(Bridge.Math.IEEERemainder(3, 2), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(0, Bridge.Math.round(Bridge.Math.IEEERemainder(4, 2), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1, Bridge.Math.round(Bridge.Math.IEEERemainder(10, 3), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(-1, Bridge.Math.round(Bridge.Math.IEEERemainder(11, 3), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(-1, Bridge.Math.round(Bridge.Math.IEEERemainder(27, 4), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(-2, Bridge.Math.round(Bridge.Math.IEEERemainder(28, 5), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1.8, Bridge.Math.round(Bridge.Math.IEEERemainder(17.8, 4), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1.4, Bridge.Math.round(Bridge.Math.IEEERemainder(17.8, 4.1), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(0.1, Bridge.Math.round(Bridge.Math.IEEERemainder(-16.3, 4.1), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1.4, Bridge.Math.round(Bridge.Math.IEEERemainder(17.8, -4.1), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(-1.4, Bridge.Math.round(Bridge.Math.IEEERemainder(-17.8, -4.1), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1, Bridge.Math.round(Bridge.Math.IEEERemainder(-3, 2), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(1, Bridge.Math.round(Bridge.Math.IEEERemainder(5, 2), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(2, Bridge.Math.round(Bridge.Math.IEEERemainder(2, Number.NEGATIVE_INFINITY), 1, 6));
                    Bridge.ClientTestHelper.NumberHelper.AssertDoubleWithEpsilon8(-4.3, Bridge.Math.round(Bridge.Math.IEEERemainder(-4.3, Number.NEGATIVE_INFINITY), 1, 6));
                }
            }
        }
    });

    /**
     * Ensures Math.Sign works with infinity
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3900
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3900", {
        statics: {
            methods: {
                /**
                 * Checks whether the result matches native .NET.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3900
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3900
                 * @return  {void}
                 */
                TestInfinitySign: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.Int.sign(Number.POSITIVE_INFINITY), "Math.Sign(Double.PositiveInfinity) is 1");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.Int.sign(Number.NEGATIVE_INFINITY), "Math.Sign(Double.NegativeInfinity) is -1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.Int.sign(Number.POSITIVE_INFINITY), "Math.Sign(float.PositiveInfinity) is 1");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.Int.sign(Number.NEGATIVE_INFINITY), "Math.Sign(float.NegativeInfinity) is -1");
                }
            }
        }
    });

    /**
     * The tests here ensures conversion to hex values using ToString('X')
     format (or 'x') works for negative values on different non-floating
     point types.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3901
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3901", {
        statics: {
            methods: {
                /**
                 * Tests the hex number conversion for different types on their
                 negative values.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3901
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3901
                 * @return  {void}
                 */
                TestToHexString: function () {
                    var b = -1;
                    Bridge.Test.NUnit.Assert.AreEqual("FF", System.SByte.format(b, "X"), "Negative signed byte to string format 'X' works.");

                    var i16 = -1;
                    Bridge.Test.NUnit.Assert.AreEqual("FFFF", System.Int16.format(i16, "X"), "Negative Int16 to string format 'X' works.");

                    var i32 = -1;
                    Bridge.Test.NUnit.Assert.AreEqual("FFFFFFFF", System.Int32.format(i32, "X"), "Negative Int32 to string format 'X' works.");

                    var i64 = System.Int64(-1);
                    Bridge.Test.NUnit.Assert.AreEqual("FFFFFFFFFFFFFFFF", i64.toString("X"), "Negative Int32 to string format 'X' works.");

                    var i = -423433;
                    Bridge.Test.NUnit.Assert.AreEqual("fff989f7", System.Int32.format(i, "x"), "Negative int to string format 'x' works.");
                    Bridge.Test.NUnit.Assert.AreEqual("FFF989F7", System.Int32.format(i, "X"), "Negative int to string format 'X' works, and matches Int32 length.");
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring unicode escaped characters matches
     their integer equivalents/cast as in native .NET.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3902
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3902", {
        statics: {
            methods: {
                /**
                 * Tests some char escapes against their expected integer values.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3902
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3902
                 * @return  {void}
                 */
                TestUnicodeEscapes: function () {
                    var s = "\ud8a1\ud8a2\ue681";
                    Bridge.Test.NUnit.Assert.AreEqual(55457, s.charCodeAt(0), "Unicode U+D8A1 matches integer 55457.");
                    Bridge.Test.NUnit.Assert.AreEqual(55458, s.charCodeAt(1), "Unicode U+D8A2 matches integer 55458.");
                    Bridge.Test.NUnit.Assert.AreEqual(59009, s.charCodeAt(2), "Unicode U+E681 matches integer 59007.");
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring the XOR result involving boolean
     values is sane and matches native .NET's.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3903
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3903", {
        statics: {
            methods: {
                /**
                 * Simply define some boolean values and subject them to XOR tests
                 with the "^" (circumflex) operator.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3903
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3903
                 * @return  {void}
                 */
                TestBooleanXor: function () {
                    var t = true;
                    var f = false;
                    var a = t != f;
                    var b = t;
                    b = b != t;

                    Bridge.Test.NUnit.Assert.True(a === true, "true ^ false evaluates to true.");
                    Bridge.Test.NUnit.Assert.True(b === false, "true ^= true gets assigned to false.");
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring array checks involving 'object'
     works as in native .NET.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904", {
        statics: {
            methods: {
                /**
                 * Tests several scenarios including some that were failing in Bridge
                 17.7.0.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904
                 * @return  {void}
                 */
                TestArrayCovariance: function () {
                    var ao1 = System.Array.init(1, 0, System.Int32);
                    Bridge.Test.NUnit.Assert.False(Bridge.is(ao1, System.Array.type(System.Object)), "(object => int[1]) is not object[]");

                    var ao = System.Array.init([System.Array.init(1, 0, System.Int32)], System.Array.type(System.Int32));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(ao, System.Array.type(System.Object)), "(int[][] => int[1]) is object[]");

                    var a = System.Array.init([System.Array.init([System.Array.init(1, 0, System.Int32)], System.Array.type(System.Int32))], System.Array.type(System.Array.type(System.Int32)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(a, System.Array.type(System.Object)), "(int[][][] => int[][] => int[1]) is object[]");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(a, System.Array.type(System.Array.type(System.Object))), "(int[][][] => int[][] => int[1]) is object[][]");
                    Bridge.Test.NUnit.Assert.False(Bridge.is(a, System.Array.type(System.Array.type(System.Array.type(System.Object)))), "(int[][][] => int[][] => int[1]) is not object[][][]");

                    var b = System.Array.init([System.Array.init(["hi"], System.String)], System.Array.type(System.String));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(b, System.Array.type(System.Array.type(System.String))), "(object => string[][] => string[] => \"hi\") is string[][]");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(b, System.Array.type(System.Object)), "(object => string[][] => string[] => \"hi\") is object[]");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(b, System.Array.type(System.Array.type(System.Object))), "(object => string[][] => string[] => \"hi\") is object[][]");
                    Bridge.Test.NUnit.Assert.False(Bridge.is(b, System.Array.type(System.Array.type(System.Array.type(System.Object)))), "(object => string[][] => string[] => \"hi\") is not object[][][]");
                },
                /**
                 * Tests involving classes and inheritance.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904
                 * @return  {void}
                 */
                TestArrayCovariance2: function () {
                    var i2 = System.Array.init(1, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.c2);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(i2, System.Array.type(System.Object)), "(c2[] => c2[1]) is object[]");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(i2, System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.c1)), "(c2[] => c2[1]) is c1[], where c2:c1");

                    var ao = System.Array.init(1, function (){
                        return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.s1();
                    }, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.s1);
                    Bridge.Test.NUnit.Assert.False(Bridge.is(ao, System.Array.type(System.Object)), "(object => s1[1]) is object[]");

                    ao = System.Array.init(1, null, System.String);
                    Bridge.Test.NUnit.Assert.True(Bridge.is(ao, System.Array.type(System.Object)), "(object => string[1]) is object[]");

                    ao = System.Array.init(1, 0, System.Int32);
                    Bridge.Test.NUnit.Assert.False(Bridge.is(ao, System.Array.type(System.Object)), "(object => int[1]) is object[]");

                    Bridge.Test.NUnit.Assert.False(Bridge.Reflection.isAssignableFrom(System.Array.type(System.Object), System.Array.type(System.Int32)), "object[] is not assignable from int[]");
                    Bridge.Test.NUnit.Assert.True(Bridge.Reflection.isAssignableFrom(System.Array.type(System.Object), System.Array.type(System.Array.type(System.Int32))), "object[] is assignable from int[][]");
                },
                /**
                 * Tests in the format originally reported.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904
                 * @return  {void}
                 */
                TestArrayCovarianceReported: function () {
                    var a = System.Array.init([System.Array.init([System.Array.init(1, 0, System.Int32)], System.Array.type(System.Int32))], System.Array.type(System.Array.type(System.Int32)));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(a, System.Array.type(System.Object)), "(object => int[][][] => int[][] => int[1]) is object[]");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(a, System.Array.type(System.Array.type(System.Object))), "(object => int[][][] => int[][] => int[1]) is object[][]");
                    Bridge.Test.NUnit.Assert.False(Bridge.is(a, System.Array.type(System.Array.type(System.Array.type(System.Object)))), "(object => int[][][] => int[][] => int[1]) is not object[][][]");

                    var b = System.Array.init([System.Array.init(["hi"], System.String)], System.Array.type(System.String));
                    Bridge.Test.NUnit.Assert.True(Bridge.is(b, System.Array.type(System.Array.type(System.String))), "(object => string[][] => string[] => \"hi\") is string[][]");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(b, System.Array.type(System.Object)), "(object => string[][] => string[] => \"hi\") is object[]");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(b, System.Array.type(System.Array.type(System.Object))), "(object => string[][] => string[] => \"hi\") is objectg[][]");
                    Bridge.Test.NUnit.Assert.False(Bridge.is(b, System.Array.type(System.Array.type(System.Array.type(System.Object)))), "(object => string[][] => string[] => \"hi\") is not object[]][][]");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.c1", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.s1", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.s1(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    /**
     * The tests here ensures the ++ postfix operator is not double-evaluated
     in the involved scenario.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3905
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3905", {
        statics: {
            methods: {
                /**
                 * Tests whether the increment does not stack, resulting in the
                 specified values from the same code run in native .NET.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3905
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3905
                 * @return  {void}
                 */
                TestArrayIncrement: function () {
                    var $t;
                    var a = System.Array.init([3, 8], System.Int32);
                    var i = 0;
                    a[System.Array.index(($t = Bridge.identity(i, ((i = (i + 1) | 0)))), a)] = (a[System.Array.index($t, a)] + 1) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(1, i, "i was incremented by 1 in a[i++]++;");
                    Bridge.Test.NUnit.Assert.AreEqual(4, a[System.Array.index(0, a)], "a[0] was incremented by 1 in a[i++]++;");
                    Bridge.Test.NUnit.Assert.AreEqual(8, a[System.Array.index(1, a)], "a[1] was not incremented at all in a[i++]++;");
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring the += operator would behave
     congruently with native .NET.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906", {
        statics: {
            methods: {
                /**
                 * Tests the issue by queueing the same class in two instances into
                 the queue, then dequeuing it once and in the same line mixing up a
                 reference to the dequeued instance, a reference to one of its
                 properties and += operator.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906
                 * @return  {void}
                 */
                TestAssigmentIncrement: function () {
                    var $t;
                    var q = new (System.Collections.Generic.Queue$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906.X)).ctor();
                    q.Enqueue(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906.X());
                    q.Enqueue(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906.X());
                    ($t = q.Dequeue()).v = ($t.v + 7) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(1, q.Count, "Queue size is correct when mixing up .Dequeue() with property reference and += operator.");
                }
            }
        }
    });

    /**
     * A class exposing an integer without default value, to be incremented.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906.X
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3906.X", {
        $kind: "nested class",
        fields: {
            v: 0
        }
    });

    /**
     * The test here ensures the specific scenario involved is congruent with
     what happens in native .NET.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907", {
        statics: {
            methods: {
                /**
                 * Tests by calling the interface-implemented method from the latter
                 class.
                 Consists in declaring a variable as the main interface, but
                 instantiating the complexer class in it, yet calling the method
                 guaranteed by the direct interface.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907
                 * @return  {void}
                 */
                TestInterfaceToString: function () {
                    var i = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.B();

                    Bridge.Test.NUnit.Assert.AreEqual("A", i.Bridge$ClientTest$Batch3$BridgeIssues$Bridge3907$I$ToString(), "Calling Interface.method() from class classB:classA,Interface, where classA implements the method, works.");
                }
            }
        }
    });

    /**
     * Interface requiring an unecessary declaration, which ultimately
     triggers the related issue.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.I
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.I", {
        $kind: "nested interface"
    });

    /**
     * The tests here ensures the performance between resize and allocation
     for primitive and reference types are within an acceptable threshold of
     50ms or 1.5 times.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930", {
        statics: {
            fields: {
                iterations: 0,
                samples: 0
            },
            ctors: {
                init: function () {
                    this.iterations = 1000;
                    this.samples = 10000;
                }
            },
            methods: {
                /**
                 * Coordinate the calls to the allocation/resize tests and checks
                 whether they are within the expected threshold.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930
                 * @return  {void}
                 */
                TestGenericArrayAllocPerformance: function () {
                    var tialloc = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.probePerformance(false, false); // int alloc
                    var tiresiz = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.probePerformance(false, true); // int resize
                    Bridge.Test.NUnit.Assert.True(((tialloc.sub(System.Int64(50))).lt(tiresiz)) || (System.Int64.toNumber(tialloc) < (System.Int64.toNumber(tiresiz) * 1.5)), "The performance ratio alloc:resize for int is within an acceptable threshold (" + tialloc + ":" + tiresiz + ").");

                    var tsalloc = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.probePerformance(true, false); // string alloc
                    var tsresiz = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.probePerformance(true, true); // string resize
                    Bridge.Test.NUnit.Assert.True(((tsalloc.sub(System.Int64(50))).lt(tsresiz)) || (System.Int64.toNumber(tsalloc) < (System.Int64.toNumber(tsresiz) * 1.5)), "The performance ratio alloc:resize for string is within an acceptable threshold (" + tsalloc + ":" + tsresiz + ").");
                },
                /**
                 * Coordinates the allocation given the reftype or resize conditions
                 to switch the test performed.
                 *
                 * @static
                 * @private
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930
                 * @param   {boolean}         reftype    
                 * @param   {boolean}         resize
                 * @return  {System.Int64}               A delay of at least 1, in milliseconds.
                 */
                probePerformance: function (reftype, resize) {
                    var sw = new System.Diagnostics.Stopwatch();
                    sw.start();
                    for (var i = 0; i < Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.iterations; i = (i + 1) | 0) {
                        if (reftype) {
                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.Alloc(System.String, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.samples, resize);
                        } else {
                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.Alloc(System.Int32, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3930.samples, resize);
                        }
                    }
                    sw.stop();
                    return sw.milliseconds().gt(System.Int64(1)) ? sw.milliseconds() : System.Int64(1);
                },
                Alloc: function (T, len, resize) {
                    if (resize) {
                        var a = { v : System.Array.init(0, function (){
                            return Bridge.getDefaultValue(T);
                        }, T) };
                        System.Array.resize(a, len, function () {
                            return Bridge.getDefaultValue(T);
                        }, T);
                        return a.v;
                    }
                    return System.Array.init(len, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }
            }
        }
    });

    /**
     * The tests here ensures decimal separator character obeys current
     culture between string conversions.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934", {
        statics: {
            methods: {
                /**
                 * Calls individual batches for each type to be tested.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
                 * @return  {void}
                 */
                TestConvert: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934.TestFloat();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934.TestDouble();
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934.TestDecimal();
                },
                /**
                 * Tests single precision floating-point conversion with culture set as parameter or as current culture.
                 Will trigger a failed assertion if an exception is thrown during either conversion test.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
                 * @return  {void}
                 */
                TestFloat: function () {
                    var $t;
                    var oldCulture = System.Globalization.CultureInfo.getCurrentCulture();

                    var back;
                    var input = 7.5;
                    var str;

                    var convtype = "float";

                    // WARNING: GetCultures() here is a stub and corresponds to
                    //   .NET's GetCultures(CultureTypes.AllCultures)
                    $t = Bridge.getEnumerator(System.Globalization.CultureInfo.getCultures());
                    try {
                        while ($t.moveNext()) {
                            var culture = $t.Current;
                            var cultureDesc = "\"" + (culture.englishName || "") + "\" (" + (culture.name || "") + ")";
                            try {
                                str = System.Single.format(input, "G", culture);
                                back = System.Convert.toSingle(str, culture);
                                Bridge.Test.NUnit.Assert.AreEqual(input, back, "Decimal separator retained between " + (convtype || "") + "-string conversion in specified " + (cultureDesc || "") + ".");
                            } catch (exc) {
                                exc = System.Exception.create(exc);
                                Bridge.Test.NUnit.Assert.Fail("Exception thrown while converting between " + (convtype || "") + "-string if specified culture is " + (cultureDesc || "") + " in conversion calls: " + (exc.Message || ""));
                            }

                            try {
                                System.Globalization.CultureInfo.setCurrentCulture(culture);

                                str = System.Single.format(input);
                                back = System.Convert.toSingle(str);
                                Bridge.Test.NUnit.Assert.AreEqual(input, back, "Decimal separator retained between " + (convtype || "") + "-string conversion in " + (cultureDesc || "") + " when set as current culture.");
                            } catch (exc1) {
                                exc1 = System.Exception.create(exc1);
                                Bridge.Test.NUnit.Assert.Fail("Exception thrown while converting between " + (convtype || "") + "-string when in conversion call if current culture set to " + (cultureDesc || "") + ": " + (exc1.Message || ""));
                            } finally {
                                System.Globalization.CultureInfo.setCurrentCulture(oldCulture);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                /**
                 * Tests double precision float-point conversion with culture set as parameter or as current culture.
                 Will trigger a failed assertion if an exception is thrown during either conversion test.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
                 * @return  {void}
                 */
                TestDouble: function () {
                    var $t;
                    var oldCulture = System.Globalization.CultureInfo.getCurrentCulture();

                    var back;
                    var input = 7.5;
                    var str;

                    var convtype = "double";

                    // WARNING: GetCultures() here is a stub and corresponds to
                    //   .NET's GetCultures(CultureTypes.AllCultures)
                    $t = Bridge.getEnumerator(System.Globalization.CultureInfo.getCultures());
                    try {
                        while ($t.moveNext()) {
                            var culture = $t.Current;
                            var cultureDesc = "\"" + (culture.englishName || "") + "\" (" + (culture.name || "") + ")";
                            try {
                                str = System.Double.format(input, "G", culture);
                                back = System.Convert.toDouble(str, culture);
                                Bridge.Test.NUnit.Assert.AreEqual(input, back, "Decimal separator retained between " + (convtype || "") + "-string conversion in specified " + (cultureDesc || "") + ".");
                            } catch (exc) {
                                exc = System.Exception.create(exc);
                                Bridge.Test.NUnit.Assert.Fail("Exception thrown while converting between " + (convtype || "") + "-string if specified culture is " + (cultureDesc || "") + " in conversion calls: " + (exc.Message || ""));
                            }

                            try {
                                System.Globalization.CultureInfo.setCurrentCulture(culture);

                                str = System.Double.format(input);
                                back = System.Convert.toDouble(str);
                                Bridge.Test.NUnit.Assert.AreEqual(input, back, "Decimal separator retained between " + (convtype || "") + "-string conversion in " + (cultureDesc || "") + " when set as current culture.");
                            } catch (exc1) {
                                exc1 = System.Exception.create(exc1);
                                Bridge.Test.NUnit.Assert.Fail("Exception thrown while converting between " + (convtype || "") + "-string when in conversion call if current culture set to " + (cultureDesc || "") + ": " + (exc1.Message || ""));
                            } finally {
                                System.Globalization.CultureInfo.setCurrentCulture(oldCulture);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                /**
                 * Tests decimal conversion with culture set as parameter or as current culture.
                 Will trigger a failed assertion if an exception is thrown during either conversion test.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3934
                 * @return  {void}
                 */
                TestDecimal: function () {
                    var $t;
                    var oldCulture = System.Globalization.CultureInfo.getCurrentCulture();

                    var back;
                    var input = System.Decimal(7.5, 1);
                    var str;

                    var convtype = "decimal";

                    // WARNING: GetCultures() here is a stub and corresponds to
                    //   .NET's GetCultures(CultureTypes.AllCultures)
                    $t = Bridge.getEnumerator(System.Globalization.CultureInfo.getCultures());
                    try {
                        while ($t.moveNext()) {
                            var culture = $t.Current;
                            var cultureDesc = "\"" + (culture.englishName || "") + "\" (" + (culture.name || "") + ")";
                            try {
                                str = Bridge.Int.format(input, "G", culture);
                                back = System.Convert.toDecimal(str, culture);
                                Bridge.Test.NUnit.Assert.AreEqual(input, back, "Decimal separator retained between " + (convtype || "") + "-string conversion in specified " + (cultureDesc || "") + ".");
                            } catch (exc) {
                                exc = System.Exception.create(exc);
                                Bridge.Test.NUnit.Assert.Fail("Exception thrown while converting between " + (convtype || "") + "-string if specified culture is " + (cultureDesc || "") + " in conversion calls: " + (exc.Message || ""));
                            }

                            try {
                                System.Globalization.CultureInfo.setCurrentCulture(culture);

                                str = input.toString();
                                back = System.Convert.toDecimal(str);
                                Bridge.Test.NUnit.Assert.AreEqual(input, back, "Decimal separator retained between " + (convtype || "") + "-string conversion in " + (cultureDesc || "") + " when set as current culture.");
                            } catch (exc1) {
                                exc1 = System.Exception.create(exc1);
                                Bridge.Test.NUnit.Assert.Fail("Exception thrown while converting between " + (convtype || "") + "-string when in conversion call if current culture set to " + (cultureDesc || "") + ": " + (exc1.Message || ""));
                            } finally {
                                System.Globalization.CultureInfo.setCurrentCulture(oldCulture);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    /**
     * The tests here consists in ensuring non-nullable types receives their
     default values whenever assigned 'null' from reflection's SetValue().
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3939
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3939", {
        statics: {
            methods: {
                /**
                 * Tests by just inline-binding null to the variables and then
                 checking the result against the type's default() value.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3939
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3939
                 * @return  {void}
                 */
                TestReflectionSetValue: function () {
                    var test = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3939.Test();

                    Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.getType(test), 16, 284, "Int32Prop").s, test)(null);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.getDefaultValue(System.Int32), test.Int32Prop, "Int32 property gets default(int) when assigned \"null\" with reflection.");
                    Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.getType(test), 16, 284, "Int64Prop").s, test)(null);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.getDefaultValue(System.Int64), test.Int64Prop, "Int64 property gets default(long) when assigned \"null\" with reflection.");
                    Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.getType(test), 16, 284, "SingleProp").s, test)(null);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.getDefaultValue(System.Single), test.SingleProp, "Single property gets default(float) when assigned \"null\" with reflection.");
                    Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.getType(test), 16, 284, "DoubleProp").s, test)(null);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.getDefaultValue(System.Double), test.DoubleProp, "Double property gets default(double) when assigned \"null\" with reflection.");
                    Bridge.Reflection.midel(Bridge.Reflection.getMembers(Bridge.getType(test), 16, 284, "DecimalProp").s, test)(null);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.getDefaultValue(System.Decimal), test.DecimalProp, "Decimal property gets default(decimal) when assigned \"null\" with reflection.");
                }
            }
        }
    });

    /**
     * Defines a class with different types of non-nullable variables
     through properties and fields.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3939.Test
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3939.Test", {
        $kind: "nested class",
        fields: {
            Int32Field: 0,
            Int64Field: System.Int64(0),
            SingleField: 0,
            DoubleField: 0,
            DecimalField: System.Decimal(0.0)
        },
        props: {
            Int32Prop: 0,
            Int64Prop: System.Int64(0),
            SingleProp: 0,
            DoubleProp: 0,
            DecimalProp: System.Decimal(0.0)
        },
        ctors: {
            init: function () {
                this.Int32Field = 2;
                this.Int64Field = System.Int64(4);
                this.SingleField = 5.2;
                this.DoubleField = 6.1999998092651367;
                this.DecimalField = System.Decimal(7.2, 1);
                this.Int32Prop = 1;
                this.Int64Prop = System.Int64(3);
                this.SingleProp = 5.1;
                this.DoubleProp = 6.0999999046325684;
                this.DecimalProp = System.Decimal(7.1, 1);
            }
        }
    });

    /**
     * This test ensures initialization of static const members works
     correctly.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943", {
        statics: {
            methods: {
                /**
                 * Check whether the property matches the value it is derifved from.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943
                 * @return  {void}
                 */
                TestStaticInitialization: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("A", Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c2.p2.p1, "Value is correctly initialized.");
                }
            }
        }
    });

    /**
     * A class implementing the indirect property that used not to have
     the correct value.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c1", {
        $kind: "nested class",
        props: {
            p1: null
        }
    });

    /**
     * Class implementing members that references the c1 class above.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c2
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c2", {
        $kind: "nested class",
        statics: {
            fields: {
                Z1: null,
                _s: null
            },
            props: {
                p2: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c2._s;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.Z1 = "A";
                    this._s = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c2._init();
                }
            },
            methods: {
                _init: function () {
                    var $t;
                    var o1 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c1(), $t.p1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3943.c2.Z1, $t);

                    return o1;
                }
            }
        },
        props: {
            p3: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge395", {
        props: {
            Id: null,
            data: 0
        }
    });

    /**
     * The test here ensures 'await' calls in completed tasks won't abort
     async methods.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3951
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3951", {
        statics: {
            methods: {
                /**
                 * Checks whether the async counter caught up to the end of the method
                 even though there's several await calls around the async task.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3951
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3951
                 * @return  {void}
                 */
                TestAwaitFinished: function () {
                    var count = System.Array.init(1, 0, System.Int32);
                    var t = Bridge.ClientTest.Batch3.BridgeIssues.Bridge3951.TightLoop(count);
                    Bridge.Test.NUnit.Assert.AreEqual(10000, count[System.Array.index(0, count)], "Async method executed until completion.");
                },
                /**
                 * The TightLoop test below calls await every loop iteration, a
                 scenario that would interrupt overall execution at some point in
                 Bridge 17.7.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3951
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3951
                 * @param   {Array.<number>}                 count
                 * @return  {System.Threading.Tasks.Task}
                 */
                TightLoop: function (count) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        finished, 
                        i, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5], $step);
                                    switch ($step) {
                                        case 0: {
                                            finished = System.Threading.Tasks.Task.fromResult(null, System.String);
                                            i = 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            if ( i < 10000 ) {
                                                $step = 2;
                                                continue;
                                            }
                                            $step = 5;
                                            continue;
                                        }
                                        case 2: {
                                            $task1 = finished;
                                            $step = 3;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $task1.getAwaitedResult();
                                            count[System.Array.index(0, count)] = (count[System.Array.index(0, count)] + 1) | 0;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            i = (i + 1) | 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 5: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    /**
     * The tests here ensures enum emission rules obey the StringNameLowerCase
     setting when the enum is returned via a default function's value.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958", {
        statics: {
            methods: {
                /**
                 * Tests the issue both for a case where it works (provided parameter)
                 and where it used to break in 17.7, with default value assumed.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958
                 * @return  {void}
                 */
                TestEnumStringOptional: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("euclidean", Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958.GetOptions("euclidean")), "Enum rule obeyed when value provided to method.");
                    Bridge.Test.NUnit.Assert.AreEqual("euclidean", Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958.GetOptions()), "Enum rule obeyed when value assumed from default method parameter.");
                },
                GetOptions: function (metric) {
                    if (metric === void 0) { metric = "euclidean"; }
                    return Bridge.box(metric, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958.MetricOptions, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958.MetricOptions));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3958.MetricOptions", {
        $kind: "nested enum",
        statics: {
            fields: {
                euclidean: "euclidean"
            }
        },
        $utype: System.String
    });

    /**
     * Ensures String.IndexOfAny results matches native .NET's.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3964
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3964", {
        statics: {
            methods: {
                /**
                 * Tests some scenarios, including the one originally reported
                 in the github issue (the first assertion below).
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3964
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3964
                 * @return  {void}
                 */
                TestIndexOfAny: function () {
                    var test = System.Array.init([100, 72], System.Char);
                    var msg = "Hello, World!";

                    Bridge.Test.NUnit.Assert.AreEqual(0, System.String.indexOfAny(msg, test), "Index of any of { 'd', 'H' } in \"Hello, World!\" is 0.");

                    var chars = System.Array.init([
                        97, 
                        101, 
                        105, 
                        111, 
                        117, 
                        121, 
                        65, 
                        69, 
                        73, 
                        79, 
                        85, 
                        89
                    ], System.Char);
                    var s = "The long and winding road...";
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.String.indexOfAny(s, chars), "Index of any of { 'a', 'e', 'i', ... } in \"The long and...\" string is 2.");

                    var str = "Now is the time for all good men to come to the aid of their party.";
                    var target = "is";
                    var anyOf = System.String.toCharArray(target, 0, target.length);
                    var start = (Bridge.Int.div(str.length, 2)) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(49, System.String.indexOfAny(str, anyOf, start), "Specifying a starting index in the string works.");

                    target = "aid";
                    anyOf = System.String.toCharArray(target, 0, target.length);
                    start = (Bridge.Int.div((((str.length - 1) | 0)), 3)) | 0;
                    var count = (Bridge.Int.div((((str.length - 1) | 0)), 4)) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(27, System.String.indexOfAny(str, anyOf, start, count), "Specifying an interval index in the string works.");
                }
            }
        }
    });

    /**
     * Ensures char elements used as array indexes are consistently cast to
     integer indexes.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3969
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3969", {
        statics: {
            methods: {
                /**
                 * The test checks whether 'h' and (int)'h' indexes resolves to the
                 same integer representation, thus the elements get replaced.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3969
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3969
                 * @return  {void}
                 */
                TestCharIndexer: function () {
                    var testarr = System.Array.init(255, null, System.String);
                    testarr[System.Array.index(42, testarr)] = "works";
                    testarr[System.Array.index(104, testarr)] = "also works";
                    testarr[System.Array.index(104, testarr)] = "wait what?";

                    Bridge.Test.NUnit.Assert.AreEqual("works", testarr[System.Array.index(42, testarr)], "Assigning array at integer position equivalent to the ASCII '*' character works.");
                    Bridge.Test.NUnit.Assert.AreEqual("works", testarr[System.Array.index(42, testarr)], "Assigning array at integer position equivalent to the Int32 cast of the ASCII '*' character works.");

                    Bridge.Test.NUnit.Assert.AreEqual("wait what?", testarr[System.Array.index(104, testarr)], "Assigning array at integer position equivalent to the ASCII 'h' 'character' works, replacing the previous assignment.");
                    Bridge.Test.NUnit.Assert.AreEqual("wait what?", testarr[System.Array.index(104, testarr)], "Assigning array at integer position equivalent to the ASCII 'h' replaced its (int)'h' element.");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge407", {
        $kind: "struct",
        statics: {
            methods: {
                op_Addition: function (x, y) {
                    var $t;
                    return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge407(), $t.A = ((x.A + y.A) | 0), $t);
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge407(); }
            }
        },
        props: {
            A: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([2493372384, this.A]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge407)) {
                    return false;
                }
                return Bridge.equals(this.A, o.A);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge407();
                s.A = this.A;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge418", {
        props: {
            Delegate: null
        },
        methods: {
            CallDelegate: function (data) {
                return this.Delegate(data);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge422", {
        $kind: "enum",
        statics: {
            fields: {
                first: 0,
                next: 100,
                afterNext: 101
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge436First", {
        methods: {
            ToObject: function () {
                return "1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge439", {
        events: {
            _dispatcher: null
        },
        methods: {
            Register: function (callback) {
                this.add_dispatcher(callback);
            },
            CallDispatcher: function (s) {
                this._dispatcher(s);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge447", {
        statics: {
            fields: {
                Five: 0,
                Another: null,
                Ten: System.Decimal(0.0)
            },
            ctors: {
                init: function () {
                    this.Five = 5;
                    this.Another = "Another";
                    this.Ten = System.Decimal(10.0);
                }
            },
            methods: {
                CheckInlineExpression: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("AnotherSome", "AnotherSome", "AnotherSome");
                    Bridge.Test.NUnit.Assert.AreEqual(20, 20, "20");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(10.5, 1), System.Decimal(10.5, 1), "10.5m");
                },
                CheckInlineCalls: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("AnotherSome", Bridge.ClientTest.Batch3.BridgeIssues.Bridge447.GetSum$2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge447.Another, "Some"), "AnotherSome");
                    Bridge.Test.NUnit.Assert.AreEqual(20, Bridge.ClientTest.Batch3.BridgeIssues.Bridge447.GetSum$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge447.Five, 15), "20");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(10.5, 1), Bridge.ClientTest.Batch3.BridgeIssues.Bridge447.GetSum(Bridge.ClientTest.Batch3.BridgeIssues.Bridge447.Ten, System.Decimal(0.5, 1)), "10.5m");
                },
                GetSum$1: function (a, b) {
                    return ((a + b) | 0);
                },
                GetSum$2: function (a, b) {
                    return (a || "") + (b || "");
                },
                GetSum: function (a, b) {
                    return a.add(b);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge467", {
        props: {
            MyProperty: 0
        },
        methods: {
            equals: function (obj) {
                var other = Bridge.as(obj, Bridge.ClientTest.Batch3.BridgeIssues.Bridge467);
                if (other == null) {
                    return false;
                }

                if (this.MyProperty < 0 || other.MyProperty < 0) {
                    return Bridge.referenceEquals(this, other);
                }

                return this.MyProperty === other.MyProperty;
            },
            getHashCode: function () {
                return this.MyProperty < 0 ? Bridge.getHashCode(this) : Bridge.getHashCode(this.MyProperty);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge470", {
        inherits: function () { return [System.Collections.Generic.IEqualityComparer$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge470)]; },
        statics: {
            methods: {
                IsOdd: function (value) {
                    return value % 2 !== 0;
                }
            }
        },
        props: {
            Data: 0
        },
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge470$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge470$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                return x.Data === y.Data;
            },
            getHashCode2: function (obj) {
                return Bridge.getHashCode(obj.Data);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge472", {
        statics: {
            methods: {
                Test: function () {
                    var magic1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    magic1.insert(magic1.Count, "first");
                    magic1.insert(magic1.Count, "second");

                    Bridge.Test.NUnit.Assert.AreEqual("first", magic1.getItem(0), "magic1[0]");
                    Bridge.Test.NUnit.Assert.AreEqual("second", magic1.getItem(1), "magic1[1]");

                    var magic2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    magic2.InsertRange(magic2.Count, System.Array.init(["first", "second"], System.String));
                    magic2.InsertRange(magic2.Count, System.Array.init(["third", "fourth"], System.String));

                    Bridge.Test.NUnit.Assert.AreEqual("first", magic2.getItem(0), "magic1[0]");
                    Bridge.Test.NUnit.Assert.AreEqual("second", magic2.getItem(1), "magic1[1]");
                    Bridge.Test.NUnit.Assert.AreEqual("third", magic2.getItem(2), "magic1[2]");
                    Bridge.Test.NUnit.Assert.AreEqual("fourth", magic2.getItem(3), "magic1[3]");

                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge472.f1, "Insert at length + 1");

                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge472.f2, "Insert at -1");

                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge472.f3, "InsertRange at length + 1");

                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge472.f4, "InsertRange at -1");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge472", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge472, {
        f1: function () {
            var magic = new (System.Collections.Generic.List$1(System.String)).ctor();
            magic.insert(1, "first");
        },
        f2: function () {
            var magic = new (System.Collections.Generic.List$1(System.String)).ctor();
            magic.insert(-1, "first");
        },
        f3: function () {
            var magic = new (System.Collections.Generic.List$1(System.String)).ctor();
            magic.InsertRange(1, System.Array.init(["first", "second"], System.String));
        },
        f4: function () {
            var magic = new (System.Collections.Generic.List$1(System.String)).ctor();
            magic.InsertRange(-1, System.Array.init(["first", "second"], System.String));
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge479", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var pair = new (System.Collections.Generic.KeyValuePair$2(System.Int32,System.String)).$ctor1(1, "value");
                    Bridge.Test.NUnit.Assert.AreEqual(1, pair.key, "Bridge479 Key");
                    Bridge.Test.NUnit.Assert.AreEqual("value", pair.value, "Bridge479 Value");
                    Bridge.Test.NUnit.Assert.AreEqual("[1, value]", pair.toString(), "Bridge479 ToString");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge483", {
        methods: {
            TestPropertyWithNameSameAsType: function () {
                var $t, $t1;
                var t = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Test(), $t.MyType = ($t1 = new Bridge.ClientTest.Batch3.BridgeIssues.MyType(), $t1.Value = 7, $t1), $t);

                Bridge.Test.NUnit.Assert.AreEqual(7, t.MyOtherType.Value);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge485", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var list = System.Linq.Enumerable.from(System.Array.init([new $asm.$AnonymousType$21("", "")], $asm.$AnonymousType$21), System.Object).skip(1).toList(System.Object);
                    list.add(new $asm.$AnonymousType$21("Ruth", "Babe"));
                    list.add(new $asm.$AnonymousType$21("Johnson", "Walter"));
                    list.add(new $asm.$AnonymousType$21("Cobb", "Ty"));
                    list.add(new $asm.$AnonymousType$21("Schmidt", "Mike"));

                    var query = System.Linq.Enumerable.from(list, System.Object).where($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge485.f1).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge485.f2);

                    var s = JSON.stringify(query.toList(System.Object));

                    Bridge.Test.NUnit.Assert.AreEqual("[{\"LastName\":\"Ruth\",\"FirstName\":\"Babe\"},{\"LastName\":\"Cobb\",\"FirstName\":\"Ty\"}]", s, "#485");
                }
            }
        }
    });

    Bridge.define("$AnonymousType$21", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (lastName, firstName) {
                this.LastName = lastName;
                this.FirstName = firstName;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$21)) {
                    return false;
                }
                return Bridge.equals(this.LastName, o.LastName) && Bridge.equals(this.FirstName, o.FirstName);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550208731, this.LastName, this.FirstName]);
                return h;
            },
            toJSON: function () {
                return {
                    LastName : this.LastName,
                    FirstName : this.FirstName
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"FirstName","t":16,"rt":System.String,"g":{"a":2,"n":"get_FirstName","t":8,"rt":System.String,"fg":"FirstName"},"fn":"FirstName"},{"a":2,"n":"LastName","t":16,"rt":System.String,"g":{"a":2,"n":"get_LastName","t":8,"rt":System.String,"fg":"LastName"},"fn":"LastName"}]}; }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge485", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge485, {
        f1: function (p) {
            return p.LastName.length === 4;
        },
        f2: function (p) {
            return new $asm.$AnonymousType$21(p.LastName, p.FirstName);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge495", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var root = Bridge.ClientTestHelper.HtmlHelper.FixtureElement;

                    var button1 = document.createElement("button");
                    button1.innerHTML = "Button 1";
                    button1.id = "button1";
                    button1.style.color = "green";

                    root.appendChild(button1);

                    var b1 = document.getElementById("button1");
                    Bridge.Test.NUnit.Assert.AreEqual("green", b1.style.color, "b1.Style.Color green");

                    var button2 = document.createElement("button");
                    button2.innerHTML = "Button 2";
                    button2.id = "button2";
                    button2.style.backgroundColor = "yellow";

                    root.appendChild(button2);

                    var b2 = document.getElementById("button2");
                    Bridge.Test.NUnit.Assert.AreEqual("yellow", b2.style.backgroundColor, "b2.Style.BackgroundColor HTMLColor.Yellow");

                    var hexColor = "#FFEEAA";
                    var divElement1 = document.createElement("div");
                    divElement1.innerHTML = "Div 1";
                    divElement1.id = "div1";
                    divElement1.style.color = hexColor;

                    root.appendChild(divElement1);

                    var div1 = document.getElementById("div1");
                    Bridge.Test.NUnit.Assert.AreEqual("rgb(255, 238, 170)", div1.style.color, "div1.Style.Color " + (hexColor || ""));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge502", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var $t, $t1, $t2, $t3;
                    var numbers = System.Array.init([
                        1, 
                        2, 
                        3
                    ], System.Int32);

                    var sum = 0;

                    $t = Bridge.getEnumerator(numbers);
                    try {
                        while ($t.moveNext()) {
                            var a = $t.Current;
                            sum = (sum + a) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    $t1 = Bridge.getEnumerator(numbers);
                    try {
                        while ($t1.moveNext()) {
                            var a1 = $t1.Current;
                            sum = (sum + a1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    $t2 = Bridge.getEnumerator(numbers);
                    try {
                        while ($t2.moveNext()) {
                            var a2 = $t2.Current;
                            sum = (sum + a2) | 0;
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    $t3 = Bridge.getEnumerator(numbers);
                    try {
                        while ($t3.moveNext()) {
                            var a3 = $t3.Current;
                            sum = (sum + a3) | 0;
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(24, sum, "Bridge502 sum");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge503", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var a = System.Array.init(["a", "b", "c"], System.String);
                    var list = new (System.Collections.Generic.List$1(System.String)).$ctor1(a);

                    list.AddRange(a);

                    Bridge.Test.NUnit.Assert.AreEqual(3, a.length, "Bridge503: array.Length is correct");
                    Bridge.Test.NUnit.Assert.AreEqual(6, list.Count, "Bridge503: list.Count is correct");

                    list.clear();

                    Bridge.Test.NUnit.Assert.AreEqual(3, a.length, "Bridge503: array.Length is correct");
                    Bridge.Test.NUnit.Assert.AreEqual(0, list.Count, "Bridge503: list.Count is correct");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge508", {
        statics: {
            fields: {
                count: 0
            },
            props: {
                QUnitAsyncDone: null
            },
            ctors: {
                init: function () {
                    this.count = 0;
                }
            },
            methods: {
                TestUseCase: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.QUnitAsyncDone = Bridge.Test.NUnit.Assert.Async();

                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.DoSomethingAsync();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        result = $taskResult1;

                                        Bridge.Test.NUnit.Assert.AreEqual("A(0)A(1)B(0)B(1)B(2)", result, "#508 DoSomethingAsync");

                                        Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.QUnitAsyncDone();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                DoSomethingAsync: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        result, 
                        i, 
                        np, 
                        np1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11], $step);
                                    switch ($step) {
                                        case 0: {
                                            result = "";

                                            i = 0;
                                            $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.InitPage();
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            np = $taskResult1;
                                            $step = 2;
                                            continue;
                                        }
                                        case 2: {
                                            if ( np != null ) {
                                                $step = 3;
                                                continue;
                                            }
                                            $step = 6;
                                            continue;
                                        }
                                        case 3: {
                                            result = (result || "") + ((System.String.format("A({0})", [Bridge.box(Bridge.identity(i, ((i = (i + 1) | 0))), System.Int32)])) || "");
                                        }
                                        case 4: {
                                            $task2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.NextPage();
                                            $step = 5;
                                            if ($task2.isCompleted()) continue;
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 5: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            np = $taskResult2;
                                            $step = 2;
                                            continue;
                                        }
                                        case 6: {
                                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count = 0;
                                            i = 0;
                                            $task3 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.InitPage();
                                            $step = 7;
                                            if ($task3.isCompleted()) continue;
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 7: {
                                            $taskResult3 = $task3.getAwaitedResult();
                                            np1 = $taskResult3;
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            if ( np1 != null ) {
                                                $step = 9;
                                                continue;
                                            }
                                            $step = 11;
                                            continue;
                                        }
                                        case 9: {
                                            result = (result || "") + ((System.String.format("B({0})", [Bridge.box(Bridge.identity(i, ((i = (i + 1) | 0))), System.Int32)])) || "");
                                        }
                                        case 10: {
                                            np1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.NextPage1();
                                            $step = 8;
                                            continue;
                                        }
                                        case 11: {
                                            $tcs.setResult(result);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                InitPage: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(0);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count + 1) | 0;
                                            $tcs.setResult(Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count < 2 ? new $asm.$AnonymousType$14() : null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                NextPage: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(0);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count + 1) | 0;
                                            $tcs.setResult(Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count < 3 ? new $asm.$AnonymousType$14() : null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                NextPage1: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count + 1) | 0;
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge508.count < 4 ? new $asm.$AnonymousType$14() : null;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge514", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var d1 = 5.43;
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.Int.sign(d1), "Bridge514 Sign(double 5.43)");

                    var d2 = -7.1;
                    Bridge.Test.NUnit.Assert.AreEqual(-1, Bridge.Int.sign(d2), "Bridge514 Sign(double -7.1)");
                },
                TestRelated: function () {
                    var d1 = System.Decimal(5.43, 2);
                    Bridge.Test.NUnit.Assert.AreEqual(1, d1.sign(), "Bridge514 Sign(decimal 5.43)");

                    var d2 = System.Decimal(-7.1, 1);
                    Bridge.Test.NUnit.Assert.AreEqual(-1, d2.sign(), "Bridge514 Sign(decimal -7.1)");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge520", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var s = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge520.Source();
                    s.Fire();

                    Bridge.Test.NUnit.Assert.AreEqual(1, s.Counter, "Bridge520 Counter");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge520.Source", {
        $kind: "nested class",
        events: {
            Fired: null
        },
        props: {
            Counter: 0
        },
        methods: {
            Fire: function () {
                var getEvt = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge520.Source.f1;
                var evt = getEvt(this);

                evt = Bridge.fn.combine(evt, Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge520.Source.f2));

                evt(this, { });
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge520.Source", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge520.Source, {
        f1: function (s) {
            return s.Fired;
        },
        f2: function (sender, args) {
            this.Counter = (this.Counter + 1) | 0;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge522", {
        statics: {
            methods: {
                TestUseCase1: function () {
                    var dc1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.DerivedClass1();
                    dc1.AddValue(5);

                    Bridge.Test.NUnit.Assert.AreEqual(1, dc1.GetValues().Count, "Bridge522 dc1.Count = 1");

                    var dc2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.DerivedClass1();
                    Bridge.Test.NUnit.Assert.AreEqual(0, dc2.GetValues().Count, "Bridge522 dc2.Count = 0");
                },
                TestUseCase2: function () {
                    var dc1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.DerivedClass2();
                    dc1.AddValue(5);

                    Bridge.Test.NUnit.Assert.AreEqual(1, dc1.GetValues().Count, "Bridge522 dc1.Count = 1");

                    var dc2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.DerivedClass2();
                    Bridge.Test.NUnit.Assert.AreEqual(0, dc2.GetValues().Count, "Bridge522 dc2.Count = 0");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.BaseClass", {
        $kind: "nested class",
        fields: {
            values: null
        },
        ctors: {
            init: function () {
                this.values = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            }
        },
        methods: {
            AddValue: function (a) {
                this.values.add(a);
            },
            GetValues: function () {
                return this.values;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge532", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var list = new (System.Collections.Generic.List$1(System.Int32)).$ctor1(System.Array.init([1, 2, 3, 4, 5, 6, 7, 8, 9], System.Int32));

                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init([1, 2], System.Int32), list.GetRange(0, 2).ToArray(), "Bridge532 (0, 2)");
                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init([2, 3], System.Int32), list.GetRange(1, 2).ToArray(), "Bridge532 (1, 2)");
                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init([7, 8, 9], System.Int32), list.GetRange(6, 3).ToArray(), "Bridge532 (6, 3)");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge537", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge537B.TestB1(), "Bridge537 TestB1");

                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge537B.TestB2(), "Bridge537 TestB2");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge537A", {
        fields: {
            Id: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge538", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var srcString = "123";
                    var destString = "4";

                    destString = (destString || "") + String.fromCharCode(srcString.charCodeAt(2));

                    Bridge.Test.NUnit.Assert.AreEqual("43", destString, "Bridge538 '43'");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge546", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var date = System.DateTime.create(2015, 1, 1, 0, 0, 0, 0);

                    var i = 1;
                    var d = System.DateTime.addMinutes(date, ((10 + Bridge.Int.mul(20, i)) | 0));

                    Bridge.Test.NUnit.Assert.AreEqual(30, System.DateTime.getMinute(d), "Bridge546 30 minutes");
                },
                TestRelated: function () {
                    var date = System.DateTime.create(2015, 1, 1, 0, 0, 0, 0);
                    var span1 = new System.TimeSpan(0, 15, 0);
                    var span2 = new System.TimeSpan(0, 7, 0);
                    var i = 1;

                    var d1 = System.DateTime.subdt(System.DateTime.subdt(date, span1), span2);
                    Bridge.Test.NUnit.Assert.AreEqual(38, System.DateTime.getMinute(d1), "Bridge546 d1");

                    var d2 = System.DateTime.adddt(System.DateTime.adddt(date, span1), span2);
                    Bridge.Test.NUnit.Assert.AreEqual(22, System.DateTime.getMinute(d2), "Bridge546 d2");

                    var d3 = System.DateTime.addDays(date, ((10 + Bridge.Int.mul(20, i)) | 0));
                    Bridge.Test.NUnit.Assert.AreEqual(31, System.DateTime.getDay(d3), "Bridge546 d3");

                    var d4 = System.DateTime.addHours(date, ((10 + Bridge.Int.mul(20, i)) | 0));
                    Bridge.Test.NUnit.Assert.AreEqual(6, System.DateTime.getHour(d4), "Bridge546 d4");

                    var d5 = System.DateTime.addSeconds(date, ((12 + Bridge.Int.mul(20, i)) | 0));
                    Bridge.Test.NUnit.Assert.AreEqual(32, System.DateTime.getSecond(d5), "Bridge546 d5");
                }
            }
        }
    });

    /**
     * This test will check whether TypedArray types are emitted to JavaScript
     the right way. [#548]
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge548
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge548", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var isSpecialTypeName = Bridge.ClientTest.Batch3.Utilities.BrowserHelper.IsPhantomJs();

                    var v1 = new Float32Array(1);
                    var thisType = "Float32Array";
                    Bridge.Test.NUnit.Assert.True(v1 != null, (thisType || "") + " created");
                    var thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v1)), (thisType || "") + " class name");

                    var v2 = new Float64Array(1);
                    thisType = "Float64Array";
                    Bridge.Test.NUnit.Assert.True(v2 != null, (thisType || "") + " created");
                    thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v2)), (thisType || "") + " class name");

                    var v3 = new Int16Array(1);
                    thisType = "Int16Array";
                    Bridge.Test.NUnit.Assert.True(v3 != null, (thisType || "") + " created");
                    thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v3)), (thisType || "") + " class name");

                    var v4 = new Int32Array(1);
                    thisType = "Int32Array";
                    Bridge.Test.NUnit.Assert.True(v4 != null, (thisType || "") + " created");
                    thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v4)), (thisType || "") + " class name");

                    var v5 = new Int8Array(1);
                    thisType = "Int8Array";
                    Bridge.Test.NUnit.Assert.True(v5 != null, (thisType || "") + " created");
                    thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v5)), (thisType || "") + " class name");

                    var v6 = new Uint16Array(1);
                    thisType = "Uint16Array";
                    Bridge.Test.NUnit.Assert.True(v6 != null, (thisType || "") + " created");
                    thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v6)), (thisType || "") + " class name");

                    var v7 = new Uint32Array(1);
                    thisType = "Uint32Array";
                    Bridge.Test.NUnit.Assert.True(v7 != null, (thisType || "") + " created");
                    thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v7)), (thisType || "") + " class name");

                    var v8 = new Uint8Array(1);
                    thisType = "Uint8Array";
                    Bridge.Test.NUnit.Assert.True(v8 != null, (thisType || "") + " created");
                    thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v8)), (thisType || "") + " class name");

                    var v9 = new Uint8ClampedArray(1);
                    thisType = "Uint8ClampedArray";
                    Bridge.Test.NUnit.Assert.True(v9 != null, (thisType || "") + " created");
                    thisName = isSpecialTypeName ? (thisType || "") + "Constructor" : thisType;
                    Bridge.Test.NUnit.Assert.AreEqual(thisName, Bridge.Reflection.getTypeFullName(Bridge.getType(v9)), (thisType || "") + " class name");
                }
            }
        }
    });

    /**
     * This test will check whether TypedArray types correctly inherit from
     the prototype common methods and fields. [#549]
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge549
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge549", {
        statics: {
            methods: {
                TestUseCase: function () {
                    // After FF some v.43 version it also outputs content instead of type name for TypeArrays.toString()
                    var isToStringToTypeNameLogic = !(Bridge.ClientTest.Batch3.Utilities.BrowserHelper.IsChrome() || Bridge.ClientTest.Batch3.Utilities.BrowserHelper.IsFirefox());

                    var v1 = new Float32Array(10);
                    Bridge.Test.NUnit.Assert.True(v1 != null, "Float32Array created");

                    v1[1] = 11;
                    v1[5] = 5;
                    v1[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v1[1], "Float32Array indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v1[9], "Float32Array indexier works 9");

                    // Check just a select number of references inside the Prototype inheritance.
                    Bridge.Test.NUnit.Assert.True(v1.buffer != null, "Float32Array Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(40, v1.byteLength, "Float32Array ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v1.byteOffset, "Float32Array ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v1.length, "Float32Array Length");

                    /* 
                      Commented out. Reason: Only Firefox implements them.
                      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array
                    var mA = v1.Join();
                    v1.Reverse();
                    var mB = v1.Slice();
                    var mC = v1.Sort();
                    */

                    var expectedToStringFloat32Array1 = isToStringToTypeNameLogic ? "[object Float32Array]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringFloat32Array1, v1.toLocaleString(), "Float32Array ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringFloat32Array1, v1.toString(), "Float32Array ToString");

                    // Some browsers do not support SubArray() with no parameters.
                    // At least 'begin' must be provided.
                    var subArray11 = v1.subarray(1);
                    var expectedToStringFloat32Array2 = isToStringToTypeNameLogic ? "[object Float32Array]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray11 != null, "Float32Array SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray11.length, "Float32Array SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringFloat32Array2, subArray11.toString(), "Float32Array SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray11.byteOffset, "Float32Array SubArray1 ByteOffset");

                    var subArray12 = subArray11.subarray(2, 6);
                    var expectedToStringFloat32Array3 = isToStringToTypeNameLogic ? "[object Float32Array]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray12 != null, "Float32Array SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray12.length, "Float32Array SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringFloat32Array3, subArray12.toString(), "Float32Array SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(12, subArray12.byteOffset, "Float32Array SubArray2 ByteOffset");

                    var v2 = new Float64Array(10);
                    Bridge.Test.NUnit.Assert.True(v2 != null, "Float64Array created");

                    v2[1] = 11;
                    v2[5] = 5;
                    v2[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v2[1], "Float64Array indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v2[9], "Float64Array indexier works 9");

                    Bridge.Test.NUnit.Assert.True(v2.buffer != null, "Float64Array Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(80, v2.byteLength, "Float64Array ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v2.byteOffset, "Float64Array ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v2.length, "Float64Array Length");

                    var expectedToStringFloat64Array1 = isToStringToTypeNameLogic ? "[object Float64Array]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringFloat64Array1, v2.toLocaleString(), "Float64Array ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringFloat64Array1, v2.toString(), "Float64Array ToString");

                    var subArray21 = v2.subarray(1);
                    var expectedToStringFloat64Array2 = isToStringToTypeNameLogic ? "[object Float64Array]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray21 != null, "Float64Array SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray21.length, "Float64Array SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringFloat64Array2, subArray21.toString(), "Float64Array SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(8, subArray21.byteOffset, "Float64Array SubArray1 ByteOffset");

                    var subArray22 = subArray21.subarray(2, 6);
                    var expectedToStringFloat64Array3 = isToStringToTypeNameLogic ? "[object Float64Array]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray22 != null, "Float64Array SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray22.length, "Float64Array SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringFloat64Array3, subArray22.toString(), "Float64Array SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(24, subArray22.byteOffset, "Float64Array SubArray2 ByteOffset");

                    var v3 = new Int16Array(10);
                    Bridge.Test.NUnit.Assert.True(v3 != null, "Int16Array created");

                    v3[1] = 11;
                    v3[5] = 5;
                    v3[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v3[1], "Int16Array indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v3[9], "Int16Array indexier works 9");

                    Bridge.Test.NUnit.Assert.True(v3.buffer != null, "Int16Array Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(20, v3.byteLength, "Int16Array ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v3.byteOffset, "Int16Array ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v3.length, "Int16Array Length");

                    var expectedToStringInt16Array1 = isToStringToTypeNameLogic ? "[object Int16Array]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt16Array1, v3.toLocaleString(), "Int16Array ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt16Array1, v3.toString(), "Int16Array ToString");

                    var subArray31 = v3.subarray(1);
                    var expectedToStringInt16Array2 = isToStringToTypeNameLogic ? "[object Int16Array]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray31 != null, "Int16Array SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray31.length, "Int16Array SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt16Array2, subArray31.toString(), "Int16Array SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(2, subArray31.byteOffset, "Int16Array SubArray1 ByteOffset");

                    var subArray32 = subArray31.subarray(2, 6);
                    var expectedToStringInt16Array3 = isToStringToTypeNameLogic ? "[object Int16Array]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray32 != null, "Int16Array SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray32.length, "Int16Array SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt16Array3, subArray32.toString(), "Int16Array SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(6, subArray32.byteOffset, "Int16Array SubArray2 ByteOffset");

                    var v4 = new Int32Array(10);
                    Bridge.Test.NUnit.Assert.True(v4 != null, "Int32Array created");

                    v4[1] = 11;
                    v4[5] = 5;
                    v4[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v4[1], "Int32Array indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v4[9], "Int32Array indexier works 9");

                    Bridge.Test.NUnit.Assert.True(v4.buffer != null, "Int32Array Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(40, v4.byteLength, "Int32Array ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v4.byteOffset, "Int32Array ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v4.length, "Int32Array Length");

                    var expectedToStringInt32Array1 = isToStringToTypeNameLogic ? "[object Int32Array]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt32Array1, v4.toLocaleString(), "Int32Array ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt32Array1, v4.toString(), "Int32Array ToString");

                    var subArray41 = v4.subarray(1);
                    var expectedToStringInt32Array2 = isToStringToTypeNameLogic ? "[object Int32Array]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray41 != null, "Int32Array SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray41.length, "Int32Array SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt32Array2, subArray41.toString(), "Int32Array SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray41.byteOffset, "Int32Array SubArray1 ByteOffset");

                    var subArray42 = subArray41.subarray(2, 6);
                    var expectedToStringInt32Array3 = isToStringToTypeNameLogic ? "[object Int32Array]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray42 != null, "Int32Array SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray42.length, "Int32Array SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt32Array3, subArray42.toString(), "Int32Array SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(12, subArray42.byteOffset, "Int32Array SubArray2 ByteOffset");

                    var v5 = new Int8Array(10);
                    Bridge.Test.NUnit.Assert.True(v5 != null, "Int8Array created");

                    v5[1] = 11;
                    v5[5] = 5;
                    v5[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v5[1], "Int8Array indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v5[9], "Int8Array indexier works 9");

                    Bridge.Test.NUnit.Assert.True(v5.buffer != null, "Int8Array Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v5.byteLength, "Int8Array ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v5.byteOffset, "Int8Array ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v5.length, "Int8Array Length");

                    var expectedToStringInt8Array1 = isToStringToTypeNameLogic ? "[object Int8Array]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt8Array1, v5.toLocaleString(), "Int8Array ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt8Array1, v5.toString(), "Int8Array ToString");

                    var subArray51 = v5.subarray(1);
                    var expectedToStringInt8Array2 = isToStringToTypeNameLogic ? "[object Int8Array]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray51 != null, "Int8Array SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray51.length, "Int8Array SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt8Array2, subArray51.toString(), "Int8Array SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(1, subArray51.byteOffset, "Int8Array SubArray1 ByteOffset");

                    var subArray52 = subArray51.subarray(2, 6);
                    var expectedToStringInt8Array3 = isToStringToTypeNameLogic ? "[object Int8Array]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray52 != null, "Int8Array SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray52.length, "Int8Array SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringInt8Array3, subArray52.toString(), "Int8Array SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(3, subArray52.byteOffset, "Int8Array SubArray2 ByteOffset");

                    var v6 = new Uint16Array(10);
                    Bridge.Test.NUnit.Assert.True(v6 != null, "Uint16Array created");

                    v6[1] = 11;
                    v6[5] = 5;
                    v6[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v6[1], "Uint16Array indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v6[9], "Uint16Array indexier works 9");

                    Bridge.Test.NUnit.Assert.True(v6.buffer != null, "Uint16Array Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(20, v6.byteLength, "Uint16Array ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v6.byteOffset, "Uint16Array ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v6.length, "Uint16Array Length");

                    var expectedToStringUint16Array1 = isToStringToTypeNameLogic ? "[object Uint16Array]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint16Array1, v6.toLocaleString(), "Uint16Array ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint16Array1, v6.toString(), "Uint16Array ToString");

                    var subArray61 = v6.subarray(1);
                    var expectedToStringUint16Array2 = isToStringToTypeNameLogic ? "[object Uint16Array]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray61 != null, "Uint16Array SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray61.length, "Uint16Array SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint16Array2, subArray61.toString(), "Uint16Array SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(2, subArray61.byteOffset, "Uint16Array SubArray1 ByteOffset");

                    var subArray62 = subArray61.subarray(2, 6);
                    var expectedToStringUint16Array3 = isToStringToTypeNameLogic ? "[object Uint16Array]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray62 != null, "Uint16Array SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray62.length, "Uint16Array SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint16Array3, subArray62.toString(), "Uint16Array SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(6, subArray62.byteOffset, "Uint16Array SubArray2 ByteOffset");

                    var v7 = new Uint32Array(10);
                    Bridge.Test.NUnit.Assert.True(v7 != null, "Uint32Array created");

                    v7[1] = 11;
                    v7[5] = 5;
                    v7[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v7[1], "Uint32Array indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v7[9], "Uint32Array indexier works 9");

                    Bridge.Test.NUnit.Assert.True(v7.buffer != null, "Uint32Array Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(40, v7.byteLength, "Uint32Array ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v7.byteOffset, "Uint32Array ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v7.length, "Uint32Array Length");

                    var expectedToStringUint32Array1 = isToStringToTypeNameLogic ? "[object Uint32Array]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint32Array1, v7.toLocaleString(), "Uint32Array ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint32Array1, v7.toString(), "Uint32Array ToString");

                    var subArray71 = v7.subarray(1);
                    var expectedToStringUint32Array2 = isToStringToTypeNameLogic ? "[object Uint32Array]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray71 != null, "Uint32Array SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray71.length, "Uint32Array SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint32Array2, subArray71.toString(), "Uint32Array SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray71.byteOffset, "Uint32Array SubArray1 ByteOffset");

                    var subArray72 = subArray71.subarray(2, 6);
                    var expectedToStringUint32Array3 = isToStringToTypeNameLogic ? "[object Uint32Array]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray72 != null, "Uint32Array SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray72.length, "Uint32Array SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint32Array3, subArray72.toString(), "Uint32Array SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(12, subArray72.byteOffset, "Uint32Array SubArray2 ByteOffset");

                    var v8 = new Uint8Array(10);
                    Bridge.Test.NUnit.Assert.True(v8 != null, "Uint8Array created");

                    v8[1] = 11;
                    v8[5] = 5;
                    v8[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v8[1], "Uint8Array indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v8[9], "Uint8Array indexier works 9");

                    Bridge.Test.NUnit.Assert.True(v8.buffer != null, "Uint8Array Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v8.byteLength, "Uint8Array ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v8.byteOffset, "Uint8Array ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v8.length, "Uint8Array Length");

                    var expectedToStringUint8Array1 = isToStringToTypeNameLogic ? "[object Uint8Array]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint8Array1, v8.toLocaleString(), "Uint8Array ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint8Array1, v8.toString(), "Uint8Array ToString");

                    var subArray81 = v8.subarray(1);
                    var expectedToStringUint8Array2 = isToStringToTypeNameLogic ? "[object Uint8Array]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray81 != null, "Uint8Array SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray81.length, "Uint8Array SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint8Array2, subArray81.toString(), "Uint8Array SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(1, subArray81.byteOffset, "Uint8Array SubArray1 ByteOffset");

                    var subArray82 = subArray81.subarray(2, 6);
                    var expectedToStringUint8Array3 = isToStringToTypeNameLogic ? "[object Uint8Array]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray82 != null, "Uint8Array SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray82.length, "Uint8Array SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint8Array3, subArray82.toString(), "Uint8Array SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(3, subArray82.byteOffset, "Uint8Array SubArray2 ByteOffset");

                    var v9 = new Uint8ClampedArray(10);
                    Bridge.Test.NUnit.Assert.True(v9 != null, "Uint8ClampedArray created");

                    v9[1] = 11;
                    v9[5] = 5;
                    v9[9] = 99;
                    Bridge.Test.NUnit.Assert.AreEqual(11, v9[1], "Uint8ClampedArray indexier works 1");
                    Bridge.Test.NUnit.Assert.AreEqual(99, v9[9], "Uint8ClampedArray indexier works 9");

                    Bridge.Test.NUnit.Assert.True(v9.buffer != null, "Uint8ClampedArray Buffer");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v9.byteLength, "Uint8ClampedArray ByteLength");
                    Bridge.Test.NUnit.Assert.AreEqual(0, v9.byteOffset, "Uint8ClampedArray ByteOffset");
                    Bridge.Test.NUnit.Assert.AreEqual(10, v9.length, "Uint8ClampedArray Length");

                    var expectedToStringUint8ClampedArray1 = isToStringToTypeNameLogic ? "[object Uint8ClampedArray]" : "0,11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint8ClampedArray1, v9.toLocaleString(), "Uint8ClampedArray ToLocaleString");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint8ClampedArray1, v9.toString(), "Uint8ClampedArray ToString");

                    var subArray91 = v9.subarray(1);
                    var expectedToStringUint8ClampedArray2 = isToStringToTypeNameLogic ? "[object Uint8ClampedArray]" : "11,0,0,0,5,0,0,0,99";
                    Bridge.Test.NUnit.Assert.True(subArray91 != null, "Uint8ClampedArray SubArray1");
                    Bridge.Test.NUnit.Assert.AreEqual(9, subArray91.length, "Uint8ClampedArray SubArray1 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint8ClampedArray2, subArray91.toString(), "Uint8ClampedArray SubArray1 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(1, subArray91.byteOffset, "Uint8ClampedArray SubArray1 ByteOffset");

                    var subArray92 = subArray91.subarray(2, 6);
                    var expectedToStringUint8ClampedArray3 = isToStringToTypeNameLogic ? "[object Uint8ClampedArray]" : "0,0,5,0";
                    Bridge.Test.NUnit.Assert.True(subArray92 != null, "Uint8ClampedArray SubArray2");
                    Bridge.Test.NUnit.Assert.AreEqual(4, subArray92.length, "Uint8ClampedArray SubArray2 Length");
                    Bridge.Test.NUnit.Assert.AreEqual(expectedToStringUint8ClampedArray3, subArray92.toString(), "Uint8ClampedArray SubArray2 ToString");
                    Bridge.Test.NUnit.Assert.AreEqual(3, subArray92.byteOffset, "Uint8ClampedArray SubArray2 ByteOffset");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge550", {
        statics: {
            methods: {
                TestMethod: function (array, name) {
                    Bridge.Test.NUnit.Assert.True(array != null, System.String.format("ArrayBufferView is an alias of {0}", [name]));
                },
                TestUseCase: function () {
                    var array1 = new Int8Array(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array1, "Int8Array");

                    var array2 = new Uint8Array(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array2, "Uint8Array");

                    var array3 = new Uint8ClampedArray(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array3, "Uint8ClampedArray");

                    var array4 = new Int16Array(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array4, "Int16Array");

                    var array5 = new Uint16Array(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array5, "Uint16Array");

                    var array6 = new Int32Array(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array6, "Int32Array");

                    var array7 = new Uint32Array(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array7, "Uint32Array");

                    var array8 = new Float32Array(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array8, "Float32Array");

                    var array9 = new Float64Array(1);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array9, "Float64Array");

                    var array10 = new DataView(array9.buffer);
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge550.TestMethod(array10, "DataView");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge554", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var s = "0123456789";

                    Bridge.Test.NUnit.Assert.AreEqual("01234", System.String.remove(s, 5), "Remove(5)");
                    Bridge.Test.NUnit.Assert.AreEqual("012345678", System.String.remove(s, 9), "Remove(9)");
                    Bridge.Test.NUnit.Assert.AreEqual("03456789", System.String.remove(s, 1, 2), "Remove(1, 2)");
                    Bridge.Test.NUnit.Assert.AreEqual("0", System.String.remove(s, 1, 9), "Remove(1, 9)");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge555", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var s = "0123456789";

                    // Not C# API #2392
                    Bridge.Test.NUnit.Assert.AreEqual("0123456789", s.substring(-1), "JavaScript Substring(-1)");
                    Bridge.Test.NUnit.Assert.AreEqual("56789", s.substring(5), "JavaScript Substring(5)");
                    Bridge.Test.NUnit.Assert.AreEqual("", s.substring(10), "JavaScript Substring(10)");
                    Bridge.Test.NUnit.Assert.AreEqual("1", s.substring(1, 2), "JavaScript Substring(1, 2)");
                    Bridge.Test.NUnit.Assert.AreEqual("123456789", s.substring(1, 10), "JavaScript Substring(1, 10)");

                    Bridge.Test.NUnit.Assert.AreEqual("9", s.substr(-1), "Substring(-1)");
                    Bridge.Test.NUnit.Assert.AreEqual("56789", s.substr(5), "Substring(5)");
                    Bridge.Test.NUnit.Assert.AreEqual("", s.substr(10), "Substring(10)");
                    Bridge.Test.NUnit.Assert.AreEqual("12", s.substr(1, 2), "Substring(1, 2)");
                    Bridge.Test.NUnit.Assert.AreEqual("123456789", s.substr(1, 10), "Substring(1, 10)");

                    // Not C# API #2392
                    Bridge.Test.NUnit.Assert.AreEqual("9", s.substr(-1), "Substr(-1)");
                    Bridge.Test.NUnit.Assert.AreEqual("56789", s.substr(5), "Substr(5)");
                    Bridge.Test.NUnit.Assert.AreEqual("", s.substr(10), "Substr(10)");
                    Bridge.Test.NUnit.Assert.AreEqual("12", s.substr(1, 2), "Substr(1, 2)");
                    Bridge.Test.NUnit.Assert.AreEqual("123456789", s.substr(1, 10), "Substr(1, 10)");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge558", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge558A();
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge558B();

                    Bridge.Test.NUnit.Assert.AreEqual(1, a.zz(1), "Bridge558 a.zz int");
                    Bridge.Test.NUnit.Assert.AreEqual(2, a.zz$1(""), "Bridge558 a.zz string");

                    Bridge.Test.NUnit.Assert.AreEqual(1, b.zz(1), "Bridge558 b.zz int");
                    Bridge.Test.NUnit.Assert.AreEqual(2, b.zz$1(""), "Bridge558 b.zz string");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge558A", {
        methods: {
            zz: function (a) {
                return 1;
            },
            zz$1: function (a) {
                return 2;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge559", {
        statics: {
            methods: {
                TestUseCase1: function () {
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge559B1.$ctor1(1);

                    Bridge.Test.NUnit.Assert.AreEqual(" -> Bridge559A1 -> Bridge559A1$1 -> Bridge559B1$1", b.result, "Bridge559 TestUseCase1");
                },
                TestUseCase2: function () {
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge559B2.$ctor1(1);

                    Bridge.Test.NUnit.Assert.AreEqual(" ClassA ClassA$1 ClassB$1", b.result, "Bridge559 TestUseCase2");
                },
                TestUseCase3: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A3.ctor(1);
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A3.ctor(2);

                    var r = (a.Data || "") + "|" + (b.Data || "");
                    Bridge.Test.NUnit.Assert.AreEqual("1|2", r, "Bridge559 TestUseCase3");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A1", {
        fields: {
            result: null
        },
        ctors: {
            init: function () {
                this.result = "";
            },
            ctor: function () {
                this.$initialize();
                this.result = (this.result || "") + " -> Bridge559A1";
            },
            $ctor1: function (a) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A1.ctor.call(this);
                this.result = (this.result || "") + " -> Bridge559A1$1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A2", {
        fields: {
            result: null
        },
        ctors: {
            init: function () {
                this.result = "";
            },
            ctor: function () {
                this.$initialize();
                this.result = (this.result || "") + " ClassA";
            },
            $ctor1: function (a) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A2.ctor.call(this);
                this.result = (this.result || "") + " ClassA$1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A3", {
        props: {
            Data: null
        },
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.Data = value;
            },
            ctor: function (value) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A3.$ctor1.call(this, Bridge.toString(value));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge563", {
        statics: {
            methods: {
                TesForeach: function () {
                    var $t, $t1, $t2, $t3;
                    var keys = System.Array.init(["1", "2", "3"], System.String);
                    var handlers = System.Array.init(3, null, Function);
                    var i = 0;
                    var result = "";

                    $t = Bridge.getEnumerator(keys);
                    try {
                        while ($t.moveNext()) {
                            var itm = { v : $t.Current };
                            handlers[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), handlers)] = (function ($me, itm) {
                                return function () {
                                    result = (result || "") + (itm.v || "");
                                };
                            })(this, itm);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    $t1 = Bridge.getEnumerator(handlers);
                    try {
                        while ($t1.moveNext()) {
                            var handler = $t1.Current;
                            handler();
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("123", result, "Bridge563 No block foreach loop");

                    i = 0;
                    result = "";

                    $t2 = Bridge.getEnumerator(keys);
                    try {
                        while ($t2.moveNext()) {
                            var itm1 = { v : $t2.Current };
                            handlers[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), handlers)] = (function ($me, itm1) {
                                return function () {
                                    result = (result || "") + (itm1.v || "");
                                };
                            })(this, itm1);
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    $t3 = Bridge.getEnumerator(handlers);
                    try {
                        while ($t3.moveNext()) {
                            var handler1 = $t3.Current;
                            handler1();
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("123", result, "Bridge563 block foreach loop");
                },
                TesFor: function () {
                    var $t;
                    var keys = System.Array.init(["1", "2", "3"], System.String);
                    var handlers = System.Array.init(3, null, Function);
                    var i = 0;
                    var result = "";

                    for (var j = 0; j < keys.length; j = (j + 1) | 0) {
                        var itm = { v : keys[System.Array.index(j, keys)] };
                        handlers[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), handlers)] = (function ($me, itm) {
                            return function () {
                                result = (result || "") + (itm.v || "");
                            };
                        })(this, itm);
                    }

                    $t = Bridge.getEnumerator(handlers);
                    try {
                        while ($t.moveNext()) {
                            var handler = $t.Current;
                            handler();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("123", result, "Bridge563 For loop");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge566", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var ted = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge566B();
                    Bridge.Test.NUnit.Assert.AreEqual("Ted", ted.Data, "#566 Ted");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge566A", {
        props: {
            Data: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Data = this.GetName();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge572", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var d1 = new (System.Collections.Generic.Dictionary$2(System.Int32,System.String)).ctor();

                    var d = Bridge.as(d1, System.Collections.Generic.IDictionary$2(System.Int32,System.String));

                    d.System$Collections$Generic$IDictionary$2$System$Int32$System$String$add(1, "One");
                    d.System$Collections$Generic$IDictionary$2$System$Int32$System$String$add(2, "Two");

                    Bridge.Test.NUnit.Assert.AreEqual("One", d.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(1), "#572 getItem One");
                    Bridge.Test.NUnit.Assert.AreEqual("Two", d.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(2), "#572 getItem Two");

                    d.System$Collections$Generic$IDictionary$2$System$Int32$System$String$setItem(1, "New one");
                    d.System$Collections$Generic$IDictionary$2$System$Int32$System$String$setItem(2, "New two");

                    Bridge.Test.NUnit.Assert.AreEqual("New one", d.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(1), "#572 setItem New one");
                    Bridge.Test.NUnit.Assert.AreEqual("New two", d.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(2), "#572 setItem New two");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge577", {
        statics: {
            methods: {
                SomeMethodA: function (j) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.Bridge577UnitA();
                },
                SomeMethodB: function (j) {
                    var v = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.Bridge577UnitB();
                    v.Number = j;

                    return v.$clone();
                },
                TestUseCase: function () {
                    var a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.SomeMethodA(1);
                    Bridge.Test.NUnit.Assert.NotNull(a, "#577 Bridge577UnitA created");

                    var b = Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.SomeMethodB(7);
                    Bridge.Test.NUnit.Assert.AreEqual(7, b.Number, "#577 Bridge577UnitB created");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.Bridge577UnitA", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.Bridge577UnitA(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.Bridge577UnitB", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.Bridge577UnitB(); }
            }
        },
        props: {
            Number: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([4379733844, this.Number]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.Bridge577UnitB)) {
                    return false;
                }
                return Bridge.equals(this.Number, o.Number);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge577.Bridge577UnitB();
                s.Number = this.Number;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge578", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var s = "ab|abc&ab&abc|de&ef&";

                    var r = System.String.split(s, [124, 38].map(function (i) {{ return String.fromCharCode(i); }}));
                    var expected = System.Array.init(["ab", "abc", "ab", "abc", "de", "ef", ""], System.String);

                    Bridge.Test.NUnit.Assert.AreDeepEqual(expected, r, "#578 Split(params char[] separator)");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge580", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var arrs = System.Array.init(["s1", "s2"], System.String);

                    var intIndex;

                    var dst = System.Array.init(2, null, System.String);
                    intIndex = 0;
                    System.Array.copy(arrs, 0, dst, intIndex, arrs.length);

                    Bridge.Test.NUnit.Assert.AreEqual(2, dst.length, "Bridge580 Length Int");
                    Bridge.Test.NUnit.Assert.AreEqual(arrs[System.Array.index(0, arrs)], dst[System.Array.index(0, dst)], "Bridge580 0 Int");
                    Bridge.Test.NUnit.Assert.AreEqual(arrs[System.Array.index(1, arrs)], dst[System.Array.index(1, dst)], "Bridge580 1 Int");

                    dst = System.Array.init(3, null, System.String);
                    intIndex = 1;
                    System.Array.copy(arrs, 0, dst, intIndex, arrs.length);

                    Bridge.Test.NUnit.Assert.AreEqual(3, dst.length, "Bridge580 Length 3 Int");
                    Bridge.Test.NUnit.Assert.AreEqual(arrs[System.Array.index(1, arrs)], dst[System.Array.index(2, dst)], "Bridge580 1_1 Int");

                    var longIndex;

                    dst = System.Array.init(2, null, System.String);
                    longIndex = System.Int64(0);
                    System.Array.copy(arrs, 0, dst, longIndex.toNumber(), arrs.length);

                    Bridge.Test.NUnit.Assert.AreEqual(2, dst.length, "Bridge580 Length Long");
                    Bridge.Test.NUnit.Assert.AreEqual(arrs[System.Array.index(0, arrs)], dst[System.Array.index(0, dst)], "Bridge580 0 Long");
                    Bridge.Test.NUnit.Assert.AreEqual(arrs[System.Array.index(1, arrs)], dst[System.Array.index(1, dst)], "Bridge580 1 Long");

                    dst = System.Array.init(3, null, System.String);
                    longIndex = System.Int64(1);
                    System.Array.copy(arrs, 0, dst, longIndex.toNumber(), arrs.length);

                    Bridge.Test.NUnit.Assert.AreEqual(3, dst.length, "Bridge580 Length 1 Long");
                    Bridge.Test.NUnit.Assert.AreEqual(arrs[System.Array.index(1, arrs)], dst[System.Array.index(2, dst)], "Bridge580 1_1 Long");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge582", {
        statics: {
            methods: {
                TestAddTimeSpan: function () {
                    var today = System.DateTime.create(2006, 1, 1);
                    var duration = new System.TimeSpan(36, 0, 0, 0);
                    var answer = System.DateTime.add(today, duration);

                    Bridge.Test.NUnit.Assert.AreEqual(2006, System.DateTime.getYear(answer), "Bridge582 TestAddTimeSpan Year");
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.DateTime.getMonth(answer), "Bridge582 TestAddTimeSpan Month");
                    Bridge.Test.NUnit.Assert.AreEqual(6, System.DateTime.getDay(answer), "Bridge582 TestAddTimeSpan Day");
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getHour(answer), "Bridge582 TestAddTimeSpan Hours");
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getMinute(answer), "Bridge582 TestAddTimeSpan Minutes");
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getSecond(answer), "Bridge582 TestAddTimeSpan Seconds");
                },
                TestAddTicks: function () {
                    var dt = System.DateTime.create(2001, 1, 1);
                    dt = System.DateTime.addTicks(dt, System.Int64(20000000));

                    Bridge.Test.NUnit.Assert.AreEqual(2001, System.DateTime.getYear(dt), "Bridge582 TestAddTicks Year");
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.DateTime.getMonth(dt), "Bridge582 TestAddTicks Month");
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.DateTime.getDay(dt), "Bridge582 TestAddTicks Day");
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getHour(dt), "Bridge582 TestAddTicks Hour");
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.DateTime.getMinute(dt), "Bridge582 TestAddTicks Minute");
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.DateTime.getSecond(dt), "Bridge582 TestAddTicks Second");
                },
                TestTicks: function () {
                    var centuryBegin = System.DateTime.create(2001, 1, 1);
                    var currentDate = System.DateTime.create(2007, 12, 14, 15, 23, 0);
                    var elapsedTicks = System.DateTime.getTicks(currentDate).sub(System.DateTime.getTicks(centuryBegin));
                    var elapsedSpan = new System.TimeSpan(elapsedTicks);

                    Bridge.Test.NUnit.Assert.AreEqual(System.Int64([1836507648,510687]), elapsedTicks, "Bridge582 TestTicks ticks");
                    Bridge.Test.NUnit.Assert.AreEqual(219338580, elapsedSpan.getTotalSeconds(), "Bridge582 TestTicks seconds");
                    Bridge.Test.NUnit.Assert.AreEqual(3655643, elapsedSpan.getTotalMinutes(), "Bridge582 TestTicks minutes");
                    Bridge.Test.NUnit.Assert.AreEqual(2538, elapsedSpan.getDays(), "Bridge582 TestTicks days");
                    Bridge.Test.NUnit.Assert.AreEqual(15, elapsedSpan.getHours(), "Bridge582 TestTicks hours");
                    Bridge.Test.NUnit.Assert.AreEqual(23, elapsedSpan.getMinutes(), "Bridge582 TestTicks minutes");
                    Bridge.Test.NUnit.Assert.AreEqual(0, elapsedSpan.getSeconds(), "Bridge582 TestTicks minutes");
                },
                TestSubtractTimeSpan: function () {
                    var date1 = System.DateTime.create(1996, 1, 1, 1, 1, 1, 1);
                    var date2 = System.DateTime.create(1996, 2, 2, 2, 2, 2, 2);
                    var date3 = System.DateTime.create(1996, 3, 3, 3, 3, 3, 3);

                    var diff1 = System.DateTime.subdd(date2, date1);

                    Bridge.Test.NUnit.Assert.AreEqual(32, diff1.getDays(), "diff1 Days is 32");
                    Bridge.Test.NUnit.Assert.AreEqual(1, diff1.getHours(), "diff1 Hours is 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, diff1.getMinutes(), "diff1 Minutes is 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, diff1.getSeconds(), "diff1 Seconds is 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, diff1.getMilliseconds(), "diff1 Milliseconds is 1");

                    var ts1 = new System.TimeSpan(32, 1, 1, 1, 1);

                    Bridge.Test.NUnit.Assert.AreEqual(32, ts1.getDays(), "ts1 Days is 32");
                    Bridge.Test.NUnit.Assert.AreEqual(1, ts1.getHours(), "ts1 Hours is 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, ts1.getMinutes(), "ts1 Minutes is 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, ts1.getSeconds(), "ts1 Seconds is 1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, ts1.getMilliseconds(), "ts1 Milliseconds is 1");

                    Bridge.Test.NUnit.Assert.True(diff1.equalsT(ts1), "Bridge582 TestSubtractTimeSpan diff1");

                    var date4 = System.DateTime.subtract(date3, diff1);
                    Bridge.Test.NUnit.Assert.True(Bridge.equalsT(date4, System.DateTime.create(1996, 1, 31, 2, 2, 2, 2)), "Bridge582 TestSubtractTimeSpan date4");

                    var diff2 = System.DateTime.subdd(date3, date1);
                    Bridge.Test.NUnit.Assert.True(diff2.equalsT(new System.TimeSpan(62, 2, 2, 2, 2)), "Bridge582 TestSubtractTimeSpan diff2");
                },
                TestTimeOfDay: function () {
                    var date = System.DateTime.create(2013, 9, 14, 9, 28, 0);

                    Bridge.Test.NUnit.Assert.True(Bridge.equalsT(System.DateTime.getDate(date), System.DateTime.create(2013, 9, 14)), "Bridge582 TestTimeOfDay Date 2013, 9, 14, 9, 28, 0");
                    Bridge.Test.NUnit.Assert.True(System.DateTime.getTimeOfDay(date).equalsT(new System.TimeSpan(9, 28, 0)), "Bridge582 TestTimeOfDay TimeOfDay 2013, 9, 14, 9, 28, 0");

                    date = System.DateTime.create(2011, 5, 28, 10, 35, 0);
                    Bridge.Test.NUnit.Assert.True(Bridge.equalsT(System.DateTime.getDate(date), System.DateTime.create(2011, 5, 28)), "Bridge582 TestTimeOfDay Date 2011, 5, 28, 10, 35, 0");
                    Bridge.Test.NUnit.Assert.True(System.DateTime.getTimeOfDay(date).equalsT(new System.TimeSpan(10, 35, 0)), "Bridge582 TestTimeOfDay TimeOfDay 2011, 5, 28, 10, 35, 0");

                    date = System.DateTime.create(1979, 12, 25, 14, 30, 0);
                    Bridge.Test.NUnit.Assert.True(Bridge.equalsT(System.DateTime.getDate(date), System.DateTime.create(1979, 12, 25)), "Bridge582 TestTimeOfDay Date 1979, 12, 25, 14, 30, 0");
                    Bridge.Test.NUnit.Assert.True(System.DateTime.getTimeOfDay(date).equalsT(new System.TimeSpan(14, 30, 0)), "Bridge582 TestTimeOfDay TimeOfDay 1979, 12, 25, 14, 30, 0");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge583", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(System.Decimal(1.4, 1), System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 6), "Bridge583 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(System.Decimal(1.6, 1), System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 6), "Bridge583 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(System.Decimal(123.4568, 4), System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 6), "Bridge583 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(System.Decimal(123.456789, 6), System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 6), "Bridge583 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(System.Decimal(123.456789, 6), System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 6), "Bridge583 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumber(System.Decimal(-123.0), System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 6), "Bridge583 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 0), 1.5, "Bridge583 Up 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 0), 1.6, "Bridge583 Up 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 0), 123.4568, "Bridge583 Up 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 0), 123.456789, "Bridge583 Up 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 0), 123.456789, "Bridge583 Up 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 0), -124.0, "Bridge583 Up 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 4), 1.5, "Bridge583 AwayFromZero 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 4), 1.6, "Bridge583 AwayFromZero 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 4), 123.4568, "Bridge583 AwayFromZero 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 4), 123.456789, "Bridge583 AwayFromZero 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 4), 123.456789, "Bridge583 AwayFromZero 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 4), -123.0, "Bridge583 AwayFromZero 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 1), 1.4, "Bridge583 Down 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 1), 1.5, "Bridge583 Down 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 1), 123.4567, "Bridge583 Down 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 1), 123.456789, "Bridge583 Down 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 1), 123.456789, "Bridge583 Down 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 1), -123.0, "Bridge583 Down 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 2), 1.5, "Bridge583 InfinityPos 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 2), 1.6, "Bridge583 InfinityPos 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 2), 123.4568, "Bridge583 InfinityPos 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 2), 123.456789, "Bridge583 InfinityPos 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 2), 123.456789, "Bridge583 InfinityPos 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 2), -123.0, "Bridge583 InfinityPos 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 3), 1.4, "Bridge583 InfinityNeg 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 3), 1.5, "Bridge583 InfinityNeg 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 3), 123.4567, "Bridge583 InfinityNeg 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 3), 123.456789, "Bridge583 InfinityNeg 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 3), 123.456789, "Bridge583 InfinityNeg 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 3), -124.0, "Bridge583 InfinityNeg 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 5), 1.4, "Bridge583 TowardsZero 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 5), 1.5, "Bridge583 TowardsZero 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 5), 123.4568, "Bridge583 TowardsZero 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 5), 123.456789, "Bridge583 TowardsZero 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 5), 123.456789, "Bridge583 TowardsZero 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 5), -123.0, "Bridge583 TowardsZero 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 6), 1.4, "Bridge583 ToEven 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 6), 1.6, "Bridge583 ToEven 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 6), 123.4568, "Bridge583 ToEven 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 6), 123.456789, "Bridge583 ToEven 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 6), 123.456789, "Bridge583 ToEven 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 6), -123.0, "Bridge583 ToEven 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 7), 1.5, "Bridge583 Ceil 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 7), 1.6, "Bridge583 Ceil 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 7), 123.4568, "Bridge583 Ceil 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 7), 123.456789, "Bridge583 Ceil 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 7), 123.456789, "Bridge583 Ceil 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 7), -123.0, "Bridge583 Ceil 6");

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.45, 2), 1, 8), 1.4, "Bridge583 Floor 1");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(1.55, 2), 1, 8), 1.5, "Bridge583 Floor 2");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 4, 8), 123.4568, "Bridge583 Floor 3");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 6, 8), 123.456789, "Bridge583 Floor 4");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(123.456789, 6), 8, 8), 123.456789, "Bridge583 Floor 5");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble(System.Decimal.toDecimalPlaces(System.Decimal(-123.456, 3), 0, 8), -123.0, "Bridge583 Floor 6");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge586", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.Null(Bridge.ClientTest.Batch3.BridgeIssues.Bridge586A.SomeDataStatic, "a.SomeDataStatic is external");
                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge586.f1, "a.DoSomethingStatic() is external");

                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge586.f2, "b.SomeDataStatic is external");
                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge586.f3, "b.DoSomethingStatic() is external");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge586", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge586, {
        f1: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge586A.DoSomethingStatic();
        },
        f2: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge586B.SomeDataStatic = System.Decimal(4);
        },
        f3: function () {
            Bridge.ClientTest.Batch3.BridgeIssues.Bridge586B.DoSomethingStatic();
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge586A");

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge588", {
        statics: {
            methods: {
                TestUseCase1: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge588A.Valeur3, "Bridge588 TestUseCase");
                    Bridge.Test.NUnit.Assert.AreEqual("default", Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C1.Default.Value.Name, "Bridge588_2 TestUseCase");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge588A", {
        statics: {
            fields: {
                Valeur3: 0
            },
            ctors: {
                init: function () {
                    this.Valeur3 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge588A.Add(Bridge.ClientTest.Batch3.BridgeIssues.Bridge588B.Valeur2, 1);
                }
            },
            methods: {
                Add: function (a, b) {
                    return ((a + b) | 0);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge588B", {
        statics: {
            fields: {
                Valeur1: 0,
                Valeur2: 0
            },
            ctors: {
                init: function () {
                    this.Valeur1 = 1;
                    this.Valeur2 = 2;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C", {
        statics: {
            methods: {
                TestUseCase2: function () {
                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C2("C2 value");
                    Bridge.Test.NUnit.Assert.True(c2 != null, "Bridge588 C2");
                    Bridge.Test.NUnit.Assert.AreEqual("C2 value", c2.Name, "Bridge588 C2.Name");

                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C1(c2);
                    Bridge.Test.NUnit.Assert.True(c1 != null, "Bridge588 C1");
                    Bridge.Test.NUnit.Assert.AreEqual("C2 value", c1.Value.Name, "Bridge588 C1.Value.Name");

                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C1.Default != null, "Bridge588 C1.Default");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C1.Default.Value != null, "Bridge588 C1.Default.Value");
                    Bridge.Test.NUnit.Assert.AreEqual("default", Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C1.Default.Value.Name, "Bridge588 C1.Default.Value.Name");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C2.Default != null, "Bridge588 C2.Default");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C2.Default.Name != null, "Bridge588 C2.Default.Name");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C1", {
        $kind: "nested class",
        statics: {
            fields: {
                _default: null
            },
            props: {
                Default: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C1._default;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._default = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C2.Default);
                }
            }
        },
        props: {
            Value: null
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.Value = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C2", {
        $kind: "nested class",
        statics: {
            fields: {
                _default: null
            },
            props: {
                Default: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C2._default;
                    }
                }
            },
            ctors: {
                init: function () {
                    this._default = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge588C.C2("default");
                }
            }
        },
        props: {
            Name: null
        },
        ctors: {
            ctor: function (name) {
                this.$initialize();
                this.Name = name;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge592", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var i8_1 = -2;
                    var i8_2 = Bridge.Int.sxb((i8_1 >> 4) & 255);
                    var u8_1 = 254;
                    var u8_2 = (u8_1 >> 4) & 255;

                    var i16_1 = -2;
                    var i16_2 = Bridge.Int.sxs((i16_1 >> 8) & 65535);
                    var u16_1 = 65534;
                    var u16_2 = (u16_1 >> 8) & 65535;

                    var i32_1 = -2;
                    var i32_2 = i32_1 >> 16;
                    var u32_1 = 4294967294;
                    var u32_2 = u32_1 >>> 16;

                    Bridge.Test.NUnit.Assert.AreEqual(-1, i8_2, "Bridge592 i8_2");
                    Bridge.Test.NUnit.Assert.AreEqual(15, u8_2, "Bridge592 u8_2");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, i16_2, "Bridge592 i16_2");
                    Bridge.Test.NUnit.Assert.AreEqual(255, u16_2, "Bridge592 u16_2");
                    Bridge.Test.NUnit.Assert.AreEqual(-1, i32_2, "Bridge592 i32_2");
                    Bridge.Test.NUnit.Assert.AreEqual(65535, u32_2, "Bridge592 u32_2");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge595", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var buffer = new System.Text.StringBuilder();
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge595A(buffer);
                    a.Render();
                    Bridge.Test.NUnit.Assert.AreEqual("Render0Render1", buffer.toString(), "Bridge595 A");

                    buffer.clear();
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge595B(buffer);
                    b.Render();
                    Bridge.Test.NUnit.Assert.AreEqual("Render0Render1", buffer.toString(), "Bridge595 B");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge595A", {
        fields: {
            buffer: null
        },
        ctors: {
            ctor: function (buffer) {
                this.$initialize();
                this.buffer = buffer;
            }
        },
        methods: {
            Render: function () {
                this.buffer.append("Render0");
                this.Render$1(System.DateTime.getNow());
            },
            Render$1: function (when) {
                this.buffer.append("Render1");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge595B", {
        statics: {
            methods: {
                Render: function (buffer) {
                    buffer.append("Render1");
                }
            }
        },
        fields: {
            buffer: null
        },
        ctors: {
            ctor: function (buffer) {
                this.$initialize();
                this.buffer = buffer;
            }
        },
        methods: {
            Render: function () {
                this.buffer.append("Render0");
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge595B.Render(this.buffer);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge597", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var inst = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge597A();
                    Bridge.Test.NUnit.Assert.AreEqual("0:a", inst.Get(), "Bridge597 Without instance member access");
                    Bridge.Test.NUnit.Assert.AreEqual("HI!:0:a", inst.GetWithMember(), "Bridge597 With instance member access");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge597A", {
        fields: {
            _something: null
        },
        ctors: {
            init: function () {
                this._something = "HI!";
            }
        },
        methods: {
            Get: function () {
                var items = System.Array.init(["a"], System.String);
                var mappedItemsWithoutInstanceMemberAccess = System.Linq.Enumerable.from(items, System.String).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge597A.f1).ToArray(System.String);
                return mappedItemsWithoutInstanceMemberAccess[System.Array.index(0, mappedItemsWithoutInstanceMemberAccess)];
            },
            GetWithMember: function () {
                var items = System.Array.init(["a"], System.String);
                var mappedItemsWithInstanceMemberAccess = System.Linq.Enumerable.from(items, System.String).select(Bridge.fn.bind(this, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge597A.f2)).ToArray(System.String);
                return mappedItemsWithInstanceMemberAccess[System.Array.index(0, mappedItemsWithInstanceMemberAccess)];
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge597A", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge597A, {
        f1: function (value, index) {
            return index + ":" + (value || "");
        },
        f2: function (value, index) {
            return (this._something || "") + ":" + index + ":" + (value || "");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge603", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge603A.op_Implicit(null);
                    Bridge.Test.NUnit.Assert.AreEqual("[Null]", c.value, "Bridge603A TestUseCase Null");

                    c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge603A.op_Implicit("Test");
                    Bridge.Test.NUnit.Assert.AreEqual("Test", c.value, "Bridge603A TestUseCase String");
                },
                TestRelated: function () {
                    var $t;
                    var b = Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B.op_Implicit$1(12345);
                    Bridge.Test.NUnit.Assert.AreEqual(12345, b.intValue, "Bridge603B TestRelated Int");

                    var c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B.op_Implicit$2(null);
                    Bridge.Test.NUnit.Assert.AreEqual("[Null]", c.value, "Bridge603B TestRelated String Null");

                    c = Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B.op_Implicit$2("Test");
                    Bridge.Test.NUnit.Assert.AreEqual("Test", c.value, "Bridge603B TestRelated String");

                    var d = Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B.op_Implicit(null);
                    Bridge.Test.NUnit.Assert.AreEqual("[Null]", d.value, "Bridge603B TestRelated Bridge603Class Null");

                    d = Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B.op_Implicit(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603Class(), $t.Data = "Test 603B", $t));
                    Bridge.Test.NUnit.Assert.AreEqual("Test 603B", d.value, "Bridge603B TestRelated Bridge603Class");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge603A", {
        $kind: "struct",
        statics: {
            methods: {
                op_Implicit: function (value) {
                    var $t;
                    value = ($t = value, $t != null ? $t : "[Null]");
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603A.$ctor1(value);
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603A(); }
            }
        },
        fields: {
            value: null
        },
        ctors: {
            $ctor1: function (value) {
                this.$initialize();
                this.value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([2493520092, this.value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge603A)) {
                    return false;
                }
                return Bridge.equals(this.value, o.value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603A();
                s.value = this.value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B", {
        $kind: "struct",
        statics: {
            methods: {
                op_Implicit$2: function (value) {
                    var $t;
                    value = ($t = value, $t != null ? $t : "[Null]");
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B.$ctor3(value);
                },
                op_Implicit$1: function (value) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B.$ctor2(value);
                },
                op_Implicit: function (value) {
                    var $t;
                    value = value || ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603Class(), $t.Data = "[Null]", $t);
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B.$ctor1(value);
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B(); }
            }
        },
        fields: {
            value: null,
            intValue: 0
        },
        ctors: {
            $ctor3: function (value) {
                this.$initialize();
                this.value = value;
                this.intValue = 0;
            },
            $ctor2: function (value) {
                this.$initialize();
                this.value = null;
                this.intValue = value;
            },
            $ctor1: function (value) {
                this.$initialize();
                this.value = Bridge.toString(value.Data);
                this.intValue = 0;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([2493520348, this.value, this.intValue]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B)) {
                    return false;
                }
                return Bridge.equals(this.value, o.value) && Bridge.equals(this.intValue, o.intValue);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge603B();
                s.value = this.value;
                s.intValue = this.intValue;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge603Class", {
        props: {
            Data: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge606", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge606C();
                    c.Example1("b", "a");
                    Bridge.Test.NUnit.Assert.AreEqual("b", c.X, "Bridge606 C X");
                    Bridge.Test.NUnit.Assert.AreEqual("a", c.Y, "Bridge606 C Y");

                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge606B("b", "a");
                    Bridge.Test.NUnit.Assert.AreEqual("b", b.X, "Bridge606 B X");
                    Bridge.Test.NUnit.Assert.AreEqual("a", b.Y, "Bridge606 B Y");

                    var s = Bridge.ClientTest.Batch3.BridgeIssues.Bridge606A.Example2("123", "b", "a");
                    Bridge.Test.NUnit.Assert.AreEqual("123 - b - a", s, "Bridge606 123");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge606A", {
        statics: {
            methods: {
                Example2: function (source, x, y) {
                    return (source || "") + " - " + (x || "") + " - " + (y || "");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge606B", {
        props: {
            X: null,
            Y: null
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge606C", {
        props: {
            X: null,
            Y: null
        },
        methods: {
            Example1: function (x, y) {
                this.X = x;
                this.Y = y;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge607", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var c = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge607A$1(System.String))();
                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge607B();

                    Bridge.Test.NUnit.Assert.True(c.equalsT(c), "Bridge607A c");
                    Bridge.Test.NUnit.Assert.False(c.equalsT(null), "Bridge607A null");

                    Bridge.Test.NUnit.Assert.True(c1.equalsT(c1), "Bridge607B c");
                    Bridge.Test.NUnit.Assert.False(c1.equalsT(null), "Bridge607B null");

                    Bridge.Test.NUnit.Assert.False(Bridge.equals(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge607C(), null), "Bridge607C null");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge607A$1", function (T) { return {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge607A$1(T))]; },
        alias: ["equalsT", "System$IEquatable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge607A$1$" + Bridge.getTypeAlias(T) + "$equalsT"],
        methods: {
            equalsT: function (obj) {
                return Bridge.referenceEquals(this, obj);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge607B", {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge607B)]; },
        alias: ["equalsT", "System$IEquatable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge607B$equalsT"],
        methods: {
            equalsT: function (other) {
                return Bridge.referenceEquals(this, other);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge607C", {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge607C)]; },
        methods: {
            System$IEquatable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge607C$equalsT: function (other) {
                return Bridge.equals(this, other);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge608", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var s = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge608A.$ctor1("test");
                    var o = "test";
                    Bridge.Test.NUnit.Assert.True(s.equals(o), "Bridge608 Object");
                    Bridge.Test.NUnit.Assert.True(s.Equals("test"), "Bridge608 String");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge608A", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge608A(); }
            }
        },
        fields: {
            field: null
        },
        ctors: {
            $ctor1: function (field) {
                this.$initialize();
                this.field = field;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return this.Equals(Bridge.toString(obj));
            },
            Equals: function (other) {
                return Bridge.referenceEquals(other, this.field);
            },
            getHashCode: function () {
                return Bridge.getHashCode(this.field);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge608A();
                s.field = this.field;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge615", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var i = 0;
                    var o = null;

                    Bridge.Test.NUnit.Assert.AreEqual("object", Bridge.ClientTest.Batch3.BridgeIssues.Bridge615A.Method1$1(o), "Bridge615 object");
                    Bridge.Test.NUnit.Assert.AreEqual("int", Bridge.ClientTest.Batch3.BridgeIssues.Bridge615A.Method1(i), "Bridge615 int");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge615A", {
        statics: {
            methods: {
                Method1$1: function (o) {
                    return "object";
                },
                Method1: function (i) {
                    return "int";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge623", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var func1 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge623.f1;

                    var point1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge623A(1, func1);
                    var point2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge623A(2, func1);

                    Bridge.Test.NUnit.Assert.AreEqual(1, point1.Call(), "Bridge623A point1 func1");
                    Bridge.Test.NUnit.Assert.AreEqual(2, point2.Call(), "Bridge623A point2 func1");

                    var point3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B1(3, func1);
                    var point4 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B1(4, func1);

                    Bridge.Test.NUnit.Assert.AreEqual(3, point3.Call(), "Bridge623B1 point3 func1");
                    Bridge.Test.NUnit.Assert.AreEqual(4, point4.Call(), "Bridge623B1 point4 func1");

                    var func2 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge623.f2;

                    var point5 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B1(5, func2);
                    var point6 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B1(6, func2);

                    Bridge.Test.NUnit.Assert.AreEqual(10, point5.Call(), "Bridge623B1 point5 func2");
                    Bridge.Test.NUnit.Assert.AreEqual(12, point6.Call(), "Bridge623B1 point6 func2");

                    var func3 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge623.f2;

                    var point7 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B2(7, func3);
                    var point8 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B2(8, func3);

                    Bridge.Test.NUnit.Assert.AreEqual(1021, point7.Call(), "Bridge623B2 point7 func3");
                    Bridge.Test.NUnit.Assert.AreEqual(1024, point8.Call(), "Bridge623B2 point8 func3");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge623", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge623, {
        f1: function () {
            return (Bridge.caller[0] || this).foo;
        },
        f2: function () {
            return (Bridge.caller[0] || this).GetFoo();
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge623A", {
        fields: {
            foo: 0,
            func: null
        },
        ctors: {
            ctor: function (foo, func) {
                this.$initialize();
                this.foo = foo;
                this.func = func;
            }
        },
        methods: {
            Call: function () {
                return this.func();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge625", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var $t, $t1;
                    var list = System.Array.init([1, 2, 3], System.Int32);

                    var d1 = ($t = System.Int32, System.Linq.Enumerable.from(list, $t).toDictionary($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f1, null, System.Int32, $t));
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(d1), "Bridge625 d1");

                    var d2 = ($t1 = System.Int32, System.Linq.Enumerable.from(list, $t1).toDictionary($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f1, null, System.Int32, $t1, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge625A()));
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(d2), "Bridge625 d2");

                    var d3 = System.Linq.Enumerable.from(list, System.Int32).toDictionary($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f1, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f2, System.Int32, System.Int32);
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(d3), "Bridge625 d3");

                    var d4 = System.Linq.Enumerable.from(list, System.Int32).toDictionary($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f1, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f2, System.Int32, System.Int32, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge625A());
                    Bridge.Test.NUnit.Assert.True(Bridge.hasValue(d4), "Bridge625 d4");

                    var content = new (System.Collections.Generic.Dictionary$2(System.DateTime,System.Array.type(System.Double))).ctor();
                    var dict1 = System.Linq.Enumerable.from(content, System.Collections.Generic.KeyValuePair$2(System.DateTime,System.Array.type(System.Double))).where($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f3).toDictionary($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f4, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625.f5, System.DateTime, System.Array.type(System.Double));
                    Bridge.Test.NUnit.Assert.AreEqual(0, dict1.Count);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge625", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge625, {
        f1: function (x) {
            return x;
        },
        f2: function (y) {
            return y;
        },
        f3: function (x) {
            return true;
        },
        f4: function (element) {
            return element.key;
        },
        f5: function (element) {
            return element.value;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge625A", {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Int32)],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Int32$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Int32$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                return x === y;
            },
            getHashCode2: function (obj) {
                return Bridge.getHashCode(obj);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634", {
        statics: {
            methods: {
                TestUseCase1: function () {
                    var $t;
                    var hashSet = new (System.Collections.Generic.HashSet$1(System.String)).ctor();

                    hashSet.add("a");
                    hashSet.add("b");
                    hashSet.add("c");

                    var text = "";

                    $t = Bridge.getEnumerator(hashSet);
                    try {
                        while ($t.moveNext()) {
                            var s = $t.Current;
                            text = (text || "") + (s || "");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("abc", text, "Bridge634: foreach works for HashSet");
                },
                TestUseCase2: function () {
                    var a = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1(System.String))();
                    var a1 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested(System.String))();
                    var a2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested$1(System.String,System.Int32))();
                    var a3 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested.SubNested(System.String))();
                    var a4 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested.SubNested$1(System.String,System.Int32))();
                    var a5 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested$1.SubNested(System.String,System.Int32))();
                    var a6 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested$1.SubNested$1(System.String,System.Int32,System.Int32))();

                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A`1[[System.String, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(a)), "Bridge634 A a");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A`1+Nested[[System.String, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(a1)), "Bridge634 A a1");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A`1+Nested`1[[System.String, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(a2)), "Bridge634 A a2");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A`1+Nested+SubNested[[System.String, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(a3)), "Bridge634 A a3");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A`1+Nested+SubNested`1[[System.String, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(a4)), "Bridge634 A a4");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A`1+Nested`1+SubNested[[System.String, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(a5)), "Bridge634 A a5");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A`1+Nested`1+SubNested`1[[System.String, mscorlib],[System.Int32, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(a6)), "Bridge634 A a6");

                    var b = new (ClientTestLibraryCustom.Bridge634B$1(System.String))();
                    var b1 = new (ClientTestLibraryCustom.Bridge634B$1.Nested(System.String))();
                    var b2 = new (ClientTestLibraryCustom.Bridge634B$1.Nested$1(System.String,System.Int32))();
                    var b3 = new (ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested(System.String))();
                    var b4 = new (ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested$1(System.String,System.Int32))();
                    var b5 = new (ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested(System.String,System.Int32))();
                    var b6 = new (ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested$1(System.String,System.Int32,System.Int32))();

                    Bridge.Test.NUnit.Assert.AreEqual("ClientTestLibraryCustom.Bridge634B`1[[System.String, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(b)), "Bridge634 B b");
                    Bridge.Test.NUnit.Assert.AreEqual("ClientTestLibraryCustom.Bridge634B`1+Nested[[System.String, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(b1)), "Bridge634 B b1");
                    Bridge.Test.NUnit.Assert.AreEqual("ClientTestLibraryCustom.Bridge634B`1+Nested`1[[System.String, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(b2)), "Bridge634 B b2");
                    Bridge.Test.NUnit.Assert.AreEqual("ClientTestLibraryCustom.Bridge634B`1+Nested+SubNested[[System.String, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(b3)), "Bridge634 B b3");
                    Bridge.Test.NUnit.Assert.AreEqual("ClientTestLibraryCustom.Bridge634B`1+Nested+SubNested`1[[System.String, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(b4)), "Bridge634 B b4");
                    Bridge.Test.NUnit.Assert.AreEqual("ClientTestLibraryCustom.Bridge634B`1+Nested`1+SubNested[[System.String, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(b5)), "Bridge634 B b5");
                    Bridge.Test.NUnit.Assert.AreEqual("ClientTestLibraryCustom.Bridge634B`1+Nested`1+SubNested`1[[System.String, mscorlib],[System.Int32, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(b6)), "Bridge634 B b6");

                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C();
                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested();
                    var c2 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested$1(System.Int32))();
                    var c3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested.SubNested();
                    var c4 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested.SubNested$1(System.Int32))();
                    var c5 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested$1.SubNested(System.Int32))();
                    var c6 = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested$1.SubNested$1(System.Int32,System.Int32))();

                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C", Bridge.Reflection.getTypeFullName(Bridge.getType(c)), "Bridge634 C c");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C+Nested", Bridge.Reflection.getTypeFullName(Bridge.getType(c1)), "Bridge634 C c1");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C+Nested`1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(c2)), "Bridge634 C c2");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C+Nested+SubNested", Bridge.Reflection.getTypeFullName(Bridge.getType(c3)), "Bridge634 C c3");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C+Nested+SubNested`1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(c4)), "Bridge634 C c4");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C+Nested`1+SubNested[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(c5)), "Bridge634 C c5");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C+Nested`1+SubNested`1[[System.Int32, mscorlib],[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(c6)), "Bridge634 C c6");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1", function (T) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested.SubNested", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested.SubNested$1", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested$1", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested$1.SubNested", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634A$1.Nested$1.SubNested$1", function (T, T1, T2) { return {
        $kind: "nested class"
    }; });

    Bridge.define("ClientTestLibraryCustom.Bridge634B$1", function (T) { return {

    }; });

    Bridge.define("ClientTestLibraryCustom.Bridge634B$1.Nested", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested", function (T) { return {
        $kind: "nested class"
    }; });

    Bridge.define("ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested$1", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("ClientTestLibraryCustom.Bridge634B$1.Nested$1", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested", function (T, T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested$1", function (T, T1, T2) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C");

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested.SubNested", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested.SubNested$1", function (T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested$1", function (T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested$1.SubNested", function (T1) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge634C.Nested$1.SubNested$1", function (T1, T2) { return {
        $kind: "nested class"
    }; });

    Bridge.define("Bridge634D");

    Bridge.define("Bridge634D.Nested", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge635", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge635A();
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge635B();

                    Bridge.Test.NUnit.Assert.AreEqual("function", (typeof Bridge.unbox(a.internalFunc1)), "Bridge635 A.internalFunc1");
                    Bridge.Test.NUnit.Assert.AreEqual("A.Test1", a["internalFunc1"](), "Bridge635 A.internalFunc1 Invoke");

                    Bridge.Test.NUnit.Assert.AreEqual("function", (typeof Bridge.unbox(b.internalFunc1)), "Bridge635 B.internalFunc1");
                    Bridge.Test.NUnit.Assert.AreEqual("B.Test1", b["internalFunc1"](), "Bridge635 B.internalFunc1 Invoke");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge635A", {
        methods: {
            internalFunc1: function () {
                return "A.Test1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge637", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var Operator = 0;
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge637.Operator.Add, Operator);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge637.Operator", {
        $kind: "nested enum",
        statics: {
            fields: {
                Add: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge647", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var a = { bar: 1 };
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(a.bar), "Bridge647 A");

                    var b = { bar: 1, bar1: 12 };
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.unbox(b.bar), "Bridge647 B bar");
                    Bridge.Test.NUnit.Assert.AreEqual(12, Bridge.unbox(b.bar1), "Bridge647 B bar1");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge648", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var wrappedString = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge648A("test");
                    var stringArray = System.Array.init(0, null, System.String);
                    stringArray.push(Bridge.ClientTest.Batch3.BridgeIssues.Bridge648A.op_Implicit(wrappedString));

                    Bridge.Test.NUnit.Assert.AreEqual("test", stringArray[System.Array.index(0, stringArray)]);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge648A", {
        statics: {
            methods: {
                op_Implicit: function (value) {
                    return value.Value;
                }
            }
        },
        props: {
            Value: null
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.Value = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge652", {
        statics: {
            fields: {
                log: null
            },
            methods: {
                TestUseCase: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.log = null;
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652A1();
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, c.Bar, "Bridge652A1 Bar NotNull");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge652B1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.log, "Bridge652A1 log");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.log = null;
                    var d = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652A2();
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, d.Bar, "Bridge652A2 Bar NotNull");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge652B2", Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.log, "Bridge652A2 log");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652C$1", function (T) { return {
        $kind: "nested class",
        fields: {
            Bar: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Bar = Bridge.createInstance(T);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652D$1", function (T) { return {
        $kind: "nested class",
        fields: {
            Bar: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Bar = Bridge.createInstance(T);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge655", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var item11 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge655.f1;
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A.IsNullOrUndefined(item11), "Bridge655 IsNullOrUndefined11");
                    Bridge.Test.NUnit.Assert.AreEqual(11, Bridge.unbox(item11()), "Bridge655 item11");

                    var item12 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge655.f2;
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A.IsNullOrUndefined(item12), "Bridge655 IsNullOrUndefined12");
                    Bridge.Test.NUnit.Assert.AreEqual(12, item12(12), "Bridge655 item12");

                    var item21 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge655.f3;
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A.IsNullOrUndefined$1(item21, 21), "Bridge655 IsNullOrUndefined21 false");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A.IsNullOrUndefined$1(item21, 0), "Bridge655 IsNullOrUndefined21 true");
                    Bridge.Test.NUnit.Assert.AreEqual(21, Bridge.unbox(item21()), "Bridge655 item21");

                    var item22 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge655.f4;
                    Bridge.Test.NUnit.Assert.AreEqual("false", Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A.IsNullOrUndefined$2(item22, "22"), "Bridge655 IsNullOrUndefined22 false");
                    Bridge.Test.NUnit.Assert.AreEqual("true", Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A.IsNullOrUndefined$2(item22, ""), "Bridge655 IsNullOrUndefined22 true");
                    Bridge.Test.NUnit.Assert.AreEqual(22, item22(19, "two"), "Bridge655 item22");

                    var item32 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge655.f5;
                    Bridge.Test.NUnit.Assert.AreEqual("false", Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A.IsNullOrUndefined$2(item32, "32"), "Bridge655 IsNullOrUndefined32 false");
                    Bridge.Test.NUnit.Assert.AreEqual("true", Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A.IsNullOrUndefined$2(item32, ""), "Bridge655 IsNullOrUndefined32 true");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge655", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge655, {
        f1: function () {
            return Bridge.box(11, System.Int32);
        },
        f2: function (i) {
            return i;
        },
        f3: function () {
            return Bridge.box(21, System.Int32);
        },
        f4: function (i, s) {
            return ((i + s.length) | 0);
        },
        f5: function (i, s) {
            var b = i === s.length;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge655A", {
        statics: {
            methods: {
                IsNullOrUndefined: function (subject) {
                    return Bridge.referenceEquals(subject, undefined) || subject == null;
                },
                IsNullOrUndefined$1: function (subject, i) {
                    return Bridge.referenceEquals(subject, undefined) || subject == null || i === 0;
                },
                IsNullOrUndefined$2: function (subject, s) {
                    if (Bridge.referenceEquals(subject, undefined) || subject == null || System.String.isNullOrEmpty(s)) {
                        return "true";
                    }

                    return "false";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge658", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var d = new Bridge634D();
                    var d1 = new Bridge634D.Nested();

                    Bridge.Test.NUnit.Assert.AreEqual("Bridge634D", Bridge.Reflection.getTypeFullName(Bridge.getType(d)), "Bridge634 D d");
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge634D+Nested", Bridge.Reflection.getTypeFullName(Bridge.getType(d1)), "Bridge634 D d1");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge660", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Message", Bridge.ClientTest.Batch3.BridgeIssues.Bridge660MessageStore._initialEditState.Content.Text, "Bridge660 Initialize static members before first access to the class");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge660MessageEditState", {
        props: {
            Content: null
        },
        ctors: {
            ctor: function (content) {
                this.$initialize();
                this.Content = content;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge660MessageStore", {
        statics: {
            fields: {
                _initialEditState: null
            },
            ctors: {
                init: function () {
                    this._initialEditState = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge660MessageEditState(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge660TextInputState.ctor("Message"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1", function (T) { return {
        $kind: "struct",
        statics: {
            fields: {
                _missing: null
            },
            props: {
                Missing: {
                    get: function () {
                        return Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1(T)._missing.$clone();
                    }
                }
            },
            ctors: {
                init: function () {
                    this._missing = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1(T))();
                    this._missing = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1(T)).$ctor2(Bridge.getDefaultValue(T), false);
                }
            },
            methods: {
                getDefaultValue: function () { return new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1(T))(); }
            }
        },
        fields: {
            value: Bridge.getDefaultValue(T),
            isDefined: false
        },
        props: {
            IsDefined: {
                get: function () {
                    return this.isDefined;
                }
            }
        },
        ctors: {
            $ctor1: function (value) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1(T).$ctor2.call(this, value, value != null);
            },
            $ctor2: function (value, isDefined) {
                this.$initialize();
                this.isDefined = (value != null);
                this.value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([6182311598, this.value, this.isDefined]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1(T))) {
                    return false;
                }
                return Bridge.equals(this.value, o.value) && Bridge.equals(this.isDefined, o.isDefined);
            },
            $clone: function (to) {
                var s = to || new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1(T))();
                s.value = this.value;
                s.isDefined = this.isDefined;
                return s;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge660TextInputState", {
        props: {
            Text: null
        },
        ctors: {
            ctor: function (text) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge660TextInputState.$ctor1.call(this, text, Bridge.ClientTest.Batch3.BridgeIssues.Bridge660Optional$1(System.String).Missing);
            },
            $ctor1: function (text, validationError) {
                this.$initialize();
                this.Text = text;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge661", {
        statics: {
            methods: {
                Example1: function (exampleInput) {
                    if (exampleInput === void 0) { exampleInput = 0; }
                    return exampleInput === 0;
                },
                Example2: function (exampleInput) {
                    if (exampleInput === void 0) { exampleInput = 49; }
                    return exampleInput === 49;
                },
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge661.Example1(), "Bridge661 Example1 true default");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge661.Example1(0), "Bridge661 Example1 true");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge661.Example1(65), "Bridge661 Example1 false");

                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge661.Example2(), "Bridge661 Example2 true default");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge661.Example2(49), "Bridge661 Example2 true");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge661.Example2(0), "Bridge661 Example2 false");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge664", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var f = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge664.f1;
                    // if cast will be emitted then exception will be thrown because Bridge664A is not emitted
                    Bridge.Test.NUnit.Assert.AreEqual("test", f("test"), "Bridge664");

                    Bridge.Test.NUnit.Assert.Throws$1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge664.f2, "Bridge664 Should throw exception");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge664", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge664, {
        f1: function (s) {
            return s;
        },
        f2: function () {
            var b = { };
            var s = Bridge.cast(b, Bridge.ClientTest.Batch3.BridgeIssues.Bridge664B);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge666", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(360, Bridge.ClientTest.Batch3.BridgeIssues.Bridge666.GetSum(), "Bridge666 GetSum 360");
                },
                GetSum: function () {
                    var $t;
                    var sum = 0;
                    var numbers = System.Array.init([
                        1, 
                        2, 
                        3
                    ], System.Int32);

                    $t = Bridge.getEnumerator(numbers);
                    try {
                        while ($t.moveNext()) {
                            var n = $t.Current;
                            var func = function (i) {
                                var $t1;
                                var bigNumbers = System.Array.init([
                                    10, 
                                    20, 
                                    30
                                ], System.Int32);
                                $t1 = Bridge.getEnumerator(bigNumbers);
                                try {
                                    while ($t1.moveNext()) {
                                        var bn = $t1.Current;
                                        sum = (sum + Bridge.Int.mul(i, bn)) | 0;
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$Dispose();
                                    }
                                }
                            };

                            func(n);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return sum;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge671", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(1, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge671().Invoke());
                }
            }
        },
        fields: {
            One: 0
        },
        ctors: {
            init: function () {
                this.One = 1;
            }
        },
        methods: {
            GetOne: function () {
                return this.One;
            },
            Invoke: function () {
                var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge671A(Bridge.fn.cacheBind(this, this.GetOne));
                return b.Invoke();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge671A", {
        fields: {
            func: null
        },
        ctors: {
            ctor: function (func) {
                this.$initialize();
                this.func = func;
            }
        },
        methods: {
            Invoke: function () {
                return this.func();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge674", {
        statics: {
            methods: {
                TestUndefinedToReferenceType: function () {
                    // Undefined is considerd as null by default
                    // In .Net the code below produces null and does not fail. Changing the test to reflect this
                    var o = undefined;

                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(undefined), Bridge.cast(o, System.String), "Cast 'undefined' to string results in undefined");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(undefined), Bridge.cast(o, System.Array.type(System.Int32)), "Cast 'undefined' to int[] results in undefined");
                },
                TestUndefinedToValueType: function () {
                    var o = undefined;
                    Bridge.Test.NUnit.Assert.Throws$1(function () {
                        var i = System.Nullable.getValue(Bridge.cast(Bridge.unbox(o, System.Int32), System.Int32));
                    }, "Unable to cast 'undefined' to type int");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge675", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var me = Bridge.global.Bridge.ClientTest.Batch3.BridgeIssues.Bridge675;
                    me.id = "str1";
                    me.i1 = 1;
                    me.i2 = 2;

                    Bridge.Test.NUnit.Assert.AreEqual("str1", me.DynMethod(me.id), "Bridge675 DynMethod");
                    Bridge.Test.NUnit.Assert.AreEqual("str1", Bridge.ClientTest.Batch3.BridgeIssues.Bridge675.Method1$1(me.id), "Bridge675 Method1 id");
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge675.Method1(me.i1, me.i2), "Bridge675 Method1 i1 i2");
                },
                DynMethod: function (s) {
                    return s;
                },
                Method1$1: function (s) {
                    return s;
                },
                Method1: function (i1, i2) {
                    return ((i1 + i2) | 0);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge687", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge687A(null);
                    var case1 = false;
                    if (c == null) {
                        case1 = true;
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(false, case1, "Bridge687 case1");

                    c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge687A("test");
                    var case2 = false;
                    if (Bridge.referenceEquals(Bridge.ClientTest.Batch3.BridgeIssues.Bridge687A.op_Implicit(c), "test")) {
                        case2 = true;
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(true, case2, "Bridge687 case2");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge687A", {
        statics: {
            methods: {
                op_Implicit: function (value) {
                    return value.Value;
                }
            }
        },
        props: {
            Value: null
        },
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.Value = value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge689", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var fn1 = function (value) { return parseInt(value); };
                    Bridge.Test.NUnit.Assert.AreEqual(5, fn1("5"), "Bridge689 should equals 5");

                    var fn2 = function (value) { return parseInt(value); };
                    Bridge.Test.NUnit.Assert.AreEqual(6, fn2("6"), "Bridge689 should equals 6");

                    //object a = 7;
                    //Func<object, bool> fn3 = a.BridgeEquals;
                    //Assert.AreEqual(fn3("7"), 7, "Bridge689 should equals 7");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge690", {
        statics: {
            methods: {
                TestUseCaseForInstance: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        c, 
                        r, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge690A();
                                        $task1 = c.Start();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        r = $taskResult1;

                                        Bridge.Test.NUnit.Assert.AreEqual(8, r, "Bridge690 TestUseCaseForInstance");
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestUseCaseForStatic: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        done, 
                        r, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge690B.Start();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        r = $taskResult1;

                                        Bridge.Test.NUnit.Assert.AreEqual(59, r, "Bridge690 TestUseCaseForStatic");
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge690A", {
        fields: {
            i3: 0
        },
        ctors: {
            init: function () {
                this.i3 = 3;
            }
        },
        methods: {
            AsyncSum: function (i1, i2) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(100);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(((((i1 + i2) | 0) + this.i3) | 0));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Start: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.AsyncSum(2, 3);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge690B", {
        statics: {
            fields: {
                i3: 0
            },
            ctors: {
                init: function () {
                    this.i3 = 17;
                }
            },
            methods: {
                AsyncSum: function (i1, i2) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(100);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(((((i1 + i2) | 0) + Bridge.ClientTest.Batch3.BridgeIssues.Bridge690B.i3) | 0));
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                Start: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge690B.AsyncSum(19, 23);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult($taskResult1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge691", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var pos = 0;
                    var lines = System.Array.init(["", "", "str"], System.String);
                    while (pos < lines.length) {
                        while (pos < lines.length && lines[System.Array.index(pos, lines)].length === 0) {
                            pos = (pos + 1) | 0;
                        }

                        if (!(pos < lines.length)) {
                            break;
                        }

                        var a = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge691.f1;

                        if (pos > 0) {
                            break;
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(2, pos, "Bridge691");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge691", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge691, {
        f1: function (p) { }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge692", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.A();
                    Bridge.Test.NUnit.Assert.AreEqual(a, a, "Bridge692 A");

                    var b1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B1.ctor();
                    Bridge.Test.NUnit.Assert.AreEqual(b1, b1, "Bridge692 B1");

                    var b2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B1.ctor();
                    Bridge.Test.NUnit.Assert.AreEqual(b2, b2, "Bridge692 B2");

                    var b3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B3();
                    Bridge.Test.NUnit.Assert.AreEqual(b3, b3, "Bridge692 B3");

                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C1.ctor();
                    Bridge.Test.NUnit.Assert.AreNotStrictEqual(c1.$clone(), c1.$clone(), "Bridge692 C1");

                    var c2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C2.ctor();
                    Bridge.Test.NUnit.Assert.AreNotStrictEqual(c2.$clone(), c2.$clone(), "Bridge692 C2");

                    var c3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C3();
                    Bridge.Test.NUnit.Assert.AreNotStrictEqual(c3.$clone(), c3.$clone(), "Bridge692 C3");

                    var c3_1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C3();
                    Bridge.Test.NUnit.Assert.AreNotStrictEqual(System.Nullable.lift1("$clone", c3_1), System.Nullable.lift1("$clone", c3_1), "Bridge692 C3_1");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.A", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.A(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B1", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B1(); }
            }
        },
        fields: {
            field1: 0
        },
        ctors: {
            $ctor1: function (f) {
                this.$initialize();
                this.field1 = f;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([12610, this.field1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B1)) {
                    return false;
                }
                return Bridge.equals(this.field1, o.field1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B1();
                s.field1 = this.field1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B2", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B2(); }
            }
        },
        fields: {
            field1: 0
        },
        props: {
            Prop1: {
                get: function () {
                    return this.field1;
                }
            }
        },
        ctors: {
            $ctor1: function (f) {
                this.$initialize();
                this.field1 = f;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([12866, this.field1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B2)) {
                    return false;
                }
                return Bridge.equals(this.field1, o.field1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B2();
                s.field1 = this.field1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B3", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.B3(); }
            }
        },
        props: {
            Prop1: {
                get: function () {
                    return 0;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C1", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C1(); }
            }
        },
        fields: {
            field1: 0
        },
        props: {
            Prop1: {
                get: function () {
                    return this.field1;
                }
            }
        },
        ctors: {
            $ctor1: function (i) {
                this.$initialize();
                this.field1 = i;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([12611, this.field1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C1)) {
                    return false;
                }
                return Bridge.equals(this.field1, o.field1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C1();
                s.field1 = this.field1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C2", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C2(); }
            }
        },
        fields: {
            field1: 0
        },
        props: {
            Prop1: {
                get: function () {
                    return this.field1;
                },
                set: function (value) { }
            }
        },
        ctors: {
            $ctor1: function (i) {
                this.$initialize();
                this.field1 = i;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([12867, this.field1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C2)) {
                    return false;
                }
                return Bridge.equals(this.field1, o.field1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C2();
                s.field1 = this.field1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C3", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C3(); }
            }
        },
        props: {
            Prop1: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([13123, this.Prop1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C3)) {
                    return false;
                }
                return Bridge.equals(this.Prop1, o.Prop1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge692.C3();
                s.Prop1 = this.Prop1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge693", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge693B();
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, c, "Bridge693 not null");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge693A$1", function (T) { return {
        ctors: {
            ctor: function (props) {
                this.$initialize();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.IBridge693D", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge694", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var fruits = System.Array.init(3, null, System.Object);
                    fruits[System.Array.index(0, fruits)] = "mango";
                    fruits[System.Array.index(1, fruits)] = "apple";
                    fruits[System.Array.index(2, fruits)] = "lemon";

                    var list = System.Linq.Enumerable.from(fruits).select(function (x) { return Bridge.cast(x, System.String); }).orderBy($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge694.f1).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge694.f1).toList(System.String);
                    Bridge.Test.NUnit.Assert.AreEqual("apple", list.getItem(0), "Bridge694 apple");
                    Bridge.Test.NUnit.Assert.AreEqual("lemon", list.getItem(1), "Bridge694 lemon");
                    Bridge.Test.NUnit.Assert.AreEqual("mango", list.getItem(2), "Bridge694 mango");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge694", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge694, {
        f1: function (fruit) {
            return fruit;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge696", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var namedCallbacks = new (System.Collections.Generic.Dictionary$2(System.String,Function)).ctor();
                    namedCallbacks.add("Shout", $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge696.f1);
                    namedCallbacks.add("Whisper", $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge696.f1);

                    Bridge.Test.NUnit.Assert.AreEqual(6, namedCallbacks.getItem("Shout")("HELLO!"), "Bridge696 HELLO!");
                    Bridge.Test.NUnit.Assert.AreEqual(5, namedCallbacks.getItem("Whisper")("HELLO"), "Bridge696 HELLO");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge696", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge696, {
        f1: function (message) {
            return message.length;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge699", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var blob1 = new Blob(System.Array.init(["blobData1"], Object), { type: "text/richtext", endings: "transparent" });

                    Bridge.Test.NUnit.Assert.AreNotEqual(null, blob1, "blob1 is not null");
                    Bridge.Test.NUnit.Assert.AreEqual(9, blob1.size, "blob1.Size equals 9");
                    Bridge.Test.NUnit.Assert.AreEqual("text/richtext", blob1.type, "blob1.Type equals 'text/richtext'");

                    var blob2 = new Blob(System.Array.init(["data2"], Object));
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, blob2, "blob2 is not null");
                    Bridge.Test.NUnit.Assert.AreEqual(5, blob2.size, "blob2.Size equals 5");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge706", {
        statics: {
            fields: {
                Value: null
            },
            ctors: {
                init: function () {
                    this.Value = Bridge.box(7, System.Int32);
                }
            },
            methods: {
                TestFieldPropertyWithInitializer: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(7, Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge706.Value));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge708", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(12, Bridge.ClientTest.Batch3.BridgeIssues.Bridge708.TestIssue(), "Bridge708 TestIssue");
                },
                TestIssue: function () {
                    var sum = 0;
                    var f = function () {
                        var $t;
                        $t = Bridge.getEnumerator(System.Array.init([1, 2, 3], System.Int32));
                        try {
                            while ($t.moveNext()) {
                                var n = $t.Current;
                                var g = function (i) {
                                    sum = (sum + i) | 0;
                                };
                                g(n);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        var h = function () {
                            sum = Bridge.Int.mul(sum, 2);
                        };
                        h();
                    };

                    f();

                    return sum;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge721", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var testList = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge721.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    Bridge.Test.NUnit.Assert.AreEqual("ThirdLoop", Bridge.ClientTest.Batch3.BridgeIssues.Bridge721.Check(testList), "Bridge721 ThirdLoop");

                    testList = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge721.f2(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    Bridge.Test.NUnit.Assert.AreEqual("SecondLoop", Bridge.ClientTest.Batch3.BridgeIssues.Bridge721.Check(testList), "Bridge721 SecondLoop");

                    testList = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge721.f3(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    Bridge.Test.NUnit.Assert.AreEqual("FirstLoop", Bridge.ClientTest.Batch3.BridgeIssues.Bridge721.Check(testList), "Bridge721 FirstLoop");

                    testList = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge721.f4(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    Bridge.Test.NUnit.Assert.AreEqual("NoLoops", Bridge.ClientTest.Batch3.BridgeIssues.Bridge721.Check(testList), "Bridge721 NoLoops");
                },
                Check: function (testList) {
                    var i = 0;
                    while (i < 20) {
                        while (i < 10) {
                            while (i < 5) {
                                if (System.Linq.Enumerable.from(testList, System.Int32).any(function (x) {
                                        return x === i;
                                    })) {
                                    return "ThirdLoop";
                                }
                                i = (i + 1) | 0;
                            }

                            if (System.Linq.Enumerable.from(testList, System.Int32).any(function (x) {
                                    return x === i;
                                })) {
                                return "SecondLoop";
                            }
                            i = (i + 1) | 0;
                        }

                        if (System.Linq.Enumerable.from(testList, System.Int32).any(function (x) {
                                return x === i;
                            })) {
                            return "FirstLoop";
                        }
                        i = (i + 1) | 0;
                    }

                    return "NoLoops";
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge721", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge721, {
        f1: function (_o1) {
            _o1.add(3);
            return _o1;
        },
        f2: function (_o2) {
            _o2.add(5);
            return _o2;
        },
        f3: function (_o3) {
            _o3.add(15);
            return _o3;
        },
        f4: function (_o4) {
            _o4.add(25);
            return _o4;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge722", {
        statics: {
            methods: {
                M1: function (i) {
                    return i;
                },
                TestUseCase: function () {
                    var $t;
                    var c1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge722();
                    var asset1 = 1;
                    asset1 = (c1.setItem("path", 2), 2);

                    Bridge.Test.NUnit.Assert.AreEqual(2, asset1, "Bridge722 asset1");
                    Bridge.Test.NUnit.Assert.AreEqual(3, Bridge.ClientTest.Batch3.BridgeIssues.Bridge722.M1((c1.setItem("path", 3), 3)), "Bridge722 M1 3");
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge722.M1((asset1 = (c1.setItem("path", 4), 4))), "Bridge722 M1 4");

                    var c2 = new $asm.$AnonymousType$14();
                    var asset2 = (c2.path = Bridge.box(5, System.Int32), Bridge.box(5, System.Int32));
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.unbox(asset2), "Bridge722 asset2");
                    Bridge.Test.NUnit.Assert.AreEqual(5, Bridge.unbox(c2.path), "Bridge722 c2");

                    var c3 = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32)).ctor();
                    var asset3 = (c3.setItem("path", 6), 6);
                    Bridge.Test.NUnit.Assert.AreEqual(6, asset3, "Bridge722 asset3");
                    Bridge.Test.NUnit.Assert.AreEqual(6, c3.getItem("path"), "Bridge722 c3");

                    var data4 = System.Array.init([
                        System.Decimal(1.0), 
                        System.Decimal(2.0), 
                        System.Decimal(3.0), 
                        System.Decimal(4.0), 
                        System.Decimal(7.0)
                    ], System.Decimal);
                    var c4 = new (System.Collections.Generic.Dictionary$2(System.String,System.Decimal)).ctor();
                    var asset4 = ($t = System.Linq.Enumerable.from(data4, System.Decimal).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge722.f1).last(), c4.setItem("path", $t), $t);
                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Decimal(7.0), asset4, "Bridge722 asset4");
                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Decimal(7.0), c4.getItem("path"), "Bridge722 c4");
                }
            }
        },
        fields: {
            lastItem: 0
        },
        methods: {
            getItem: function (item) {
                return this.lastItem;
            },
            setItem: function (item, value) {
                this.lastItem = value;
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge722", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge722, {
        f1: function (x) {
            return x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge726", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var $t;
                    var b = true;
                    var t = System.Array.init([1, 2, 3], System.Int32);

                    var sum = 0;
                    if (b) {
                        $t = Bridge.getEnumerator(t);
                        try {
                            while ($t.moveNext()) {
                                var i = $t.Current;
                                sum = (sum + i) | 0;
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(6, sum, "Bridge726");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge732", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var decimalValue = System.Decimal(5.0);
                    var assign = false;
                    var test = assign ? decimalValue : System.Decimal(2);
                    var test2 = test.mul(decimalValue);

                    Bridge.Test.NUnit.Assert.True(test2.equalsT(System.Decimal(10)), "Bridge732");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge733", {
        statics: {
            fields: {
                dateb: null
            },
            props: {
                DateA: null
            },
            ctors: {
                init: function () {
                    this.dateb = System.DateTime.getDefaultValue();
                    this.DateA = System.DateTime.getDefaultValue();
                }
            },
            methods: {
                TestUseCase: function () {
                    // These objects will never be equal, fails in .NET native too.
                    // MinValue returns a UTC instance.
                    // DateA and dateb return Local (or Unspecified) instances.
                    // Change to compare to new Date() instead of MinValue

                    // Assert.True(DateA.ToString("O") == DateTime.MinValue.ToString("O"), "Bridge733 DateA");
                    // Assert.True(dateb.ToString("O") == DateTime.MinValue.ToString("O"), "Bridge733 dateb");

                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(System.DateTime.format(Bridge.ClientTest.Batch3.BridgeIssues.Bridge733.DateA, "O"), System.DateTime.format(System.DateTime.getDefaultValue(), "O")), "Bridge733 DateA");
                    Bridge.Test.NUnit.Assert.True(Bridge.referenceEquals(System.DateTime.format(Bridge.ClientTest.Batch3.BridgeIssues.Bridge733.dateb, "O"), System.DateTime.format(System.DateTime.getDefaultValue(), "O")), "Bridge733 dateb");

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge733.dateb = System.DateTime.getNow(); // to prevent warning that dateb is never assigned
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge743", {
        statics: {
            methods: {
                TestInlineMethodsAsReference: function () {
                    var aaa = Bridge.box(7, System.Int32);
                    var fn1 = function (b) { return Bridge.equals(aaa, b); };
                    Bridge.Test.NUnit.Assert.True(fn1(Bridge.box(7, System.Int32)));

                    fn1 = function (b) { return Bridge.equals(aaa, b); };
                    Bridge.Test.NUnit.Assert.True(fn1(Bridge.box(7, System.Int32)));

                    var fn2 = function (a, b) { return Bridge.equals(a, b); };
                    Bridge.Test.NUnit.Assert.True(fn2(aaa, Bridge.box(7, System.Int32)));

                    fn2 = function (a, b) { return Bridge.equals(a, b); };
                    Bridge.Test.NUnit.Assert.True(fn2(aaa, Bridge.box(7, System.Int32)));

                    var list = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge743.f1(new (System.Collections.Generic.List$1(System.String)).ctor());
                    var converted = Bridge.ClientTest.Batch3.BridgeIssues.Bridge743ObjectExtention.ConvertAllItems(System.String, System.Int32, list, function (s) { return System.Int32.parse(s); });
                    Bridge.Test.NUnit.Assert.AreEqual(converted.getItem(0), 1);
                    Bridge.Test.NUnit.Assert.AreEqual(converted.getItem(1), 2);
                    Bridge.Test.NUnit.Assert.AreEqual(converted.getItem(2), 3);

                    Bridge.Test.NUnit.Assert.Throws$4($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge743.f3, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge743.f4);

                    var action1 = function (str1, str2) { return str1 + ' ' + str2; };
                    Bridge.Test.NUnit.Assert.AreEqual(action1("Hello", "world!"), "Hello world!");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge743", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge743, {
        f1: function (_o1) {
            _o1.add("1");
            _o1.add("2");
            _o1.add("3");
            return _o1;
        },
        f2: function (_o2) {
            _o2.add("2147483648");
            return _o2;
        },
        f3: function () {
            var list1 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge743.f2(new (System.Collections.Generic.List$1(System.String)).ctor());
            var converted1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge743ObjectExtention.ConvertAllItems(System.String, System.Int32, list1, function (s) { return System.Int32.parse(s); });
        },
        f4: function (e) {
            return Bridge.is(e, System.OverflowException);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge743ObjectExtention", {
        statics: {
            methods: {
                ConvertAllItems: function (T, T2, value, $function) {
                    var $t;
                    var result = new (System.Collections.Generic.List$1(T2)).ctor();
                    $t = Bridge.getEnumerator(value, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            result.add($function(item));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return result;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge751", {
        statics: {
            methods: {
                TestUseCase: function () {
                    for (var i = 0; i < 5; i = (i + 1) | 0) {
                        var el = i;
                    }

                    var values = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge751.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    var v1 = System.Linq.Enumerable.from(values, System.Int32).count($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge751.f2);

                    Bridge.Test.NUnit.Assert.AreEqual(1, v1, "Bridge751");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge751", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge751, {
        f1: function (_o1) {
            _o1.add(1);
            _o1.add(2);
            return _o1;
        },
        f2: function (el1) {
            return el1 === 1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge758", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var list = new (System.Collections.Generic.List$1(System.DateTime)).ctor();
                    list.add(System.DateTime.create(2015, 1, 2));
                    list.add(System.DateTime.create(2015, 1, 1));
                    list.add(System.DateTime.create(2015, 1, 3));

                    list.Sort();
                    Bridge.Test.NUnit.Assert.True(Bridge.equals(list.getItem(0), System.DateTime.create(2015, 1, 1)), "Bridge758 2015/1/1");
                    Bridge.Test.NUnit.Assert.True(Bridge.equals(list.getItem(1), System.DateTime.create(2015, 1, 2)), "Bridge758 2015/1/2");
                    Bridge.Test.NUnit.Assert.True(Bridge.equals(list.getItem(2), System.DateTime.create(2015, 1, 3)), "Bridge758 2015/1/3");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge760", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var $t;
                    var a = null;
                    var b = 10;

                    var c = ($t = b, $t != null ? $t : Bridge.ClientTest.Batch3.BridgeIssues.Bridge760.DoSomething(a));
                    Bridge.Test.NUnit.Assert.AreEqual(10, c, "Bridge760");
                },
                DoSomething: function (test) {
                    return System.Nullable.getValue(test);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge762", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var test1 = null;
                    var test2 = null;
                    var test3 = null;

                    var value1 = System.Nullable.getValueOrDefault(test1, 0);
                    var value2 = System.Nullable.getValueOrDefault(test2, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge762A());
                    var value3 = System.Nullable.getValueOrDefault(test3, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge762B()).$clone();

                    Bridge.Test.NUnit.Assert.AreEqual(0, value1, "Bridge762 int");
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, value2, "Bridge762A struct");
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, value3.$clone(), "Bridge762B struct");
                    Bridge.Test.NUnit.Assert.AreEqual(0, value3.Data, "Bridge762B.Data struct");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge762A", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge762A(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge762B", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge762B(); }
            }
        },
        props: {
            Data: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([2594249179, this.Data]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge762B)) {
                    return false;
                }
                return Bridge.equals(this.Data, o.Data);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge762B();
                s.Data = this.Data;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge772", {
        statics: {
            methods: {
                TestUseCase: function () {
                    //These arrays depend on "useTypedArray" bridge.json option
                    var byteArray = System.Array.init(1, 0, System.Byte);
                    var sbyteArray = System.Array.init(2, 0, System.SByte);
                    var shortArray = System.Array.init(3, 0, System.Int16);
                    var ushortArray = System.Array.init(4, 0, System.UInt16);
                    var intArray = System.Array.init(5, 0, System.Int32);
                    var uintArray = System.Array.init(6, 0, System.UInt32);
                    var floatArray = System.Array.init(7, 0, System.Single);
                    var doubleArray = System.Array.init(8, 0, System.Double);

                    //These arrays do not depend on "useTypedArray" bridge.json option
                    var stringArray = System.Array.init(9, null, System.String);
                    var decimalArray = System.Array.init(10, System.Decimal(0.0), System.Decimal);

                    byteArray[System.Array.index(0, byteArray)] = 1;
                    sbyteArray[System.Array.index(0, sbyteArray)] = 2;
                    shortArray[System.Array.index(0, shortArray)] = 3;
                    ushortArray[System.Array.index(0, ushortArray)] = 4;
                    intArray[System.Array.index(0, intArray)] = 5;
                    uintArray[System.Array.index(0, uintArray)] = 6;
                    floatArray[System.Array.index(0, floatArray)] = 7;
                    doubleArray[System.Array.index(0, doubleArray)] = 8;

                    stringArray[System.Array.index(0, stringArray)] = "9";
                    decimalArray[System.Array.index(0, decimalArray)] = System.Decimal(10.0);

                    Bridge.Test.NUnit.Assert.AreEqual(1, byteArray[System.Array.index(0, byteArray)], "get byteArray[0]");
                    Bridge.Test.NUnit.Assert.AreEqual(2, sbyteArray[System.Array.index(0, sbyteArray)], "get sbyteArray[0]");
                    Bridge.Test.NUnit.Assert.AreEqual(3, shortArray[System.Array.index(0, shortArray)], "get shortArray[0]");
                    Bridge.Test.NUnit.Assert.AreEqual(4, ushortArray[System.Array.index(0, ushortArray)], "get ushortArray[0]");
                    Bridge.Test.NUnit.Assert.AreEqual(5, intArray[System.Array.index(0, intArray)], "get intArray[0]");
                    Bridge.Test.NUnit.Assert.AreEqual(6, uintArray[System.Array.index(0, uintArray)], "get uintArray[0]");
                    Bridge.Test.NUnit.Assert.AreEqual(7, floatArray[System.Array.index(0, floatArray)], "get floatArray[0]");
                    Bridge.Test.NUnit.Assert.AreEqual(8, doubleArray[System.Array.index(0, doubleArray)], "get doubleArray[0]");

                    Bridge.Test.NUnit.Assert.AreEqual("9", stringArray[System.Array.index(0, stringArray)], "get stringArray[0]");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(10.0), decimalArray[System.Array.index(0, decimalArray)], "get decimalArray[0]");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge777", {
        statics: {
            props: {
                SomeProperty: null,
                P1: null,
                P2: null
            },
            methods: {
                Method: function (o) {
                    return null;
                },
                TestUseCase: function () {
                    var $t;
                    var o = new $asm.$AnonymousType$14();
                    o;
                    {
                        var i = 555;
                        Bridge.Test.NUnit.Assert.AreEqual(555, i, "Bridge777 i");
                    }

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge777.Method((Bridge.ClientTest.Batch3.BridgeIssues.Bridge777.SomeProperty = o, o));
                    {
                        Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge777.SomeProperty), "Bridge777 SomeProperty");
                    }

                    ($t = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge777.P2 = o, o), Bridge.ClientTest.Batch3.BridgeIssues.Bridge777.P1 = $t, $t);
                    {
                        Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge777.P1), "Bridge777 P1");
                        Bridge.Test.NUnit.Assert.NotNull(Bridge.unbox(Bridge.ClientTest.Batch3.BridgeIssues.Bridge777.P2), "Bridge777 P2");
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge782", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var o = new $asm.$AnonymousType$14();
                    Bridge.Test.NUnit.Assert.True(o.__foo == null, "Bridge782");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge785", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var $t;
                    {
                        var i = 1;
                        var j = i;
                        Bridge.Test.NUnit.Assert.AreEqual(1, j, "Bridge785 by name");
                    }
                    {
                        var i1 = 2;
                        var j1 = i1;
                        Bridge.Test.NUnit.Assert.AreEqual(2, j1, "Bridge785 by index");
                    }
                    {
                        var i2 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataClass(), $t.Value = 3, $t);
                        var j2 = i2.Value;
                        Bridge.Test.NUnit.Assert.AreEqual(3, j2, "Bridge785 by index for DataClass property");
                    }
                    {
                        var i3 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataClass(), $t.Value = 4, $t);
                        var j3 = i3;
                        Bridge.Test.NUnit.Assert.AreEqual(i3, j3, "Bridge785 by index for DataClass");
                    }
                    {
                        var i4 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataClass(), $t.Value = 5, $t);
                        var j4 = i4.GetSomething(55).Value;
                        Bridge.Test.NUnit.Assert.AreEqual(55, j4, "Bridge785 by index for DataClass method");
                    }
                    {
                        var i5 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataStruct(), $t.Value = 6, $t);
                        var j5 = i5.Value;
                        Bridge.Test.NUnit.Assert.AreEqual(6, j5, "Bridge785 by index for DataStruct property");
                    }
                    {
                        var i6 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataStruct(), $t.Value = 7, $t);
                        var j6 = i6.GetSomething(77).Value;
                        Bridge.Test.NUnit.Assert.AreEqual(77, j6, "Bridge785 by index for DataStruct method");
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataClass", {
        $kind: "nested class",
        props: {
            Value: 0
        },
        methods: {
            GetSomething: function (i) {
                var $t;
                return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataClass(), $t.Value = i, $t);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataStruct", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataStruct(); }
            }
        },
        props: {
            Value: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            GetSomething: function (i) {
                var $t;
                return ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataStruct(), $t.Value = i, $t);
            },
            getHashCode: function () {
                var h = Bridge.addHash([3605481978, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataStruct)) {
                    return false;
                }
                return Bridge.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge785.DataStruct();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge786", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("true", Bridge.ClientTest.Batch3.BridgeIssues.Bridge786.Get(true), "Bridge786 true");
                    Bridge.Test.NUnit.Assert.AreEqual("false", Bridge.ClientTest.Batch3.BridgeIssues.Bridge786.Get(false), "Bridge786 false");
                },
                Get: function ($throws) {
                    return $throws ? "true" : "false";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge788", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.True(Bridge.Validation.url("http://127.0.0.1"));
                    Bridge.Test.NUnit.Assert.False(Bridge.Validation.url("http://127.0.1"));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge789", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge789.Method1());
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge789.Method2().$clone());
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge789.Method2().field1);
                },
                Method1: function (dt) {
                    if (dt === void 0) { dt = System.DateTime.getDefaultValue(); }
                    return dt;
                },
                Method2: function (s) {
                    if (s === void 0) { s = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge789A(); }
                    return s.$clone();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge789A", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge789A(); }
            }
        },
        fields: {
            field1: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([2627803362, this.field1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge789A)) {
                    return false;
                }
                return Bridge.equals(this.field1, o.field1);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge789A();
                s.field1 = this.field1;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge793", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var js = new (System.Collections.Generic.List$1(System.String)).ctor();
                    js.add("1");
                    var test = new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.String))(js);

                    Bridge.Test.NUnit.Assert.AreEqual(1, test.Count, "Bridge793 Count");
                    Bridge.Test.NUnit.Assert.AreEqual("1", test.getItem(0), "Bridge793 [0]");

                    var ilist = Bridge.cast(test, System.Collections.Generic.IList$1(System.String));

                    Bridge.Test.NUnit.Assert.Throws$1(function () {
                        System.Array.setItem(ilist, 0, "0", System.String);
                    }, "Bridge793 Setter should throw an exception");
                    Bridge.Test.NUnit.Assert.Throws$1(function () {
                        System.Array.add(ilist, "1", System.String);
                    }, "Bridge793 Add should throw an exception");
                    Bridge.Test.NUnit.Assert.Throws$1(function () {
                        System.Array.removeAt(ilist, 0, System.String);
                    }, "Bridge793 RemoveAt should throw an exception");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge795", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var wrappedValue = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A.$ctor1(1);
                    var wrappedValueIsNull = (System.Nullable.lifteq(Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A.op_Equality, wrappedValue.$clone(), null));

                    Bridge.Test.NUnit.Assert.AreEqual(false, wrappedValueIsNull, "Bridge795");
                },
                TestRelated: function () {
                    var v1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.$ctor1(1);
                    var v2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.$ctor1(2);
                    var v3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.$ctor1(1);

                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_Equality(v1.$clone(), v2.$clone()), "Bridge795 lift == 12");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_Equality(v1.$clone(), v3.$clone()), "Bridge795 lift == 13");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_Inequality(v1.$clone(), v2.$clone()), "Bridge795 lift != 12");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_Inequality(v1.$clone(), v3.$clone()), "Bridge795 lift != 13");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_GreaterThanOrEqual(v1.$clone(), v2.$clone()), "Bridge795 lift >= 12");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_GreaterThanOrEqual(v2.$clone(), v1.$clone()), "Bridge795 lift >= 21");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_GreaterThanOrEqual(v1.$clone(), v3.$clone()), "Bridge795 lift >= 13");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_GreaterThan(v1.$clone(), v2.$clone()), "Bridge795 lift > 12");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_GreaterThan(v2.$clone(), v1.$clone()), "Bridge795 lift > 21");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_GreaterThan(v1.$clone(), v3.$clone()), "Bridge795 lift > 13");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_LessThanOrEqual(v1.$clone(), v2.$clone()), "Bridge795 lift <= 12");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_LessThanOrEqual(v2.$clone(), v1.$clone()), "Bridge795 lift <= 21");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_LessThanOrEqual(v1.$clone(), v3.$clone()), "Bridge795 lift <= 13");
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_LessThan(v1.$clone(), v2.$clone()), "Bridge795 lift < 12");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_LessThan(v2.$clone(), v1.$clone()), "Bridge795 lift < 21");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_LessThan(v1.$clone(), v3.$clone()), "Bridge795 lift < 13");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A", {
        $kind: "struct",
        statics: {
            methods: {
                op_Equality: function (x, y) {
                    return x.equals(y.$clone());
                },
                op_Inequality: function (x, y) {
                    return !(Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A.op_Equality(x.$clone(), y.$clone()));
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A(); }
            }
        },
        props: {
            Value: 0
        },
        ctors: {
            $ctor1: function (value) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A.ctor.call(this);
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (o) {
                if (!(Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A))) {
                    return false;
                }
                return System.Nullable.getValue(Bridge.cast(Bridge.unbox(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A), Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A)).Value === this.Value;
            },
            getHashCode: function () {
                return this.Value;
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge795A();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B", {
        $kind: "struct",
        statics: {
            methods: {
                op_Equality: function (x, y) {
                    return x.Value === y.Value;
                },
                op_Inequality: function (x, y) {
                    return !(Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.op_Equality(x.$clone(), y.$clone()));
                },
                op_GreaterThanOrEqual: function (x, y) {
                    return x.Value >= y.Value;
                },
                op_GreaterThan: function (x, y) {
                    return x.Value > y.Value;
                },
                op_LessThanOrEqual: function (x, y) {
                    return x.Value <= y.Value;
                },
                op_LessThan: function (x, y) {
                    return x.Value < y.Value;
                },
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B(); }
            }
        },
        props: {
            Value: 0
        },
        ctors: {
            $ctor1: function (value) {
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B.ctor.call(this);
                this.Value = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (o) {
                if (!(Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B))) {
                    return false;
                }

                return System.Nullable.getValue(Bridge.cast(Bridge.unbox(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B), Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B)).Value === this.Value;
            },
            getHashCode: function () {
                return this.Value;
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge795B();
                s.Value = this.Value;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge796", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var b = { v : true };

                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge796.Method1(true), "Bridge796 Method1");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge796.Method1_1(true), "Bridge796 Method1_1");
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge796.Method2(true), "Bridge796 Method2");
                    Bridge.Test.NUnit.Assert.False(Bridge.ClientTest.Batch3.BridgeIssues.Bridge796.Method3(b), "Bridge796 Method3");
                    Bridge.Test.NUnit.Assert.False(b.v, "Bridge796 Method3 b");
                },
                Method1: function ($num) {
                    return $num;
                },
                Method1_1: function ($throws) {
                    return $throws;
                },
                Method2: function ($throws) {
                    return $throws;
                },
                Method3: function ($throws) {
                    $throws.v = false;
                    return $throws.v;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge815", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.A();

                    a.Method();
                    Bridge.Test.NUnit.Assert.AreEqual(null, System.Nullable.lift1("$clone", a.Property), "Bridge815 null");

                    a.Method(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.B.$ctor1(1));
                    Bridge.Test.NUnit.Assert.True(System.Nullable.hasValue(a.Property), "Bridge815 Property.HasValue");
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Nullable.getValue(a.Property).field, "Bridge815 Property.Value.field == 1");

                    a.Method2();
                    Bridge.Test.NUnit.Assert.True(System.Nullable.hasValue(a.Property), "Bridge815 Method2 Property.HasValue");
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Nullable.getValue(a.Property).field, "Bridge815 Method2 Property.Value.field == 0");

                    a.Method2(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.B.$ctor1(2));
                    Bridge.Test.NUnit.Assert.True(System.Nullable.hasValue(a.Property), "Bridge815 Method2 Property.HasValue 2");
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Nullable.getValue(a.Property).field, "Bridge815 Method2 Property.Value.field == 2");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.A", {
        $kind: "nested class",
        props: {
            Property: null
        },
        methods: {
            Method: function (param) {
                if (param === void 0) { param = null; }
                this.Property = System.Nullable.lift1("$clone", param);
            },
            Method2: function (param) {
                if (param === void 0) { param = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.B(); }
                this.Property = param.$clone();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.B", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.B(); }
            }
        },
        fields: {
            field: 0
        },
        ctors: {
            $ctor1: function (i) {
                this.$initialize();
                this.field = i;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([66, this.field]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.B)) {
                    return false;
                }
                return Bridge.equals(this.field, o.field);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge815.B();
                s.field = this.field;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge816", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var textArea = document.createElement("textarea");
                    textArea.id = "textArea1";
                    textArea.value = "Test";

                    var root = Bridge.ClientTestHelper.HtmlHelper.FixtureElement;
                    root.appendChild(textArea);

                    var ta = document.getElementById("textArea1");
                    Bridge.Test.NUnit.Assert.AreEqual("Test", Bridge.unbox(ta.value), "Bridge816 textArea1.value");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge817", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.True((System.Char.isDigit(65) || System.Char.isLetter(65)), "Bridge817 IsLetterOrDigit");
                    Bridge.Test.NUnit.Assert.True((System.Char.isDigit(("A").charCodeAt(0)) || System.Char.isLetter(("A").charCodeAt(0))), "Bridge817 IsLetterOrDigit string");

                    Bridge.Test.NUnit.Assert.False(!(System.Char.isDigit(65) || System.Char.isLetter(65)), "Bridge817 IsLetterOrDigit !");
                    Bridge.Test.NUnit.Assert.False(!(System.Char.isDigit(("A").charCodeAt(0)) || System.Char.isLetter(("A").charCodeAt(0))), "Bridge817 IsLetterOrDigit string !");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge818", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var z = 0;
                    for (; ; ) {
                        z = (z + 1) | 0;
                        if (z === 10) {
                            break;
                        }
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(10, z, "Bridge818 z");

                    var i;
                    var j;
                    for (i = 0, j = 1; i < 10; i = (i + 1) | 0, j = (j + 1) | 0) {
                    }
                    Bridge.Test.NUnit.Assert.AreEqual(10, i, "Bridge818 i");
                    Bridge.Test.NUnit.Assert.AreEqual(11, j, "Bridge818 j");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge821", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var defaultCulture = System.Globalization.CultureInfo.getCurrentCulture();

                    try {
                        var d = System.Decimal("443534569034876.12345678901235", 14);
                        Bridge.Test.NUnit.Assert.AreEqual("443534569034876.12345678901235", d.toString());
                        Bridge.Test.NUnit.Assert.AreEqual("443534569034876,12345678901235", Bridge.Int.format(d, "G", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
                        System.Globalization.CultureInfo.setCurrentCulture(System.Globalization.CultureInfo.getCultureInfo("ru-RU"));
                        Bridge.Test.NUnit.Assert.AreEqual("443534569034876,12345678901235", d.toString());

                        System.Globalization.CultureInfo.setCurrentCulture(defaultCulture);

                        var d1 = 1.25;
                        Bridge.Test.NUnit.Assert.AreEqual("1.25", System.Double.format(d1));
                        Bridge.Test.NUnit.Assert.AreEqual("1,25", System.Double.format(d1, "G", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
                        System.Globalization.CultureInfo.setCurrentCulture(System.Globalization.CultureInfo.getCultureInfo("ru-RU"));
                        Bridge.Test.NUnit.Assert.AreEqual("1,25", System.Double.format(d1));

                        System.Globalization.CultureInfo.setCurrentCulture(defaultCulture);

                        var f = 1.25;
                        Bridge.Test.NUnit.Assert.AreEqual("1.25", System.Single.format(f));
                        Bridge.Test.NUnit.Assert.AreEqual("1,25", System.Single.format(f, "G", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
                        System.Globalization.CultureInfo.setCurrentCulture(System.Globalization.CultureInfo.getCultureInfo("ru-RU"));
                        Bridge.Test.NUnit.Assert.AreEqual("1,25", System.Single.format(f));
                    } finally {
                        System.Globalization.CultureInfo.setCurrentCulture(defaultCulture);
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge823", {
        statics: {
            methods: {
                GetTicksReturnsCorrectValue: function () {
                    var val = System.Int64([-57829376,2204230]);

                    var ticks = System.DateTime.getTicks(System.DateTime.create$2(val));
                    var ticksPlusOne = System.DateTime.getTicks(System.DateTime.create$2(val)).add(System.Int64(1));
                    var ticksString = Bridge.toString(System.DateTime.getTicks(System.DateTime.create$2(val)));

                    Bridge.Test.NUnit.Assert.AreDeepEqual(val, ticks, "Ticks returning correct int value");
                    Bridge.Test.NUnit.Assert.AreDeepEqual(val.add(System.Int64(1)), ticksPlusOne, "Adding to a Tick value is correct");
                    Bridge.Test.NUnit.Assert.AreDeepEqual(Bridge.toString(val), ticksString, "Ticks returning correct value if .ToString() called on int");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge826", {
        statics: {
            methods: {
                EchoDecimal: function (d) {
                    if (d === void 0) { d = System.Decimal(42.0); }
                    return d;
                },
                TestUseCase: function () {
                    var d = null;
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826.EchoDecimal(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826A.op_Implicit$1(d)).equalsT(System.Decimal(0)), "Bridge826 decimal 0");

                    d = Bridge.ClientTest.Batch3.BridgeIssues.Bridge826A.op_Implicit(System.Decimal(1));
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826.EchoDecimal(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826A.op_Implicit$1(d)).equalsT(System.Decimal(1)), "Bridge826 decimal 1");

                    var i = null;
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826.EchoDecimal(System.Decimal(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826B.op_Implicit$1(i))).equalsT(System.Decimal(0)), "Bridge826 int 0");

                    i = Bridge.ClientTest.Batch3.BridgeIssues.Bridge826B.op_Implicit(1);
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826.EchoDecimal(System.Decimal(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826B.op_Implicit$1(i))).equalsT(System.Decimal(1)), "Bridge826 int 1");

                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge826.EchoDecimal().equalsT(System.Decimal(42)), "Bridge826 42");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge826A", {
        statics: {
            methods: {
                op_Implicit: function (val) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge826A(val);
                },
                op_Implicit$1: function (val) {
                    return val != null ? val._val : System.Decimal(0);
                }
            }
        },
        fields: {
            _val: System.Decimal(0.0)
        },
        ctors: {
            ctor: function (val) {
                this.$initialize();
                this._val = val;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge826B", {
        statics: {
            methods: {
                op_Implicit: function (val) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge826B(val);
                },
                op_Implicit$1: function (val) {
                    return val != null ? val._val : 0;
                }
            }
        },
        fields: {
            _val: 0
        },
        ctors: {
            ctor: function (val) {
                this.$initialize();
                this._val = val;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge830", {
        statics: {
            methods: {
                TestMethod: function (method, throwException) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        task, 
                        exception, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (method == null) {
                                                throw new System.ArgumentNullException.$ctor1("method");
                                            }
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            task = System.Threading.Tasks.Task.fromResult(new System.Exception("Success"), System.Exception);
                                            if (throwException) {
                                                throw new System.Exception("test");
                                            }

                                            $task1 = task;
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult($taskResult1);
                                            return;
                                        }
                                        case 3: {
                                            $tcs.setResult(new System.Exception("Fail: " + (exception.Message || "")));
                                            return;
                                            $async_e = null;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    exception = $async_e;
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestUseCase: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $jumpFromFinally, 
                        done, 
                        res, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.NUnit.Assert.Async();

                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge830.TestMethod("", false);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;
                                        Bridge.Test.NUnit.Assert.AreEqual("Success", res.Message);

                                        $task2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge830.TestMethod("", true);
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        res = $taskResult2;
                                        Bridge.Test.NUnit.Assert.AreEqual("Fail: test", res.Message);

                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge835", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var arr = System.Array.create(function (){
                        return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge835.Dot();
                    }, null, Bridge.ClientTest.Batch3.BridgeIssues.Bridge835.Dot, 10, 10);
                    Bridge.Test.NUnit.Assert.AreNotEqual(null, arr, "Bridge835");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge835.Dot", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge835.Dot(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge841", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var $t;
                    var testListA = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge841.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());

                    var result = 0;
                    $t = Bridge.getEnumerator(testListA);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            var fn = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge841.f2;

                            switch (item) {
                                case 1: 
                                    result = (result + 1) | 0;
                                    break;
                                case 2: 
                                    result = (result + 2) | 0;
                                    break;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(3, result, "Bridge841");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge841", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge841, {
        f1: function (_o1) {
            _o1.add(1);
            _o1.add(2);
            return _o1;
        },
        f2: function () { }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge844", {
        statics: {
            methods: {
                NullableAndSimpleDateTimeToStringEquals: function () {
                    var dt1 = System.DateTime.getNow();
                    var dt2 = dt1;

                    Bridge.Test.NUnit.Assert.AreEqual(System.Nullable.toString(dt2, function ($t) { return System.DateTime.format($t); }), System.DateTime.format(dt1), "Bridge844");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge849", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(true, Bridge.ClientTest.Batch3.BridgeIssues.Bridge849A.SetToBlah(""), "Bridge849 true");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.ClientTest.Batch3.BridgeIssues.Bridge849A.SetToBlah("", false), "Bridge849 false");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge849A", {
        statics: {
            methods: {
                SetToBlah: function (value, blah) {
                    if (blah === void 0) { blah = true; }
                    return blah;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge857", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.True(true, "Bridge857 Bridge857A");
                    Bridge.Test.NUnit.Assert.True(true, "Bridge857 Bridge857B");
                    Bridge.Test.NUnit.Assert.AreEqual(4294967295, Bridge.ClientTest.Batch3.BridgeIssues.Bridge857C.All, "Bridge857 Bridge857C All");
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge857C.All1, "Bridge857 Bridge857C All1");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge857C.All2, "Bridge857 Bridge857C All2");
                    Bridge.Test.NUnit.Assert.True(true, "Bridge857 Bridge857D All");
                    Bridge.Test.NUnit.Assert.True(true, "Bridge857 Bridge857D All1");
                    Bridge.Test.NUnit.Assert.True(true, "Bridge857 Bridge857D All2");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge857A", {
        $kind: "enum",
        statics: {
            fields: {
                All: System.UInt64(4294967295)
            }
        },
        $utype: System.UInt64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge857B", {
        $kind: "enum",
        statics: {
            fields: {
                All: System.Int64([-1,0])
            }
        },
        $utype: System.Int64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge857C", {
        $kind: "enum",
        statics: {
            fields: {
                All1: 0,
                All2: 1,
                All: 4294967295
            }
        },
        $utype: System.UInt32
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge857D", {
        $kind: "enum",
        statics: {
            fields: {
                All1: System.UInt64(0),
                All2: System.UInt64(1),
                All: System.UInt64(4294967295)
            }
        },
        $flags: true,
        $utype: System.UInt64
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge861", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var $t;
                    var testA = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge861A(), $t.MyId = 1, $t);

                    testA.Delegates = Bridge.fn.combine(testA.Delegates, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge861.f1);

                    var testB = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge861A(), $t.MyId = 2, $t.Delegates = testA.Delegates, $t);

                    testB.Delegates = Bridge.fn.combine(testB.Delegates, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge861.f2);
                    testB.InvokeDelegates();

                    Bridge.Test.NUnit.Assert.AreEqual(0, testB.MyId);
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge861", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge861, {
        f1: function (data) {
            var $t1;
            Bridge.identity(data.MyId, (($t1 = (data.MyId + 1) | 0, data.MyId = $t1, $t1)));
        },
        f2: function (data) {
            data.MyId = 0;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge861A", {
        props: {
            MyId: 0,
            Delegates: null
        },
        methods: {
            InvokeDelegates: function () {
                if (!Bridge.staticEquals(this.Delegates, null)) {
                    this.Delegates(this);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge863", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var test = false;
                    test = !!(test | true);
                    Bridge.Test.NUnit.Assert.AreStrictEqual(true, test);

                    test = false;
                    test = !!(test & true);
                    Bridge.Test.NUnit.Assert.AreStrictEqual(false, test);

                    var test1 = false;
                    test1 = System.Nullable.or(test1, true);
                    Bridge.Test.NUnit.Assert.AreStrictEqual(true, test1);

                    test1 = false;
                    test1 = System.Nullable.and(test1, true);
                    Bridge.Test.NUnit.Assert.AreStrictEqual(false, test1);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge874", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var myValue = 1;

                    switch (myValue) {
                        case 0: 
                            myValue = 2;
                            break;
                        case 1: 
                            myValue = 3;
                            break;
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(3, myValue);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge881", {
        statics: {
            methods: {
                TestUseCase: function () {
                    var i = Bridge.ClientTest.Batch3.BridgeIssues.Bridge881A.Name;
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge881A.Name, i);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge881A", {
        $kind: "enum",
        statics: {
            fields: {
                Name: 0
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge882", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(6, Bridge.ClientTest.Batch3.BridgeIssues.Bridge882_Static.Sum, "Bridge882_Static.Sum");
                    Bridge.Test.NUnit.Assert.AreEqual(18, Bridge.ClientTest.Batch3.BridgeIssues.Bridge882_Static.Bridge882_A_Static.Sum, "Bridge882_A_Static.Sum");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge882_Static", {
        statics: {
            props: {
                Sum: 0
            },
            ctors: {
                ctor: function () {
                    var $t;
                    var a = System.Array.init([1, 2, 3], System.Int32);

                    var s = 0;
                    $t = Bridge.getEnumerator(a);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            s = (s + v) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge882_Static.Sum = s;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge882_Static.Bridge882_A_Static", {
        $kind: "nested class",
        statics: {
            props: {
                Sum: 0
            },
            ctors: {
                ctor: function () {
                    var $t;
                    var a = System.Array.init([5, 6, 7], System.Int32);

                    var s = 0;
                    $t = Bridge.getEnumerator(a);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            s = (s + v) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge882_Static.Bridge882_A_Static.Sum = s;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge883", {
        statics: {
            methods: {
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.NotNull(new Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_1(), "Bridge883_1 created");
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_3.Main1(), "Bridge883_3.Main1");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_IInterface", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_3", {
        statics: {
            methods: {
                Main1: function () {
                    var f = Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_4.field1;
                    return f;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge889", {
        statics: {
            methods: {
                Count: function (arr) {
                    if (arr === void 0) { arr = []; }
                    return arr.length;
                },
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.Count());
                },
                MakeEnumerable: function (T, arr) {
                    return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function (T, arr) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            $t,
                            x,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (arr === void 0) { arr = []; }
                                                $t = Bridge.getEnumerator(arr);
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    x = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            $enumerator.current = x;
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 4: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                TestMakeEnumerable: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.MakeEnumerable(System.Object), System.Object).count(), "MakeEnumerable object 0");
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.MakeEnumerable(System.Object, [Bridge.box(1, System.Int32), Bridge.box(2.0, System.Double, System.Double.format, System.Double.getHashCode)]), System.Object).count(), "MakeEnumerable object 2");

                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.MakeEnumerable(System.String), System.String).count(), "MakeEnumerable string 0");
                    Bridge.Test.NUnit.Assert.AreEqual(3, System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.MakeEnumerable(System.String, ["a", "b", "c"]), System.String).count(), "MakeEnumerable string 3");

                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.MakeEnumerable(System.Collections.Generic.IEnumerable$1(System.Object)), System.Collections.Generic.IEnumerable$1(System.Object)).count(), "MakeEnumerable IEnumerable<object> 0");
                    Bridge.Test.NUnit.Assert.AreEqual(1, System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.MakeEnumerable(System.Collections.Generic.IEnumerable$1(System.Object), [System.Array.init([Bridge.box(1, System.Int32), Bridge.box(2, System.Int32)], System.Object)]), System.Collections.Generic.IEnumerable$1(System.Object)).count(), "MakeEnumerable IEnumerable<object> 1");

                    Bridge.Test.NUnit.Assert.AreEqual(0, System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.MakeEnumerable(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object))), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object))).count(), "MakeEnumerable List<List<object>> 0");
                    Bridge.Test.NUnit.Assert.AreEqual(2, System.Linq.Enumerable.from(Bridge.ClientTest.Batch3.BridgeIssues.Bridge889.MakeEnumerable(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)), [new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))).ctor(), new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))).ctor()]), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))).count(), "MakeEnumerable List<List<object>> 2");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge892", {
        statics: {
            methods: {
                Test: function (format, p) {
                    if (p === void 0) { p = []; }
                    var message = System.String.format.apply(System.String, [format].concat(p));
                    return message;
                },
                TestUseCase: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("Test One Two", Bridge.ClientTest.Batch3.BridgeIssues.Bridge892.Test("Test {0} {1}", ["One", "Two"]));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge893", {
        statics: {
            methods: {
                EnumToStringWorks: function () {
                    Bridge.Test.NUnit.Assert.AreEqual("TestA1", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge893A, Bridge.ClientTest.Batch3.BridgeIssues.Bridge893A.TestA1));

                    var a = 100;
                    Bridge.Test.NUnit.Assert.AreEqual("100", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge893A, a));

                    Bridge.Test.NUnit.Assert.AreEqual("TestB3", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge893B, Bridge.ClientTest.Batch3.BridgeIssues.Bridge893B.TestB3));

                    var t = 3;
                    Bridge.Test.NUnit.Assert.AreEqual("TestB1, TestB2", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge893B, t));

                    var t1 = 6;
                    Bridge.Test.NUnit.Assert.AreEqual("TestB2, TestB3", System.Enum.toString(Bridge.ClientTest.Batch3.BridgeIssues.Bridge893B, t1));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge893A", {
        $kind: "enum",
        statics: {
            fields: {
                TestA1: 0,
                TestA2: 1
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge893B", {
        $kind: "enum",
        statics: {
            fields: {
                TestB1: 1,
                TestB2: 2,
                TestB3: 4
            }
        },
        $flags: true
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge898", {
        statics: {
            methods: {
                TestDecimalConversion: function () {
                    var check = true;
                    var test = System.Decimal(check ? 1 : 2);

                    Bridge.Test.NUnit.Assert.True(test.equalsT(System.Decimal(1)), "One True");
                    Bridge.Test.NUnit.Assert.AreEqual("System.Decimal", Bridge.Reflection.getTypeFullName(System.Decimal), "Is decimal");
                },
                TestDoubleConversion: function () {
                    var check = true;
                    var test = check ? 1 : 2;

                    Bridge.Test.NUnit.Assert.True(test === 1, "One True");
                    Bridge.Test.NUnit.Assert.AreEqual("System.Double", Bridge.Reflection.getTypeFullName(System.Double), "Is number");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge905", {
        statics: {
            methods: {
                DayOfWeekFixed: function () {
                    var dictionary = new (System.Collections.Generic.Dictionary$2(System.DayOfWeek,System.Int32)).ctor();
                    dictionary.add(System.DayOfWeek.Sunday, 1);

                    Bridge.Test.NUnit.Assert.AreEqual(1, dictionary.getItem(System.DayOfWeek.Sunday), "1");
                    Bridge.Test.NUnit.Assert.AreEqual("Saturday", System.Enum.toString(System.DayOfWeek, System.DayOfWeek.Saturday), "Saturday");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge906", {
        statics: {
            methods: {
                myfunc: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestIfAsyncMethod: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $jumpFromFinally, 
                        asyncComplete, 
                        myvar, 
                        sum, 
                        $t, 
                        d, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        asyncComplete = Bridge.Test.NUnit.Assert.Async();

                                        myvar = System.Array.init([new $asm.$AnonymousType$19(1), new $asm.$AnonymousType$19(2)], $asm.$AnonymousType$19);
                                        sum = 0;
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge906.myfunc();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $t = Bridge.getEnumerator(myvar);
                                        try {
                                            while ($t.moveNext()) {
                                                d = $t.Current;
                                                if (d.Value > 0) {
                                                    sum = (sum + d.Value) | 0;
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }

                                        $task2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge906.myfunc();
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.AreEqual(3, sum);

                                        asyncComplete();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                },
                TestIfElseAsyncMethod: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $jumpFromFinally, 
                        asyncComplete, 
                        myvar, 
                        sum, 
                        $t, 
                        d, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        asyncComplete = Bridge.Test.NUnit.Assert.Async();

                                        myvar = System.Array.init([new $asm.$AnonymousType$19(-3), new $asm.$AnonymousType$19(2)], $asm.$AnonymousType$19);
                                        sum = 0;
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge906.myfunc();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $t = Bridge.getEnumerator(myvar);
                                        try {
                                            while ($t.moveNext()) {
                                                d = $t.Current;
                                                if (d.Value > 0) {
                                                    sum = (sum + d.Value) | 0;
                                                } else {
                                                    sum = (sum - d.Value) | 0;
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }

                                        $task2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge906.myfunc();
                                        $step = 2;
                                        if ($task2.isCompleted()) continue;
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        Bridge.Test.NUnit.Assert.AreEqual(5, sum);

                                        asyncComplete();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge907", {
        statics: {
            methods: {
                TestStringSpitWithNullParameterFixed: function () {
                    var s = "Hello World!";
                    var res = System.String.split(s, null, null, 1);

                    Bridge.Test.NUnit.Assert.AreEqual(2, res.length, "Bridge907 instance Length");
                    Bridge.Test.NUnit.Assert.AreEqual("Hello", res[System.Array.index(0, res)], "Bridge907 instance [0]");
                    Bridge.Test.NUnit.Assert.AreEqual("World!", res[System.Array.index(1, res)], "Bridge907 instance [1]");

                    var s1 = "Hi Man!";
                    var res1 = System.String.split(s1, null, null, 1);

                    Bridge.Test.NUnit.Assert.AreEqual(2, res1.length, "Bridge907 static Length");
                    Bridge.Test.NUnit.Assert.AreEqual("Hi", res1[System.Array.index(0, res1)], "Bridge907 static [0]");
                    Bridge.Test.NUnit.Assert.AreEqual("Man!", res1[System.Array.index(1, res1)], "Bridge907 static [1]");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge912", {
        statics: {
            methods: {
                myfunc: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestAsyncMethodInBlock: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        asyncComplete, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        asyncComplete = Bridge.Test.NUnit.Assert.Async();
                                        result = 0;
                                        $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge912.myfunc();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        result = $taskResult1;

                                        Bridge.Test.NUnit.Assert.AreEqual(1, result);

                                        asyncComplete();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge913", {
        statics: {
            methods: {
                TestNullableDateTimeGreaterThanWorks: function () {
                    var a = System.DateTime.getNow();
                    var b = null;

                    Bridge.Test.NUnit.Assert.False(System.DateTime.gt(a, b), "Bridge913 gt");
                    Bridge.Test.NUnit.Assert.False(System.DateTime.lt(a, b), "Bridge913 lt");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge918", {
        statics: {
            methods: {
                TestDynamicAsyncResult: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        asyncComplete, 
                        a, 
                        result, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        asyncComplete = Bridge.Test.NUnit.Assert.Async();
                                        a = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge918();
                                        $task1 = a.Test();
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        result = Bridge.cast($taskResult1, System.Int32);

                                        Bridge.Test.NUnit.Assert.AreEqual(1, result);

                                        asyncComplete();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        },
        methods: {
            Test: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        if ($task1.isCompleted()) continue;
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge922", {
        statics: {
            methods: {
                TestLinqDecimal: function () {
                    var a = System.Array.init([
                        System.Decimal(1.0), 
                        System.Decimal(2.0), 
                        System.Decimal(3.0)
                    ], System.Decimal);

                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(a, System.Decimal).average(System.Decimal.Zero).equalsT(System.Decimal(2)));
                    Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(a, System.Decimal).sum(System.Decimal.Zero).equalsT(System.Decimal(6)));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge928", {
        statics: {
            methods: {
                TestAsyncMethod: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        result, 
                        $async_e, 
                        $e1, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            result = false;
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            try {
                                                throw new System.Exception("test");
                                            } catch ($e1) {
                                                $e1 = System.Exception.create($e1);
                                            }

                                            result = true;

                                            if ($jumpFromFinally > -1) {
                                                $step = $jumpFromFinally;
                                                $jumpFromFinally = null;
                                            } else if ($async_e) {
                                                throw $async_e;
                                                return;
                                            } else if (Bridge.isDefined($returnValue)) {
                                                $tcs.setResult($returnValue);
                                                return;
                                            }
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            Bridge.Test.NUnit.Assert.True(result);

                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ($step >= 1 && $step <= 2) {
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge929", {
        statics: {
            methods: {
                TestAsyncException: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        e, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge929.Test();
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            Bridge.Test.NUnit.Assert.Fail("Exception should be rethrowed in catch block");
                                            $step = 4;
                                            continue;
                                        }
                                        case 3: {
                                            Bridge.Test.NUnit.Assert.AreEqual("test", e.Message);
                                            $async_e = null;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    e = $async_e;
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                },
                Test: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $e1, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([1,2,3,4], $step);
                                    switch ($step) {

                                        case 1: {
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            throw new System.Exception("test");
                                            $step = 4;
                                            continue;
                                        }
                                        case 3: {
                                            try {
                                                throw new System.Exception("catch");
                                            } catch ($e1) {
                                                $e1 = System.Exception.create($e1);
                                            }
                                            throw $async_e;
                                            $async_e = null;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge930", {
        statics: {
            methods: {
                Test: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = System.Threading.Tasks.Task.fromResult(1, System.Int32);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            throw new System.Exception("test");
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                Test1: function () {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $task3, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        res, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5], $step);
                                    switch ($step) {
                                        case 0: {
                                            res = true;
                                            $task1 = System.Threading.Tasks.Task.delay(1);
                                            $step = 1;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $task1.getAwaitedResult();
                                            if (res) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            $task2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge930.Test();
                                            $step = 3;
                                            if ($task2.isCompleted()) continue;
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $task2.getAwaitedResult();
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            $task3 = System.Threading.Tasks.Task.delay(1);
                                            $step = 5;
                                            if ($task3.isCompleted()) continue;
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 5: {
                                            $task3.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                TestAsyncException: function () {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $returnValue, 
                        done, 
                        e, 
                        $async_e, 
                        $async_e1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            done = Bridge.Test.NUnit.Assert.Async();
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge930.Test1();
                                            $step = 2;
                                            if ($task1.isCompleted()) continue;
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            Bridge.Test.NUnit.Assert.Fail("await should throw an exception");
                                            $step = 4;
                                            continue;
                                        }
                                        case 3: {
                                            Bridge.Test.NUnit.Assert.AreEqual("test", e.Message);
                                            $async_e = null;
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            done();
                                            return;
                                        }
                                        default: {
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                if ( $step >= 1 && $step <= 2 ) {
                                    e = $async_e;
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                                throw $async_e;
                            }
                        }, arguments);

                    $asyncBody();
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge933", {
        statics: {
            fields: {
                IsRunning: false
            },
            methods: {
                TestBooleanInIfStatement: function () {
                    if (Bridge.ClientTest.Batch3.BridgeIssues.Bridge933.IsRunning) {
                        Bridge.Test.NUnit.Assert.Fail("IsRunning must be false");
                    }

                    Bridge.Test.NUnit.Assert.False(Bridge.ClientTest.Batch3.BridgeIssues.Bridge933.IsRunning);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge952", {
        statics: {
            methods: {
                TestDoubleMinValue: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(-1.7976931348623157E+308, System.Double.min, "Compare value");
                    Bridge.Test.NUnit.Assert.AreEqual("-1.79769313486232E+308", System.Double.format(System.Double.min), "Compare by ToString()");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge968", {
        statics: {
            methods: {
                TestDecimalDoesNotParseIncorrectValue: function () {
                    var d = { };
                    var b = System.Decimal.tryParse("123e", null, d);

                    Bridge.Test.NUnit.Assert.False(b);
                },
                TestDecimalParsesCorrectValues: function () {
                    var d1 = System.Decimal("123e1");
                    Bridge.Test.NUnit.Assert.True(System.Decimal(1230.0).equalsT(d1), "123e1");

                    var d2 = System.Decimal("123e+1");
                    Bridge.Test.NUnit.Assert.True(System.Decimal(1230.0).equalsT(d2), "123e+1");

                    var d3 = System.Decimal("123e-1");
                    Bridge.Test.NUnit.Assert.True(System.Decimal(12.3, 1).equalsT(d3), "123e-1");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge975", {
        statics: {
            methods: {
                TestCastToLongWorksForBigNumberInIE: function () {
                    var i = System.Int64([-1,2097151]);

                    Bridge.Test.NUnit.Assert.AreEqual("9007199254740991", Bridge.toString(i));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge989", {
        statics: {
            methods: {
                DateTimeToISOStringWorks: function () {
                    var d1 = System.DateTime.create(2011, 10, 5, 14, 48, 15, 0, 1);
                    var d2 = System.DateTime.toLocalTime(d1);
                    var d3 = System.DateTime.toUniversalTime(d2);

                    Bridge.Test.NUnit.Assert.AreEqual("2011-10-05T14:48:15.0000000Z", System.DateTime.format(d3, "O"));
                },
                DateToISOStringWorks: function () {
                    var d1 = new Date("05 October 2011 14:48 UTC");

                    Bridge.Test.NUnit.Assert.AreEqual("2011-10-05T14:48:00.000Z", d1.toISOString());
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge991", {
        statics: {
            props: {
                Prop: 0
            },
            methods: {
                TestMultiplyAssignment: function () {
                    var dict = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)).ctor();
                    var i = 0;

                    dict.setItem(0, (i = 1));
                    Bridge.Test.NUnit.Assert.AreEqual(dict.getItem(0), 1);
                    Bridge.Test.NUnit.Assert.AreEqual(i, 1);

                    i = (dict.setItem(0, 2), 2);
                    Bridge.Test.NUnit.Assert.AreEqual(dict.getItem(0), 2);
                    Bridge.Test.NUnit.Assert.AreEqual(i, 2);

                    dict.setItem(0, (Bridge.ClientTest.Batch3.BridgeIssues.Bridge991.Prop = 3, 3));
                    Bridge.Test.NUnit.Assert.AreEqual(dict.getItem(0), 3);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge991.Prop, 3);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge991.Prop = (dict.setItem(0, 4), 4);
                    Bridge.Test.NUnit.Assert.AreEqual(dict.getItem(0), 4);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge991.Prop, 4);

                    dict.setItem(0, (Bridge.ClientTest.Batch3.BridgeIssues.Bridge991.Prop = 5, 5));
                    Bridge.Test.NUnit.Assert.AreEqual(dict.getItem(0), 5);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge991.Prop, 5);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge991.Prop = (dict.setItem(0, 6), 6);
                    Bridge.Test.NUnit.Assert.AreEqual(dict.getItem(0), 6);
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge991.Prop, 6);

                    dict.setItem(0, (dict.setItem(1, 7), 7));
                    Bridge.Test.NUnit.Assert.AreEqual(dict.getItem(0), 7);
                    Bridge.Test.NUnit.Assert.AreEqual(dict.getItem(1), 7);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge997", {
        statics: {
            methods: {
                TestConvertAllForIntList: function () {
                    var l = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge997.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());

                    Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["1", "2", "3"], System.String), l.ConvertAll(System.String, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge997.f2).ToArray());
                },
                TestConvertAllForNullConverter: function () {
                    var l = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge997.f1(new (System.Collections.Generic.List$1(System.Int32)).ctor());

                    var converter = null;

                    Bridge.Test.NUnit.Assert.Throws$1(function () {
                        l.ConvertAll(System.String, converter);
                    }, "Null converter throws exception");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge997", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge997, {
        f1: function (_o1) {
            _o1.add(1);
            _o1.add(2);
            _o1.add(3);
            return _o1;
        },
        f2: function (x) {
            return Bridge.toString(x);
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge999", {
        statics: {
            methods: {
                TestNestedLambdasToLifting: function () {
                    var offset = 1;
                    var f1 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999.f2;

                    var f2 = function () {
                        return Bridge.toArray(System.Linq.Enumerable.from(System.Array.init([4, 5, 6], System.Int32), System.Int32).select(function (value) {
                                    return ((value + offset) | 0);
                                })).join(", ");
                    };

                    var f3 = function () {
                        var f4 = function () {
                            return Bridge.toArray(System.Linq.Enumerable.from(System.Array.init([7, 8, 9], System.Int32), System.Int32).select(function (value) {
                                        return ((value + offset) | 0);
                                    })).join(", ");
                        };

                        return f4();
                    };

                    var f5 = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999.f3;

                    var scope = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999;

                    Bridge.Test.NUnit.Assert.NotNull(scope.f1, "scope.f1 should exists");
                    Bridge.Test.NUnit.Assert.NotNull(scope.f2, "scope.f2 should exists");
                    Bridge.Test.NUnit.Assert.NotNull(scope.f3, "scope.f3 should exists");
                    Bridge.Test.NUnit.Assert.Null(scope.f4, "scope.f4 should be null");
                    Bridge.Test.NUnit.Assert.Null(scope.f5, "scope.f5 should be null");
                    Bridge.Test.NUnit.Assert.AreEqual(scope.f1(1), 1, "scope.f1(1) should be 1");
                    Bridge.Test.NUnit.Assert.AreEqual(scope.f2(), "1, 2, 3", "scope.f2() should be 1, 2, 3");
                    Bridge.Test.NUnit.Assert.AreEqual(scope.f3(), "6, 7, 8", "scope.f3() should be 6, 7, 8");
                    Bridge.Test.NUnit.Assert.AreEqual(f1(), "1, 2, 3", "f1() should be 1, 2, 3");
                    Bridge.Test.NUnit.Assert.AreEqual(f2(), "5, 6, 7", "f2() should be 5, 6, 7");
                    Bridge.Test.NUnit.Assert.AreEqual(f3(), "8, 9, 10", "f3() should be 8, 9, 10");
                    Bridge.Test.NUnit.Assert.AreEqual(f5(), "6, 7, 8", "f5() should be 6, 7, 8");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge999", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999, {
        f1: function (value) {
            return value;
        },
        f2: function () {
            return Bridge.toArray(System.Linq.Enumerable.from(System.Array.init([1, 2, 3], System.Int32), System.Int32).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999.f1)).join(", ");
        },
        f3: function () {
            var offset2 = 2;
            return Bridge.toArray(System.Linq.Enumerable.from(System.Array.init([4, 5, 6], System.Int32), System.Int32).select(function (value) {
                        return ((value + offset2) | 0);
                    })).join(", ");
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge999_1", {
        statics: {
            methods: {
                TestNestedLambdasToLiftingInForeach: function () {
                    var one = System.Linq.Enumerable.from(new (System.Collections.Generic.List$1(System.Int32)).$ctor1(System.Array.init([1], System.Int32)), System.Int32).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999_1.f1);

                    var sum = 0;

                    one.forEach(function (el) {
                        var list = System.Linq.Enumerable.from(new (System.Collections.Generic.List$1(System.Int32)).$ctor1(System.Array.init([3, 5], System.Int32)), System.Int32).select($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999_1.f1);

                        list.forEach(function (el2) {
                            sum = (sum + el2) | 0;
                        });
                    });

                    Bridge.Test.NUnit.Assert.AreEqual(8, sum);

                    var scope = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999_1;

                    Bridge.Test.NUnit.Assert.NotNull(scope.f1, "scope.f1 should exists");
                    Bridge.Test.NUnit.Assert.Null(scope.f2, "scope.f2 should be null");
                    Bridge.Test.NUnit.Assert.Null(scope.f3, "scope.f3 should be null");
                    Bridge.Test.NUnit.Assert.AreEqual(scope.f1(1), 1, "scope.f1(1) should be 1");
                }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge999_1", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge999_1, {
        f1: function (x) {
            return x;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Ext", {
        statics: {
            methods: {
                ForEach: function (T, self, operation) {
                    var $t;
                    $t = Bridge.getEnumerator(self, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            operation(t);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Inner1430_Level1.Constants", {
        statics: {
            fields: {
                TestConst: null
            },
            ctors: {
                init: function () {
                    this.TestConst = "Hi from inner Level1";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Inner1430_Level1.Do", {
        methods: {
            GetFour: function () {
                return 4;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Inner1430_Level1.Inner1430_Level2.Constants", {
        statics: {
            fields: {
                TestConst: null
            },
            ctors: {
                init: function () {
                    this.TestConst = "Hi from inner Level3";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Inner1430_Level1.Inner1430_Level2.Do", {
        methods: {
            GetFive: function () {
                return 5;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.ItemExtensions", {
        statics: {
            methods: {
                SetValue: function (item) {
                    return item;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.MyCultureInfoAdapter", {
        inherits: [System.Globalization.CultureInfo],
        alias: ["getFormat", "System$IFormatProvider$getFormat"],
        ctors: {
            ctor: function (name) {
                this.$initialize();
                System.Globalization.CultureInfo.ctor.call(this, name);
            }
        },
        methods: {
            getFormat: function (formatType) {
                return this.numberFormat;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.MyOtherType", {
        fields: {
            Value: 0
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.N1122", {
        statics: {
            methods: {
                TestClippingInDefaultOverflowMode: function () {
                    var x = System.Double.max;

                    var y1 = Bridge.Int.clip32(Math.floor(x / 0.2));
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-2147483648, System.Int32), Bridge.box(y1, System.Int32), "int");

                    var y2 = Bridge.Int.clipu32(Math.floor(x / 0.2));
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt32), Bridge.box(y2, System.UInt32), "uint");

                    var z1 = Bridge.Int.clip64(Math.floor(x / 0.2));
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.Int64.MinValue, z1, "long");

                    var z2 = Bridge.Int.clipu64(Math.floor(x / 0.2));
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.UInt64.MinValue, z2, "ulong");
                },
                TestIntegerDivisionInDefaultMode: function () {
                    var x = 1.1;

                    var y1 = Bridge.Int.clip32(1 / x);
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.Int32), Bridge.box(y1, System.Int32), "int");

                    var y2 = Bridge.Int.clipu32(1 / x);
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt32), Bridge.box(y2, System.UInt32), "uint");

                    var z1 = Bridge.Int.clip64(1 / x);
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.Int64(0), z1, "long");

                    var z2 = Bridge.Int.clipu64(1 / x);
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.UInt64(0), z2, "ulong");
                },
                TestInfinityCastDefaultOverflowMode: function () {
                    var pi = Number.POSITIVE_INFINITY;

                    var y1 = Bridge.Int.clipu8(pi);
                    var y2 = Bridge.Int.clip8(pi);
                    var y3 = Bridge.Int.clip16(pi);
                    var y4 = Bridge.Int.clipu16(pi);
                    var y5 = Bridge.Int.clip32(pi);
                    var y6 = Bridge.Int.clipu32(pi);
                    var y7 = Bridge.Int.clip64(pi);
                    var y8 = Bridge.Int.clipu64(pi);

                    // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                    // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.Byte), Bridge.box(y1, System.Byte), "PositiveInfinity -> byte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-128, System.SByte), Bridge.box(y2, System.SByte), "PositiveInfinity -> sbyte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-32768, System.Int16), Bridge.box(y3, System.Int16), "PositiveInfinity -> short");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt16), Bridge.box(y4, System.UInt16), "PositiveInfinity -> ushort");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-2147483648, System.Int32), Bridge.box(y5, System.Int32), "PositiveInfinity -> int");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt32), Bridge.box(y6, System.UInt32), "PositiveInfinity -> uint");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.Int64.MinValue, y7, "PositiveInfinity -> long");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.UInt64.MinValue, y8, "PositiveInfinity -> ulong");

                    var ni = Number.NEGATIVE_INFINITY;

                    var z1 = Bridge.Int.clipu8(ni);
                    var z2 = Bridge.Int.clip8(ni);
                    var z3 = Bridge.Int.clip16(ni);
                    var z4 = Bridge.Int.clipu16(ni);
                    var z5 = Bridge.Int.clip32(ni);
                    var z6 = Bridge.Int.clipu32(ni);
                    var z7 = Bridge.Int.clip64(ni);
                    var z8 = Bridge.Int.clipu64(ni);

                    // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                    // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.Byte), Bridge.box(z1, System.Byte), "NegativeInfinity -> byte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-128, System.SByte), Bridge.box(z2, System.SByte), "NegativeInfinity -> sbyte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-32768, System.Int16), Bridge.box(z3, System.Int16), "NegativeInfinity -> short");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt16), Bridge.box(z4, System.UInt16), "NegativeInfinity -> ushort");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-2147483648, System.Int32), Bridge.box(z5, System.Int32), "NegativeInfinity -> int");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt32), Bridge.box(z6, System.UInt32), "NegativeInfinity -> uint");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.Int64.MinValue, z7, "NegativeInfinity -> long");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.UInt64.MinValue, z8, "NegativeInfinity -> ulong");
                },
                TestInfinityCastWithNullable1DefaultOverflowMode: function () {
                    var pi = Number.POSITIVE_INFINITY;

                    var y1 = Bridge.Int.clipu8(pi);
                    var y2 = Bridge.Int.clip8(pi);
                    var y3 = Bridge.Int.clip16(pi);
                    var y4 = Bridge.Int.clipu16(pi);
                    var y5 = Bridge.Int.clip32(pi);
                    var y6 = Bridge.Int.clipu32(pi);
                    var y7 = Bridge.Int.clip64(pi);
                    var y8 = Bridge.Int.clipu64(pi);

                    // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                    // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.Byte), Bridge.box(y1, System.Byte, System.Nullable.toString, System.Nullable.getHashCode), "PositiveInfinity -> byte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-128, System.SByte), Bridge.box(y2, System.SByte, System.Nullable.toString, System.Nullable.getHashCode), "PositiveInfinity -> sbyte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-32768, System.Int16), Bridge.box(y3, System.Int16, System.Nullable.toString, System.Nullable.getHashCode), "PositiveInfinity -> short");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt16), Bridge.box(y4, System.UInt16, System.Nullable.toString, System.Nullable.getHashCode), "PositiveInfinity -> ushort");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-2147483648, System.Int32), Bridge.box(y5, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), "PositiveInfinity -> int");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt32), Bridge.box(y6, System.UInt32, System.Nullable.toString, System.Nullable.getHashCode), "PositiveInfinity -> uint");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.Int64.MinValue, y7, "PositiveInfinity -> long");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.UInt64.MinValue, y8, "PositiveInfinity -> ulong");

                    var ni = Number.NEGATIVE_INFINITY;

                    var z1 = Bridge.Int.clipu8(ni);
                    var z2 = Bridge.Int.clip8(ni);
                    var z3 = Bridge.Int.clip16(ni);
                    var z4 = Bridge.Int.clipu16(ni);
                    var z5 = Bridge.Int.clip32(ni);
                    var z6 = Bridge.Int.clipu32(ni);
                    var z7 = Bridge.Int.clip64(ni);
                    var z8 = Bridge.Int.clipu64(ni);

                    // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                    // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.Byte), Bridge.box(z1, System.Byte, System.Nullable.toString, System.Nullable.getHashCode), "NegativeInfinity -> byte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-128, System.SByte), Bridge.box(z2, System.SByte, System.Nullable.toString, System.Nullable.getHashCode), "NegativeInfinity -> sbyte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-32768, System.Int16), Bridge.box(z3, System.Int16, System.Nullable.toString, System.Nullable.getHashCode), "NegativeInfinity -> short");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt16), Bridge.box(z4, System.UInt16, System.Nullable.toString, System.Nullable.getHashCode), "NegativeInfinity -> ushort");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-2147483648, System.Int32), Bridge.box(z5, System.Int32, System.Nullable.toString, System.Nullable.getHashCode), "NegativeInfinity -> int");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt32), Bridge.box(z6, System.UInt32, System.Nullable.toString, System.Nullable.getHashCode), "NegativeInfinity -> uint");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.Int64.MinValue, z7, "NegativeInfinity -> long");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.UInt64.MinValue, z8, "NegativeInfinity -> ulong");
                },
                TestInfinityCastWithNullable2DefaultOverflowMode: function () {
                    var pi = Number.POSITIVE_INFINITY;

                    var y1 = Bridge.Int.clipu8(pi);
                    var y2 = Bridge.Int.clip8(pi);
                    var y3 = Bridge.Int.clip16(pi);
                    var y4 = Bridge.Int.clipu16(pi);
                    var y5 = Bridge.Int.clip32(pi);
                    var y6 = Bridge.Int.clipu32(pi);
                    var y7 = Bridge.Int.clip64(pi);
                    var y8 = Bridge.Int.clipu64(pi);

                    // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                    // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.Byte), Bridge.box(System.Nullable.getValue(y1), System.Byte), "PositiveInfinity -> byte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-128, System.SByte), Bridge.box(System.Nullable.getValue(y2), System.SByte), "PositiveInfinity -> sbyte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-32768, System.Int16), Bridge.box(System.Nullable.getValue(y3), System.Int16), "PositiveInfinity -> short");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt16), Bridge.box(System.Nullable.getValue(y4), System.UInt16), "PositiveInfinity -> ushort");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-2147483648, System.Int32), Bridge.box(System.Nullable.getValue(y5), System.Int32), "PositiveInfinity -> int");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt32), Bridge.box(System.Nullable.getValue(y6), System.UInt32), "PositiveInfinity -> uint");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.Int64.MinValue, System.Nullable.getValue(y7), "PositiveInfinity -> long");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.UInt64.MinValue, System.Nullable.getValue(y8), "PositiveInfinity -> ulong");

                    var ni = Number.NEGATIVE_INFINITY;

                    var z1 = Bridge.Int.clipu8(ni);
                    var z2 = Bridge.Int.clip8(ni);
                    var z3 = Bridge.Int.clip16(ni);
                    var z4 = Bridge.Int.clipu16(ni);
                    var z5 = Bridge.Int.clip32(ni);
                    var z6 = Bridge.Int.clipu32(ni);
                    var z7 = Bridge.Int.clip64(ni);
                    var z8 = Bridge.Int.clipu64(ni);

                    // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                    // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.Byte), Bridge.box(System.Nullable.getValue(z1), System.Byte), "NegativeInfinity -> byte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-128, System.SByte), Bridge.box(System.Nullable.getValue(z2), System.SByte), "NegativeInfinity -> sbyte");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-32768, System.Int16), Bridge.box(System.Nullable.getValue(z3), System.Int16), "NegativeInfinity -> short");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt16), Bridge.box(System.Nullable.getValue(z4), System.UInt16), "NegativeInfinity -> ushort");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(-2147483648, System.Int32), Bridge.box(System.Nullable.getValue(z5), System.Int32), "NegativeInfinity -> int");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(Bridge.box(0, System.UInt32), Bridge.box(System.Nullable.getValue(z6), System.UInt32), "NegativeInfinity -> uint");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.Int64.MinValue, System.Nullable.getValue(z7), "NegativeInfinity -> long");
                    Bridge.ClientTestHelper.NumberHelper.AssertNumberByRepresentation(System.UInt64.MinValue, System.Nullable.getValue(z8), "NegativeInfinity -> ulong");
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.N2460", {
        statics: {
            methods: {
                TestSequenceInheritance: function () {
                    var point = new Bridge.ClientTest.Batch3.BridgeIssues.N2460.Point2D(3, 5);

                    Bridge.Test.NUnit.Assert.True(Bridge.is(point, System.Object));

                    Bridge.Test.NUnit.Assert.AreEqual(3, point.X);
                    Bridge.Test.NUnit.Assert.AreEqual(5, point.Y);
                    Bridge.Test.NUnit.Assert.AreEqual(3, point[0]);
                    Bridge.Test.NUnit.Assert.AreEqual(5, point[1]);

                    var sequence = point;
                    Bridge.Test.NUnit.Assert.AreEqual(3, sequence[0]);
                    Bridge.Test.NUnit.Assert.AreEqual(5, sequence[1]);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.N2460.Point2D", {
        $kind: "nested class",
        props: {
            X: {
                get: function () {
                    return this[0];
                }
            },
            Y: {
                get: function () {
                    return this[1];
                }
            }
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                Bridge.apply(this, [x, y]);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.NS1.Base");

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.NS1.Base.Wrong", {
        $kind: "nested enum",
        statics: {
            fields: {
                Something1: 0,
                Something2: 1
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Person383", {
        props: {
            Name: null
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Test", {
        fields: {
            MyType: null
        },
        props: {
            MyOtherType: {
                get: function () {
                    return this.MyType;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.TestBridgeIssues", {
        statics: {
            methods: {
                N169: function () {
                    // TEST
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge169.M1();
                    Bridge.Test.NUnit.Assert.AreEqual(1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge169.Number, "M1()");

                    // TEST
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge169.M2();
                    Bridge.Test.NUnit.Assert.AreEqual(2, Bridge.ClientTest.Batch3.BridgeIssues.Bridge169.Number, "M2()");
                },
                N240: function () {
                    // TEST
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge240B();
                    Bridge.Test.NUnit.Assert.True(b != null, "Instance of B created");
                    Bridge.Test.NUnit.Assert.AreEqual("B", b.GetString(), "b.GetString() = 'B'");
                    Bridge.Test.NUnit.Assert.AreEqual(1, b.Data, "b.Data = 1");
                },
                N264: function () {
                    // TEST
                    var oldHash = Bridge.global.location.hash;
                    Bridge.global.location.hash = "#new-hash";
                    Bridge.Test.NUnit.Assert.AreEqual("#new-hash", Bridge.global.location.hash, "Setting Location.Hash works");
                    Bridge.global.location.hash = oldHash; // to clean up the url
                },
                N266: function () {
                    // TEST
                    Bridge.Test.NUnit.Assert.True(Bridge.ClientTest.Batch3.BridgeIssues.Bridge266A.Test() != null, "new object() call transpiled");
                },
                N272: function () {
                    // TEST
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge272.MyEnum.Abc, Bridge.ClientTest.Batch3.BridgeIssues.Bridge272.Test(1), "Casted MyEnum.Abc");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.ClientTest.Batch3.BridgeIssues.Bridge272.MyEnum.Ghi, Bridge.ClientTest.Batch3.BridgeIssues.Bridge272.Test(3), "Casted MyEnum.Ghi");
                    Bridge.Test.NUnit.Assert.AreEqual(4, Bridge.ClientTest.Batch3.BridgeIssues.Bridge272.Test(4), "Casted MyEnum.Abc");
                },
                N277: function () {
                    Bridge.Test.NUnit.Assert.AreEqual(0, Bridge.ClientTest.Batch3.BridgeIssues.Bridge277.Int, "Enum member with reserved name initialized");
                },
                N294: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge294("Vlad");

                    Bridge.Test.NUnit.Assert.AreEqual("Vlad", c.GetName(), "Class method works");
                    Bridge.Test.NUnit.Assert.AreEqual("Vlad", c.GetNameThroughGeneric(System.Int32), "Generic class method works");
                },
                N304: function () {
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge304();
                    var i = c;

                    i.Bridge$ClientTest$Batch3$BridgeIssues$IBridge304$F("1");
                    Bridge.Test.NUnit.Assert.AreEqual("1", c.X, "Interface method works");

                    c.F$1();
                    Bridge.Test.NUnit.Assert.AreEqual("void F()", c.X, "Class method works");
                },
                N305: function () {
                    var $t;
                    var c = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge305(System.Array.init(["1", "2", "3"], System.String));

                    var result = "";
                    $t = Bridge.getEnumerator(c);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            result = (result || "") + (item || "");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("123", result, "IEnumerator works");
                },
                N306: function () {
                    var $t;
                    var b = Bridge.ClientTest.Batch3.BridgeIssues.Bridge306B.New(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge306B.Props(), $t.Name = "B", $t));
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge306B+Props:B", b, "Bridge306B.New() works");

                    var a = Bridge.ClientTest.Batch3.BridgeIssues.Bridge306A.New(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge306A.Props(), $t.Name = "A", $t));
                    Bridge.Test.NUnit.Assert.AreEqual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge306A+Props:A", a, "Bridge306A.New() works");
                },
                N335: function () {
                    var l = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.Array.init(["1", "2", "3", "1"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(3, l.IndexOf("1", 2), "IndexOf with startIndex used");
                },
                N336: function () {
                    var l = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.Array.init(["4"], System.String));

                    l.InsertRange(0, System.Array.init(["1", "2"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.init(["1", "2", "4"], System.String), l.ToArray(), "InsertRange works (1)");

                    l.InsertRange(2, System.Array.init(["3"], System.String));
                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.init(["1", "2", "3", "4"], System.String), l.ToArray(), "InsertRange works (2)");
                },
                N337: function () {
                    var l = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.Array.init(["1", "2"], System.String));

                    var b = l.remove("7");
                    Bridge.Test.NUnit.Assert.False(b, "Remove() not existing element returns false");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.init(["1", "2"], System.String), l.ToArray(), "Remove() not existing does not change the List");

                    b = l.remove("2");
                    Bridge.Test.NUnit.Assert.True(b, "Remove() existing element returns true");
                    Bridge.Test.NUnit.Assert.AreEqual(System.Array.init(["1"], System.String), l.ToArray(), "Remove() not existing changes the List");
                },
                N338: function () {
                    var l = new (System.Collections.Generic.List$1(System.String)).$ctor2(1000);

                    var b = Bridge.is(l, System.Collections.Generic.IList$1(System.String));

                    Bridge.Test.NUnit.Assert.True(b, "List<T> declares it implemets IList<T>");
                },
                N339: function () {
                    var c = new (System.Collections.Generic.Comparer$1(System.Int32))(System.Collections.Generic.Comparer$1.$default.fn);

                    Bridge.Test.NUnit.Assert.True(c != null, "Comparer<int>.Default works");
                    Bridge.Test.NUnit.Assert.True(Bridge.is(c, System.Collections.Generic.IComparer$1(System.Int32)), "Comparer<T> declares it implemets IComparer<T>");
                },
                N340: function () {
                    var c = System.Collections.Generic.EqualityComparer$1(System.Int32).def;

                    Bridge.Test.NUnit.Assert.True(c != null, "EqualityComparer<int>.Default works");
                    Bridge.Test.NUnit.Assert.True(c.equals2(10, 10), "EqualityComparer<int>.Default.Equals(10, 10) works");
                    Bridge.Test.NUnit.Assert.False(c.equals2(10, 11), "EqualityComparer<int>.Default.Equals(10, 11) works");

                    var s = System.Collections.Generic.EqualityComparer$1(System.String).def;
                    Bridge.Test.NUnit.Assert.True(s != null, "EqualityComparer<string>.Default works");
                    Bridge.Test.NUnit.Assert.True(s.equals2("a", "a"), "EqualityComparer<string>.Default.Equals(\"a\", \"a\") works");
                    Bridge.Test.NUnit.Assert.False(s.equals2("a", "b"), "EqualityComparer<string>.Default.Equals(\"a\", \"b\") works");
                },
                N341: function () {
                    var $t;
                    var o11 = { };
                    var o12 = { };
                    var b1 = System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(o11, o12);
                    Bridge.Test.NUnit.Assert.False(b1, "EqualityComparer<object>.Default.Equals(o11, o12) works");

                    var o21 = new $asm.$AnonymousType$22(7);
                    var o22 = new $asm.$AnonymousType$22(7);
                    var b2 = System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(o21, o22);
                    Bridge.Test.NUnit.Assert.True(b2, "EqualityComparer<object>.Default.Equals(o21, o22) works");

                    var o31 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge341A(), $t.Str = "String", $t);
                    var o32 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge341A(), $t.Str = "String", $t);
                    var b3 = System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(o31, o32);
                    Bridge.Test.NUnit.Assert.False(b3, "EqualityComparer<object>.Default.Equals(o31, o32) works");

                    var o41 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge341B(), $t.Str = "String", $t);
                    var o42 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge341B(), $t.Str = "String", $t);
                    var b4 = System.Collections.Generic.EqualityComparer$1(System.Object).def.equals2(o41, o42);
                    Bridge.Test.NUnit.Assert.True(b4, "EqualityComparer<object>.Default.Equals(o41, o42) works");
                },
                N342: function () {
                    var dictionary = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge342.$ctor1($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.TestBridgeIssues.f1(new (System.Collections.Generic.Dictionary$2(System.Int32,System.String)).ctor()));

                    var interfacedDictionary = Bridge.cast(dictionary, System.Collections.Generic.IDictionary$2(System.Int32,System.String));

                    Bridge.Test.NUnit.Assert.AreEqual("z", interfacedDictionary.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(6), "IDictionary getter works");
                    Bridge.Test.NUnit.Assert.Throws$1(function () {
                        var r = interfacedDictionary.System$Collections$Generic$IDictionary$2$System$Int32$System$String$getItem(1);
                    }, "IDictionary getter throws exception when incorrect key used");
                },
                /**
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.TestBridgeIssues
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.TestBridgeIssues
                 * @return  {void}
                 */
                N377: function () {
                    var objectLiteralInstance = { field1: "field1 value", field3: 7 };

                    Bridge.Test.NUnit.Assert.AreEqual(true, objectLiteralInstance.hasOwnProperty("field1"), "ObjectLiteral's field with an explicit value is emitted");
                    Bridge.Test.NUnit.Assert.AreEqual("field1 value", objectLiteralInstance.field1, "ObjectLiteral's field with an explicit value is emitted correctly");

                    Bridge.Test.NUnit.Assert.AreEqual(true, objectLiteralInstance.hasOwnProperty("field3"), "ObjectLiteral's field with an explicit value is emitted");
                    Bridge.Test.NUnit.Assert.AreEqual(7, objectLiteralInstance.field3, "ObjectLiteral's field with an explicit value is emitted correctly");

                    Bridge.Test.NUnit.Assert.AreEqual(false, objectLiteralInstance.hasOwnProperty("field2"), "ObjectLiteral's field without an explicit value is not emitted");
                    Bridge.Test.NUnit.Assert.AreEqual(false, objectLiteralInstance.hasOwnProperty("field4"), "ObjectLiteral's field without an explicit value is not emitted");
                },
                N383: function () {
                    var $t;
                    var person1 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Person383(), $t.Name = "Johnny", $t);
                    var msg1 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge383.DoSomething(person1);

                    Bridge.Test.NUnit.Assert.AreEqual("Johnny", msg1, "Instance extention Johnny");

                    var person2 = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Person383(), $t.Name = "Madison", $t);
                    var msg2 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge383.DoSomething(person2);

                    Bridge.Test.NUnit.Assert.AreEqual("Madison", msg2, "Static extention Madison");
                },
                N393: function () {
                    var a = "testa";
                    var b = "testa";

                    var result = System.String.equals(a, b, 3);

                    Bridge.Test.NUnit.Assert.True(result, "testa testa StringComparison.InvariantCultureIgnoreCase");

                    var a1 = "testa";
                    var b1 = "testb";

                    var result1 = System.String.equals(a1, b1, 3);

                    Bridge.Test.NUnit.Assert.False(result1, "testa testb StringComparison.InvariantCultureIgnoreCase");
                },
                N395: function () {
                    var $t;
                    var _dictOfTests = new (System.Collections.Generic.Dictionary$2(System.String,Bridge.ClientTest.Batch3.BridgeIssues.Bridge395)).ctor();

                    var tests = System.Array.init([($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge395(), $t.Id = "a", $t), ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge395(), $t.Id = "b", $t)], Bridge.ClientTest.Batch3.BridgeIssues.Bridge395);

                    $t = Bridge.getEnumerator(tests);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (!_dictOfTests.containsKey(item.Id)) {
                                _dictOfTests.setItem(item.Id, item);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(2, _dictOfTests.Count, "All items added");
                    Bridge.Test.NUnit.Assert.AreEqual("a", _dictOfTests.getItem("a").Id, "First element is a");
                    Bridge.Test.NUnit.Assert.AreEqual("b", _dictOfTests.getItem("b").Id, "Second element is b");
                },
                N406: function () {
                    var TESTA = "TESTA";
                    var TESTB = "TESTB";
                    var TESTC = "TESTC";
                    var TESTD = "TESTD";
                    var TESTE = "TESTE";
                    var TESTF = "TESTF";
                    var TESTG = "TESTG";

                    var test = TESTD;
                    var result = null;
                    switch (test) {
                        case TESTA: 
                            result = TESTA;
                            break;
                        case TESTB: 
                            result = TESTB;
                            break;
                        case TESTC: 
                            result = TESTC;
                            break;
                        case TESTD: 
                            result = TESTD;
                            break;
                        case TESTE: 
                            result = TESTE;
                            break;
                        case TESTF: 
                            result = TESTF;
                            break;
                        case TESTG: 
                            result = TESTG;
                            break;
                    }

                    Bridge.Test.NUnit.Assert.AreEqual("TESTD", result, "TESTD");
                },
                N407: function () {
                    var $t;
                    var vec = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge407(), $t.A = 1, $t);
                    vec = Bridge.ClientTest.Batch3.BridgeIssues.Bridge407.op_Addition(vec.$clone(), ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge407(), $t.A = 2, $t));

                    Bridge.Test.NUnit.Assert.AreEqual(3, vec.A, "Vec.A = 3");

                    var a = 2;
                    a = (a + 5) | 0;
                    Bridge.Test.NUnit.Assert.AreEqual(7, a, "a = 7");
                },
                N409: function () {
                    var a = System.Decimal.round(System.Decimal(3.5, 1), 6);
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("4", a, "Math.Round(3.5M)");

                    var b = System.Decimal.round(System.Decimal(4.5, 1), 6);
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("4", b, "Math.Round(4.5M)");
                },
                N410: function () {
                    // Decimal consts
                    var DecimalZero = System.Decimal.Zero;
                    var DecimalOne = System.Decimal.One;
                    var DecimalMinusOne = System.Decimal.MinusOne;
                    var DecimalMaxValue = System.Decimal.MaxValue;
                    var DecimalMinValue = System.Decimal.MinValue;

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("0", DecimalZero, "DecimalZero");
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("1", DecimalOne, "DecimalOne");
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("-1", DecimalMinusOne, "DecimalMinusOne");
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("79228162514264337593543950335", DecimalMaxValue, "DecimalMaxValue");
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("-79228162514264337593543950335", DecimalMinValue, "DecimalMinValue");

                    // Decimal consts in expressions
                    var dz = System.Decimal(0.0);
                    DecimalZero = System.Decimal.Zero.add(dz);
                    DecimalOne = System.Decimal.One.add(dz);
                    DecimalMinusOne = System.Decimal.MinusOne.add(dz);
                    DecimalMaxValue = System.Decimal.MaxValue.add(dz);
                    DecimalMinValue = System.Decimal.MinValue.add(dz);

                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("0", DecimalZero, "DecimalZeroin expression");
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("1", DecimalOne, "DecimalOnein expression");
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("-1", DecimalMinusOne, "DecimalMinusOnein expression");
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("79228162514264337593543950335", DecimalMaxValue, "DecimalMaxValuein expression");
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("-79228162514264337593543950335", DecimalMinValue, "DecimalMinValuein expression");

                    var numberPositiveInfinity = Number.POSITIVE_INFINITY;
                    var numberNegativeInfinity = Number.NEGATIVE_INFINITY;
                    var numberNaN = NaN;

                    // Double consts
                    var DoubleMaxValue = System.Double.max;
                    var DoubleMinValue = System.Double.min;
                    var DoubleEpsilon = 4.94065645841247E-324;
                    var DoubleNegativeInfinity = Number.NEGATIVE_INFINITY;
                    var DoublePositiveInfinity = Number.POSITIVE_INFINITY;
                    var DoubleNaN = Number.NaN;

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("1.79769313486232E+308", DoubleMaxValue, "DoubleMaxValue");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("-1.79769313486232E+308", DoubleMinValue, "DoubleMinValue");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("4.94065645841247E-324", DoubleEpsilon, "DoubleEpsilon");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberNegativeInfinity), DoubleNegativeInfinity, "DoubleNegativeInfinity");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberPositiveInfinity), DoublePositiveInfinity, "DoublePositiveInfinity");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberNaN), DoubleNaN, "DoubleNaN");

                    // Double consts in expressions
                    var dblz = 0.0;
                    DoubleMaxValue = System.Double.max + dblz;
                    DoubleMinValue = System.Double.min + dblz;
                    DoubleEpsilon = 4.94065645841247E-324 + dblz;
                    DoubleNegativeInfinity = Number.NEGATIVE_INFINITY + dblz;
                    DoublePositiveInfinity = Number.POSITIVE_INFINITY + dblz;
                    DoubleNaN = Number.NaN + dblz;

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("1.79769313486232E+308", DoubleMaxValue, "DoubleMaxValuein expression");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("-1.79769313486232E+308", DoubleMinValue, "DoubleMinValuein expression");
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("4.94065645841247E-324", DoubleEpsilon, "DoubleEpsilonin expression");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberNegativeInfinity), DoubleNegativeInfinity, "DoubleNegativeInfinityin expression");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberPositiveInfinity), DoublePositiveInfinity, "DoublePositiveInfinityin expression");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberNaN), DoubleNaN, "DoubleNaNin expression");

                    // Math consts
                    var MathE = Math.E;
                    var MathPI = Math.PI;

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("2.71828182845905", MathE, "MathE");
                    //IE has Math.LOG2E defined as 1.4426950408889633 instead of standard 1.4426950408889634
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("3.14159265358979", MathPI, "MathPI");

                    // Math consts in expression
                    MathE = 2.7182818284590451;
                    MathPI = 3.1415926535897931;

                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("2.71828182845905", MathE, "MathEin expression");
                    //IE has Math.LOG2E defined as 1.4426950408889633 instead of standard 1.4426950408889634
                    Bridge.ClientTestHelper.NumberHelper.AssertDouble$1("3.14159265358979", MathPI, "MathPIin expression");

                    // Single consts
                    var SingleMaxValue = 3.40282347E+38;
                    var SingleMinValue = -3.40282347E+38;
                    var SingleEpsilon = 1.401298E-45;
                    var SingleNaN = Number.NaN;
                    var SingleNegativeInfinity = Number.NEGATIVE_INFINITY;
                    var SinglePositiveInfinity = Number.POSITIVE_INFINITY;

                    Bridge.ClientTestHelper.NumberHelper.AssertFloat("3.402823E+38", SingleMaxValue, "SingleMaxValue");
                    Bridge.ClientTestHelper.NumberHelper.AssertFloat("-3.402823E+38", SingleMinValue, "SingleMinValue");
                    Bridge.ClientTestHelper.NumberHelper.AssertFloat("1.401298E-45", SingleEpsilon, "SingleEpsilon");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberNaN), SingleNaN, "SingleNaN");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberNegativeInfinity), SingleNegativeInfinity, "SingleNegativeInfinity");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberPositiveInfinity), SinglePositiveInfinity, "SinglePositiveInfinity");

                    // Single consts in expression
                    var fz = 0;
                    SingleMaxValue = 3.40282347E+38 + fz;
                    SingleMinValue = -3.40282347E+38 + fz;
                    SingleEpsilon = 1.401298E-45 + fz;
                    SingleNaN = Number.NaN + fz;
                    SingleNegativeInfinity = Number.NEGATIVE_INFINITY + fz;
                    SinglePositiveInfinity = Number.POSITIVE_INFINITY + fz;

                    Bridge.ClientTestHelper.NumberHelper.AssertFloat("3.402823E+38", SingleMaxValue, "SingleMaxValuein expression");
                    Bridge.ClientTestHelper.NumberHelper.AssertFloat("-3.402823E+38", SingleMinValue, "SingleMinValuein expression");
                    Bridge.ClientTestHelper.NumberHelper.AssertFloat("1.401298E-45", SingleEpsilon, "SingleEpsilonin expression");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberNaN), SingleNaN, "SingleNaNin expression");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberNegativeInfinity), SingleNegativeInfinity, "SingleNegativeInfinityin expression");
                    Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(numberPositiveInfinity), SinglePositiveInfinity, "SinglePositiveInfinityin expression");
                },
                N418: function () {
                    var t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge418();
                    t.Delegate = Bridge.fn.combine(t.Delegate, $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.TestBridgeIssues.f2);
                    var r = t.CallDelegate(10);

                    Bridge.Test.NUnit.Assert.AreEqual(20, r, "Delegate added and called var r = t.CallDelegate(10);");
                },
                N422: function () {
                    var v0 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge422.first;
                    var v100 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge422.next;
                    var v101 = Bridge.ClientTest.Batch3.BridgeIssues.Bridge422.afterNext;

                    Bridge.Test.NUnit.Assert.AreEqual(0, v0, "Bridge422.first");
                    Bridge.Test.NUnit.Assert.AreEqual(100, v100, "Bridge422.next");
                    Bridge.Test.NUnit.Assert.AreEqual(101, v101, "Bridge422.afterNext");
                },
                N428: function () {
                    var number2 = System.Decimal(11.37, 2);
                    var sum = "0.13 + " + number2;

                    Bridge.Test.NUnit.Assert.AreEqual("0.13 + 11.37", sum, "0.13 + 11.37");
                },
                N435: function () {
                    var i = 0;
                    Bridge.Test.NUnit.Assert.AreEqual("0.000000E+000", System.Int32.format(i, "E"), "i.Format(\"E\")");
                    Bridge.Test.NUnit.Assert.AreEqual("a", System.Int32.format(i, "a"), "Test custom formatting in \"use strict\" mode");
                },
                N436: function () {
                    var b1 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge436First();
                    Bridge.Test.NUnit.Assert.AreEqual("1", b1.ToObject(), "Bridge436First.ToObject()");

                    var b2 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge436Second();
                    Bridge.Test.NUnit.Assert.AreEqual("12", b2.ToObject(), "Bridge436Second.ToObject()");

                    var b3 = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge436Third();
                    Bridge.Test.NUnit.Assert.AreEqual("123", b3.ToObject(), "Bridge436Third.ToObject()");
                },
                N438: function () {
                    var magic = $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.TestBridgeIssues.f3(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                    var epic = magic.GetRange(0, 3);
                    Bridge.Test.NUnit.Assert.AreEqual("System.Collections.Generic.List`1[[System.Int32, mscorlib]]", Bridge.Reflection.getTypeFullName(Bridge.getType(epic)), "epic.GetType().FullName");
                },
                N439: function () {
                    var b = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge439();
                    var accumulator = "";
                    b.Register(function (s) {
                        accumulator = (accumulator || "") + (s || "");
                    });

                    b.CallDispatcher("1");
                    Bridge.Test.NUnit.Assert.AreEqual("1", accumulator, "accumulator 1");

                    b.CallDispatcher("2");
                    Bridge.Test.NUnit.Assert.AreEqual("12", accumulator, "accumulator 12");
                },
                N442: function () {
                    var a = System.Decimal(3.5, 1);
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("4", a.round(), "a.Round(3.5M)");

                    var b = System.Decimal(4.5, 1);
                    Bridge.ClientTestHelper.NumberHelper.AssertDecimal$2("4", b.round(), "b.Round(4.5M)");
                },
                N460: function () {
                    var number;

                    number = -12345.6789;
                    Bridge.Test.NUnit.Assert.AreEqual("-12345.6789", System.Double.format(number, "G", System.Globalization.CultureInfo.invariantCulture), "ToString(\"G\") for negative numbers in InvariantCulture");
                },
                N467: function () {
                    var $t;
                    var a = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge467(), $t.MyProperty = -1, $t);

                    var b = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge467(), $t.MyProperty = -1, $t);

                    Bridge.Test.NUnit.Assert.AreNotEqual(b.getHashCode(), a.getHashCode(), "Call to base.GetHashCode() causes compilation to fail");
                },
                N469: function () {
                    var testList = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    testList.add(5);

                    var count = 0;

                    for (var i = 0; i < 10; i = (i + 1) | 0) {
                        if (!System.Linq.Enumerable.from(testList, System.Int32).any(function (x) {
                                return x === i;
                            })) {
                            continue;
                        }

                        count = (count + 1) | 0;
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(1, count, "\"continue\" generated correctly");
                },
                N470: function () {
                    var $t;
                    var a = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 1, $t);
                    var b = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 2, $t);
                    var c = ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 3, $t);

                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.equals(a, b), "a.Equals(b)");
                    Bridge.Test.NUnit.Assert.AreNotEqual(true, Bridge.equals(a, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 1, $t)), "a.Equals(new Bridge470 { Data = 1 })");
                    Bridge.Test.NUnit.Assert.AreEqual(false, Bridge.equals(a, null), "a.Equals(null)");

                    Bridge.Test.NUnit.Assert.AreEqual(true, a.equals2(b, b), "a.Equals(b, b)");
                    Bridge.Test.NUnit.Assert.AreEqual(true, a.equals2(a, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 1, $t)), "a.Equals(a, new Bridge470 { Data = 1 })");
                    Bridge.Test.NUnit.Assert.AreEqual(false, a.equals2(a, ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 2, $t)), "a.Equals(a, new Bridge470 { Data = 2 })");
                    Bridge.Test.NUnit.Assert.AreEqual(true, a.equals2(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 5, $t), ($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 5, $t)), "new Bridge470 { Data = 5 }, new Bridge470 { Data = 5 }");

                    Bridge.Test.NUnit.Assert.AreNotEqual(1, Bridge.getHashCode(a), "a.GetHashCode()");
                    Bridge.Test.NUnit.Assert.AreNotEqual(3, Bridge.getHashCode(c), "c.GetHashCode()");

                    Bridge.Test.NUnit.Assert.AreEqual(2, a.getHashCode2(b), "a.GetHashCode(b)");
                    Bridge.Test.NUnit.Assert.AreEqual(3, c.getHashCode2(c), "c.GetHashCode(c)");

                    var test1 = new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge470)).ctor();
                    test1.add(a);
                    test1.add(b);
                    test1.add(c);

                    var comparer = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470();

                    // EqualityComparer's methods do not handle null values intentionally
                    Bridge.Test.NUnit.Assert.AreEqual(true, System.Linq.Enumerable.from(test1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge470).contains(a, comparer), "test1 Contains a");
                    Bridge.Test.NUnit.Assert.AreEqual(true, System.Linq.Enumerable.from(test1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge470).contains(b, comparer), "test1 Contains b");
                    Bridge.Test.NUnit.Assert.AreEqual(true, System.Linq.Enumerable.from(test1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge470).contains(c, comparer), "test1 Contains c");
                    Bridge.Test.NUnit.Assert.AreEqual(false, System.Linq.Enumerable.from(test1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge470).contains(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 4, $t), comparer), "test1 Contains 4");
                    Bridge.Test.NUnit.Assert.AreEqual(false, System.Linq.Enumerable.from(test1, Bridge.ClientTest.Batch3.BridgeIssues.Bridge470).contains(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge470(), $t.Data = 5, $t), comparer), "test1 Contains 5");
                },
                N499: function () {
                    var v1 = new System.Version.ctor();
                    Bridge.Test.NUnit.Assert.AreEqual("System.Version", Bridge.Reflection.getTypeFullName(Bridge.getType(v1, System.Version)), "#499 Version type name");
                }
            }
        }
    });

    Bridge.define("$AnonymousType$22", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (i) {
                this.i = i;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$22)) {
                    return false;
                }
                return Bridge.equals(this.i, o.i);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550208987, this.i]);
                return h;
            },
            toJSON: function () {
                return {
                    i : this.i
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"i","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_i","t":8,"rt":System.Int32,"fg":"i","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"i"}]}; }
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.TestBridgeIssues", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.TestBridgeIssues, {
        f1: function (_o1) {
            _o1.add(3, "b");
            _o1.add(6, "z");
            _o1.add(9, "x");
            return _o1;
        },
        f2: function (i) {
            return Bridge.Int.mul(i, 2);
        },
        f3: function (_o1) {
            _o1.add(0);
            _o1.add(1);
            _o1.add(2);
            _o1.add(3);
            _o1.add(4);
            return _o1;
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Util", {
        statics: {
            methods: {
                fun2: function (T, a) {
                    return a;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.Constants", {
        statics: {
            fields: {
                MODULE_ISSUES: null,
                IGNORE_DATE: null
            },
            ctors: {
                init: function () {
                    this.MODULE_ISSUES = "Issues3";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.Utilities.BrowserHelper", {
        statics: {
            methods: {
                IsPhantomJs: function () {
                    return System.String.contains(navigator.userAgent,"PhantomJS");
                },
                IsFirefox: function () {
                    return System.String.contains(navigator.userAgent,"Firefox");
                },
                IsChrome: function () {
                    return System.String.contains(navigator.userAgent,"Chrome");
                },
                GetBrowserInfo: function () {
                    var userAgent = navigator.userAgent;
                    var appVersion = navigator.appVersion;
                    var product = navigator.product;
                    var appName = navigator.appName;
                    var appCodeName = navigator.appCodeName;

                    return System.String.format("userAgent:{0} appVersion:{1} product:{2} appName:{3} appCodeName:{4}", userAgent, appVersion, product, appName, appCodeName);
                }
            }
        }
    });

    Bridge.define("Bridge2944_A$1", function (Bridge2944_Program) { return {
        statics: {
            methods: {
                Get: function () {
                    return Bridge.global.Bridge2944_Program.Pass();
                }
            }
        }
    }; });

    Bridge.define("Bridge2944_Program", {
        statics: {
            methods: {
                Pass: function () {
                    return 9;
                }
            }
        }
    });

    /** @namespace Bridge3264_Ext */

    /**
     * Defines a "pseudo-external" type to be addressed by the corresponding
     test via one alias specializing of it.
     *
     * @static
     * @abstract
     * @public
     * @class Bridge3264_Ext.Root
     */
    Bridge.define("Bridge3264_Ext.Root");

    Bridge.define("Bridge3264_Ext.Root.MyTest$1", function (T) { return {
        $kind: "nested class"
    }; });

    /** @namespace Bridge3265_Ext */

    /**
     * This class denotes an external class to the application, from an
     external namespace.
     *
     * @static
     * @abstract
     * @public
     * @class Bridge3265_Ext.Root
     */
    Bridge.define("Bridge3265_Ext.Root");

    /**
     * Class with generics, defining templates for its members.
     *
     * @public
     * @class Bridge3265_Ext.Root.MyTest$1
     * @param   {Function}    [name]
     */
    Bridge.define("Bridge3265_Ext.Root.MyTest$1", {
        $kind: "nested class",
        statics: {
            methods: {
                getDefaultValue: function () {
                    return {};
                }
            }
        }
    });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.ApiResponse$1", function (T) { return {
        props: {
            ResultIfSuccessful: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function (resultIfSuccessful) {
                this.$initialize();
                this.ResultIfSuccessful = resultIfSuccessful;
            }
        }
    }; });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Bridge3038", {
        statics: {
            methods: {
                TestRewriterInBridgeNs: function () {
                    var $t;
                    var dict = $asm.$.BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Bridge3038.f1(new (System.Collections.Generic.Dictionary$2(System.String,System.Object)).ctor());

                    Bridge.Test.NUnit.Assert.AreEqual("Test", ($t = dict.getItem("123")) != null ? Bridge.toString($t) : null);
                }
            }
        }
    });

    Bridge.ns("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Bridge3038", $asm.$);

    Bridge.apply($asm.$.BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Bridge3038, {
        f1: function (_o1) {
            _o1.add("123", "Test");
            return _o1;
        }
    });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Bridge3063", {
        statics: {
            methods: {
                TestAssigmentWithIndexer: function () {
                    var $t;
                    var data = System.Array.init([
                        10, 
                        20, 
                        30
                    ], System.Int32);
                    var i = 0;
                    data[System.Array.index(($t = Bridge.identity(i, ((i = (i + 1) | 0)))), data)] = (data[System.Array.index($t, data)] + 1) | 0;

                    Bridge.Test.NUnit.Assert.AreEqual(11, data[System.Array.index(0, data)]);
                    Bridge.Test.NUnit.Assert.AreEqual(20, data[System.Array.index(1, data)]);
                    Bridge.Test.NUnit.Assert.AreEqual(1, i);
                }
            }
        }
    });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Bridge3071", {
        statics: {
            methods: {
                TestArrayTypeParsing: function () {
                    var type = Bridge.Reflection.getType("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.ApiResponse`1[[BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.KeyValuePairDataModel[], Bridge.ClientTest.Batch3]], Bridge.ClientTest.Batch3");
                    Bridge.Test.NUnit.Assert.AreEqual("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.ApiResponse`1[[BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.KeyValuePairDataModel[]]]", Bridge.Reflection.getTypeFullName(type));

                    type = Bridge.Reflection.getType("System.Int32[]");
                    Bridge.Test.NUnit.Assert.AreEqual("System.Int32[]", Bridge.Reflection.getTypeFullName(type));

                    type = Bridge.Reflection.getType("System.Int32[,]");
                    Bridge.Test.NUnit.Assert.AreEqual("System.Int32[,]", Bridge.Reflection.getTypeFullName(type));

                    type = Bridge.Reflection.getType("System.Int32[,], mscorlib");
                    Bridge.Test.NUnit.Assert.AreEqual("System.Int32[,]", Bridge.Reflection.getTypeFullName(type));
                },
                TestArrayTypeParsingMoreLevel: function () {
                    var name = "BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8+ApiResponse`1[[BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8+Container`1[[BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8+PageEditData[]]][]]], Bridge.ClientTest.Batch3";
                    var type = Bridge.Reflection.getType(name);

                    Bridge.Test.NUnit.Assert.AreEqual("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8+ApiResponse`1[[BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8+Container`1[[BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8+PageEditData[]]][]]]", Bridge.Reflection.getTypeFullName(type));
                    var targs = Bridge.Reflection.getGenericArguments(type);

                    Bridge.Test.NUnit.Assert.AreEqual(1, targs.length);
                    Bridge.Test.NUnit.Assert.True(Bridge.isArray(null, targs[System.Array.index(0, targs)]));

                    var elementType = (targs[System.Array.index(0, targs)].$elementType || null);

                    targs = Bridge.Reflection.getGenericArguments(elementType);

                    Bridge.Test.NUnit.Assert.AreEqual(1, targs.length);
                    Bridge.Test.NUnit.Assert.True(Bridge.isArray(null, targs[System.Array.index(0, targs)]));
                }
            }
        }
    });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8");

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8.ApiResponse$1", function (T) { return {
        $kind: "nested class",
        fields: {
            Value: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8.ApiResponse$2", function (T, K) { return {
        $kind: "nested class",
        fields: {
            Value1: Bridge.getDefaultValue(T)
        },
        props: {
            Value2: Bridge.getDefaultValue(K)
        }
    }; });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8.Container", {
        $kind: "nested class",
        statics: {
            methods: {
                Create: function (K, value) {
                    var $t;
                    return ($t = new (BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8.Container$1(K))(), $t.Item1 = value, $t);
                }
            }
        }
    });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8.Container$1", function (T) { return {
        $kind: "nested class",
        fields: {
            Item1: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8.PageEditData", {
        $kind: "nested class",
        props: {
            Data: 0
        }
    });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.Case8.PageEditData$1", function (T) { return {
        $kind: "nested class",
        props: {
            Data: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("BridgeTest.ClientTest.Batch3.Bridge.BridgeIssues.KeyValuePairDataModel", {
        fields: {
            Key: 0,
            Value: null
        }
    });

    Bridge.define("Problem2723.Classes2723.A2723");

    Bridge.define("Derived2723.Problem2723", {
        fields: {
            b: null
        },
        ctors: {
            init: function () {
                this.b = new Derived2723.Classes2723.B2723();
            }
        },
        methods: {
            Test: function () {
                this.b.Test(Problem2723.Classes2723.A2723.Mode.Value2);
            }
        }
    });

    /** @namespace IssueBridge3197 */

    /**
     * Test, static and external (other namespace) class with nested subclasses.
     *
     * @static
     * @abstract
     * @public
     * @class IssueBridge3197.pixi_js
     */
    Bridge.define("IssueBridge3197.pixi_js");

    /**
     * @static
     * @abstract
     * @public
     * @class IssueBridge3197.pixi_js.PIXI
     */
    Bridge.define("IssueBridge3197.pixi_js.PIXI", {
        $kind: "nested class"
    });

    /**
     * @public
     * @class IssueBridge3197.pixi_js.PIXI.Sprite
     */
    Bridge.define("IssueBridge3197.pixi_js.PIXI.Sprite", {
        $kind: "nested class",
        statics: {
            methods: {
                /**
                 * Stub method
                 *
                 * @static
                 * @public
                 * @this IssueBridge3197.pixi_js.PIXI.Sprite
                 * @memberof IssueBridge3197.pixi_js.PIXI.Sprite
                 * @param   {string}                                 url
                 * @return  {IssueBridge3197.pixi_js.PIXI.Sprite}
                 */
                fromImage: function (url) {
                    return new IssueBridge3197.pixi_js.PIXI.Sprite();
                }
            }
        }
    });

    /** @namespace IssueBridge3197_1 */

    /**
     * Remote, static, external and nested property to check against access.
     *
     * @static
     * @abstract
     * @public
     * @class IssueBridge3197_1.phaser
     */
    Bridge.define("IssueBridge3197_1.phaser");

    /**
     * @public
     * @class IssueBridge3197_1.phaser.Phaser
     */
    Bridge.define("IssueBridge3197_1.phaser.Phaser", {
        $kind: "nested class"
    });

    /**
     * @public
     * @class IssueBridge3197_1.phaser.Phaser.Physics
     */
    Bridge.define("IssueBridge3197_1.phaser.Phaser.Physics", {
        $kind: "nested class",
        statics: {
            props: {
                /**
                 * @static
                 * @public
                 * @memberof IssueBridge3197_1.phaser.Phaser.Physics
                 * @function ARCADE
                 * @type number
                 */
                ARCADE: 0
            },
            ctors: {
                init: function () {
                    this.ARCADE = 1;
                }
            }
        }
    });

    Bridge.define("Other.Util", {
        statics: {
            methods: {
                fun: function (T, a) {
                    return a;
                }
            }
        }
    });

    Bridge.define("Paige.Core.BaseObject", {
        ctors: {
            ctor: function (incomingData) {
                if (incomingData === void 0) { incomingData = null; }

                this.$initialize();
            }
        }
    });

    Bridge.define("Problem2723.Classes2723.A2723.Mode", {
        $kind: "nested enum",
        statics: {
            fields: {
                Value1: 0,
                Value2: 1
            }
        }
    });

    Bridge.define("Test2759.Test2.Test3.IControl", {
        $kind: "interface"
    });

    Bridge.define("Test2759.Test2.Test3.B$1", function (TProps) { return {

    }; });

    Bridge.definei("Test2759.Test2.Test3.IC$2", function (TControlOut, TControlIn) { return {
        $kind: "interface",
        $variance: [1,0]
    }; });

    Bridge.define("Test2954_1.Bridge2954", {
        statics: {
            methods: {
                TestLoopIndexRenaming: function () {
                    // Bridge.NET will rename to $Test2954_1 to avoid conflict with root of namespace Test2954_1
                    var $Test2954_1 = 1;

                    for (var Test2954_ = 0; Test2954_ < 1; Test2954_ = (Test2954_ + 1) | 0) {
                    }

                    Test2954_1.Person.Name = "Sally";

                    // The following line was failing in javascript, because there is a generated local variable named Test2954_1 which
                    // is hiding the global variable Test2954_1 corresponding to the root of namespace Test2954_1
                    for (var Test2954_2 = 0; Test2954_2 < 1; Test2954_2 = (Test2954_2 + 1) | 0) {
                    }

                    Bridge.Test.NUnit.Assert.AreEqual(1, $Test2954_1);
                    Bridge.Test.NUnit.Assert.AreEqual("Sally", Test2954_1.Person.Name);
                }
            }
        }
    });

    Bridge.define("Test2954_1.Person", {
        statics: {
            props: {
                Name: null
            }
        }
    });

    Bridge.define("achievements.content.ContentAchievements", {
        inherits: [content.ContentManagerBase],
        statics: {
            methods: {
                Method: function () {
                    var a = content.ContentManagerBase.PNG;
                    return a;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1000.ObjectTestFixture", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1000.TestFixture$1(System.Object)],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Button", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Control],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.TextBox", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1001.Control],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1024.ClassB", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1024.ClassC],
        $kind: "nested class",
        ctors: {
            ctor: function (p) {
                if (p === void 0) { p = "classB"; }

                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1024.ClassC.ctor.call(this, p);
            }
        },
        methods: {
            GetFieldA: function () {
                return this.a;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C10", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I7$3(System.Int32,System.String,System.Boolean)],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I7$3$System$Int32$System$String$System$Boolean$Foo"],
        methods: {
            Foo: function () {
                return 1;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C11$3", function (T1, T2, T3) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I7$3(T1,T2,T3)],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I7$3$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$Foo"],
        methods: {
            Foo: function () {
                return 1;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C12$3", function (T1, T2, T3) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I7$3(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(T1),Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(T2),Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(T3))],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I7$3$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$" + Bridge.getTypeAlias(T1) + "$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$" + Bridge.getTypeAlias(T2) + "$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$" + Bridge.getTypeAlias(T3) + "$Foo"],
        methods: {
            Foo: function () {
                return 1;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C13$3", function (T1, T2, T3) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I7$3(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(T1)),Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(T2)),Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(T3)))],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I7$3$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$" + Bridge.getTypeAlias(T1) + "$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$" + Bridge.getTypeAlias(T2) + "$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$" + Bridge.getTypeAlias(T3) + "$Foo"],
        methods: {
            Foo: function () {
                return 1;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C14", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I8],
        $kind: "nested class",
        fields: {
            tmp: 0
        },
        events: {
            Event1: null
        },
        props: {
            Prop1: {
                get: function () {
                    return 2;
                }
            },
            Prop2: null
        },
        alias: [
            "getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$getItem",
            "setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$setItem",
            "Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$Prop1",
            "Prop2", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$Prop2",
            "addEvent1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$addEvent1",
            "removeEvent1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$removeEvent1",
            "Invoke", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I8$Invoke"
        ],
        methods: {
            getItem: function (index) {
                return index;
            },
            setItem: function (index, value) {
                this.tmp = value;
            },
            Invoke: function () {
                this.Event1();
            }
        }
    });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I9$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I8],
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C16", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I10],
        $kind: "nested class",
        fields: {
            log: null
        },
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo"],
        methods: {
            Foo: function () {
                this.log = "C16";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C19", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C18,Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I10],
        $kind: "nested class",
        alias: ["Foo$1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo"],
        methods: {
            Foo$1: function () {
                this.log = "C19";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I1,Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I2],
        $kind: "nested class",
        fields: {
            i1: 0,
            i2: 0
        },
        props: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I1$Prop1: {
                get: function () {
                    return this.i1;
                },
                set: function (value) {
                    this.i1 = (value - 1) | 0;
                }
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I2$Prop1: {
                get: function () {
                    return this.i2;
                },
                set: function (value) {
                    this.i2 = (value + 1) | 0;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C20", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I10],
        $kind: "nested class",
        fields: {
            log: null
        },
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo"],
        methods: {
            Foo: function () {
                this.log = "C20";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C23", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C22],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C3", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I1,Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I2],
        $kind: "nested class",
        props: {
            Prop1: 0
        },
        alias: ["Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I2$Prop1",
        "Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I1$Prop1"]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C4", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I3],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I3$Foo"],
        methods: {
            Foo: function () {
                return "C4";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C7", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C6,Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I4],
        $kind: "nested class",
        alias: ["Foo$1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I4$Foo"],
        methods: {
            Foo$1: function () {
                return "C7";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C8", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(System.Int32),Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(System.String)],
        $kind: "nested class",
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$Int32$Foo: function () {
                return 1;
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$System$String$Foo: function () {
                return "test";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C9$2", function (T1, T2) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I5$1(T1),Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I6$1(T2)],
        $kind: "nested class",
        fields: {
            flag: null
        },
        alias: [
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$" + Bridge.getTypeAlias(T1) + "$Foo",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I6$1$Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I6$1$" + Bridge.getTypeAlias(T2) + "$Foo"
        ],
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I5$1$Foo: function () {
                this.flag = "I5";
                return Bridge.getDefaultValue(T1);
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I6$1$Foo: function () {
                this.flag = "I6";
                return Bridge.getDefaultValue(T2);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A],
        $kind: "nested class",
        ctors: {
            ctor: function (b) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A.ctor.call(this, b, [T]);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A$2", function (T, T2) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A],
        $kind: "nested class",
        ctors: {
            ctor: function (b) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1071.A.ctor.call(this, b, [T, T2]);
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Comparer", {
        inherits: [System.Collections.Generic.IComparer$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1128.Foo1.Item)],
        $kind: "nested class",
        alias: ["compare", ["System$Collections$Generic$IComparer$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1128$Foo1$Item$compare", "System$Collections$Generic$IComparer$1$compare"]],
        methods: {
            compare: function (x, y) {
                return System.String.compare(x.Value, y.Value);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.DemoNavigator", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1217.Navigator],
        $kind: "nested class"
    });

    Bridge.define("Demo.Bridge1231.Class1$1.MyStruct", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1231.I1$1(T)],
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Demo.Bridge1231.Class1$1.MyStruct(T))(); }
            }
        },
        fields: {
            field: 0
        },
        ctors: {
            $ctor1: function (field) {
                this.$initialize();
                this.field = field;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3904302783, this.field]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Demo.Bridge1231.Class1$1.MyStruct(T))) {
                    return false;
                }
                return Bridge.equals(this.field, o.field);
            },
            $clone: function (to) {
                var s = to || new (Demo.Bridge1231.Class1$1.MyStruct(T))();
                s.field = this.field;
                return s;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1313.Class", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1313.IInterface],
        $kind: "nested class",
        alias: ["Function", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1313$IInterface$Function"],
        methods: {
            Function: function (v) {
                return v;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.FooBase],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass1$2", function (T, K) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass$2(T,K)],
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass1$2", function (T, K) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass$2(T,K)],
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Doodad", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Thing],
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Thing.ctor.call(this);
                // 3
                this.Data = 3;
            },
            $ctor1: function (x) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1411.Thing.ctor.call(this, x);
                // 4
                this.Data = 4;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1467.SomeClass1],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.MessageTable", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.PureComponent$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.Set$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1684.MessageEditState))],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1704.Derived", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1704.Base],
        $kind: "nested class",
        methods: {
            Show: function (i) {
                if (i === void 0) { i = 1; }
                return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1704.Base.prototype.Show.call(this);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1737.SomethingOfSomethingElse", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1737.Something$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1737.SomethingElse)],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1767.Child", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1767.Base$1(System.Object)],
        $kind: "nested class",
        methods: {
            getItem: function (i) {
                return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1767.Base$1(System.Object).prototype.getItem.call(this, i);
            },
            Method: function () {
                return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1767.Base$1(System.Object).prototype.Method.call(this);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.C1$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.I1$1(T)],
        $kind: "nested class",
        props: {
            Count: {
                get: function () {
                    return 1;
                }
            }
        },
        alias: [
            "getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "Add", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$" + Bridge.getTypeAlias(T) + "$Add",
            "Count", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$" + Bridge.getTypeAlias(T) + "$Count"
        ],
        methods: {
            getItem: function (index) {
                return Bridge.getDefaultValue(T);
            },
            setItem: function (index, value) { },
            Add: function (item) {
                return 2;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.C2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1768.I1$1(T)],
        $kind: "nested class",
        props: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$Count: {
                get: function () {
                    return 10;
                }
            }
        },
        alias: [
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$Add", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$" + Bridge.getTypeAlias(T) + "$Add",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$Count", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$" + Bridge.getTypeAlias(T) + "$Count"
        ],
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$getItem: function (index) {
                return Bridge.getDefaultValue(T);
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$setItem: function (index, value) { },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1768$I1$1$Add: function (item) {
                return 20;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.Bar$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.IBar$1(T)],
        $kind: "nested class",
        fields: {
            v: Bridge.getDefaultValue(T)
        },
        props: {
            Value: {
                get: function () {
                    return this.v;
                }
            }
        },
        alias: ["Value", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1821$IBar$1$" + Bridge.getTypeAlias(T) + "$Value"],
        ctors: {
            ctor: function (v) {
                this.$initialize();
                this.v = v;
            }
        }
    }; });

    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.IClass$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.IInterface$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.TT$1(T))],
        $kind: "nested interface"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1834.Test1$1", function (TValues) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1834.ITest1$1],
        $kind: "nested class",
        alias: ["ToRoute", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1834$ITest1$1$ToRoute"],
        methods: {
            ToRoute: function (ifMatched) {
                return "Test1<TValues>";
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852.MatchDispatcherMessages", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1852DispatcherMessageExtensions.IMatchDispatcherMessages],
        $kind: "nested class",
        alias: ["DoSomething", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1852DispatcherMessageExtensions$IMatchDispatcherMessages$DoSomething"],
        methods: {
            DoSomething: function (T, name) { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1854.SomeReader$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1854.IRead$1(T),Object(T)],
        $kind: "nested class",
        fields: {
            _param: null
        },
        alias: ["Read", "Object$" + Bridge.getTypeAlias(T) + "$Read",
        "Read", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1854$IRead$1$" + Bridge.getTypeAlias(T) + "$Read"],
        ctors: {
            ctor: function (param) {
                this.$initialize();
                this._param = param;
            }
        },
        methods: {
            Read: function () {
                return this._param;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.Signal$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1856.IObservable$1(T)],
        $kind: "nested class",
        alias: ["Observe", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1856$IObservable$1$" + Bridge.getTypeAlias(T) + "$Observe"],
        ctors: {
            ctor: function (x) {
                this.$initialize();
            }
        },
        methods: {
            Observe: function (a) { }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1865.Contract", {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function () {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1865.Contract; };
                (function (){
                    this.Value = 0;
                }).call($this);
                return $this;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1865.Contract2", {
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function () {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge1865.Contract2; };
                (function (){
                    this.Value = 0;
                }).call($this);
                return $this;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.A],
        $kind: "nested class",
        fields: {
            value: 0
        },
        props: {
            Value: {
                get: function () {
                    return this.value;
                },
                set: function (value) {
                    this.value = value;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.A.ctor.call(this);
                this.Value = 1;
            },
            $ctor1: function (i) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.A.ctor.call(this);
                this.SetValue(i);
            }
        },
        methods: {
            SetValue: function (value) {
                this.value = (value + 10) | 0;
            },
            GetResult: function () {
                return this.value;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.Item", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1899.IItem],
        $kind: "nested class",
        props: {
            Value: {
                get: function () {
                    return 1; // getter
                }
            }
        },
        alias: [
            "Value", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1899$IItem$Value",
            "SetValue", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1899$IItem$SetValue"
        ],
        methods: {
            GetValue: function () {
                return 2; // function
            },
            SetValue: function () { }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911_DerivedItem$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1911_BaseItem$1(T)],
        statics: {
            methods: {
                GetValue: function (T1) {
                    return 2;
                }
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1948.AddObj", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Collections.Generic.KeyValuePair$2(System.String,System.Object))],
        $kind: "nested class",
        fields: {
            dic: null,
            isGeneric: false
        },
        alias: [
            "System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$System$String$System$Object$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator",
            "GetEnumerator", "System$Collections$IEnumerable$GetEnumerator"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Collections.Generic.IEnumerable$1(System.Collections.Generic.KeyValuePair$2(System.String,System.Object)).call(this);
                this.dic = new (System.Collections.Generic.Dictionary$2(System.String,System.Object)).ctor();
            }
        },
        methods: {
            Add: function (key, value) {
                this.dic.add(key, value);
            },
            System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$System$String$System$Object$GetEnumerator: function () {
                this.isGeneric = true;
                return this.dic.GetEnumerator().$clone();
            },
            GetEnumerator: function () {
                this.isGeneric = false;
                return this.dic.GetEnumerator().$clone();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.Test2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.Test1],
        $kind: "nested class",
        statics: {
            ctors: {
                ctor: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer || "") + "Test2";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013.EvGen$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2013.IEvGen$1(T)],
        $kind: "nested class",
        events: {
            Ev: null
        },
        props: {
            HasListeners: {
                get: function () {
                    return !Bridge.staticEquals(this.Ev, null);
                }
            }
        },
        alias: ["addEv", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2013$IEvGen$1$" + Bridge.getTypeAlias(T) + "$addEv",
        "removeEv", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2013$IEvGen$1$" + Bridge.getTypeAlias(T) + "$removeEv"]
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2019.Some$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2019.ISome$1(T)],
        $kind: "nested class",
        props: {
            SomeProp: 0
        },
        alias: [
            "SomeProp", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2019$ISome$1$" + Bridge.getTypeAlias(T) + "$SomeProp",
            "SomeMethod", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2019$ISome$1$" + Bridge.getTypeAlias(T) + "$SomeMethod"
        ],
        methods: {
            SomeMethod: function () {
                this.SomeProp = (this.SomeProp + 11) | 0;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2048.Derived", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2048.Base],
        $kind: "nested class",
        props: {
            property: {
                set: function (value) { }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2056.A],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL1],
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function () {
                var $this = Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL1.ctor();
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL2; };
                (function (){
                    this.ShouldSeeThis2 = 0;
                }).call($this);
                return $this;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.SomeCollection$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2138.ISomeCollection$1(T)],
        $kind: "nested class",
        fields: {
            _items: null
        },
        alias: [
            "getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2138$ISomeCollection$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]
        ],
        ctors: {
            init: function () {
                this._items = new (System.Collections.Generic.List$1(T)).ctor();
            },
            ctor: function (initialItems) {
                this.$initialize();
                this._items.AddRange(initialItems);
            }
        },
        methods: {
            getItem: function (pos) {
                return this._items.getItem(pos);
            },
            GetEnumerator: function () {
                return this._items.GetEnumerator().$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this._items.GetEnumerator().$clone();
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2159.Derived$1", function (V) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2159.Base$2(System.Int32,System.String)],
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2160.Derived$1", function (V) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2160.Base$2(System.Int32,System.String)],
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.Hello", {
        inherits: function () { return [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.ObjSingleton$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.Hello)]; },
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.LoginAgent", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2210.Agent_Logic],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2216.Person", {
        inherits: [Bridge.virtual("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2216.IPerson")],
        $kind: "nested class",
        props: {
            Name: null
        },
        alias: [
            "Name", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2216$IPerson$Name",
            "Introduce", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2216$IPerson$Introduce"
        ],
        ctors: {
            ctor: function (name) {
                this.$initialize();
                this.Name = name;
            }
        },
        methods: {
            Introduce: function () {
                return System.String.format("This is {0}", [this.Name]);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Something$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.ISomething$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2278.Item$1(T))],
        $kind: "nested class",
        alias: ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$ISomething$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$Item$1$DoSomething", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$ISomething$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$Item$1$" + Bridge.getTypeAlias(T) + "$DoSomething"],
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$ISomething$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2278$Item$1$DoSomething: function (t) {
                return t;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.DecimalThing$1", function (TX) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.IThing$2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(TX,System.Decimal),Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(System.Decimal,System.Int64))],
        $kind: "nested class",
        props: {
            A: null,
            B: null
        },
        alias: ["MyMethod", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$IThing$2$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$V2$2$" + Bridge.getTypeAlias(TX) + "$System$Decimal$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$V2$2$System$Decimal$System$Int64$MyMethod"],
        ctors: {
            init: function () {
                this.A = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(TX,System.Decimal))();
                this.B = new (Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(System.Decimal,System.Int64))();
            }
        },
        methods: {
            MyMethod: function () {
                return System.Array.init([Bridge.toString(this.A.a), this.A.b.toString(), this.B.a.toString(), Bridge.toString(this.B.b)], System.String).join("|");
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.MyThing$1", function (TX) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.IThing$2(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(TX,System.Double),Bridge.ClientTest.Batch3.BridgeIssues.Bridge2298.V2$2(System.Double,System.Double))],
        $kind: "nested class",
        alias: ["MyMethod", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$IThing$2$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$V2$2$" + Bridge.getTypeAlias(TX) + "$System$Double$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2298$V2$2$System$Double$System$Double$MyMethod"],
        methods: {
            MyMethod: function () {
                return "MyThing";
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component", {
        $inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.BaseComponent],
        $kind: "nested class",
        $statics: {
            fields: {
                StaticField: null,
                StaticEventResult: 0
            },
            events: {
                StaticEvent: null
            },
            props: {
                StaticProperty: null
            },
            ctors: {
                init: function () {
                    this.StaticField = { };
                    this.StaticProperty = { };
                },
                ctor: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component.addStaticEvent(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component.Component_StaticEvent);

                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component.StaticEvent(null, 2);
                }
            },
            methods: {
                Component_StaticEvent: function (sender, e) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.Component.StaticEventResult = e;
                }
            }
        },
        fields: {
            ctor$2: null,
            config: null,
            events: null,
            inherits: null,
            properties: null,
            statics: null,
            InstanceField: null,
            InstanceEventResult: 0
        },
        events: {
            InstanceEvent: null
        },
        props: {
            InstanceProperty: null
        },
        ctors: {
            init: function () {
                this.InstanceField = { };
                this.InstanceProperty = { };
            },
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2310.BaseComponent.ctor.call(this);
                this.addInstanceEvent(Bridge.fn.cacheBind(this, this.Component_InstanceEvent));

                this.InstanceEvent(null, 1);
            }
        },
        methods: {
            Component_InstanceEvent: function (sender, e) {
                this.InstanceEventResult = e;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2344.Foo", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2344.IFoo$2(HTMLElement,System.String)],
        $kind: "nested class",
        statics: {
            methods: {
                SomeMethod: function (T, V, instance) {
                    instance["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$" + Bridge.getTypeAlias(T) + "$" + Bridge.getTypeAlias(V) + "$addEv"](function (x) {
                        x["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$" + Bridge.getTypeAlias(T) + "$" + Bridge.getTypeAlias(V) + "$Something"]();
                    });
                    instance["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$" + Bridge.getTypeAlias(T) + "$" + Bridge.getTypeAlias(V) + "$DoInvoke"]();
                }
            }
        },
        events: {
            Ev: null
        },
        props: {
            First: null,
            Second: null
        },
        alias: [
            "First", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$HTMLElement$System$String$First",
            "Second", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$HTMLElement$System$String$Second",
            "addEv", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$HTMLElement$System$String$addEv",
            "removeEv", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$HTMLElement$System$String$removeEv",
            "Something", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$HTMLElement$System$String$Something",
            "DoInvoke", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2344$IFoo$2$HTMLElement$System$String$DoInvoke"
        ],
        methods: {
            Something: function () {
                this.Second = "zzz";
            },
            DoInvoke: function () {
                !Bridge.staticEquals(this.Ev, null) ? this.Ev(this) : null;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.G1$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IFoo$1(T)],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2369$IFoo$1$" + Bridge.getTypeAlias(T) + "$Foo"],
        methods: {
            Foo: function (t) {
                return 1;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.G2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IFoo$1(System.String)],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2369$IFoo$1$System$String$Foo"],
        methods: {
            Foo: function (t) {
                return 2;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.G3", {
        inherits: [System.IEquatable$1(System.Array.type(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2369.IBar)),System.IEquatable$1(System.Array.type(System.String))],
        $kind: "nested class",
        fields: {
            tracker: 0
        },
        alias: ["equalsT", "System$IEquatable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2369$IBar$Array$equalsT"],
        methods: {
            equalsT: function (other) {
                this.tracker = 1;
                return true;
            },
            System$IEquatable$1$System$String$Array$equalsT: function (other) {
                this.tracker = 2;
                return true;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.Point", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.IChangeBoxedPoint],
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.Point(); }
            }
        },
        fields: {
            m_x: 0,
            m_y: 0
        },
        alias: ["Change", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2386$IChangeBoxedPoint$Change"],
        ctors: {
            $ctor1: function (x, y) {
                this.$initialize();
                this.m_x = x;
                this.m_y = y;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Change: function (x, y) {
                this.m_x = x;
                this.m_y = y;
            },
            toString: function () {
                return System.String.format("({0}, {1})", Bridge.box(this.m_x, System.Int32), Bridge.box(this.m_y, System.Int32));
            },
            getHashCode: function () {
                var h = Bridge.addHash([1852403652, this.m_x, this.m_y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.Point)) {
                    return false;
                }
                return Bridge.equals(this.m_x, o.m_x) && Bridge.equals(this.m_y, o.m_y);
            },
            $clone: function (to) {
                var s = to || new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2386.Point();
                s.m_x = this.m_x;
                s.m_y = this.m_y;
                return s;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge240B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge240A],
        methods: {
            GetString: function () {
                this.Data = (this.Data + 1) | 0;
                return "B";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.Linear", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.IKernel$1(System.Array.type(System.String))],
        $kind: "nested class",
        alias: ["Function", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2486$IKernel$1$System$String$Array$Function"],
        methods: {
            Function: function (x) {
                return 123;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.Linear1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.IKernel$1(System.Array.type(System.Double))],
        $kind: "nested class",
        alias: ["Function", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2486$IKernel$1$System$Double$Array$Function"],
        methods: {
            Function: function (x) {
                return x[System.Array.index(0, x)];
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.Linear2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.IKernel$1(System.Array.type(System.Double, 2))],
        $kind: "nested class",
        alias: ["Function", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2486$IKernel$1$System$Double$Array$2$Function"],
        methods: {
            Function: function (x) {
                return x.get([1, 1]);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.Linear3", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2486.IKernel$1(System.Collections.Generic.List$1(System.Double))],
        $kind: "nested class",
        alias: ["Function", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2486$IKernel$1$System$Collections$Generic$List$1$System$Double$Function"],
        methods: {
            Function: function (x) {
                return x.getItem(1);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.BaseClass],
        $kind: "nested class",
        fields: {
            Field00: 0
        },
        ctors: {
            init: function () {
                this.Field00 = 2;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.NTConnectOptions", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.ConnectOptions],
        $kind: "nested class",
        props: {
            AssemblyName: {
                get: function () {
                    return "test.dll";
                }
            },
            BrandName: {
                get: function () {
                    return "test";
                }
            },
            LogConnectionLoss: false,
            Port: 0,
            Server: null,
            System: null,
            UseWebSocket: false
        },
        ctors: {
            init: function () {
                this.UseWebSocket = true;
            },
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2497.ConnectOptions.ctor.call(this);
                this.HasHdsAlwaysEnabled = true;
                this.LogConnectionLoss = true;
                this.Provider = { };
                this.Server = "";
                this.System = "NT";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2550.B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2550.IA],
        $kind: "nested class",
        props: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2550$IA$A: {
                get: function () {
                    return 0;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.FormEditStore", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.IAmSinglePropertyStore$1(System.String)],
        $kind: "nested class",
        props: {
            ViewModel: {
                get: function () {
                    return "It works!";
                }
            }
        },
        alias: ["ViewModel", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638$IAmSinglePropertyStore$1$System$String$ViewModel"]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.DerivedClass", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.BaseClass],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G1$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I1$1(T)],
        $kind: "nested class",
        props: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Prop1: {
                get: function () {
                    return 2;
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        alias: [
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$Prop1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$adde1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$removee1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$removee1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$M1"
        ],
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$getItem: function (idx) {
                return 1;
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$setItem: function (idx, value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$adde1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$removee1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$M1: function () {
                return 3;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G2$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I1$1(T)],
        $kind: "nested class",
        props: {
            Prop1: {
                get: function () {
                    return 2;
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        alias: [
            "getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$Prop1",
            "adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$adde1",
            "removee1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$removee1",
            "M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$" + Bridge.getTypeAlias(T) + "$M1"
        ],
        methods: {
            getItem: function (idx) {
                return 1;
            },
            setItem: function (idx, value) {
                throw new System.NotImplementedException.ctor();
            },
            adde1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            removee1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            M1: function () {
                return 3;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G3", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I1$1(System.String)],
        $kind: "nested class",
        props: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$Prop1: {
                get: function () {
                    return 2;
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$getItem: function (idx) {
                return 1;
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$setItem: function (idx, value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$adde1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$removee1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$M1: function () {
                return 3;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G4", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I1$1(System.String)],
        $kind: "nested class",
        props: {
            Prop1: {
                get: function () {
                    return 2;
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        alias: [
            "getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$getItem",
            "setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$setItem",
            "Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$Prop1",
            "adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$adde1",
            "removee1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$removee1",
            "M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I1$1$System$String$M1"
        ],
        methods: {
            getItem: function (idx) {
                return 1;
            },
            setItem: function (idx, value) {
                throw new System.NotImplementedException.ctor();
            },
            adde1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            removee1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            M1: function () {
                return 3;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G5$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I2$1(T)],
        $kind: "nested class",
        props: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1: {
                get: function () {
                    return 2;
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        alias: [
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$Prop1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$adde1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$removee1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$M1"
        ],
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem: function (idx) {
                return 1;
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem: function (idx, value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1: function () {
                return 3;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G6$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I2$1(T)],
        $kind: "nested class",
        props: {
            Prop1: {
                get: function () {
                    return 2;
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        alias: [
            "getItem", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem"],
            "setItem", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem"],
            "Prop1", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1"],
            "adde1", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1"],
            "removee1", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$removee1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1"],
            "M1", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$" + Bridge.getTypeAlias(T) + "$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1"]
        ],
        methods: {
            getItem: function (idx) {
                return 1;
            },
            setItem: function (idx, value) {
                throw new System.NotImplementedException.ctor();
            },
            adde1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            removee1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            M1: function () {
                return 3;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G7", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I2$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.BaseClass)],
        $kind: "nested class",
        props: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1: {
                get: function () {
                    return 2;
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        alias: [
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$removee1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1"
        ],
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem: function (idx) {
                return 1;
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$setItem: function (idx, value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$removee1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1: function () {
                return 3;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.G8", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.I2$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638A.BaseClass)],
        $kind: "nested class",
        props: {
            Prop1: {
                get: function () {
                    return 2;
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            }
        },
        alias: [
            "getItem", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$getItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$getItem"],
            "setItem", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$setItem", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$setItem"],
            "Prop1", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$Prop1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Prop1"],
            "adde1", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$adde1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$adde1"],
            "removee1", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$removee1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$removee1"],
            "M1", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$BaseClass$M1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638A$I2$1$M1"]
        ],
        methods: {
            getItem: function (idx) {
                return 1;
            },
            setItem: function (idx, value) {
                throw new System.NotImplementedException.ctor();
            },
            adde1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            removee1: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            M1: function () {
                return 3;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2685.TestClass", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2685.BaseClass,Bridge.ClientTest.Batch3.BridgeIssues.Bridge2685.IBase],
        $kind: "nested class",
        props: {
            X: 0
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge2685.BaseClass.ctor.call(this, y);
                this.X = x;
            }
        },
        methods: {
            toString: function () {
                return System.String.format("{0} - {1}", Bridge.box(this.X, System.Int32), Bridge.box(this.Y, System.Int32));
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2792.B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2792.A],
        $kind: "nested class",
        props: {
            Name: {
                get: function () {
                    return "Pass";
                }
            },
            BaseName: {
                get: function () {
                    return Bridge.ensureBaseProperty(this, "Name").$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2792$A$Name;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Postgraduate", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.IStudent],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Professor", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2795.Student],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840.NullSerialiser", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2840.ISerialiseToAndFromJson],
        $kind: "nested class",
        alias: [
            "Serialise", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2840$ISerialiseToAndFromJson$Serialise",
            "Deserialise", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2840$ISerialiseToAndFromJson$Deserialise"
        ],
        methods: {
            Serialise: function (T, value) {
                return System.String.concat("_", value);
            },
            Deserialise: function (T, json) {
                return Bridge.getDefaultValue(T);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived21", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived1],
        $kind: "nested class",
        methods: {
            Foo: function () {
                return 21;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived22", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived1],
        $kind: "nested class",
        methods: {
            Foo$1: function () {
                return 22;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived23", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived1],
        $kind: "nested class",
        methods: {
            Foo: function (s) {
                return 23;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived24", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived1],
        $kind: "nested class",
        methods: {
            Foo$1: function (s) {
                return 24;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived25", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2874.Derived1],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2943.A$1.B", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2943.A$1(T)],
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2962.Class2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2962.Class1],
        $kind: "nested class",
        methods: {
            Method2: function () {
                this.Method1(System.String, "parameter1value");
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge304", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.IBridge304],
        props: {
            X: null
        },
        alias: ["F", "Bridge$ClientTest$Batch3$BridgeIssues$IBridge304$F"],
        methods: {
            F: function (x) {
                this.X = x;
            },
            F$1: function () {
                this.X = "void F()";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge306A.Props", {
        $kind: "nested class",
        fields: {
            Name: null
        },
        methods: {
            toString: function () {
                return this.Name;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge306B.Props", {
        $kind: "nested class",
        fields: {
            Name: null
        },
        methods: {
            toString: function () {
                return this.Name;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.A],
        $kind: "nested class",
        props: {
            Property: {
                set: function (value) {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge3086.sb.append("B Set! " + (value || ""));
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3088.A", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3088.Base],
        $kind: "nested class",
        props: {
            x: {
                get: function () {
                    return ((Bridge.ensureBaseProperty(this, "x").$Bridge$ClientTest$Batch3$BridgeIssues$Bridge3088$Base$x + 1) | 0);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3134.SomeWork", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3134.ISomeWork],
        $kind: "nested class",
        alias: ["Exec", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3134$ISomeWork$Exec"],
        methods: {
            Exec: function (T, progress) {
                if (progress === void 0) { progress = null; }
                return (!Bridge.staticEquals(progress, null)) ? "not empty" : "empty";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3178.MyAction", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3178.IDispatcherAction],
        $kind: "nested class",
        $literal: true,
        ctors: {
            ctor: function (value) {
                var $this = { };
                $this.$getType = function () { return Bridge.ClientTest.Batch3.BridgeIssues.Bridge3178.MyAction; };
                (function (){
                    this.Value = null;
                    this.Value = value;
                }).call($this);
                return $this;
            }
        }
    });

    /**
     * An interface implementing a generic spacialization to the interface
     above
     *
     * @abstract
     * @private
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.IProperty$1
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.IProperty
     * @param   {Function}    [name]
     */
    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.IProperty$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.IProperty],
        $kind: "nested interface"
    }; });

    /**
     * Class that will implement the interface above.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224.Foo
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224.IFoo
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224.Foo", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3224.IFoo],
        $kind: "nested class",
        fields: {
            Value: 0
        },
        alias: ["Value", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3224$IFoo$Value"],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Value = 5;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3235.Employee", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3235.Person],
        $kind: "nested class",
        props: {
            Role: null
        },
        ctors: {
            ctor: function (name, role) {
                this.$initialize();
                Bridge.copyProperties(this, Bridge.ClientTest.Batch3.BridgeIssues.Bridge3235.Person.ctor.call(this, name));
                this.Role = role;
            }
        }
    });

    /**
     * Simple class to just extend the A class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.B
     * @augments Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.A
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3244.A],
        $kind: "nested class"
    });

    /**
     * Generic type to base the parameter class.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Cavy
     * @augments Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Animal
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Cavy", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Animal],
        $kind: "nested class"
    });

    /**
     * Base interface that will be both the static method parameter and
     the actual passed parameter class' base.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.IFactory$1
     * @param   {Function}    [name]
     */
    Bridge.definei("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.IFactory$1", function (P) { return {
        $kind: "nested interface"
    }; });

    /**
     * A class to use the interface
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassProbe
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.IInterfaceProbe
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.ClassProbe", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3292.IInterfaceProbe],
        $kind: "nested class"
    });

    /**
     * Subclass which should call the params constructor.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.SubClassBrokenConstructorCall
     * @augments Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.BaseClass
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.SubClassBrokenConstructorCall", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.BaseClass],
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.BaseClass.$ctor1.call(this);
            }
        }
    });

    /**
     * Subclass that forces calling the params constructor (workaround
     for the issue that was reproduced here).
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.SubClassWorkAroundConstructorCall
     * @augments Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.BaseClass
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.SubClassWorkAroundConstructorCall", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.BaseClass],
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3382.BaseClass.$ctor1.call(this, System.Array.init(0, null, System.String));
            }
        }
    });

    /**
     * Class implementing two identical signature methods, differring only
     by the generics argument requested.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.MyClass$1
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.IFace$1
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.IFace$1
     * @param   {Function}    [name]
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.MyClass$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.IFace$1(T),Bridge.ClientTest.Batch3.BridgeIssues.Bridge3388.IFace$1(System.Collections.Generic.List$1(T))],
        $kind: "nested class",
        alias: [
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3388$IFace$1$Method", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3388$IFace$1$" + Bridge.getTypeAlias(T) + "$Method",
            "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3388$IFace$1$System$Collections$Generic$List$1$Method", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3388$IFace$1$System$Collections$Generic$List$1$" + Bridge.getTypeAlias(T) + "$Method"
        ],
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge3388$IFace$1$Method: function () {
                return "single";
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge3388$IFace$1$System$Collections$Generic$List$1$Method: function () {
                return "list";
            }
        }
    }; });

    /**
     * This class will just inherit the Type() property from the abstract
     class above.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.ConcreteClass
     * @augments Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.AbstractClass
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.ConcreteClass", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.AbstractClass],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.SubClass", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3426.SuperClass],
        $kind: "nested class"
    });

    /**
     * An interface to be bound to the test class, defining a member here
     does not affect the reproducibility of the issue.
     *
     * @abstract
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome2
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome1],
        $kind: "nested interface"
    });

    /**
     * This overrides the interface's member by a member with same name
     and a different type.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.Some1
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.Some1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome1],
        $kind: "nested class",
        fields: {
            testValue: null
        },
        props: {
            TestValue: {
                get: function () {
                    return this.testValue;
                },
                set: function (value) {
                    this.testValue = value;
                }
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge3432$ISome1$TestValue: {
                get: function () {
                    return 25;
                }
            }
        }
    });

    /**
     * An empty class, just extending both the class and the
     interface itself, so that it would bind the implementation to the
     contract with the interface.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c2
     * @augments Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c1
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.i1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.c1,Bridge.ClientTest.Batch3.BridgeIssues.Bridge3453.i1],
        $kind: "nested class",
        alias: ["m1", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3453$i1$m1"]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467_Test1.NestedClass", {
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.SubClass", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.BaseClass],
        $kind: "nested class",
        ctors: {
            ctor: function (i) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.BaseClass.ctor.call(this, i);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.TestList$1", function (T) { return {
        inherits: [System.Collections.Generic.List$1(T),Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.ITestInterface$1(T),Bridge.ClientTest.Batch3.BridgeIssues.Bridge3502.ITestReadValue$1(System.Collections.Generic.IReadOnlyList$1(T))],
        $kind: "nested class",
        props: {
            TestCount: 0,
            Value: {
                get: function () {
                    return this;
                }
            }
        },
        alias: [
            "TestCount", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3502$ITestInterface$1$" + Bridge.getTypeAlias(T) + "$TestCount",
            "Value", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge3502$ITestReadValue$1$System$Collections$Generic$IReadOnlyList$1$" + Bridge.getTypeAlias(T) + "$Value", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3502$ITestReadValue$1$Value"]
        ],
        ctors: {
            ctor: function (items) {
                this.$initialize();
                System.Collections.Generic.List$1(T).ctor.call(this);
                this.AddRange(items);
                this.TestCount = this.Count;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.ProbeImplementation", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3550.IProbe],
        $kind: "nested class",
        props: {
            Value: 0,
            Text: null
        },
        alias: [
            "Value", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3550$IProbe$Value",
            "Text", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3550$IProbe$Text"
        ]
    });

    /**
     * Original sample, as elements are dropped.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.A
     * @implements  System.Collections.Generic.IEnumerable$1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.A", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Object)],
        $kind: "nested class",
        statics: {
            methods: {
                /**
                 * just drop whatever is provided. Result's count will always be 0.
                 *
                 * @static
                 * @public
                 * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.A
                 * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.A
                 * @param   {Array.<object>}                                        f
                 * @return  {Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.A}
                 */
                op_Implicit: function (f) {
                    return null;
                }
            }
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Object$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]]
    });

    /**
     * A sample where the number of elements is kept.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.B
     * @implements  System.Collections.Generic.IEnumerable$1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.B", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Object)],
        $kind: "nested class",
        statics: {
            methods: {
                op_Implicit: function (f) {
                    return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3628.B.$ctor1(f);
                }
            }
        },
        fields: {
            f: null
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Object$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (f) {
                this.$initialize();
                this.f = f;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Class1$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface1],
        $kind: "nested class",
        fields: {
            Name: null
        },
        alias: ["Name", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3729$Interface1$Name"]
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface3", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface1],
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface1],
        $kind: "nested interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem],
        $kind: "nested class",
        props: {
            ReadOnly: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem2],
        $kind: "nested class",
        props: {
            ReadOnly: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem3", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem3],
        $kind: "nested class",
        props: {
            ReadOnly: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem4", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem4],
        $kind: "nested class",
        props: {
            ReadOnly: false
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.Impl", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3876.IAbstr$1(System.String)],
        $kind: "nested class",
        props: {
            SomeProperty: 0
        },
        alias: ["SomeProperty", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge3876$IAbstr$1$System$String$SomeProperty", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3876$IAbstr$1$SomeProperty"]]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.c2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3904.c1],
        $kind: "nested class"
    });

    /**
     * Class implementing the above interface's method.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.A
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.I
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.A", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.I],
        $kind: "nested class",
        alias: ["toString", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3907$I$ToString"],
        methods: {
            toString: function () {
                return "A";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge436Second", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge436First],
        methods: {
            ToObject: function () {
                return (Bridge.ClientTest.Batch3.BridgeIssues.Bridge436First.prototype.ToObject.call(this) || "") + "2";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.DerivedClass1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.BaseClass],
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.BaseClass.ctor.call(this);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.DerivedClass2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.BaseClass],
        $kind: "nested class",
        props: {
            B: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge522.BaseClass.ctor.call(this);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge537B", {
        inherits: [System.Collections.Generic.IEnumerable$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge537A)],
        statics: {
            methods: {
                TestB2: function () {
                    var $t;
                    var l = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge537B();

                    l.Add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge537A(), $t.Id = 103, $t));

                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge537B.GetCount(l);
                },
                GetCount: function (l) {
                    return l.list.Count;
                },
                TestB1: function () {
                    var $t;
                    var l = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge537B();

                    l.Add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge537A(), $t.Id = 101, $t));
                    l.Add(($t = new Bridge.ClientTest.Batch3.BridgeIssues.Bridge537A(), $t.Id = 102, $t));

                    return l.GetCount();
                }
            }
        },
        fields: {
            list: null
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge537A$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge537A)).ctor();
            }
        },
        methods: {
            GetCount: function () {
                return this.list.Count;
            },
            Add: function (value) {
                this.list.add(value);
            },
            GetEnumerator: function () {
                return this.list.GetEnumerator().$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.list.GetEnumerator().$clone();
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge558B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge558A],
        methods: {
            zz: function (a) {
                return Bridge.ClientTest.Batch3.BridgeIssues.Bridge558A.prototype.zz.call(this, a);
            },
            zz$1: function (a) {
                return Bridge.ClientTest.Batch3.BridgeIssues.Bridge558A.prototype.zz$1.call(this, a);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge559B1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A1],
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A1.ctor.call(this);
                this.result = (this.result || "") + " -> Bridge559B1 -- unexpected!";
            },
            $ctor1: function (a) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A1.$ctor1.call(this, a);
                this.result = (this.result || "") + " -> Bridge559B1$1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge559B2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A2],
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A2.ctor.call(this);
                this.result = (this.result || "") + " ClassB -- unexpected!";
            },
            $ctor1: function (a) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge559A2.$ctor1.call(this, a);
                this.result = (this.result || "") + " ClassB$1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge566B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge566A],
        methods: {
            GetName: function () {
                return "Ted";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge623A],
        ctors: {
            ctor: function (foo, func) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge623A.ctor.call(this, foo, func);
            }
        },
        methods: {
            GetFoo: function () {
                return Bridge.Int.mul(2, this.foo);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge635B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge635A],
        methods: {
            internalFunc1: function () {
                return "B.Test1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652B1", {
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.log = "Bridge652B1";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652B2", {
        inherits: [System.IComparable],
        $kind: "nested class",
        alias: ["compareTo", "System$IComparable$compareTo"],
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.log = "Bridge652B2";
            }
        },
        methods: {
            compareTo: function (obj) {
                return 0;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge693B.Bridge693C", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.IBridge693D],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_IInterface]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_4", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_3],
        statics: {
            fields: {
                field1: 0
            },
            ctors: {
                init: function () {
                    this.field1 = 1;
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Derived", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Base],
        methods: {
            Test: function () {
                Bridge.Test.NUnit.Assert.AreEqual(2, this.somethingElse2());
                Bridge.Test.NUnit.Assert.AreEqual(2, this.somethingElse2());
                Bridge.Test.NUnit.Assert.AreEqual(1, this.somethingElse());

                Bridge.Test.NUnit.Assert.AreEqual(3, this.somethingElse3());
                Bridge.Test.NUnit.Assert.AreEqual(3, this.somethingElse3());
                Bridge.Test.NUnit.Assert.AreEqual(3, this.somethingElse3());

                Bridge.Test.NUnit.Assert.AreEqual(41, this.somethingElse4_1());
                Bridge.Test.NUnit.Assert.AreEqual(41, this.somethingElse4_1());
                Bridge.Test.NUnit.Assert.AreEqual(4, this.somethingElse4());
            },
            somethingElse2$1: function () {
                return 2;
            },
            somethingElse4_1: function () {
                return 41;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.MyType", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.MyOtherType]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.NS2.Program", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.NS1.Base],
        statics: {
            methods: {
                Test: function () {
                    var test = "Something1";

                    Bridge.Test.NUnit.Assert.AreEqual("Something1", test);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.SubClass", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.BaseClass],
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.BaseClass.ctor.call(this, System.Decimal(1));

            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.SubClass0", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.BaseClass],
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.BaseClass.ctor.call(this, System.Decimal(0));

            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.SubClass0m", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.BaseClass],
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.BaseClass.ctor.call(this, System.Decimal(0.0));

            }
        }
    });

    Bridge.define("Derived2723.Classes2723.B2723", {
        inherits: [Problem2723.Classes2723.A2723],
        methods: {
            Test: function (mode) {
                switch (mode) {
                    case Bridge.global.Problem2723.Classes2723.A2723.Mode.Value1: 
                        Bridge.Test.NUnit.Assert.Fail();
                        break;
                    case Bridge.global.Problem2723.Classes2723.A2723.Mode.Value2: 
                        break;
                    default: 
                        throw new System.ArgumentOutOfRangeException.$ctor3("mode", Bridge.box(mode, Problem2723.Classes2723.A2723.Mode, System.Enum.toStringFn(Problem2723.Classes2723.A2723.Mode)), null);
                }

                Bridge.Test.NUnit.Assert.AreEqual(Bridge.global.Problem2723.Classes2723.A2723.Mode.Value2, mode);
            }
        }
    });

    Bridge.define("Paige.PaigeObject.PaigeObject", {
        inherits: [Paige.Core.BaseObject],
        props: {
            ID: System.Int64(0),
            PaigeIdentifierID: System.Int64(0),
            OriginatingActionRunInstanceID: System.Int64(0)
        },
        ctors: {
            ctor: function (incomingData) {
                if (incomingData === void 0) { incomingData = null; }

                this.$initialize();
                Paige.Core.BaseObject.ctor.call(this, incomingData);
            }
        }
    });

    Bridge.define("Test2759.Test2.Test3.SpecialControl", {
        inherits: [Test2759.Test2.Test3.IControl]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C15", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C14,Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I9$1(System.Int32)],
        $kind: "nested class",
        alias: ["Invoke", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I9$1$System$Int32$Invoke$1"]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C17", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C16],
        $kind: "nested class",
        methods: {
            Foo$1: function () {
                this.log = "C17";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C21", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C20],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo"],
        methods: {
            Foo: function () {
                this.log = "C21";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C24", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C23,Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I10],
        $kind: "nested class",
        alias: ["Foo", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I10$Foo"]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C5", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.C4,Bridge.ClientTest.Batch3.BridgeIssues.Bridge1025.I3],
        $kind: "nested class",
        methods: {
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge1025$I3$Foo: function () {
                return "C5";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo1],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass2$2", function (T, K) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass1$2(System.Int32,System.String)],
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass2$2", function (T, K) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass1$2(System.Int32,System.String)],
        $kind: "nested class"
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.CClass$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1821.IClass$1(T)],
        $kind: "nested class",
        alias: ["Act", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge1821$IInterface$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge1821$TT$1$" + Bridge.getTypeAlias(T) + "$Act"],
        methods: {
            Act: function (v) {
                return v;
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.Test3", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.Test2],
        $kind: "nested class",
        statics: {
            ctors: {
                ctor: function () {
                    Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer = (Bridge.ClientTest.Batch3.BridgeIssues.Bridge1969.buffer || "") + "Test3";
                }
            },
            methods: {
                Foo: function () { }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar],
        $kind: "nested class",
        fields: {
            Field01: 0
        },
        ctors: {
            init: function () {
                this.Field01 = 3;
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.Props", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.IHaveStore$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2638.FormEditStore)],
        $kind: "nested class",
        props: {
            Store: null
        },
        alias: ["Store", ["Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638$IHaveStore$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638$FormEditStore$Store", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge2638$IHaveStore$1$Store"]]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge306A", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge306Component$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge306A.Props)],
        statics: {
            methods: {
                New: function (props) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge306Component$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge306A.Props).New(Bridge.ClientTest.Batch3.BridgeIssues.Bridge306A, props);
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge306B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge306Component$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge306B.Props)],
        statics: {
            methods: {
                New: function (props) {
                    return Bridge.ClientTest.Batch3.BridgeIssues.Bridge306Component$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge306B.Props).New(Bridge.ClientTest.Batch3.BridgeIssues.Bridge306B, props);
                }
            }
        }
    });

    /**
     * A generic class defining the interface above.
     *
     * @private
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.Property$1
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.IProperty$1
     * @param   {Function}    [name]
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.Property$1", function (T) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3222.IProperty$1(T)],
        $kind: "nested class",
        fields: {
            value: Bridge.getDefaultValue(T)
        },
        props: {
            Value: {
                get: function () {
                    return this.value;
                },
                set: function (value) {
                    this.value = value;
                }
            },
            Bridge$ClientTest$Batch3$BridgeIssues$Bridge3222$IProperty$Value: {
                get: function () {
                    return this.value;
                },
                set: function (value) {
                    this.value = Bridge.cast(Bridge.unbox(value, T), T);
                }
            }
        },
        alias: ["Value", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3222$IProperty$1$" + Bridge.getTypeAlias(T) + "$Value$1"]
    }; });

    /**
     * Parameter class, that implements the base interface above
     specifying it as the generic type 'Cavy'.
     *
     * @private
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.IFactory$1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.IFactory$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Cavy)],
        $kind: "nested class",
        props: {
            /**
             * Just a string to check value against in the assertion.
             *
             * @instance
             * @public
             * @readonly
             * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory
             * @function FactoryName
             * @type string
             */
            FactoryName: {
                get: function () {
                    return "Guinea Pig Factory";
                }
            }
        },
        alias: [
            "FactoryName", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3269$IFactory$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge3269$Cavy$FactoryName",
            "Builder", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3269$IFactory$1$Bridge$ClientTest$Batch3$BridgeIssues$Bridge3269$Cavy$Builder"
        ],
        methods: {
            /**
             * Just to implement the interface's
             *
             * @instance
             * @public
             * @this Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory
             * @memberof Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory
             * @return  {System.Func}
             */
            Builder: function () {
                return $asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory.f1;
            }
        }
    });

    Bridge.ns("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory", $asm.$);

    Bridge.apply($asm.$.Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.CavyFactory, {
        f1: function () {
            return new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3269.Cavy();
        }
    });

    /**
     * The class that will be instantiated and cast into ISome1 to get the
     implementation defined in Some1.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.Some2
     * @augments Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.Some1
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome2
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.Some2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.Some1,Bridge.ClientTest.Batch3.BridgeIssues.Bridge3432.ISome2],
        $kind: "nested class"
    });

    /**
     * This tests whether a sealed nested class set up works on Bridge.
     The way the tests are written allows it to break the code no matter
     how minification is set in bridge.json -- as long as the issue is still
     present.
     *
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467_Test1
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467_ITest$1
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467_Test1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467_ITest$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge3467_Test1.NestedClass)]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Class2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Class1$1(System.String),Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface1,Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface2,Bridge.ClientTest.Batch3.BridgeIssues.Bridge3729.Interface3],
        $kind: "nested class",
        alias: ["Name", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3729$Interface1$Name"]
    });

    /**
     * Class inheriting from the class implementing the interface above,
     and also specifying it implements the same interface as the class
     it inherits from.
     *
     * @public
     * @class Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.B
     * @augments Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.A
     * @implements  Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.I
     */
    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.A,Bridge.ClientTest.Batch3.BridgeIssues.Bridge3907.I],
        $kind: "nested class",
        alias: ["toString", "Bridge$ClientTest$Batch3$BridgeIssues$Bridge3907$I$ToString"]
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge436Third", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge436Second],
        methods: {
            ToObject: function () {
                return (Bridge.ClientTest.Batch3.BridgeIssues.Bridge436Second.prototype.ToObject.call(this) || "") + "3";
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B1],
        ctors: {
            ctor: function (foo, func) {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge623B1.ctor.call(this, foo, func);
            }
        },
        methods: {
            GetFoo: function () {
                return Bridge.Int.mul(3, this.foo);
            },
            Call: function () {
                return ((this.func() + 1000) | 0);
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652A1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652C$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652B1)],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652A2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652D$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge652.Bridge652B2)],
        $kind: "nested class"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge693B", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge693A$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge693B.Bridge693C)],
        ctors: {
            ctor: function () {
                this.$initialize();
                Bridge.ClientTest.Batch3.BridgeIssues.Bridge693A$1(Bridge.ClientTest.Batch3.BridgeIssues.Bridge693B.Bridge693C).ctor.call(this, new Bridge.ClientTest.Batch3.BridgeIssues.Bridge693B.Bridge693C());
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_1", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge883_2]
    });

    Bridge.define("Paige.PaigeObject.PaigeObjectList", {
        inherits: [System.Collections.Generic.IEnumerable$1(Paige.PaigeObject.PaigeObject)],
        fields: {
            mList: null
        },
        props: {
            Count: {
                get: function () {
                    return this.mList.Count;
                }
            }
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$Paige$PaigeObject$PaigeObject$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            init: function () {
                this.mList = new (System.Collections.Generic.List$1(Paige.PaigeObject.PaigeObject)).ctor();
            },
            ctor: function (incomingData) {
                if (incomingData === void 0) { incomingData = null; }

                this.$initialize();
                if (incomingData != null) {
                }
            }
        },
        methods: {
            getItem: function (index) {
                return this.mList.getItem(index);
            },
            setItem: function (index, value) {
                this.mList.insert(index, value);
            },
            AddPaigeObject: function (paige_object) {
                this.mList.add(paige_object);
            },
            GetEnumerator: function () {
                return this.mList.GetEnumerator().$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            },
            RemovePaigeObject: function (paige_object) {
                this.mList.remove(paige_object);
            }
        }
    });

    Bridge.define("Test2759.Test2.Test3.IParentProperties", {
        $kind: "interface"
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo3", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo2],
        $kind: "nested class",
        statics: {
            fields: {
                Bar: null
            },
            ctors: {
                init: function () {
                    this.Bar = "Do";
                }
            }
        }
    });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass3$2", function (T, K) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.DataClass2$2(System.Int32,System.String)],
        $kind: "nested class",
        fields: {
            Value4: Bridge.getDefaultValue(K)
        },
        props: {
            Value3: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass3$2", function (T, K) { return {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1340.StaticDataClass2$2(System.Int32,System.String)],
        $kind: "nested class",
        statics: {
            fields: {
                Value4: Bridge.getDefaultValue(K)
            },
            props: {
                Value3: Bridge.getDefaultValue(T)
            }
        }
    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar2", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar1],
        $kind: "nested class",
        fields: {
            Field02: 0
        },
        ctors: {
            init: function () {
                this.Field02 = 4;
            }
        }
    });

    Bridge.define("Test2759.Test2.Test3.C$2", function (TControl, TParentProps) { return {

    }; });

    Bridge.define("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo4", {
        inherits: [Bridge.ClientTest.Batch3.BridgeIssues.Bridge1339.Foo3],
        $kind: "nested class"
    });

    Bridge.define("Test2759.Test2.Test3.A", {
        inherits: [Test2759.Test2.Test3.B$1(Test2759.Test2.Test3.C$2(Test2759.Test2.Test3.SpecialControl,Test2759.Test2.Test3.IParentProperties))]
    });

    var $m = Bridge.setMetadata,
        $n = ["System.Collections.Generic","System","Bridge.ClientTest.Batch3.BridgeIssues","System.Threading.Tasks"];
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1900", function () { return {"m":[{"a":2,"n":"GetValue","is":true,"t":8,"pi":[{"n":"value","out":true,"pt":System.Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"GetValue","rt":$n[0].List$1(System.Object),"p":[System.Object]},{"a":1,"n":"TestOutRef","is":true,"t":8,"pi":[{"n":"value","out":true,"pt":$n[1].Int32,"ps":0},{"n":"s","ref":true,"pt":$n[1].String,"ps":1}],"sn":"TestOutRef","rt":$n[1].Boolean,"p":[$n[1].Int32,$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"TryGetValue1","is":true,"t":8,"pi":[{"n":"value","out":true,"pt":$n[1].Int32,"ps":0}],"sn":"TryGetValue1","rt":$n[1].Boolean,"p":[$n[1].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"TryGetValue2","is":true,"t":8,"pi":[{"n":"value","out":true,"pt":$n[1].Int32,"ps":0},{"n":"value2","out":true,"pt":$n[1].String,"ps":1}],"sn":"TryGetValue2","rt":$n[1].Boolean,"p":[$n[1].Int32,$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge1970.Test", function () { return {"m":[{"a":2,"n":"IsInitialized","is":true,"t":4,"rt":$n[1].Boolean,"sn":"IsInitialized","ro":true,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status", function () { return {"m":[{"at":[new Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.DisplayAttribute("tst")],"a":2,"n":"Item1","is":true,"t":4,"rt":$n[2].Bridge2558.Status,"sn":"Item1","box":function ($v) { return Bridge.box($v, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2558.Status));}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.KeyList", function (TK, TV) { return {"at":[new System.SerializableAttribute()]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3599.SortedList$2.ValueList", function (TK, TV) { return {"at":[new System.SerializableAttribute()]}; }, $n);
    $m("Bridge3001_SomeLib", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"mode","t":4,"rt":$n[1].Int32,"sn":"mode","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"something","t":4,"rt":$n[1].Int32,"sn":"something","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"val","t":4,"rt":$n[1].Int32,"sn":"val","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2051", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"TestGetElementType","is":true,"t":8,"sn":"TestGetElementType","rt":$n[1].Void}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2052", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"TestArrayCreateInstance","is":true,"t":8,"sn":"TestArrayCreateInstance","rt":$n[1].Void},{"a":2,"n":"TestArrayCreateInstanceShouldThrow","is":true,"t":8,"sn":"TestArrayCreateInstanceShouldThrow","rt":$n[1].Void}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.T", function () { return {"td":$n[2].Bridge2088,"att":1048579,"a":1,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ShouldSeeThis","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_ShouldSeeThis","t":8,"rt":$n[1].Int32,"fg":"ShouldSeeThis","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_ShouldSeeThis","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"ShouldSeeThis"},"fn":"ShouldSeeThis"},{"a":1,"backing":true,"n":"<ShouldSeeThis>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"ShouldSeeThis","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL1", function () { return {"td":$n[2].Bridge2088,"att":1048579,"a":1,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ShouldSeeThis1","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_ShouldSeeThis1","t":8,"rt":$n[1].Int32,"fg":"ShouldSeeThis1","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_ShouldSeeThis1","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"ShouldSeeThis1"},"fn":"ShouldSeeThis1"},{"a":1,"backing":true,"n":"<ShouldSeeThis1>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"ShouldSeeThis1","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2088.OL2", function () { return {"td":$n[2].Bridge2088,"att":1048579,"a":1,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ShouldSeeThis2","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_ShouldSeeThis2","t":8,"rt":$n[1].Int32,"fg":"ShouldSeeThis2","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_ShouldSeeThis2","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"ShouldSeeThis2"},"fn":"ShouldSeeThis2"},{"a":1,"backing":true,"n":"<ShouldSeeThis2>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"ShouldSeeThis2","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2212", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Run","t":8,"sn":"Run","rt":$n[1].Void},{"a":2,"n":"TestDelegateBindCache","is":true,"t":8,"sn":"TestDelegateBindCache","rt":$n[1].Void},{"a":2,"n":"runCounter","t":4,"rt":$n[1].Int32,"sn":"runCounter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"test","t":4,"rt":$n[1].Int32,"sn":"test","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2220", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Test","t":8,"pi":[{"n":"arr","pt":$n[1].Array.type(System.Int32),"ps":0},{"n":"x","pt":$n[1].Int32,"ps":1}],"sn":"Test","rt":$n[1].Void,"p":[$n[1].Array.type(System.Int32),$n[1].Int32]},{"a":2,"n":"TestHasElementType","is":true,"t":8,"sn":"TestHasElementType","rt":$n[1].Void}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2221", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"TestMakeArrayType","is":true,"t":8,"sn":"TestMakeArrayType","rt":$n[1].Void}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2222", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"TestGetTypeWithNullArgument","is":true,"t":8,"sn":"TestGetTypeWithNullArgument","rt":$n[1].Void}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2375.Person", function () { return {"td":$n[2].Bridge2375,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"FirstName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_FirstName","t":8,"rt":$n[1].String,"fg":"FirstName"},"s":{"a":2,"n":"set_FirstName","t":8,"p":[$n[1].String],"rt":$n[1].Void,"fs":"FirstName"},"fn":"FirstName"},{"a":1,"n":"__Property__Initializer__FirstName","t":4,"rt":$n[1].String,"sn":"__Property__Initializer__FirstName"},{"a":1,"backing":true,"n":"<FirstName>k__BackingField","t":4,"rt":$n[1].String,"sn":"FirstName"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.BaseClass", function () { return {"td":$n[2].Bridge2489,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Field","t":4,"rt":$n[1].Int32,"sn":"Field","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar", function () { return {"td":$n[2].Bridge2489,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Field00","t":4,"rt":$n[1].Int32,"sn":"Field00","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2489.Bar1", function () { return {"td":$n[2].Bridge2489,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Field01","t":4,"rt":$n[1].Int32,"sn":"Field01","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2550.B", function () { return {"td":$n[2].Bridge2550,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2550.IA", function () { return {"td":$n[2].Bridge2550,"att":162,"a":2,"m":[{"ab":true,"a":2,"n":"A","t":16,"rt":$n[1].Int32,"g":{"ab":true,"a":2,"n":"get_A","t":8,"rt":$n[1].Int32,"fg":"Bridge$ClientTest$Batch3$BridgeIssues$Bridge2550$IA$A","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Bridge$ClientTest$Batch3$BridgeIssues$Bridge2550$IA$A"},{"a":1,"backing":true,"n":"<A>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"Bridge$ClientTest$Batch3$BridgeIssues$Bridge2550$IA$A","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2584.Class1", function () { return {"td":$n[2].Bridge2584,"att":1048579,"a":1,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"field1","t":4,"rt":$n[1].Int32,"sn":"field1","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":3,"n":"field2","t":4,"rt":$n[1].Int32,"sn":"field2","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"field3","t":4,"rt":$n[1].Int32,"sn":"field3","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"field4","t":4,"rt":$n[1].Int32,"sn":"field4","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"s_field1","is":true,"t":4,"rt":$n[1].Int32,"sn":"s_field1","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":3,"n":"s_field2","is":true,"t":4,"rt":$n[1].Int32,"sn":"s_field2","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"s_field3","is":true,"t":4,"rt":$n[1].Int32,"sn":"s_field3","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"s_field4","is":true,"t":4,"rt":$n[1].Int32,"sn":"s_field4","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2600.Properties", function () { return {"td":$n[2].Bridge2600,"att":1048579,"a":1,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new System.ComponentModel.BrowsableAttribute(false)],"a":2,"n":"Prop1","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Prop1","t":8,"rt":$n[1].Int32,"fg":"Prop1","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Prop1","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"Prop1"},"fn":"Prop1"},{"a":2,"n":"Prop2","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Prop2","t":8,"rt":$n[1].Int32,"fg":"Prop2","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Prop2","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"Prop2"},"fn":"Prop2"},{"a":1,"backing":true,"n":"<Prop1>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"Prop1","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<Prop2>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"Prop2","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2735", function () { return {"nested":[$n[2].Bridge2735.Employee],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CreatePersonDefinition","is":true,"t":8,"sn":"CreatePersonDefinition","rt":$n[1].Void},{"a":2,"n":"TestExternalInheritanceWithoutCtor","is":true,"t":8,"sn":"TestExternalInheritanceWithoutCtor","rt":$n[1].Void}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2738", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"LogDates","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].DateTime,"ps":0},{"n":"b","pt":$n[1].DateTime,"ps":1}],"sn":"LogDates","rt":$n[1].Void,"p":[$n[1].DateTime,$n[1].DateTime]},{"a":2,"n":"TestAmbigiousSymbols","is":true,"t":8,"sn":"TestAmbigiousSymbols","rt":$n[1].Void}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"_x","pt":$n[1].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Run","t":8,"pi":[{"n":"a","pt":$n[1].String,"ps":0},{"n":"b","pt":$n[1].String,"ps":1}],"sn":"Run","rt":$n[1].Void,"p":[$n[1].String,$n[1].String]},{"a":2,"n":"Run1","t":8,"pi":[{"n":"a","pt":$n[1].String,"ps":0},{"n":"b","pt":$n[1].String,"ps":1},{"n":"_x","pt":$n[1].Int32,"ps":2}],"sn":"Run1","rt":$n[1].Void,"p":[$n[1].String,$n[1].String,$n[1].Int32]},{"a":2,"n":"TestCreateDelegate","is":true,"t":8,"sn":"TestCreateDelegate","rt":$n[1].Void},{"a":1,"n":"a","is":true,"t":4,"rt":$n[1].String,"sn":"a"},{"a":1,"n":"b","is":true,"t":4,"rt":$n[1].String,"sn":"b"},{"a":1,"n":"x","t":4,"rt":$n[1].Int32,"sn":"x","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2898_2.C", function () { return {"td":$n[2].Bridge2898_2,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"id","pt":$n[1].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":"M1","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"M1","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"M2","is":true,"t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"M2","rt":$n[1].Void,"p":[$n[1].String]},{"a":1,"n":"id","t":4,"rt":$n[1].Int32,"sn":"id","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A", function () { return {"td":$n[2].Bridge2940,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A","is":true,"t":4,"rt":$n[2].Bridge2940.A,"sn":"A","box":function ($v) { return Bridge.box($v, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A));}},{"a":2,"n":"B","is":true,"t":4,"rt":$n[2].Bridge2940.A,"sn":"B","box":function ($v) { return Bridge.box($v, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A));}},{"a":2,"n":"C","is":true,"t":4,"rt":$n[2].Bridge2940.A,"sn":"C","box":function ($v) { return Bridge.box($v, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A));}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.C", function () { return {"td":$n[2].Bridge2940,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetItem","is":true,"t":8,"sn":"GetItem","rt":$n[2].Bridge2940.A,"box":function ($v) { return Bridge.box($v, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A));}},{"a":2,"n":"Item","is":true,"t":16,"rt":$n[2].Bridge2940.A,"g":{"a":2,"n":"get_Item","t":8,"rt":$n[2].Bridge2940.A,"fg":"Item","is":true,"box":function ($v) { return Bridge.box($v, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A));}},"s":{"a":2,"n":"set_Item","t":8,"p":[$n[2].Bridge2940.A],"rt":$n[1].Void,"fs":"Item","is":true},"fn":"Item"},{"a":1,"n":"__Property__Initializer__Item","is":true,"t":4,"rt":$n[2].Bridge2940.A,"sn":"__Property__Initializer__Item","box":function ($v) { return Bridge.box($v, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A));}},{"a":1,"backing":true,"n":"<Item>k__BackingField","is":true,"t":4,"rt":$n[2].Bridge2940.A,"sn":"Item","box":function ($v) { return Bridge.box($v, Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A, System.Enum.toStringFn(Bridge.ClientTest.Batch3.BridgeIssues.Bridge2940.A));}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge2986.ISomeInterface", function () { return {"td":$n[2].Bridge2986,"att":162,"a":2,"m":[{"ab":true,"a":2,"n":"GetString","t":8,"sn":"Bridge$ClientTest$Batch3$BridgeIssues$Bridge2986$ISomeInterface$GetString","rt":$n[3].Task$1(System.String)}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3142.Class1", function () { return {"td":$n[2].Bridge3142,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"getProp","t":8,"sn":"getProp","rt":$n[1].String},{"a":2,"n":"Prop","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_Prop","t":8,"tpc":0,"def":function () { return this.getProp(); },"rt":$n[1].String}},{"a":1,"backing":true,"n":"<Prop>k__BackingField","t":4,"rt":$n[1].String,"sn":"Prop"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3165.NinjaScript", function () { return {"td":$n[2].Bridge3165,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Name","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[1].String,"fg":"Name"},"s":{"a":2,"n":"set_Name","t":8,"p":[$n[1].String],"rt":$n[1].Void,"fs":"Name"},"fn":"Name"},{"a":1,"backing":true,"n":"<Name>k__BackingField","t":4,"rt":$n[1].String,"sn":"Name"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3240.Person", function () { return {"td":$n[2].Bridge3240,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].DateTime],"pi":[{"n":"value","pt":$n[1].DateTime,"ps":0}],"sn":"ctor"},{"a":2,"n":"Value","t":16,"rt":$n[1].DateTime,"g":{"a":2,"n":"get_Value","t":8,"rt":$n[1].DateTime,"fg":"Value","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"Value"},{"a":1,"backing":true,"n":"<Value>k__BackingField","t":4,"rt":$n[1].DateTime,"sn":"Value","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3253.Person", function () { return {"td":$n[2].Bridge3253,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"RnWy","t":16,"rt":$n[1].Int32,"s":{"a":2,"n":"set_RnWy","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"RnWy"},"fn":"RnWy"},{"a":2,"n":"RyWn","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_RyWn","t":8,"rt":$n[1].Int32,"fg":"RyWn","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"RyWn"},{"a":2,"n":"RyWy","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_RyWy","t":8,"rt":$n[1].Int32,"fg":"RyWy","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_RyWy","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"RyWy"},"fn":"RyWy"},{"a":1,"backing":true,"n":"<RyWn>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"RyWn","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<RyWy>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"RyWy","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3356.Box", function () { return {"td":$n[2].Bridge3356,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CheckDateTime","t":8,"pi":[{"n":"time","pt":$n[1].DateTime,"ps":0}],"sn":"CheckDateTime","rt":$n[1].Void,"p":[$n[1].DateTime]},{"a":2,"n":"CheckInt","t":8,"pi":[{"n":"i","pt":$n[1].Object,"ps":0}],"sn":"CheckInt","rt":$n[1].Void,"p":[$n[1].Object]},{"a":2,"n":"PerformTest","t":8,"sn":"PerformTest","rt":$n[1].Void}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass", function () { return {"td":$n[2].Bridge3373,"nested":[$n[2].Bridge3373.MyTypeClass.MyClass1,$n[2].Bridge3373.MyTypeClass.MyClass2,$n[2].Bridge3373.MyTypeClass.MyClass3,$n[2].Bridge3373.MyTypeClass.MyClass4],"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass1", function () { return {"td":$n[2].Bridge3373.MyTypeClass,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass2", function () { return {"td":$n[2].Bridge3373.MyTypeClass,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass3", function () { return {"td":$n[2].Bridge3373.MyTypeClass,"att":1048580,"a":3,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3373.MyTypeClass.MyClass4", function () { return {"td":$n[2].Bridge3373.MyTypeClass,"att":1048580,"a":3,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3545.Size", function () { return {"td":$n[2].Bridge3545,"att":1048842,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Height","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Height","t":8,"rt":$n[1].Int32,"fg":"Height","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Height","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"Height"},"fn":"Height"},{"a":2,"n":"Width","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Width","t":8,"rt":$n[1].Int32,"fg":"Width","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Width","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"Width"},"fn":"Width"},{"a":1,"backing":true,"n":"<Height>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"Height","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<Width>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"Width","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3540.Test", function () { return {"td":$n[2].Bridge3540,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"def":function () { return {a: 1}; }},{"a":2,"n":"a","t":4,"rt":$n[1].Int32,"sn":"a","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.ITest", function () { return {"td":$n[2].Bridge3680,"att":162,"a":2,"m":[{"ab":true,"a":2,"n":"A","t":16,"rt":$n[1].String,"g":{"ab":true,"a":2,"n":"get_A","t":8,"rt":$n[1].String,"fg":"Bridge$ClientTest$Batch3$BridgeIssues$Bridge3680$ITest$A"},"s":{"ab":true,"a":2,"n":"set_A","t":8,"p":[$n[1].String],"rt":$n[1].Void,"fs":"Bridge$ClientTest$Batch3$BridgeIssues$Bridge3680$ITest$A"},"fn":"Bridge$ClientTest$Batch3$BridgeIssues$Bridge3680$ITest$A"},{"a":1,"backing":true,"n":"<A>k__BackingField","t":4,"rt":$n[1].String,"sn":"Bridge$ClientTest$Batch3$BridgeIssues$Bridge3680$ITest$A"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3680.Test", function () { return {"td":$n[2].Bridge3680,"att":1048578,"a":2,"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"A","t":16,"rt":$n[1].String,"g":{"a":1,"n":"get_A","t":8,"rt":$n[1].String,"fg":"A"},"s":{"a":1,"n":"set_A","t":8,"p":[$n[1].String],"rt":$n[1].Void,"fs":"A"},"fn":"A"},{"a":1,"backing":true,"n":"<A>k__BackingField","t":4,"rt":$n[1].String,"sn":"A"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3794.Test", function () { return {"td":$n[2].Bridge3794,"att":2,"a":2,"m":[{"n":".cctor","t":1,"sn":"ctor","sm":true},{"a":2,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicPropertyAttribute", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicPropertyAttribute()],"v":true,"a":2,"n":"ReadOnly","t":16,"rt":$n[1].Boolean,"g":{"v":true,"a":2,"n":"get_ReadOnly","t":8,"rt":$n[1].Boolean,"fg":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"v":true,"a":2,"n":"set_ReadOnly","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ReadOnly"},"fn":"ReadOnly"},{"a":1,"backing":true,"n":"<ReadOnly>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"ReadOnly","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_ReadOnly","t":8,"rt":$n[1].Boolean,"fg":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"ov":true,"a":2,"n":"set_ReadOnly","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ReadOnly"},"fn":"ReadOnly"},{"a":1,"backing":true,"n":"<ReadOnly>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicProperty2Attribute", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}],"am":true}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem2", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicProperty2Attribute()],"v":true,"a":2,"n":"ReadOnly","t":16,"rt":$n[1].Boolean,"g":{"v":true,"a":2,"n":"get_ReadOnly","t":8,"rt":$n[1].Boolean,"fg":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"v":true,"a":2,"n":"set_ReadOnly","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ReadOnly"},"fn":"ReadOnly"},{"a":1,"backing":true,"n":"<ReadOnly>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem2", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicProperty2Attribute()],"ov":true,"a":2,"n":"ReadOnly","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_ReadOnly","t":8,"rt":$n[1].Boolean,"fg":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"ov":true,"a":2,"n":"set_ReadOnly","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ReadOnly"},"fn":"ReadOnly"},{"a":1,"backing":true,"n":"<ReadOnly>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem3", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"ReadOnly","t":16,"rt":$n[1].Boolean,"g":{"v":true,"a":2,"n":"get_ReadOnly","t":8,"rt":$n[1].Boolean,"fg":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"v":true,"a":2,"n":"set_ReadOnly","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ReadOnly"},"fn":"ReadOnly"},{"a":1,"backing":true,"n":"<ReadOnly>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem3", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"ReadOnly","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_ReadOnly","t":8,"rt":$n[1].Boolean,"fg":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"ov":true,"a":2,"n":"set_ReadOnly","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ReadOnly"},"fn":"ReadOnly"},{"a":1,"backing":true,"n":"<ReadOnly>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.RootViewItem4", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"ReadOnly","t":16,"rt":$n[1].Boolean,"g":{"v":true,"a":2,"n":"get_ReadOnly","t":8,"rt":$n[1].Boolean,"fg":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"v":true,"a":2,"n":"set_ReadOnly","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ReadOnly"},"fn":"ReadOnly"},{"a":1,"backing":true,"n":"<ReadOnly>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.PropertyViewItem4", function () { return {"td":$n[2].Bridge3795,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3795.DynamicPropertyAttribute()],"ov":true,"a":2,"n":"ReadOnly","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_ReadOnly","t":8,"rt":$n[1].Boolean,"fg":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"ov":true,"a":2,"n":"set_ReadOnly","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ReadOnly"},"fn":"ReadOnly"},{"a":1,"backing":true,"n":"<ReadOnly>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Bridge3893_TestClass", function () { return {"td":$n[2].Bridge3893,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"str","pt":$n[1].String,"ps":0}],"sn":"ctor_1"},{"a":2,"n":"prop","t":4,"rt":$n[1].Int32,"sn":"prop","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3867.MyModel", function () { return {"td":$n[2].Bridge3867,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Prop","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Prop","t":8,"rt":$n[1].Int32,"fg":"Prop","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Prop","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"Prop"},"fn":"Prop"},{"a":1,"backing":true,"n":"<Prop>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"Prop","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.ClientTest.Batch3.BridgeIssues.Bridge3939.Test", function () { return {"td":$n[2].Bridge3939,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"DecimalProp","t":16,"rt":$n[1].Decimal,"g":{"a":2,"n":"get_DecimalProp","t":8,"rt":$n[1].Decimal,"fg":"DecimalProp"},"s":{"a":2,"n":"set_DecimalProp","t":8,"p":[$n[1].Decimal],"rt":$n[1].Void,"fs":"DecimalProp"},"fn":"DecimalProp"},{"a":2,"n":"DoubleProp","t":16,"rt":$n[1].Double,"g":{"a":2,"n":"get_DoubleProp","t":8,"rt":$n[1].Double,"fg":"DoubleProp","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},"s":{"a":2,"n":"set_DoubleProp","t":8,"p":[$n[1].Double],"rt":$n[1].Void,"fs":"DoubleProp"},"fn":"DoubleProp"},{"a":2,"n":"Int32Prop","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Int32Prop","t":8,"rt":$n[1].Int32,"fg":"Int32Prop","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Int32Prop","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"Int32Prop"},"fn":"Int32Prop"},{"a":2,"n":"Int64Prop","t":16,"rt":$n[1].Int64,"g":{"a":2,"n":"get_Int64Prop","t":8,"rt":$n[1].Int64,"fg":"Int64Prop"},"s":{"a":2,"n":"set_Int64Prop","t":8,"p":[$n[1].Int64],"rt":$n[1].Void,"fs":"Int64Prop"},"fn":"Int64Prop"},{"a":2,"n":"SingleProp","t":16,"rt":$n[1].Single,"g":{"a":2,"n":"get_SingleProp","t":8,"rt":$n[1].Single,"fg":"SingleProp","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"s":{"a":2,"n":"set_SingleProp","t":8,"p":[$n[1].Single],"rt":$n[1].Void,"fs":"SingleProp"},"fn":"SingleProp"},{"a":2,"n":"DecimalField","t":4,"rt":$n[1].Decimal,"sn":"DecimalField"},{"a":2,"n":"DoubleField","t":4,"rt":$n[1].Double,"sn":"DoubleField","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"Int32Field","t":4,"rt":$n[1].Int32,"sn":"Int32Field","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Int64Field","t":4,"rt":$n[1].Int64,"sn":"Int64Field"},{"a":2,"n":"SingleField","t":4,"rt":$n[1].Single,"sn":"SingleField","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"__Property__Initializer__DecimalProp","t":4,"rt":$n[1].Decimal,"sn":"__Property__Initializer__DecimalProp"},{"a":1,"n":"__Property__Initializer__DoubleProp","t":4,"rt":$n[1].Double,"sn":"__Property__Initializer__DoubleProp","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":1,"n":"__Property__Initializer__Int32Prop","t":4,"rt":$n[1].Int32,"sn":"__Property__Initializer__Int32Prop","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"__Property__Initializer__Int64Prop","t":4,"rt":$n[1].Int64,"sn":"__Property__Initializer__Int64Prop"},{"a":1,"n":"__Property__Initializer__SingleProp","t":4,"rt":$n[1].Single,"sn":"__Property__Initializer__SingleProp","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"backing":true,"n":"<DecimalProp>k__BackingField","t":4,"rt":$n[1].Decimal,"sn":"DecimalProp"},{"a":1,"backing":true,"n":"<DoubleProp>k__BackingField","t":4,"rt":$n[1].Double,"sn":"DoubleProp","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":1,"backing":true,"n":"<Int32Prop>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"Int32Prop","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<Int64Prop>k__BackingField","t":4,"rt":$n[1].Int64,"sn":"Int64Prop"},{"a":1,"backing":true,"n":"<SingleProp>k__BackingField","t":4,"rt":$n[1].Single,"sn":"SingleProp","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    $m("System.Console", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Clear","is":true,"t":8,"sn":"Clear","rt":$n[1].Void},{"a":2,"n":"Read","is":true,"t":8,"tpc":0,"def":function () { return prompt(); },"rt":$n[1].String},{"a":2,"n":"ReadLine","is":true,"t":8,"tpc":0,"def":function () { return prompt(); },"rt":$n[1].String},{"a":2,"n":"ReadLine","is":true,"t":8,"pi":[{"n":"text","pt":$n[1].String,"ps":0}],"tpc":0,"def":function (text) { return prompt(text); },"rt":$n[1].String,"p":[$n[1].String]},{"a":2,"n":"ReadLine","is":true,"t":8,"pi":[{"n":"text","pt":$n[1].String,"ps":0},{"n":"value","pt":$n[1].String,"ps":1}],"tpc":0,"def":function (text, value) { return prompt(text, value); },"rt":$n[1].String,"p":[$n[1].String,$n[1].String]},{"a":1,"n":"TransformChars","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Char),"ps":0},{"n":"all","pt":$n[1].Int32,"ps":1},{"n":"index","pt":$n[1].Int32,"ps":2},{"n":"count","pt":$n[1].Int32,"ps":3}],"sn":"TransformChars","rt":$n[1].String,"p":[$n[1].Array.type(System.Char),$n[1].Int32,$n[1].Int32,$n[1].Int32]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Boolean,"ps":0}],"tpc":0,"def":function (value) { return System.Console.Write(System.Boolean.toString(value)); },"rt":$n[1].Void,"p":[$n[1].Boolean]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Char,"ps":0}],"tpc":0,"def":function (value) { return System.Console.Write(String.fromCharCode(value)); },"rt":$n[1].Void,"p":[$n[1].Char]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (buffer) { return System.Console.Write(System.Console.TransformChars(buffer, 1)); },"rt":$n[1].Void,"p":[$n[1].Array.type(System.Char)]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Console.Write(value.toString("G")); },"rt":$n[1].Void,"p":[$n[1].Decimal]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Double,"ps":0}],"tpc":0,"def":function (value) { return System.Console.Write(System.Double.format(value)); },"rt":$n[1].Void,"p":[$n[1].Double]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Int32,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Int64,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[1].Int64]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Object,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[1].Object]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].String,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].UInt32,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[1].UInt32]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].UInt64,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[1].UInt64]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg0","pt":$n[1].Object,"ps":1}],"tpc":0,"def":function (format, arg0) { return System.Console.Write(System.String.format(format, arg0)); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Object]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg","ip":true,"pt":$n[1].Array.type(System.Object),"ps":1}],"tpc":0,"def":function (format, arg) { return System.Console.Write(System.String.format(format, arg)); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Array.type(System.Object)]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2}],"tpc":0,"def":function (buffer, index, count) { return System.Console.Write(System.Console.TransformChars(buffer, 0, index, count)); },"rt":$n[1].Void,"p":[$n[1].Array.type(System.Char),$n[1].Int32,$n[1].Int32]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg0","pt":$n[1].Object,"ps":1},{"n":"arg1","pt":$n[1].Object,"ps":2}],"tpc":0,"def":function (format, arg0, arg1) { return System.Console.Write(System.String.format(format, arg0, arg1)); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Object,$n[1].Object]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg0","pt":$n[1].Object,"ps":1},{"n":"arg1","pt":$n[1].Object,"ps":2},{"n":"arg2","pt":$n[1].Object,"ps":3}],"tpc":0,"def":function (format, arg0, arg1, arg2) { return System.Console.Write(System.String.format(format, arg0, arg1, arg2)); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Object,$n[1].Object,$n[1].Object]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg0","pt":$n[1].Object,"ps":1},{"n":"arg1","pt":$n[1].Object,"ps":2},{"n":"arg2","pt":$n[1].Object,"ps":3},{"n":"arg3","pt":$n[1].Object,"ps":4}],"tpc":0,"def":function (format, arg0, arg1, arg2, arg3) { return System.Console.Write(System.String.format(format, [arg0, arg1, arg2, arg3])); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Object,$n[1].Object,$n[1].Object,$n[1].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"sn":"WriteLine","rt":$n[1].Void},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Boolean,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(System.Boolean.toString(value)); },"rt":$n[1].Void,"p":[$n[1].Boolean]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Char,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(String.fromCharCode(value)); },"rt":$n[1].Void,"p":[$n[1].Char]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (buffer) { return System.Console.WriteLine(System.Console.TransformChars(buffer, 1)); },"rt":$n[1].Void,"p":[$n[1].Array.type(System.Char)]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(value.toString("G")); },"rt":$n[1].Void,"p":[$n[1].Decimal]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Double,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(System.Double.format(value)); },"rt":$n[1].Void,"p":[$n[1].Double]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Int32,"ps":0}],"sn":"WriteLine","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Int64,"ps":0}],"sn":"WriteLine","rt":$n[1].Void,"p":[$n[1].Int64]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Nullable$1(System.Decimal),"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(value && value.toString("G")); },"rt":$n[1].Void,"p":[$n[1].Nullable$1(System.Decimal)]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Object,"ps":0}],"sn":"WriteLine","rt":$n[1].Void,"p":[$n[1].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(System.Single.format(value)); },"rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].String,"ps":0}],"sn":"WriteLine","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Type,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(Bridge.getTypeName(value)); },"rt":$n[1].Void,"p":[$n[1].Type]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].UInt32,"ps":0}],"sn":"WriteLine","rt":$n[1].Void,"p":[$n[1].UInt32]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].UInt64,"ps":0}],"sn":"WriteLine","rt":$n[1].Void,"p":[$n[1].UInt64]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg0","pt":$n[1].Object,"ps":1}],"tpc":0,"def":function (format, arg0) { return System.Console.WriteLine(System.String.format(format, arg0)); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg","ip":true,"pt":$n[1].Array.type(System.Object),"ps":1}],"tpc":0,"def":function (format, arg) { return System.Console.WriteLine(System.String.format(format, arg)); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Array.type(System.Object)]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2}],"tpc":0,"def":function (buffer, index, count) { return System.Console.WriteLine(System.Console.TransformChars(buffer, 0, index, count)); },"rt":$n[1].Void,"p":[$n[1].Array.type(System.Char),$n[1].Int32,$n[1].Int32]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg0","pt":$n[1].Object,"ps":1},{"n":"arg1","pt":$n[1].Object,"ps":2}],"tpc":0,"def":function (format, arg0, arg1) { return System.Console.WriteLine(System.String.format(format, arg0, arg1)); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Object,$n[1].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg0","pt":$n[1].Object,"ps":1},{"n":"arg1","pt":$n[1].Object,"ps":2},{"n":"arg2","pt":$n[1].Object,"ps":3}],"tpc":0,"def":function (format, arg0, arg1, arg2) { return System.Console.WriteLine(System.String.format(format, arg0, arg1, arg2)); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Object,$n[1].Object,$n[1].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[1].String,"ps":0},{"n":"arg0","pt":$n[1].Object,"ps":1},{"n":"arg1","pt":$n[1].Object,"ps":2},{"n":"arg2","pt":$n[1].Object,"ps":3},{"n":"arg3","pt":$n[1].Object,"ps":4}],"tpc":0,"def":function (format, arg0, arg1, arg2, arg3) { return System.Console.WriteLine(System.String.format(format, [arg0, arg1, arg2, arg3])); },"rt":$n[1].Void,"p":[$n[1].String,$n[1].Object,$n[1].Object,$n[1].Object,$n[1].Object]}]}; }, $n);
    $asm.attr= [new Bridge.ClientTest.Batch3.BridgeIssues.Bridge3273.MyAssemblyAttribute()];
});
